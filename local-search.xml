<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自动同步光猫IPv6信息至路由器静态IPv6配置</title>
    <link href="/2025/10/25/%E5%85%89%E7%8C%ABIPv6%E5%9B%9E%E7%A8%8B%E8%B7%AF%E7%94%B1%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/"/>
    <url>/2025/10/25/%E5%85%89%E7%8C%ABIPv6%E5%9B%9E%E7%A8%8B%E8%B7%AF%E7%94%B1%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="光猫-IPv6-回程路由问题分析与解决思路"><a href="#光猫-IPv6-回程路由问题分析与解决思路" class="headerlink" title="光猫 IPv6 回程路由问题分析与解决思路"></a>光猫 IPv6 回程路由问题分析与解决思路</h1><h2 id="一、网络拓扑与背景"><a href="#一、网络拓扑与背景" class="headerlink" title="一、网络拓扑与背景"></a>一、网络拓扑与背景</h2><p>在典型的家庭宽带环境中，光猫负责拨号上网并启用 DHCP 功能，为下级路由器分配私有 IPv4 地址。<br>拓扑结构如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">公网 ↔ 光猫（PPPoE 拨号，LAN: <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span>） ↔ 路由器（WAN: <span class="hljs-number">192.168.1.2</span>） ↔ 内网（LAN: <span class="hljs-number">192.168.31.0</span>/<span class="hljs-number">24</span>）<br></code></pre></td></tr></table></figure><p>光猫开启 IPv6，工作在 <strong>Native 模式</strong>，路由器通过自动协商（RA、DHCPv6）获取公网 IPv6 前缀并分配给内网设备。<br>目标需求是：<strong>内网服务器能够在公网通过 IPv6 直接访问</strong>。</p><h2 id="二、问题描述"><a href="#二、问题描述" class="headerlink" title="二、问题描述"></a>二、问题描述</h2><p>在部分情况下，路由器能够自动获取 IPv6 前缀，内网设备也能正常通过 IPv6 上网；<br>但有时路由器获取不到前缀，IPv6 配置不稳定。<br>更关键的是：当手动为路由器配置静态 IPv6 地址与前缀时，虽然参数与自动模式完全一致，但光猫上却<strong>不会出现一条通往路由器内网的 IPv6 静态路由</strong>。<br>结果表现为：</p><ul><li>内网设备可以访问外部 IPv6 网站；</li><li>但公网无法主动访问内网设备（无回程路由）。</li></ul><h2 id="三、原因分析"><a href="#三、原因分析" class="headerlink" title="三、原因分析"></a>三、原因分析</h2><h3 id="1-IPv4-与-IPv6-的根本差异"><a href="#1-IPv4-与-IPv6-的根本差异" class="headerlink" title="1. IPv4 与 IPv6 的根本差异"></a>1. IPv4 与 IPv6 的根本差异</h3><ul><li><p><strong>IPv4 静态配置可行的原因</strong>：<br>在 IPv4 网络中，DHCP 服务器与 ARP 协议协同工作，能够自动感知某个地址的存在，网关因此知道去往该地址的路由。</p></li><li><p><strong>IPv6 中的不同点</strong>：<br>IPv6 不使用 ARP，而采用 <strong>邻居发现协议（NDP）</strong> 与 <strong>路由通告（RA）机制</strong>。<br>当路由器以 <strong>Native（自动）模式</strong> 工作时，它会主动向上级（光猫）发送 <strong>路由通告（RAdv）或前缀信息（Prefix Delegation, PD）</strong>，光猫因此自动生成一条指向该前缀的回程路由。</p><p>但当手动配置静态 IPv6 地址时，<strong>这种自动上报与通告过程不会发生</strong>，光猫就<strong>无法得知路由器下方的前缀存在</strong>，因此也不会生成回程路由。<br>表现上看，路由器的 IPv6 与 LAN 配置都正确，但上级设备“并不知道”这些前缀在哪里。</p></li></ul><h3 id="2-回程路由的重要性"><a href="#2-回程路由的重要性" class="headerlink" title="2. 回程路由的重要性"></a>2. 回程路由的重要性</h3><p>IPv6 通信的前提是<strong>双向可达</strong>：</p><ul><li>出站路径：从内网 → 光猫 → 公网；</li><li>回程路径：从公网 → 光猫 → 内网。</li></ul><p>如果光猫上没有回程路由，则公网发往内网的 IPv6 数据包将被丢弃，导致外部无法访问内网设备。<br>这正是公网 IPv6 无法访问的根本原因。</p><h3 id="3-为什么内网仍能访问外部网站"><a href="#3-为什么内网仍能访问外部网站" class="headerlink" title="3. 为什么内网仍能访问外部网站"></a>3. 为什么内网仍能访问外部网站</h3><p>即使光猫缺少回程路由，内网设备依然可以访问外部 IPv6 网站。<br>原因在于：</p><ul><li>出站方向的路由始终存在；</li><li>建立连接时，内网主机主动发起 TCP 握手；</li><li>返回的数据包会沿着<strong>已有的连接状态表</strong>（stateful firewall &#x2F; NAT66）或临时会话追踪信息返回，无需全局静态回程路由。</li></ul><p>因此：</p><ul><li><strong>内网访问外部</strong>正常；</li><li><strong>外部主动访问内网</strong>失败。</li></ul><p>这一特征也使得问题容易被忽略。</p><h2 id="四、问题的本质"><a href="#四、问题的本质" class="headerlink" title="四、问题的本质"></a>四、问题的本质</h2><blockquote><p><strong>IPv6 网络中，自动路由通告（RA&#x2F;NDP&#x2F;PD）与上级设备的路由学习机制是保持回程可达性的关键。</strong><br>当手动配置静态 IPv6 地址时，通告过程被中断，上级网关无法建立回程路由，导致公网到内网的单向通信中断。</p></blockquote><h2 id="五、解决思路（基于-ping-检测-重置-Native-状态）"><a href="#五、解决思路（基于-ping-检测-重置-Native-状态）" class="headerlink" title="五、解决思路（基于 ping 检测 + 重置 Native 状态）"></a>五、解决思路（基于 ping 检测 + 重置 Native 状态）</h2><p>从网络自协商机制出发，保持路由器的 IPv6 自动配置流程是让光猫动态生成回程路由的核心。结合 ping 检测与 Native 模式重置的方案如下：</p><ol><li><p><strong>以光猫公网 IPv6 可达性为健康指标</strong><br>定期（如每 1 分钟）ping 光猫的公网 IPv6 地址（GUA），以此判断 IPv6 通路是否正常：</p><ul><li>若可达：说明当前 Native 模式下的路由协商有效，无需干预；</li><li>若不可达：判定为路由协商失效（如光猫未生成回程路由、前缀分配异常等），触发修复流程。</li></ul></li><li><p><strong>自动重置路由器为 Native 模式</strong><br>当检测到光猫公网 IPv6 不可达时，通过脚本自动登录路由器，强制将 IPv6 模式重置为 Native：</p><ul><li>触发路由器重新发起 RA（路由通告）和 PD（前缀委托）请求；</li><li>促使光猫重新学习路由器内网前缀，并自动生成对应的回程路由；</li><li>利用网络协议的自协商能力，重建双向可达性，无需手动配置静态路由。</li></ul></li><li><p><strong>历史地址缓存与双重验证</strong>  </p><ul><li>缓存上次成功通信的光猫公网 IPv6 地址，优先使用该地址进行检测，减少对光猫的频繁访问；</li><li>若历史地址不可达，再登录光猫获取最新地址并二次检测，避免因临时网络波动导致的误判。</li></ul></li></ol><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ul><li>模拟登录光猫获取信息：使用playwright的codegen直接模拟访问浏览器，加上bs4解析即可</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install playwright<br>playwright install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果缺少动态库，可以使用静态浏览器内核</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">先查看缓存中默认的版本</span><br>ls ~/.cache/ms-playwright/ | grep chromium<br>chromium-1187<br>chromium_headless_shell-1187<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在华为镜像源中找到相近的版本下载</span><br>mkdir -p ~/static-chromium &amp;&amp; cd ~/static-chromium<br>wget https://mirrors.huaweicloud.com/chromium-browser-snapshots/Linux_x64/1511877/chrome-linux.zip<br>unzip chrome-linux.zip<br>chmod +x chrome-linux/chrome<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试启动并输出版本</span> <br>~/static-chromium/chrome-linux/chrome --headless=new --no-sandbox --version<br>Chromium 142.0.7397.0 <br></code></pre></td></tr></table></figure><ul><li>模拟路由器登录并配置ipv6：开发者模式看网络请求接口</li></ul><h4 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">from</span> logging.handlers <span class="hljs-keyword">import</span> RotatingFileHandler<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>, <span class="hljs-type">Dict</span>, <span class="hljs-type">Any</span>, <span class="hljs-type">Tuple</span><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> playwright.sync_api <span class="hljs-keyword">import</span> sync_playwright<br><br><span class="hljs-comment"># --- 配置信息 ---</span><br>MODEM_IP = <span class="hljs-string">&quot;192.168.1.1&quot;</span><br>MODEM_USERNAME = <span class="hljs-string">&quot;user&quot;</span><br>MODEM_PASSWORD = <span class="hljs-string">&quot;yYxxxxxx&quot;</span><br>MODEM_BASE_URL = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;MODEM_IP&#125;</span>&quot;</span><br><br>ROUTER_IP = <span class="hljs-string">&quot;192.168.31.1&quot;</span><br>ROUTER_USERNAME = <span class="hljs-string">&quot;admin&quot;</span><br>ROUTER_ENCRYPTED_PASSWORD = <span class="hljs-string">&quot;a93423bed470c10f9799f60xxxxxxxxxxxx006db1942471d43ba83a19&quot;</span><br>ROUTER_MAC = <span class="hljs-string">&quot;d4:35:38:1c:ae:76&quot;</span><br><br><span class="hljs-comment"># 路由器相关URL</span><br>ROUTER_BASE_URL = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ROUTER_IP&#125;</span>&quot;</span><br>ROUTER_LOGIN_URL = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ROUTER_BASE_URL&#125;</span>/cgi-bin/luci/api/xqsystem/login&quot;</span><br>ROUTER_SET_WAN6_URL = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ROUTER_BASE_URL&#125;</span>/cgi-bin/luci/;stok=&#123;&#123;&#125;&#125;/api/xqnetwork/set_wan6&quot;</span><br>ROUTER_LOGOUT_URL = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ROUTER_BASE_URL&#125;</span>/cgi-bin/luci/;stok=&#123;&#123;&#125;&#125;/web/logout&quot;</span><br>ROUTER_LOGIN_PARAMS = <span class="hljs-string">&quot;?username=&#123;&#125;&amp;password=&#123;&#125;&amp;logtype=2&amp;nonce=0_58:11:22:4a:95:91_1759321406_9326&quot;</span><br><br><span class="hljs-comment"># 其他配置</span><br>PING_INTERVAL = <span class="hljs-number">60</span>  <span class="hljs-comment"># 1分钟ping一次</span><br>LAST_KNOWN_GUA = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 存储上次成功获取的光猫公网IPv6</span><br><br><span class="hljs-comment"># 日志配置</span><br>LOG_FILE = <span class="hljs-string">&quot;ipv6-sync.log&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IPv6SyncService</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.setup_logging()<br>        <span class="hljs-variable language_">self</span>.current_gua = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 当前检测到的光猫公网IPv6</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_logging</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;配置日志系统&quot;&quot;&quot;</span><br>        log_dir = os.path.dirname(LOG_FILE)<br>        <span class="hljs-keyword">if</span> log_dir:<br>            os.makedirs(log_dir, exist_ok=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-variable language_">self</span>.logger = logging.getLogger(__name__)<br>        <span class="hljs-variable language_">self</span>.logger.setLevel(logging.INFO)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.logger.handlers:<br>            <span class="hljs-variable language_">self</span>.logger.handlers.clear()<br><br>        formatter = logging.Formatter(<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)<br><br>        <span class="hljs-comment"># 文件日志</span><br>        file_handler = RotatingFileHandler(<br>            LOG_FILE,<br>            maxBytes=<span class="hljs-number">5</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>,<br>            backupCount=<span class="hljs-number">2</span>,<br>            encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span><br>        )<br>        file_handler.setFormatter(formatter)<br><br>        <span class="hljs-comment"># 控制台日志</span><br>        console_handler = logging.StreamHandler()<br>        console_handler.setFormatter(formatter)<br><br>        <span class="hljs-variable language_">self</span>.logger.addHandler(file_handler)<br>        <span class="hljs-variable language_">self</span>.logger.addHandler(console_handler)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ping_ipv6</span>(<span class="hljs-params">self, ipv6_addr: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;ping检测IPv6地址是否可达（兼容Windows和Linux）&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ipv6_addr:<br>            <span class="hljs-variable language_">self</span>.logger.warning(<span class="hljs-string">&quot;ping目标为空，跳过检测&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 根据操作系统选择ping命令和参数</span><br>            <span class="hljs-keyword">if</span> os.name == <span class="hljs-string">&quot;nt&quot;</span>:  <span class="hljs-comment"># Windows系统</span><br>                result = subprocess.run(<br>                    [<span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;-6&quot;</span>, <span class="hljs-string">&quot;-n&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;-w&quot;</span>, <span class="hljs-string">&quot;3000&quot;</span>, ipv6_addr],<br>                    stdout=subprocess.PIPE,<br>                    stderr=subprocess.PIPE,<br>                    text=<span class="hljs-literal">True</span><br>                )<br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># Linux/Unix系统</span><br>                result = subprocess.run(<br>                    [<span class="hljs-string">&quot;ping6&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;-W&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, ipv6_addr],<br>                    stdout=subprocess.PIPE,<br>                    stderr=subprocess.PIPE,<br>                    text=<span class="hljs-literal">True</span><br>                )<br><br>            <span class="hljs-comment"># 返回码0表示ping成功（Windows和Linux一致）</span><br>            <span class="hljs-keyword">return</span> result.returncode == <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">except</span> FileNotFoundError:<br>            <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">&quot;未找到ping命令，请检查系统是否支持IPv6 ping&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">f&quot;ping检测失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ipv6_info_from_modem</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-type">Optional</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:<br>        <span class="hljs-string">&quot;&quot;&quot;从光猫获取IPv6信息（仅核心使用公网GUA地址，保留其他信息供扩展）&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;启动浏览器，准备访问光猫管理页面...&quot;</span>)<br>            <span class="hljs-keyword">with</span> sync_playwright() <span class="hljs-keyword">as</span> playwright:<br>                static_chrome_path = <span class="hljs-string">&quot;/home/jinxinhao/static-chromium/chrome-linux/chrome&quot;</span><br>                <span class="hljs-comment"># 判断是否使用静态内核</span><br>                <span class="hljs-keyword">if</span> os.path.exists(static_chrome_path):<br>                    browser = playwright.chromium.launch(<br>                        executable_path=static_chrome_path,<br>                        headless=<span class="hljs-literal">True</span>,<br>                        args=[<span class="hljs-string">&quot;--no-sandbox&quot;</span>, <span class="hljs-string">&quot;--disable-setuid-sandbox&quot;</span>]<br>                    )<br>                <span class="hljs-keyword">else</span>:<br>                    browser = playwright.chromium.launch(<br>                        headless=<span class="hljs-literal">True</span>,<br>                        args=[<span class="hljs-string">&quot;--no-sandbox&quot;</span>, <span class="hljs-string">&quot;--disable-setuid-sandbox&quot;</span>]<br>                    )<br><br>                context = browser.new_context()<br>                page = context.new_page()<br><br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-comment"># 访问登录页</span><br>                    <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;访问光猫登录页: <span class="hljs-subst">&#123;MODEM_BASE_URL&#125;</span>&quot;</span>)<br>                    page.goto(MODEM_BASE_URL, timeout=<span class="hljs-number">30000</span>)<br><br>                    <span class="hljs-comment"># 登录操作</span><br>                    <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;输入光猫登录信息...&quot;</span>)<br>                    page.locator(<span class="hljs-string">&quot;#Frm_Username&quot;</span>).fill(MODEM_USERNAME)<br>                    page.locator(<span class="hljs-string">&quot;#Frm_Password&quot;</span>).fill(MODEM_PASSWORD)<br>                    <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;提交登录请求...&quot;</span>)<br>                    page.get_by_role(<span class="hljs-string">&quot;button&quot;</span>, name=<span class="hljs-string">&quot;登 录&quot;</span>).click()<br>                    page.wait_for_load_state(<span class="hljs-string">&quot;networkidle&quot;</span>, timeout=<span class="hljs-number">30000</span>)<br><br>                    <span class="hljs-comment"># 导航到IPv6信息页面</span><br>                    <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;导航到IPv6连接信息页面...&quot;</span>)<br>                    main_frame = page.frame(name=<span class="hljs-string">&quot;mainFrame&quot;</span>)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> main_frame:<br>                        <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">&quot;错误：未找到mainFrame iframe&quot;</span>)<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>                    main_frame.get_by_text(<span class="hljs-string">&quot;网络侧信息&quot;</span>).click()<br>                    main_frame.get_by_text(<span class="hljs-string">&quot;IPv6连接信息&quot;</span>).click()<br>                    page.wait_for_load_state(<span class="hljs-string">&quot;networkidle&quot;</span>, timeout=<span class="hljs-number">30000</span>)<br><br>                    <span class="hljs-comment"># 提取表格内容</span><br>                    <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;提取光猫IPv6信息...&quot;</span>)<br>                    table_html = main_frame.locator(<span class="hljs-string">&quot;#Tbl_WANstauts1&quot;</span>).inner_html(timeout=<span class="hljs-number">10000</span>)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> table_html:<br>                        <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">&quot;错误：未能获取IPv6信息表格&quot;</span>)<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>                    soup = BeautifulSoup(table_html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>                    ipv6_info = &#123;&#125;<br><br>                    <span class="hljs-comment"># 核心：提取光猫公网IPv6（GUA）- 新逻辑唯一依赖的信息</span><br>                    gua_input = soup.find(<span class="hljs-string">&#x27;input&#x27;</span>, &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;Sta_PPP_GUA1_1&#x27;</span>&#125;)<br>                    <span class="hljs-keyword">if</span> gua_input <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;value&#x27;</span> <span class="hljs-keyword">in</span> gua_input.attrs:<br>                        ipv6_info[<span class="hljs-string">&#x27;modem_gua_ipv6&#x27;</span>] = gua_input[<span class="hljs-string">&#x27;value&#x27;</span>].strip()<br>                        <span class="hljs-variable language_">self</span>.logger.debug(<span class="hljs-string">f&quot;提取到光猫公网IPv6: <span class="hljs-subst">&#123;ipv6_info[<span class="hljs-string">&#x27;modem_gua_ipv6&#x27;</span>]&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">&quot;未找到光猫公网IPv6地址（GUA）&quot;</span>)<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>                    <span class="hljs-comment"># 保留其他信息（前缀、DNS），供后续扩展静态配置使用</span><br>                    prefix_td = soup.find(<span class="hljs-string">&#x27;td&#x27;</span>, string=<span class="hljs-string">&#x27;前缀&#x27;</span>)<br>                    <span class="hljs-keyword">if</span> prefix_td <span class="hljs-keyword">and</span> prefix_td.find_next_sibling(<span class="hljs-string">&#x27;td&#x27;</span>):<br>                        ipv6_info[<span class="hljs-string">&#x27;prefix&#x27;</span>] = prefix_td.find_next_sibling(<span class="hljs-string">&#x27;td&#x27;</span>).text.strip()<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-variable language_">self</span>.logger.warning(<span class="hljs-string">&quot;未找到IPv6前缀信息（不影响Native模式配置）&quot;</span>)<br><br>                    dns1_input = soup.find(<span class="hljs-string">&#x27;input&#x27;</span>, &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;Sta_PPP_DNS1_1&#x27;</span>&#125;)<br>                    ipv6_info[<span class="hljs-string">&#x27;dns1&#x27;</span>] = dns1_input[<span class="hljs-string">&#x27;value&#x27;</span>].strip() <span class="hljs-keyword">if</span> (dns1_input <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;value&#x27;</span> <span class="hljs-keyword">in</span> dns1_input.attrs) <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br><br>                    dns2_input = soup.find(<span class="hljs-string">&#x27;input&#x27;</span>, &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;Sta_PPP_DNS2_1&#x27;</span>&#125;)<br>                    ipv6_info[<span class="hljs-string">&#x27;dns2&#x27;</span>] = dns2_input[<span class="hljs-string">&#x27;value&#x27;</span>].strip() <span class="hljs-keyword">if</span> (dns2_input <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;value&#x27;</span> <span class="hljs-keyword">in</span> dns2_input.attrs) <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br><br>                    <span class="hljs-comment"># 退出登录</span><br>                    <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;退出光猫登录...&quot;</span>)<br>                    main_frame.get_by_role(<span class="hljs-string">&quot;link&quot;</span>, name=<span class="hljs-string">&quot;退出&quot;</span>).click()<br>                    page.wait_for_load_state(<span class="hljs-string">&quot;networkidle&quot;</span>, timeout=<span class="hljs-number">10000</span>)<br><br>                    <span class="hljs-comment"># 打印核心信息（仅突出公网IPv6）</span><br>                    <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;✅ 成功从光猫获取核心IPv6信息&quot;</span>)<br>                    <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;   光猫公网IPv6（GUA）: <span class="hljs-subst">&#123;ipv6_info[<span class="hljs-string">&#x27;modem_gua_ipv6&#x27;</span>]&#125;</span>&quot;</span>)<br>                    <span class="hljs-comment"># 非核心信息简化打印</span><br>                    <span class="hljs-comment"># if &#x27;prefix&#x27; in ipv6_info:</span><br>                    <span class="hljs-comment">#     self.logger.info(f&quot;   光猫前缀（备用）: &#123;ipv6_info[&#x27;prefix&#x27;]&#125;&quot;)</span><br><br>                    <span class="hljs-keyword">return</span> ipv6_info<br><br>                <span class="hljs-keyword">finally</span>:<br>                    context.close()<br>                    browser.close()<br>                    <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;光猫操作浏览器会话已关闭&quot;</span>)<br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">f&quot;获取光猫IPv6信息失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>, exc_info=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">split_prefix_to_64</span>(<span class="hljs-params">self, original_prefix: <span class="hljs-built_in">str</span>, subnet_index: <span class="hljs-built_in">int</span> = <span class="hljs-number">1</span></span>) -&gt; <span class="hljs-type">Tuple</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>]:<br>        <span class="hljs-string">&quot;&quot;&quot;保留前缀拆分函数，供静态配置扩展使用&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> original_prefix:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;无效前缀格式: <span class="hljs-subst">&#123;original_prefix&#125;</span>&quot;</span>)<br><br>        pure_prefix, prefix_len = original_prefix.split(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(prefix_len) != <span class="hljs-number">60</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;仅支持/60前缀，实际为<span class="hljs-subst">&#123;prefix_len&#125;</span>位&quot;</span>)<br><br>        parts = pure_prefix.split(<span class="hljs-string">&#x27;:&#x27;</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(parts) &lt; <span class="hljs-number">8</span>:<br>            parts.insert(parts.index(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">in</span> parts <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;0&#x27;</span>)<br><br>        fourth_part = parts[<span class="hljs-number">3</span>]<br>        subnet_bits = fourth_part[-<span class="hljs-number">1</span>]<br>        new_subnet_bits = <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(subnet_bits, <span class="hljs-number">16</span>) + subnet_index)[<span class="hljs-number">2</span>:]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(new_subnet_bits) &gt; <span class="hljs-number">1</span>:<br>            new_subnet_bits = new_subnet_bits[-<span class="hljs-number">1</span>]<br>            prefix_part = fourth_part[:-<span class="hljs-number">1</span>]<br>            new_prefix_part = <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(prefix_part, <span class="hljs-number">16</span>) + <span class="hljs-number">1</span>)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">3</span>)<br>            new_fourth_part = new_prefix_part + new_subnet_bits<br>        <span class="hljs-keyword">else</span>:<br>            new_fourth_part = fourth_part[:-<span class="hljs-number">1</span>] + new_subnet_bits<br><br>        parts[<span class="hljs-number">3</span>] = new_fourth_part<br>        simplified_parts = parts[:<span class="hljs-number">4</span>] + [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br>        lan_prefix = <span class="hljs-string">&#x27;:&#x27;</span>.join(simplified_parts).replace(<span class="hljs-string">&#x27;:::&#x27;</span>, <span class="hljs-string">&#x27;::&#x27;</span>)<br><br>        <span class="hljs-keyword">return</span> lan_prefix, <span class="hljs-number">64</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login_router</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-type">Optional</span>[<span class="hljs-type">Tuple</span>[requests.Session, <span class="hljs-built_in">str</span>]]:<br>        <span class="hljs-string">&quot;&quot;&quot;登录路由器并返回会话和stok&quot;&quot;&quot;</span><br>        session = requests.Session()<br>        session.timeout = <span class="hljs-number">30</span><br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;正在登录路由器...&quot;</span>)<br>            login_url = ROUTER_LOGIN_URL + ROUTER_LOGIN_PARAMS.<span class="hljs-built_in">format</span>(<br>                ROUTER_USERNAME, ROUTER_ENCRYPTED_PASSWORD<br>            )<br>            headers = &#123;<br>                <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (compatible; IPv6-Sync-Service/1.0)&quot;</span>,<br>                <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span><br>            &#125;<br><br>            response = session.get(login_url, headers=headers)<br>            response.raise_for_status()<br>            result = response.json()<br><br>            <span class="hljs-keyword">if</span> result.get(<span class="hljs-string">&quot;code&quot;</span>) == <span class="hljs-number">0</span>:<br>                stok = result.get(<span class="hljs-string">&quot;token&quot;</span>)<br>                <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;✅ 路由器登录成功，stok: <span class="hljs-subst">&#123;stok&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">return</span> session, stok<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">f&quot;❌ 路由器登录失败: <span class="hljs-subst">&#123;result.get(<span class="hljs-string">&#x27;msg&#x27;</span>)&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">f&quot;路由器登录错误: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">finally</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session:<br>                session.close()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">logout_router</span>(<span class="hljs-params">self, session: requests.Session, stok: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;注销路由器会话&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;注销路由器会话...&quot;</span>)<br>            response = session.post(<br>                ROUTER_LOGOUT_URL.<span class="hljs-built_in">format</span>(stok),<br>                timeout=<span class="hljs-number">5</span>,<br>                allow_redirects=<span class="hljs-literal">False</span><br>            )<br>            <span class="hljs-keyword">return</span> response.status_code == <span class="hljs-number">302</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.logger.warning(<span class="hljs-string">f&quot;路由器注销失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_router_static_ipv6</span>(<span class="hljs-params">self, session: requests.Session, stok: <span class="hljs-built_in">str</span>, ipv6_info: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;保留静态配置函数，供后续扩展使用&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">all</span>(key <span class="hljs-keyword">in</span> ipv6_info <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;modem_gua_ipv6&#x27;</span>, <span class="hljs-string">&#x27;prefix&#x27;</span>, <span class="hljs-string">&#x27;dns1&#x27;</span>, <span class="hljs-string">&#x27;dns2&#x27;</span>]):<br>            <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">&quot;光猫信息不完整，无法配置静态IPv6&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">try</span>:<br>            original_prefix = ipv6_info[<span class="hljs-string">&#x27;prefix&#x27;</span>]<br>            lan_prefix, lan_prefix_len = <span class="hljs-variable language_">self</span>.split_prefix_to_64(original_prefix)<br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;将光猫<span class="hljs-subst">&#123;original_prefix&#125;</span>拆分为LAN侧64位子网: <span class="hljs-subst">&#123;lan_prefix&#125;</span>/<span class="hljs-subst">&#123;lan_prefix_len&#125;</span>&quot;</span>)<br><br>            pure_prefix, _ = original_prefix.split(<span class="hljs-string">&#x27;/&#x27;</span>)<br>            clean_mac = ROUTER_MAC.replace(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).lower()<br>            wan_ip = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;pure_prefix[:-<span class="hljs-number">1</span>]&#125;</span>ffff:<span class="hljs-subst">&#123;clean_mac[:<span class="hljs-number">4</span>]&#125;</span>:<span class="hljs-subst">&#123;clean_mac[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>]&#125;</span>:<span class="hljs-subst">&#123;clean_mac[<span class="hljs-number">8</span>:]&#125;</span>&quot;</span><br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;生成路由器WAN口IPv6: <span class="hljs-subst">&#123;wan_ip&#125;</span>&quot;</span>)<br><br>            params = &#123;<br>                <span class="hljs-string">&quot;wanType&quot;</span>: <span class="hljs-string">&quot;static&quot;</span>,<br>                <span class="hljs-string">&quot;ipaddr&quot;</span>: wan_ip,<br>                <span class="hljs-string">&quot;gw&quot;</span>: ipv6_info[<span class="hljs-string">&#x27;modem_gua_ipv6&#x27;</span>],<br>                <span class="hljs-string">&quot;prefix&quot;</span>: lan_prefix,<br>                <span class="hljs-string">&quot;assign&quot;</span>: lan_prefix_len,<br>                <span class="hljs-string">&quot;dns1&quot;</span>: ipv6_info[<span class="hljs-string">&#x27;dns1&#x27;</span>],<br>                <span class="hljs-string">&quot;dns2&quot;</span>: ipv6_info[<span class="hljs-string">&#x27;dns2&#x27;</span>]<br>            &#125;<br><br>            api_url = ROUTER_SET_WAN6_URL.<span class="hljs-built_in">format</span>(stok)<br>            headers = &#123;<span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;<br>            params_str = <span class="hljs-string">&quot;&amp;&quot;</span>.join([<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;k&#125;</span>=<span class="hljs-subst">&#123;v&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> params.items()])<br><br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;路由器静态IPv6配置参数:&quot;</span>)<br>            <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> params.items():<br>                <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;   <span class="hljs-subst">&#123;k&#125;</span>: <span class="hljs-subst">&#123;v&#125;</span>&quot;</span>)<br><br>            response = session.post(api_url, data=params_str, headers=headers)<br>            response.raise_for_status()<br>            result = response.json()<br><br>            <span class="hljs-keyword">if</span> result.get(<span class="hljs-string">&quot;code&quot;</span>) == <span class="hljs-number">0</span>:<br>                <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;✅ 路由器静态IPv6配置成功&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">f&quot;❌ 路由器静态配置失败: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">f&quot;配置静态IPv6出错: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>, exc_info=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_router_native_ipv6</span>(<span class="hljs-params">self, session: requests.Session, stok: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;核心函数：配置路由器IPv6为Native模式&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Native模式核心参数：仅指定模式和自动配置开关</span><br>            params = &#123;<br>                <span class="hljs-string">&quot;wanType&quot;</span>: <span class="hljs-string">&quot;native&quot;</span>,  <span class="hljs-comment"># 模式切换为Native</span><br>                <span class="hljs-string">&quot;autosetipv6&quot;</span>: <span class="hljs-number">0</span>       <span class="hljs-comment"># 按设备需求调整（0关闭自动配置，1开启，可根据实际测试修改）</span><br>            &#125;<br><br>            api_url = ROUTER_SET_WAN6_URL.<span class="hljs-built_in">format</span>(stok)<br>            headers = &#123;<span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;<br>            params_str = <span class="hljs-string">&quot;&amp;&quot;</span>.join([<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;k&#125;</span>=<span class="hljs-subst">&#123;v&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> params.items()])<br><br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;路由器Native模式配置参数:&quot;</span>)<br>            <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> params.items():<br>                <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;   <span class="hljs-subst">&#123;k&#125;</span>: <span class="hljs-subst">&#123;v&#125;</span>&quot;</span>)<br><br>            response = session.post(api_url, data=params_str, headers=headers)<br>            response.raise_for_status()<br>            result = response.json()<br><br>            <span class="hljs-keyword">if</span> result.get(<span class="hljs-string">&quot;code&quot;</span>) == <span class="hljs-number">0</span>:<br>                <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;✅ 路由器IPv6模式已成功设置为Native&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">f&quot;❌ 路由器Native模式配置失败: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">f&quot;配置Native模式出错: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>, exc_info=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_and_sync</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;优化逻辑：精简步骤编号，日志更连贯，减少光猫登录次数&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">global</span> LAST_KNOWN_GUA<br><br>        <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;=== 开始IPv6状态检查 ===&quot;</span>)<br>        current_gua = <span class="hljs-literal">None</span><br>        modem_info = <span class="hljs-literal">None</span><br>        need_config = <span class="hljs-literal">False</span><br><br>        <span class="hljs-comment"># 步骤1：检查是否有历史地址，优先测试历史地址</span><br>        <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;【步骤1】检查历史光猫公网IPv6地址...&quot;</span>)<br>        <span class="hljs-keyword">if</span> LAST_KNOWN_GUA:<br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;使用上次保存的地址: <span class="hljs-subst">&#123;LAST_KNOWN_GUA&#125;</span> 进行ping测试&quot;</span>)<br>            is_reachable = <span class="hljs-variable language_">self</span>.ping_ipv6(LAST_KNOWN_GUA)<br>            <span class="hljs-keyword">if</span> is_reachable:<br>                <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;✅ 历史地址(<span class="hljs-subst">&#123;LAST_KNOWN_GUA&#125;</span>)可达，无需进一步操作&quot;</span>)<br>                <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;=== IPv6状态检查完成 ===\n&quot;</span>)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.logger.warning(<span class="hljs-string">f&quot;❌ 历史地址(<span class="hljs-subst">&#123;LAST_KNOWN_GUA&#125;</span>)不可达，需获取新地址&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;无历史地址记录，直接获取光猫最新信息&quot;</span>)<br><br>        <span class="hljs-comment"># 步骤2：登录光猫获取最新公网IPv6地址</span><br>        <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;【步骤2】登录光猫获取最新公网IPv6地址...&quot;</span>)<br>        modem_info = <span class="hljs-variable language_">self</span>.get_ipv6_info_from_modem()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> modem_info:<br>            <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">&quot;❌ 未能获取光猫信息，本次检查终止&quot;</span>)<br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;=== IPv6状态检查完成 ===\n&quot;</span>)<br>            <span class="hljs-keyword">return</span><br><br>        current_gua = modem_info[<span class="hljs-string">&#x27;modem_gua_ipv6&#x27;</span>]<br>        <span class="hljs-variable language_">self</span>.current_gua = current_gua<br>        <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;✅ 获取到最新光猫公网IPv6: <span class="hljs-subst">&#123;current_gua&#125;</span>&quot;</span>)<br><br>        <span class="hljs-comment"># 步骤3：测试新获取的地址是否可达</span><br>        <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;【步骤3】测试新获取的光猫公网IPv6可达性...&quot;</span>)<br>        is_reachable = <span class="hljs-variable language_">self</span>.ping_ipv6(current_gua)<br>        <span class="hljs-keyword">if</span> is_reachable:<br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;✅ 新地址(<span class="hljs-subst">&#123;current_gua&#125;</span>)可达，更新历史记录&quot;</span>)<br>            LAST_KNOWN_GUA = current_gua  <span class="hljs-comment"># 仅更新历史，不配置</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.logger.warning(<span class="hljs-string">f&quot;❌ 新地址(<span class="hljs-subst">&#123;current_gua&#125;</span>)仍不可达，需要配置路由器&quot;</span>)<br>            need_config = <span class="hljs-literal">True</span><br><br>        <span class="hljs-comment"># 步骤4：若需要，配置路由器为Native模式</span><br>        <span class="hljs-keyword">if</span> need_config:<br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;【步骤4】配置路由器IPv6为Native模式...&quot;</span>)<br>            router_login = <span class="hljs-variable language_">self</span>.login_router()<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> router_login:<br>                <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">&quot;❌ 路由器登录失败，配置终止&quot;</span>)<br>                <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;=== IPv6状态检查完成 ===\n&quot;</span>)<br>                <span class="hljs-keyword">return</span><br><br>            session, stok = router_login<br>            <span class="hljs-keyword">try</span>:<br>                config_success = <span class="hljs-variable language_">self</span>.set_router_native_ipv6(session, stok)<br>                <span class="hljs-keyword">if</span> config_success:<br>                    LAST_KNOWN_GUA = current_gua  <span class="hljs-comment"># 配置成功后更新历史</span><br>                    <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;✅ 路由器Native模式配置成功&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">&quot;❌ 路由器Native模式配置失败&quot;</span>)<br>            <span class="hljs-keyword">finally</span>:<br>                <span class="hljs-variable language_">self</span>.logout_router(session, stok)<br>                session.close()<br>                <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;路由器会话已关闭&quot;</span>)<br><br>        <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">&quot;=== IPv6状态检查完成 ===\n&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_service</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;服务主循环：定时执行检查逻辑&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;IPv6同步服务启动，每<span class="hljs-subst">&#123;PING_INTERVAL&#125;</span>秒执行一次检查&quot;</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-variable language_">self</span>.check_and_sync()<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-variable language_">self</span>.logger.error(<span class="hljs-string">f&quot;服务运行异常: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>, exc_info=<span class="hljs-literal">True</span>)<br>            <span class="hljs-comment"># 等待指定间隔后再次执行</span><br>            <span class="hljs-variable language_">self</span>.logger.info(<span class="hljs-string">f&quot;等待<span class="hljs-subst">&#123;PING_INTERVAL&#125;</span>秒后进行下一次检查...\n&quot;</span>)<br>            time.sleep(PING_INTERVAL)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    service = IPv6SyncService()<br>    service.run_service()<br></code></pre></td></tr></table></figure><h4 id="systemd-服务文件"><a href="#systemd-服务文件" class="headerlink" title="systemd 服务文件"></a>systemd 服务文件</h4><ul><li>服务文件路径：<code>/etc/systemd/system/ipv6-sync.service</code></li><li>关键配置：使用 <code>WorkingDirectory</code> 指定工作目录，使脚本内的文件路径（状态文件、日志）可使用相对路径，提升可维护性。</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=IPv6 Sync Service<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">User</span>=root<br><span class="hljs-attr">WorkingDirectory</span>=/home/username/ipv6-sync<br><span class="hljs-attr">ExecStart</span>=/home/username/miniconda3/bin/python ipv6-sync.py --service<br><span class="hljs-attr">Restart</span>=always<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">60</span><br><span class="hljs-attr">StandardOutput</span>=journal<br><span class="hljs-attr">StandardError</span>=journal<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h4 id="部署与管理命令"><a href="#部署与管理命令" class="headerlink" title="部署与管理命令"></a>部署与管理命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拷贝服务文件后，重载systemd配置</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-comment"># 启用服务（开机自启）</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> ipv6-sync.service<br><span class="hljs-comment"># 启动服务</span><br><span class="hljs-built_in">sudo</span> systemctl start ipv6-sync.service<br><span class="hljs-comment"># 查看服务状态</span><br><span class="hljs-built_in">sudo</span> systemctl status ipv6-sync.service<br><span class="hljs-comment"># 查看服务日志</span><br><span class="hljs-built_in">sudo</span> journalctl -u ipv6-sync.service -f<br></code></pre></td></tr></table></figure><h4 id="运行日志示例"><a href="#运行日志示例" class="headerlink" title="运行日志示例"></a>运行日志示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs log">2025-10-02 11:57:02,171 - INFO - IPv6同步服务已启动，将每5分钟执行一次<br>2025-10-02 11:57:02,171 - INFO - === IPv6同步服务开始执行 (Run ID: 1759377422) ===<br>2025-10-02 11:57:02,171 - INFO - 【步骤1/4】信息采集 - 正在从光猫获取IPv6信息...<br>2025-10-02 11:57:02,172 - INFO - 正在访问光猫登录页面以获取动态令牌...<br>2025-10-02 11:57:02,206 - INFO - 正在使用令牌和密文登录光猫...<br>2025-10-02 11:57:02,312 - INFO - ✅ 光猫登录成功！<br>2025-10-02 11:57:02,313 - INFO - 正在获取会话令牌...<br>2025-10-02 11:57:02,401 - INFO - 正在获取并解析光猫IPv6连接信息...<br>2025-10-02 11:57:02,485 - INFO - ✅ 成功从光猫获取到IPv6信息<br>2025-10-02 11:57:02,485 - INFO -    前缀: 2409:8a28:4a14:6dd0::/60<br>2025-10-02 11:57:02,485 - INFO -    网关: fe80::ea4:2ff:feb1:3401<br>2025-10-02 11:57:02,485 - INFO -    DNS1: 2409:8028:2000::1111<br>2025-10-02 11:57:02,485 - INFO -    DNS2: 2409:8028:2000::2222<br>2025-10-02 11:57:02,485 - INFO - 正在注销光猫会话...<br>2025-10-02 11:57:02,509 - INFO - ✅ 光猫会话注销成功 (302重定向)<br>2025-10-02 11:57:02,510 - INFO - ✅ 光猫会话已关闭<br>2025-10-02 11:57:02,510 - INFO - ✅ 信息采集成功<br>2025-10-02 11:57:02,510 - INFO - 【步骤2/4】决策判断 - 检查IPv6信息是否发生变化...<br>2025-10-02 11:57:02,511 - INFO - ✅ 决策结果：信息未变化，无需更新路由器配置<br>2025-10-02 11:57:02,512 - INFO - === IPv6同步服务执行完成 (结果: ✅ 跳过) ===<br>2025-10-02 11:57:45,493 - INFO - IPv6同步服务已启动，将每5分钟执行一次<br>2025-10-02 11:57:45,494 - INFO - === IPv6同步服务开始执行 (Run ID: 1759377465) ===<br>2025-10-02 11:57:45,494 - INFO - 【步骤1/4】信息采集 - 正在从光猫获取IPv6信息...<br>2025-10-02 11:57:45,494 - INFO - 正在访问光猫登录页面以获取动态令牌...<br></code></pre></td></tr></table></figure><h2 id="六、结论"><a href="#六、结论" class="headerlink" title="六、结论"></a>六、结论</h2><ul><li>IPv6 的自动协商机制（RA&#x2F;PD&#x2F;NDP）是维持回程路由的核心，Native 模式是触发该机制的最佳方式。</li><li>手动配置静态 IPv6 会中断自动协商，导致光猫无法动态学习内网前缀，缺失回程路由。</li><li>内网可访问外部 IPv6 网站，但公网无法主动访问内网，本质是“单向路由有效，双向协商失效”。</li><li>通过 ping 检测光猫公网 IPv6 可达性，并在异常时重置路由器为 Native 模式，可利用协议自协商能力自动修复回程路由，无需手动配置静态路由。</li></ul><hr><p><strong>总结</strong>：<br>IPv6 网络的“自愈能力”依赖于自动协商机制。当网络出现单向可达问题时，无需手动干预路由表，通过重置 Native 模式触发协议重协商，即可让光猫重新学习内网拓扑并生成回程路由。这种“检测 + 重置”的思路，既符合 IPv6 设计的自动化理念，又能在家庭网络环境中稳定解决回程可达性问题。</p>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>linux使用rsync单向同步文件夹</title>
    <link href="/2025/10/13/linux%E4%BD%BF%E7%94%A8rsync%E5%8D%95%E5%90%91%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <url>/2025/10/13/linux%E4%BD%BF%E7%94%A8rsync%E5%8D%95%E5%90%91%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="linux使用rsync单向同步文件夹"><a href="#linux使用rsync单向同步文件夹" class="headerlink" title="linux使用rsync单向同步文件夹"></a>linux使用rsync单向同步文件夹</h1><h2 id="一、核心目标"><a href="#一、核心目标" class="headerlink" title="一、核心目标"></a>一、核心目标</h2><p>将 <strong>源服务器 <code>192.168.1.100</code></strong> 上的指定文件夹，单向、增量地同步到 <strong>目标服务器 <code>192.168.1.200</code></strong> 的目标文件夹。</p><h2 id="二、前置条件"><a href="#二、前置条件" class="headerlink" title="二、前置条件"></a>二、前置条件</h2><ol><li><p><strong>网络连通性</strong>：确保源服务器 <code>192.168.1.100</code> 可以通过 SSH 访问目标服务器 <code>192.168.1.200</code>。</p></li><li><p><strong>权限</strong>：</p><ul><li>在 <code>192.168.1.100</code> 上，拥有对源文件夹的读取权限。</li><li>在 <code>192.168.1.200</code> 上，拥有对目标文件夹的写入权限，以及通过 SSH 登录的用户（如 <code>user</code>）和密码。</li></ul></li><li><p><strong>工具安装</strong>：</p><ul><li>源服务器和目标服务器上都必须安装 <code>rsync</code> 工具。（大多数 Linux 发行版默认安装）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查是否安装</span><br>rsync --version<br><br><span class="hljs-comment"># 如果未安装，则进行安装</span><br><span class="hljs-comment"># CentOS/RHEL</span><br><span class="hljs-built_in">sudo</span> yum install -y rsync<br><span class="hljs-comment"># Ubuntu/Debian</span><br><span class="hljs-built_in">sudo</span> apt install -y rsync<br></code></pre></td></tr></table></figure></li></ol><h2 id="三、操作步骤（在源服务器-192-168-1-100-上执行）"><a href="#三、操作步骤（在源服务器-192-168-1-100-上执行）" class="headerlink" title="三、操作步骤（在源服务器 192.168.1.100 上执行）"></a>三、操作步骤（在源服务器 <code>192.168.1.100</code> 上执行）</h2><h3 id="1-配置-SSH-免密登录（关键，用于自动化）"><a href="#1-配置-SSH-免密登录（关键，用于自动化）" class="headerlink" title="1. 配置 SSH 免密登录（关键，用于自动化）"></a>1. 配置 SSH 免密登录（关键，用于自动化）</h3><p>为了让定时任务（如 <code>cron</code>）能自动执行，需要配置从源服务器到目标服务器的免密 SSH 登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在源服务器 192.168.1.100 上执行</span><br><span class="hljs-comment"># 1. 生成 SSH 密钥对（如果还没有）</span><br>ssh-keygen -t rsa<br><br><span class="hljs-comment"># 2. 将公钥复制到目标服务器 192.168.1.200</span><br><span class="hljs-comment">#    执行后会提示输入目标服务器 user 用户的密码</span><br>ssh-copy-id user@192.168.1.200<br><br><span class="hljs-comment"># 3. 验证免密登录是否成功</span><br><span class="hljs-comment">#    如果能直接登录，无需输入密码，则配置成功</span><br>ssh user@192.168.1.200 <span class="hljs-string">&quot;hostname&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-执行同步命令"><a href="#2-执行同步命令" class="headerlink" title="2. 执行同步命令"></a>2. 执行同步命令</h3><p>在 <strong>源服务器 <code>192.168.1.100</code></strong> 的命令行中，执行以下核心同步命令。</p><p><strong>假设：</strong></p><ul><li><strong>源目录</strong>：<code>/path/to/source_folder/</code></li><li><strong>目标目录</strong>：<code>/path/to/target_folder/</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 注意：此命令在源服务器 192.168.1.100 上执行</span><br>rsync -avz --delete /path/to/source_folder/ user@192.168.1.200:/path/to/target_folder/<br></code></pre></td></tr></table></figure><p><strong>强烈建议在首次执行或修改参数后，先使用 <code>--dry-run</code> 进行模拟运行，确认无误后再去掉该参数执行真实同步。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 模拟运行，只显示将要执行的操作，不实际同步</span><br>rsync -avz --delete --dry-run /path/to/source_folder/ user@192.168.1.200:/path/to/target_folder/<br></code></pre></td></tr></table></figure><h2 id="四、命令参数详解"><a href="#四、命令参数详解" class="headerlink" title="四、命令参数详解"></a>四、命令参数详解</h2><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><strong><code>rsync</code></strong></td><td align="left">同步命令本身。</td></tr><tr><td align="left"><strong><code>-a</code></strong></td><td align="left"><strong>归档模式 (Archive)</strong>。这是一个复合参数，等同于 <code>-rlptgoD</code>。它会递归同步目录，并尽可能保留文件的权限、所有者、时间戳、符号链接等所有属性。<strong>这是最常用、最重要的参数</strong>。</td></tr><tr><td align="left"><strong><code>-v</code></strong></td><td align="left"><strong>详细模式 (Verbose)</strong>。显示同步过程中的详细信息，如正在同步哪些文件。便于监控和调试。</td></tr><tr><td align="left"><strong><code>-z</code></strong></td><td align="left"><strong>压缩模式 (Compress)</strong>。在传输过程中对文件进行压缩，可以减少网络带宽占用，加快同步速度。<strong>在内网带宽充足时，可省略此参数以略微提升 CPU 效率</strong>。</td></tr><tr><td align="left"><strong><code>--delete</code></strong></td><td align="left"><strong>删除目标端多余文件</strong>。这是实现“镜像同步”的关键。它会使目标目录严格与源目录保持一致。如果源目录删除了某个文件，下次同步时，目标目录的对应文件也会被删除。<strong>使用前请务必确认目标目录中没有需要保留的额外文件！</strong></td></tr><tr><td align="left"><strong><code>--dry-run</code></strong></td><td align="left"><strong>模拟运行</strong>。显示将要执行的操作，但不会实际复制或删除任何文件。<strong>强烈建议在正式执行前使用此参数进行测试</strong>。</td></tr><tr><td align="left"><strong><code>/path/to/source_folder/</code></strong></td><td align="left"><strong>源目录</strong>。<strong>注意末尾的斜杠 <code>/</code></strong>：如果加上斜杠，代表同步该目录<strong>内部的所有内容</strong>到目标目录；如果不加斜杠，代表将该目录<strong>本身</strong>同步到目标目录下。</td></tr><tr><td align="left"><strong><code>user@192.168.1.200:/path/to/target_folder/</code></strong></td><td align="left"><strong>目标地址</strong>。格式为 <code>[用户名]@[IP地址]:[目标路径]</code>。</td></tr></tbody></table><h2 id="五、重要提示与最佳实践"><a href="#五、重要提示与最佳实践" class="headerlink" title="五、重要提示与最佳实践"></a>五、重要提示与最佳实践</h2><ol><li><p><strong>路径末尾的斜杠 <code>/</code></strong>：这是 <code>rsync</code> 中一个非常关键的细节。</p><ul><li><code>rsync ... /source/ /target/</code>：将 <code>/source</code> 目录下的所有文件和子目录同步到 <code>/target</code> 目录中。</li><li><code>rsync ... /source /target/</code>：将 <code>/source</code> 目录本身同步到 <code>/target</code> 目录下，最终形成 <code>/target/source</code>。</li></ul></li><li><p><strong><code>--delete</code> 参数的危险性</strong>：<code>--delete</code> 是一个强大但有潜在风险的参数。如果目标目录中存在源目录没有的文件，它们会被无情删除。在对生产环境执行此操作前，务必通过 <code>--dry-run</code> 确认删除列表。</p></li><li><p><strong>自动化</strong>：此命令非常适合放入 <code>crontab</code> 中，实现周期性同步。例如，每天凌晨 3 点同步一次：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crontab"># 在源服务器 192.168.1.100 上的 crontab<br>0 3 * * * /usr/bin/rsync -az --delete /path/to/source_folder/ user@192.168.1.200:/path/to/target_folder/ &gt;&gt; /var/log/rsync_sync.log 2&gt;&amp;1<br></code></pre></td></tr></table></figure><ul><li>使用了 <code>rsync</code> 的绝对路径 <code>/usr/bin/rsync</code>，更稳定。</li><li>去掉了 <code>-v</code> 参数，避免日志过于冗长。</li><li>将所有输出（包括错误）重定向到日志文件，便于排查。</li></ul></li><li><p><strong>日志记录</strong>：如上面的 <code>cron</code> 示例，建议始终将同步日志记录下来，以便追踪同步历史和问题。</p></li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据库定时同步</title>
    <link href="/2025/10/13/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/"/>
    <url>/2025/10/13/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-数据库定时同步"><a href="#MySQL-数据库定时同步" class="headerlink" title="MySQL 数据库定时同步"></a>MySQL 数据库定时同步</h1><h2 id="一、核心目标"><a href="#一、核心目标" class="headerlink" title="一、核心目标"></a>一、核心目标</h2><p>将 <strong>源服务器 <code>192.168.1.100</code></strong> 上的所有 MySQL 数据库，通过 <code>mysqldump</code> 导出，并实时导入到 <strong>目标服务器 <code>192.168.1.200</code></strong> 中，实现数据同步。</p><h2 id="二、前置条件"><a href="#二、前置条件" class="headerlink" title="二、前置条件"></a>二、前置条件</h2><ol><li><strong>网络连通性</strong>：确保目标服务器 <code>192.168.1.200</code> 可以通过 SSH 连接到源服务器 <code>192.168.1.100</code>。</li><li><strong>权限</strong>：<ul><li>在 <code>192.168.1.100</code> 上，拥有可以通过 SSH 登录的用户（<code>user</code>）和密码。</li><li>在 <code>192.168.1.100</code> 上，拥有 MySQL 的 <code>root</code> 或具有全局读取权限的用户密码（<code>mypassword</code>）。</li><li>在 <code>192.168.1.200</code> 上，拥有 MySQL 的 <code>root</code> 或具有全局写入权限的用户密码（<code>mypassword</code>）。</li></ul></li><li><strong>工具安装</strong>：<ul><li><code>192.168.1.100</code> 上必须安装 <code>mysqldump</code> 工具（通常在 <code>mysql-client</code> 包中）。</li><li><code>192.168.1.200</code> 上必须安装 <code>mysql</code> 客户端工具。</li></ul></li></ol><h2 id="三、操作步骤（在目标服务器-192-168-1-200-上执行）"><a href="#三、操作步骤（在目标服务器-192-168-1-200-上执行）" class="headerlink" title="三、操作步骤（在目标服务器 192.168.1.200 上执行）"></a>三、操作步骤（在目标服务器 <code>192.168.1.200</code> 上执行）</h2><h3 id="1-配置-SSH-免密登录（关键，用于自动化）"><a href="#1-配置-SSH-免密登录（关键，用于自动化）" class="headerlink" title="1. 配置 SSH 免密登录（关键，用于自动化）"></a>1. 配置 SSH 免密登录（关键，用于自动化）</h3><p>为了让定时任务（如 <code>cron</code>）能自动执行，需要配置从目标服务器到源服务器的免密 SSH 登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在目标服务器 192.168.1.200 上执行</span><br><span class="hljs-comment"># 1. 生成 SSH 密钥对（如果还没有）</span><br>ssh-keygen -t rsa<br><br><span class="hljs-comment"># 2. 将公钥复制到源服务器 192.168.1.100</span><br><span class="hljs-comment">#    执行后会提示输入源服务器 user 用户的密码</span><br>ssh-copy-id user@192.168.1.100<br><br><span class="hljs-comment"># 3. 验证免密登录是否成功</span><br><span class="hljs-comment">#    如果能直接登录，无需输入密码，则配置成功</span><br>ssh user@192.168.1.100 <span class="hljs-string">&quot;hostname&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-执行同步命令"><a href="#2-执行同步命令" class="headerlink" title="2. 执行同步命令"></a>2. 执行同步命令</h3><p>在 <strong>目标服务器 <code>192.168.1.200</code></strong> 的命令行中，执行以下核心同步命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 注意：此命令在目标服务器 192.168.1.200 上执行</span><br>ssh user@192.168.1.100 <span class="hljs-string">&#x27;/home/db/mysql/product/bin/mysqldump -uroot -pmypassword -P 3306 --single-transaction --set-gtid-purged=OFF --all-databases&#x27;</span> | mysql -uroot -pmypassword -P 3306<br></code></pre></td></tr></table></figure><h2 id="四、命令参数详解"><a href="#四、命令参数详解" class="headerlink" title="四、命令参数详解"></a>四、命令参数详解</h2><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><strong><code>ssh user@192.168.1.100 &#39;...&#39;</code></strong></td><td align="left">通过 SSH 远程登录到源服务器 <code>192.168.1.100</code>，并执行单引号内的命令。</td></tr><tr><td align="left"><strong><code>/home/db/mysql/product/bin/mysqldump</code></strong></td><td align="left"><code>mysqldump</code> 命令的<strong>绝对路径</strong>，确保在任何环境下都能被正确找到。</td></tr><tr><td align="left"><strong><code>-uroot</code></strong></td><td align="left">指定 MySQL 的用户名，这里是 <code>root</code>。</td></tr><tr><td align="left"><strong><code>-pmypassword</code></strong></td><td align="left">指定 MySQL 的密码。<strong>注意：<code>-p</code> 和密码之间没有空格</strong>。</td></tr><tr><td align="left"><strong><code>-P 3306</code></strong></td><td align="left">指定 MySQL 的端口号，这里是默认的 <code>3306</code>。</td></tr><tr><td align="left"><strong><code>--single-transaction</code></strong></td><td align="left"><strong>（核心参数）</strong> 对 InnoDB 存储引擎，此参数会创建一个事务快照，实现<strong>热备份</strong>，<strong>备份期间不锁表</strong>，对线上业务影响极小。</td></tr><tr><td align="left"><strong><code>--set-gtid-purged=OFF</code></strong></td><td align="left"><strong>（关键参数）</strong> 如果源或目标服务器开启了 GTID（全局事务ID），此参数可以避免因 GTID 集合冲突导致的导入失败。它会阻止 <code>mysqldump</code> 在备份文件中写入 GTID 相关声明。</td></tr><tr><td align="left"><strong><code>--all-databases</code></strong></td><td align="left">指定导出源服务器上的<strong>所有数据库</strong>。</td></tr><tr><td align="left"><strong><code>|</code></strong></td><td align="left"><strong>管道符</strong>。它将左侧 <code>ssh</code> 命令的所有输出（即 <code>.sql</code> 备份文件的内容），作为右侧 <code>mysql</code> 命令的输入。这避免了生成中间文件，非常高效。</td></tr><tr><td align="left"><strong><code>mysql -uroot -pmypassword -P 3306</code></strong></td><td align="left">在<strong>本地服务器</strong>（即 <code>192.168.1.200</code>）上执行的 <code>mysql</code> 命令，它会读取从管道传来的 SQL 语句并执行，从而完成数据导入。</td></tr></tbody></table><h2 id="五、重要提示与最佳实践"><a href="#五、重要提示与最佳实践" class="headerlink" title="五、重要提示与最佳实践"></a>五、重要提示与最佳实践</h2><ol><li><p><strong>安全警告</strong>：在命令行中明文写密码（<code>-pmypassword</code>）会被记录在命令历史中，存在安全风险。<strong>强烈建议</strong>使用 <code>~/.my.cnf</code> 配置文件来存储数据库密码。</p><ul><li><strong>在源服务器 <code>192.168.1.100</code></strong> 的 <code>~/.my.cnf</code> 中添加：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqldump]</span><br><span class="hljs-attr">user</span> = root<br><span class="hljs-attr">password</span> = mypassword<br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure></li><li><strong>在目标服务器 <code>192.168.1.200</code></strong> 的 <code>~/.my.cnf</code> 中添加：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">user</span> = root<br><span class="hljs-attr">password</span> = mypassword<br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure></li><li>配置后，命令可简化为：<code>ssh user@192.168.1.100 &#39;/home/db/mysql/product/bin/mysqldump --single-transaction --set-gtid-purged=OFF --all-databases&#39; | mysql</code></li></ul></li><li><p><strong>自动化</strong>：此命令非常适合放入 <code>crontab</code> 中，实现每日定时备份或同步。例如，每天凌晨 2 点执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crontab">0 2 * * * ssh user@192.168.1.100 &#x27;/home/db/mysql/product/bin/mysqldump --single-transaction --set-gtid-purged=OFF --all-databases&#x27; | mysql &gt;&gt; /var/log/mysql_sync.log 2&gt;&amp;1<br></code></pre></td></tr></table></figure></li><li><p><strong>日志记录</strong>：建议将命令的输出和错误信息重定向到日志文件（如 <code>&gt;&gt; /var/log/mysql_sync.log 2&gt;&amp;1</code>），以便于问题排查。</p></li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RIP Metric调整实现负载分担机制</title>
    <link href="/2025/10/11/RIP%20Metric%E8%B0%83%E6%95%B4%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%88%86%E6%8B%85%E6%9C%BA%E5%88%B6/"/>
    <url>/2025/10/11/RIP%20Metric%E8%B0%83%E6%95%B4%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%88%86%E6%8B%85%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="🧭-R1-R2通过RIP-Metric调整实现负载分担机制详解"><a href="#🧭-R1-R2通过RIP-Metric调整实现负载分担机制详解" class="headerlink" title="🧭 R1&#x2F;R2通过RIP Metric调整实现负载分担机制详解"></a>🧭 R1&#x2F;R2通过RIP Metric调整实现负载分担机制详解</h1><h2 id="一、场景背景"><a href="#一、场景背景" class="headerlink" title="一、场景背景"></a>一、场景背景</h2><p>在典型的企业网络中：</p><ul><li>两台核心路由器 <strong>R1</strong> 和 <strong>R2</strong> 同时上联 Internet。</li><li>下方有多台接入层三层交换机 <strong>S1–S4</strong>，分别接入不同终端。</li><li>为实现 <strong>带宽均衡与冗余备份</strong>，R1、R2 都与每台交换机建立了 RIP 动态路由邻接关系。</li></ul><p>目标：</p><blockquote><p>通过调整 RIP 的 <strong>metric（度量值）</strong>，人为控制不同网段走不同的上行路径，实现流量的负载分担。</p></blockquote><hr><h2 id="二、RIP-metric-的作用原理"><a href="#二、RIP-metric-的作用原理" class="headerlink" title="二、RIP metric 的作用原理"></a>二、RIP metric 的作用原理</h2><p>在 RIP 中：</p><ul><li><strong>metric</strong> 表示路径“跳数”或“距离”。</li><li><strong>metric 值越小，路径越优先。</strong></li><li>路由选择时，RIP 总是选 <strong>metric 最小</strong> 的路径。</li></ul><p>👉 所以，只要人为地给某些路由 <strong>加大 metric 值（增加代价）</strong>，就能让设备更倾向选择另一条路径。</p><hr><h2 id="三、核心配置结构"><a href="#三、核心配置结构" class="headerlink" title="三、核心配置结构"></a>三、核心配置结构</h2><p>在 R1 &#x2F; R2 上常见的配置格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">interface GigabitEthernet3/1/0<br> description To_S1<br> ip address 34.176.31.1 255.255.255.252<br> rip metricin route-policy offset90 1<br> rip metricout route-policy offset90 1<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li><code>metricin</code>：对 <strong>接收到的 RIP 路由（入向）</strong> 调整代价</li><li><code>metricout</code>：对 <strong>发送出去的 RIP 路由（出向）</strong> 调整代价</li><li>最后的 <code>1</code>：RIP 进程号（通常是 <code>rip 1</code>）</li></ul><hr><h2 id="四、route-policy-策略定义示例"><a href="#四、route-policy-策略定义示例" class="headerlink" title="四、route-policy 策略定义示例"></a>四、route-policy 策略定义示例</h2><p>R1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">route-policy offset89 permit node 10<br> if-match acl 2089<br> apply cost 5<br><br>route-policy offset90 permit node 10<br> if-match acl 2090<br> apply cost 5<br></code></pre></td></tr></table></figure><p>R2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">route-policy offset89 permit node 10<br> if-match acl 2089<br> apply cost 5<br><br>route-policy offset90 permit node 10<br> if-match acl 2090<br> apply cost 5<br></code></pre></td></tr></table></figure><p>ACL 用来区分不同来源网段（或目标网段）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">acl number 2089<br> rule 20 permit <span class="hljs-built_in">source</span> 0.0.141.0 255.255.0.255<br> rule 30 permit <span class="hljs-built_in">source</span> 0.0.142.0 255.255.0.255<br><br>acl number 2090<br> rule 10 permit <span class="hljs-built_in">source</span> 0.0.128.0 255.255.127.255<br></code></pre></td></tr></table></figure><hr><h2 id="五、R1-R2-负载分担逻辑"><a href="#五、R1-R2-负载分担逻辑" class="headerlink" title="五、R1&#x2F;R2 负载分担逻辑"></a>五、R1&#x2F;R2 负载分担逻辑</h2><table><thead><tr><th>区域网段</th><th>在 R1 上策略</th><th>在 R2 上策略</th><th>结果（上行方向）</th></tr></thead><tbody><tr><td>141.x.x.x &#x2F; 142.x.x.x</td><td>metric +5（offset89）</td><td>metric 不加</td><td>优先走 R2</td></tr><tr><td>128.x.x.x – 140.x.x.x</td><td>metric 不加</td><td>metric +5（offset90）</td><td>优先走 R1</td></tr></tbody></table><p>这样：</p><ul><li>部分网段上行流量经 <strong>R1 → Internet</strong>；</li><li>另一些网段上行流量经 <strong>R2 → Internet</strong>；</li><li>两者形成互补，实现均衡。</li></ul><hr><h2 id="六、metricin-与-metricout-的生效方向"><a href="#六、metricin-与-metricout-的生效方向" class="headerlink" title="六、metricin 与 metricout 的生效方向"></a>六、metricin 与 metricout 的生效方向</h2><table><thead><tr><th>命令</th><th>生效位置</th><th>对谁起作用</th><th>示例说明</th></tr></thead><tbody><tr><td><code>rip metricin</code></td><td><strong>R1 接收来自 S1 的路由时</strong></td><td>修改 R1 收到的路由度量值</td><td>控制 R1 对下游路径的偏好</td></tr><tr><td><code>rip metricout</code></td><td><strong>R1 向 S1 通告路由时</strong></td><td>修改 R1 发给 S1 的 metric</td><td>控制下游 S1 对 R1 的偏好</td></tr></tbody></table><blockquote><p>📌 换句话说：</p><ul><li><code>metricin</code> 影响 <strong>R1 怎么看别人</strong>；</li><li><code>metricout</code> 影响 <strong>别人怎么看 R1</strong>。</li></ul></blockquote><hr><h2 id="七、流量分布示意图（Mermaid）"><a href="#七、流量分布示意图（Mermaid）" class="headerlink" title="七、流量分布示意图（Mermaid）"></a>七、流量分布示意图（Mermaid）</h2><h3 id="🧩-RIP-路由学习方向与-Metric-调整"><a href="#🧩-RIP-路由学习方向与-Metric-调整" class="headerlink" title="🧩 RIP 路由学习方向与 Metric 调整"></a>🧩 RIP 路由学习方向与 Metric 调整</h3><pre><code class=" mermaid">flowchart LR  subgraph Access[&quot;接入层交换机&quot;]    S1[S1]    S2[S2]    S3[S3]    S4[S4]  end  subgraph Core[&quot;核心层路由器&quot;]    R1[R1]    R2[R2]  end  S1-- RIP metricin/out (offset90, +5) --&gt;R1  S2-- RIP metricin/out (offset89, +5) --&gt;R1  S3-- RIP metricin/out (offset89, +5) --&gt;R2  S4-- RIP metricin/out (offset90, +5) --&gt;R2  R1-- 更优路由通告 (低metric) --&gt;S1  R2-- 更优路由通告 (低metric) --&gt;S3</code></pre><blockquote><p>📊 结果：</p><ul><li>R1 优先服务部分子网（128–140 段）</li><li>R2 优先服务另一些子网（141–142 段）</li><li>RIP 根据 metric 自动实现双出口负载分担。</li></ul></blockquote><hr><h2 id="八、上行与下行流量说明"><a href="#八、上行与下行流量说明" class="headerlink" title="八、上行与下行流量说明"></a>八、上行与下行流量说明</h2><h3 id="🔼-上行流量（终端-→-Internet）"><a href="#🔼-上行流量（终端-→-Internet）" class="headerlink" title="🔼 上行流量（终端 → Internet）"></a>🔼 上行流量（终端 → Internet）</h3><ol><li>终端发送数据给默认网关（S1–S4）。</li><li>交换机根据 RIP 选择 <strong>metric 更低的上行路由</strong>。</li><li>有的网段流量走 R1，有的走 R2。</li></ol><h3 id="🔽-下行流量（Internet-→-终端）"><a href="#🔽-下行流量（Internet-→-终端）" class="headerlink" title="🔽 下行流量（Internet → 终端）"></a>🔽 下行流量（Internet → 终端）</h3><ol><li>R1、R2 都学习到内部网段路由。</li><li>通过 <code>metricout</code> 策略，让下游设备对不同路由器有不同偏好。</li><li>下行路径自然也按相反规则分担。</li></ol><hr><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td><strong>核心机制</strong></td><td>利用 RIP 的 metric 可加权特性，通过 route-policy 和 ACL 精确控制不同网段的路径优先级</td></tr><tr><td><strong>关键指令</strong></td><td><code>rip metricin route-policy …</code>、<code>rip metricout route-policy …</code></td></tr><tr><td><strong>优点</strong></td><td>不需复杂协议（如 OSPF&#x2F;ECMP），即可实现基础的双出口负载分担</td></tr><tr><td><strong>注意事项</strong></td><td>metric 值变化会影响收敛时间，需保持策略对称；ACL 需精准匹配网段，避免全局路由偏斜</td></tr></tbody></table><hr><h2 id="🧠-一句话记忆"><a href="#🧠-一句话记忆" class="headerlink" title="🧠 一句话记忆"></a>🧠 一句话记忆</h2><blockquote><p><strong>“metricin 控制我怎么看别人，metricout 控制别人怎么看我。”</strong></p><p>两者结合，通过 ACL 分区，就能让 RIP 实现“你走你那边，我走我这边”的智能负载分担。</p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>接入层交换机互联与链路聚合</title>
    <link href="/2025/10/11/%E6%8E%A5%E5%85%A5%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%BA%92%E8%81%94%E4%B8%8E%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/"/>
    <url>/2025/10/11/%E6%8E%A5%E5%85%A5%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%BA%92%E8%81%94%E4%B8%8E%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="🧭-接入层交换机互联与链路聚合"><a href="#🧭-接入层交换机互联与链路聚合" class="headerlink" title="🧭 接入层交换机互联与链路聚合"></a>🧭 接入层交换机互联与链路聚合</h1><h2 id="一、为什么要让两台接入交换机互联？"><a href="#一、为什么要让两台接入交换机互联？" class="headerlink" title="一、为什么要让两台接入交换机互联？"></a>一、为什么要让两台接入交换机互联？</h2><p>假设你的网络结构如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">终端们 → <span class="hljs-built_in">S1</span> → <span class="hljs-built_in">R1</span> → Internet<br>终端们 → <span class="hljs-built_in">S2</span> → <span class="hljs-built_in">R1</span> → Internet<br></code></pre></td></tr></table></figure><ul><li>S1、S2 是接入层交换机；</li><li>每台交换机各自上行到同一台路由器 R1；</li><li>默认路由都指向 R1；</li><li>S1 和 S2 之间另外用两根网线相连，并做了<strong>链路聚合（LACP）</strong>。</li></ul><blockquote><p>疑问：<br>“既然终端都直接走 S1→R1 或 S2→R1，<br>那 S1↔S2 的链路到底在传什么？<br>做聚合真的有意义吗？”</p></blockquote><p>这是非常典型的入门困惑。下面我们分层分析。</p><hr><h2 id="二、理解链路聚合的基本原理"><a href="#二、理解链路聚合的基本原理" class="headerlink" title="二、理解链路聚合的基本原理"></a>二、理解链路聚合的基本原理</h2><p><strong>链路聚合（Link Aggregation &#x2F; EtherChannel &#x2F; LACP）</strong><br>是把多条物理链路捆绑成一个<strong>逻辑通道</strong>的技术。</p><p>它带来三大好处：</p><table><thead><tr><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>✅ <strong>带宽叠加</strong></td><td>多条线同时转发不同流量（整体带宽 &#x3D; 多条线总和）</td></tr><tr><td>✅ <strong>链路冗余</strong></td><td>一条断了不掉线，流量自动切换</td></tr><tr><td>✅ <strong>STP 优化</strong></td><td>被视为一个逻辑口，避免生成树阻塞单链路</td></tr></tbody></table><p>但是——<br>带宽叠加是否真正发生，要看这条逻辑链路<strong>承载了什么流量</strong>。<br>这就要看<strong>S1↔S2之间到底有什么数据在跑</strong>。</p><hr><h2 id="三、你的场景：S1-与-S2-不属于同一逻辑设备"><a href="#三、你的场景：S1-与-S2-不属于同一逻辑设备" class="headerlink" title="三、你的场景：S1 与 S2 不属于同一逻辑设备"></a>三、你的场景：S1 与 S2 不属于同一逻辑设备</h2><p>你这里的情况是：</p><ul><li>S1 与 S2 只是普通的两台接入交换机；</li><li>各自上行到 R1；</li><li>不是堆叠（IRF &#x2F; VSU）；</li><li>也没有跨设备聚合（MLAG &#x2F; vPC）；</li><li>仅仅是「S1↔S2 之间做了链路聚合」。</li></ul><p>因此，这个聚合链路的作用<strong>并不是上网流量负载均衡</strong>。<br>真正的功能如下：</p><hr><h2 id="四、S1↔S2-聚合链路在这种架构下的实际作用"><a href="#四、S1↔S2-聚合链路在这种架构下的实际作用" class="headerlink" title="四、S1↔S2 聚合链路在这种架构下的实际作用"></a>四、S1↔S2 聚合链路在这种架构下的实际作用</h2><h3 id="1️⃣-冗余路径（容灾）"><a href="#1️⃣-冗余路径（容灾）" class="headerlink" title="1️⃣ 冗余路径（容灾）"></a>1️⃣ <strong>冗余路径（容灾）</strong></h3><p>如果 S1 上行到 R1 的链路断了：</p><ul><li>S1 可以通过聚合链路把流量转发到 S2；</li><li>再由 S2 上行到 R1；</li><li>业务不中断。</li></ul><p>🔹 这就是“环网保护”或“简易备份路径”场景。</p><hr><h3 id="2️⃣-同-VLAN-终端之间的通信"><a href="#2️⃣-同-VLAN-终端之间的通信" class="headerlink" title="2️⃣ 同 VLAN 终端之间的通信"></a>2️⃣ <strong>同 VLAN 终端之间的通信</strong></h3><p>如果有些 VLAN 同时存在于 S1 和 S2 上：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">VLAN</span> <span class="hljs-number">10</span>: 财务网<br>  A 接在 <span class="hljs-built_in">S1</span><br>  <span class="hljs-keyword">B</span> 接在 <span class="hljs-built_in">S2</span><br></code></pre></td></tr></table></figure><ul><li>A 要访问 B（打印机、NAS、共享文件等），<br>流量就必须经过 S1↔S2；</li><li>如果只是单条线，很可能成为瓶颈；</li><li>用链路聚合后，能实现带宽叠加与流量均衡。</li></ul><p>🔹 这是接入层互联最常见的<strong>东西向（East-West）流量路径</strong>。</p><hr><h3 id="3️⃣-STP-稳定与防环路优化"><a href="#3️⃣-STP-稳定与防环路优化" class="headerlink" title="3️⃣ STP 稳定与防环路优化"></a>3️⃣ <strong>STP 稳定与防环路优化</strong></h3><ul><li>如果两台交换机用两条线直连但不聚合，STP 会阻塞一条；</li><li>聚合后，这两条线被视为一个逻辑端口；</li><li>STP 不再阻塞任何一条；</li><li>网络稳定、带宽不浪费。</li></ul><p>🔹 所以即便平时没大量数据流量，聚合也是一种<strong>防环路、加稳态的好习惯</strong>。</p><hr><h3 id="4️⃣-控制-管理流量、ARP、广播同步"><a href="#4️⃣-控制-管理流量、ARP、广播同步" class="headerlink" title="4️⃣ 控制&#x2F;管理流量、ARP、广播同步"></a>4️⃣ <strong>控制&#x2F;管理流量、ARP、广播同步</strong></h3><ul><li>同 VLAN 的广播、ARP 请求等也会在 S1↔S2 之间传播；</li><li>聚合链路可保证这些控制流量不拥塞、不丢包；</li><li>维持 VLAN 表项一致。</li></ul><hr><h2 id="五、什么时候聚合能真正“叠加上行带宽”？"><a href="#五、什么时候聚合能真正“叠加上行带宽”？" class="headerlink" title="五、什么时候聚合能真正“叠加上行带宽”？"></a>五、什么时候聚合能真正“叠加上行带宽”？</h2><p>要想让多条上行线<strong>同时承担业务流量</strong>，<br>必须让上层设备（R1）把两条线都当作<strong>同一条逻辑链路</strong>。<br>这需要：</p><ul><li>S1 和 S2 逻辑上“合体”；</li><li>或通过跨设备聚合技术实现。</li></ul><p>即以下架构：</p><table><thead><tr><th>架构类型</th><th>技术实现</th><th>说明</th></tr></thead><tbody><tr><td>✅ 单交换机聚合</td><td>LACP（单机）</td><td>一台交换机对 R1 聚合</td></tr><tr><td>✅ 跨设备聚合</td><td>MLAG &#x2F; vPC &#x2F; IRF &#x2F; VSU</td><td>两台交换机协同对 R1 聚合</td></tr><tr><td>❌ 普通双上行</td><td>无</td><td>各走各路，带宽不能叠加，只能做路由冗余</td></tr></tbody></table><hr><h2 id="六、所以：在你当前的网络结构中"><a href="#六、所以：在你当前的网络结构中" class="headerlink" title="六、所以：在你当前的网络结构中"></a>六、所以：在你当前的网络结构中</h2><p>你的 S1 与 S2 是<strong>完全独立的接入设备</strong>，<br>它们之间的聚合链路仅用于：</p><ol><li><strong>同 VLAN 的终端横向通信；</strong></li><li><strong>冗余备份路径（单上行故障时可绕行）；</strong></li><li><strong>STP 优化、防环路；</strong></li><li><strong>控制平面广播同步。</strong></li></ol><p>平时：</p><ul><li>上行流量依然各走各的（S1→R1、S2→R1）；</li><li>聚合链路只承担局部通信与冗余作用；</li><li>不会主动分担“上网”带宽。</li></ul><hr><h2 id="七、对比一下常见三种结构"><a href="#七、对比一下常见三种结构" class="headerlink" title="七、对比一下常见三种结构"></a>七、对比一下常见三种结构</h2><table><thead><tr><th>场景</th><th>描述</th><th>聚合意义</th></tr></thead><tbody><tr><td><strong>单上行 + 普通互联（你的场景）</strong></td><td>S1、S2 各自上行，之间聚合</td><td>冗余 + 同VLAN通信</td></tr><tr><td><strong>双上行 + 跨设备聚合 (MLAG&#x2F;vPC)</strong></td><td>S1、S2协同上行到R1</td><td>真正的上行带宽叠加</td></tr><tr><td><strong>堆叠 (IRF&#x2F;VSU)</strong></td><td>S1、S2逻辑上合为一台</td><td>完全共享配置、上行聚合带宽翻倍</td></tr></tbody></table><hr><h2 id="八、思维总结：物理-vs-逻辑视角"><a href="#八、思维总结：物理-vs-逻辑视角" class="headerlink" title="八、思维总结：物理 vs 逻辑视角"></a>八、思维总结：物理 vs 逻辑视角</h2><table><thead><tr><th>思维层面</th><th>物理连接角度</th><th>逻辑网络角度</th></tr></thead><tbody><tr><td>看见的是</td><td>“两台交换机 + 两根线”</td><td>“一个广播域 + 多个转发路径”</td></tr><tr><td>聚合理解</td><td>把两根线捆成一根</td><td>让网络看起来更简单、更可靠</td></tr><tr><td>关注点</td><td>线是否插对</td><td>VLAN、冗余、STP、转发表一致性</td></tr><tr><td>结果</td><td>看似多余，其实关键</td><td>稳定、高可用、故障自愈</td></tr></tbody></table><hr><h2 id="九、一句话结论"><a href="#九、一句话结论" class="headerlink" title="九、一句话结论"></a>九、一句话结论</h2><blockquote><p>在你当前的拓扑中（S1、S2 独立，各自上行到 R1）：</p><ul><li>S1↔S2 的链路聚合<strong>不会直接提高上网带宽</strong>；</li><li>它的意义在于<strong>冗余、稳定、同 VLAN 通信与防环路</strong>；</li><li>真正实现“带宽叠加”的前提是：<strong>上层和下层都在逻辑上协同聚合</strong>。</li></ul></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VPDN+IPsec完整连接过程笔记</title>
    <link href="/2025/09/22/VPDN+IPsec%E5%AE%8C%E6%95%B4%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/09/22/VPDN+IPsec%E5%AE%8C%E6%95%B4%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="VPDN-IPsec完整连接过程笔记"><a href="#VPDN-IPsec完整连接过程笔记" class="headerlink" title="VPDN+IPsec完整连接过程笔记"></a>VPDN+IPsec完整连接过程笔记</h1><h2 id="一、核心概念与对象定义（含英文缩写）"><a href="#一、核心概念与对象定义（含英文缩写）" class="headerlink" title="一、核心概念与对象定义（含英文缩写）"></a>一、核心概念与对象定义（含英文缩写）</h2><p>在理解连接流程前，需明确参与交互的核心设备、协议及组件，避免混淆：</p><table><thead><tr><th>英文缩写&#x2F;全称</th><th>中文名称</th><th>核心作用</th></tr></thead><tbody><tr><td><strong>VPDN</strong> (Virtual Private Dial-up Network)</td><td>虚拟专用拨号网络</td><td>基于公共网络（互联网&#x2F;运营商网络），通过拨号建立远程接入企业内网的逻辑通道</td></tr><tr><td><strong>IPsec</strong> (Internet Protocol Security)</td><td>互联网协议安全</td><td>一套协议组合，通过加密、认证保障IP层数据传输的安全性（机密性、完整性、抗重放）</td></tr><tr><td><strong>Client</strong></td><td>用户终端</td><td>发起连接的设备（如办公电脑、工业监控终端、物联网设备）</td></tr><tr><td><strong>LAC</strong> (L2TP Access Concentrator)</td><td>L2TP访问集中器</td><td>运营商部署的接入设备，接收用户拨号请求，转发至企业侧LNS</td></tr><tr><td><strong>LNS</strong> (L2TP Network Server)</td><td>L2TP网络服务器</td><td>企业侧部署的服务器，是VPDN隧道终点，负责终结隧道、对接企业内网</td></tr><tr><td><strong>RADIUS</strong> (Remote Authentication Dial-In User Service)</td><td>远程认证拨号用户服务</td><td>企业&#x2F;运营商部署的认证服务器，校验用户身份合法性及权限</td></tr><tr><td><strong>PPP</strong> (Point-to-Point Protocol)</td><td>点对点协议</td><td>建立用户终端与LAC、LNS之间的基础数据链路，支持认证、IP分配</td></tr><tr><td><strong>L2TP</strong> (Layer 2 Tunnel Protocol)</td><td>第二层隧道协议</td><td>在LAC与LNS之间建立隧道，封装PPP帧（用户数据），实现跨公网传输</td></tr><tr><td><strong>IKE</strong> (Internet Key Exchange)</td><td>互联网密钥交换协议</td><td>IPsec的“密钥协商工具”，负责生成加密密钥、建立安全关联（SA），不直接加密数据</td></tr><tr><td><strong>IPsec SA</strong> (Security Association)</td><td>IPsec安全关联</td><td>IPsec的“通信契约”，记录双方协商的加密算法（如AES）、认证算法（如SHA）、密钥等，单向生效（需 inbound&#x2F;outbound 成对）</td></tr><tr><td><strong>ESP</strong> (Encapsulating Security Payload)</td><td>封装安全载荷</td><td>IPsec核心加密协议，同时实现数据加密和完整性认证（VPDN场景首选）</td></tr><tr><td><strong>AH</strong> (Authentication Header)</td><td>认证头</td><td>IPsec协议之一，仅做完整性认证和身份校验，不加密数据（VPDN场景极少用）</td></tr><tr><td><strong>SPI</strong> (Security Parameter Index)</td><td>安全参数索引</td><td>标识IPsec SA的唯一编号，用于接收方快速匹配对应的加密规则</td></tr><tr><td><strong>ECDH</strong> (Elliptic Curve Diffie-Hellman)</td><td>椭圆曲线迪菲-赫尔曼</td><td>IKE协商中用于生成共享密钥的算法，无需传输密钥本身，仅交换公钥即可计算一致密钥</td></tr></tbody></table><h2 id="二、VPDN-IPsec-完整连接流程（5大阶段）"><a href="#二、VPDN-IPsec-完整连接流程（5大阶段）" class="headerlink" title="二、VPDN+IPsec 完整连接流程（5大阶段）"></a>二、VPDN+IPsec 完整连接流程（5大阶段）</h2><p>VPDN+IPsec的连接是“拨号建链路→隧道传数据→加密保安全”的复合过程，需经历5个阶段，各阶段环环相扣：</p><h3 id="阶段1：用户终端与LAC建立PPP基础链路"><a href="#阶段1：用户终端与LAC建立PPP基础链路" class="headerlink" title="阶段1：用户终端与LAC建立PPP基础链路"></a>阶段1：用户终端与LAC建立PPP基础链路</h3><p>核心目标：通过拨号建立用户终端与运营商LAC之间的点对点数据链路，为后续隧道传输打基础。</p><pre><code class=" mermaid">sequenceDiagram    participant C as 用户终端(Client)    participant L as LAC(运营商)    C-&gt;&gt;L: 拨号请求(账号/密码)    L-&gt;&gt;C: LCP 参数协商 (MTU/压缩等)    C-&gt;&gt;L: 回应确认    L-&gt;&gt;C: CHAP 挑战(随机数)    C-&gt;&gt;L: CHAP 响应(加密后的随机数)    L-&gt;&gt;C: 认证结果(成功)    Note over C,L: PPP 链路建立成功</code></pre><ol><li><p><strong>参数配置与拨号发起</strong><br>用户在终端（如电脑）配置VPDN拨号参数：运营商提供的VPDN账号&#x2F;密码、LAC公网地址，通过本地网络（宽带、4G&#x2F;5G）向LAC发起拨号请求。</p></li><li><p><strong>PPP链路协商（LCP阶段）</strong>  </p><ul><li>终端与LAC通过 <strong>LCP（链路控制协议）</strong> 协商链路参数：最大传输单元（MTU）、数据压缩方式、链路超时时间等。  </li><li>协商通过后，建立基础数据链路（物理层&#x2F;数据链路层连通）。</li></ul></li><li><p><strong>PPP临时认证（CHAP&#x2F;PAP阶段）</strong>  </p><ul><li>LAC通过 <strong>CHAP（挑战-响应认证协议，优先）</strong> 或 <strong>PAP（密码认证协议，明文传输，安全性低）</strong> 校验用户身份：  <ul><li>CHAP流程：LAC发送随机“挑战码”→终端用账号密码加密挑战码→LAC解密后比对，确认身份合法。</li></ul></li><li>认证通过后，终端与LAC的PPP链路正式激活。</li></ul></li></ol><h3 id="阶段2：LAC与LNS建立L2TP隧道"><a href="#阶段2：LAC与LNS建立L2TP隧道" class="headerlink" title="阶段2：LAC与LNS建立L2TP隧道"></a>阶段2：LAC与LNS建立L2TP隧道</h3><p>核心目标：在LAC与企业侧LNS之间建立L2TP隧道，封装用户PPP帧，实现跨公网传输（此时数据暂未加密，需后续IPsec保护）。</p><pre><code class=" mermaid">sequenceDiagram    participant LAC as LAC    participant LNS as LNS    LAC-&gt;&gt;LNS: 隧道建立请求 (用户信息、LAC 标识)    LNS-&gt;&gt;LAC: 分配 Tunnel ID / Session ID    LAC-&gt;&gt;LNS: 确认隧道参数    Note over LAC,LNS: L2TP 隧道建立成功</code></pre><ol><li><p><strong>L2TP隧道协商发起</strong><br>LAC验证用户拨号请求后，向企业侧LNS发送 <strong>L2TP隧道建立请求</strong>，携带用户信息（账号、拨号类型）、LAC自身标识（如公网IP）。</p></li><li><p><strong>L2TP隧道参数确认</strong>  </p><ul><li>LAC与LNS通过L2TP协议协商核心参数：  <ul><li>隧道ID（标识唯一隧道，如LAC→LNS为Tunnel ID 100，LNS→LAC为Tunnel ID 200）；  </li><li>会话ID（区分同一隧道内不同用户的连接，如用户A为Session ID 5，用户B为Session ID 6）；  </li><li>隧道验证（可选，通过预共享密钥确认LAC与LNS身份，防止非法设备接入）。</li></ul></li></ul></li><li><p><strong>L2TP隧道激活</strong><br>协商通过后，LAC与LNS之间形成逻辑隧道，用户终端的PPP帧可通过该隧道传输（此时数据以明文形式封装在L2TP报文中，需进入IPsec阶段加密）。</p></li></ol><h3 id="阶段3：LAC与LNS建立IPsec加密隧道（核心安全环节）"><a href="#阶段3：LAC与LNS建立IPsec加密隧道（核心安全环节）" class="headerlink" title="阶段3：LAC与LNS建立IPsec加密隧道（核心安全环节）"></a>阶段3：LAC与LNS建立IPsec加密隧道（核心安全环节）</h3><p>核心目标：通过IKE协商生成加密密钥和安全关联（SA），建立IPsec隧道，加密L2TP隧道的所有流量，防止公网传输中被窃听、篡改。</p><pre><code class=" mermaid">sequenceDiagram    participant LAC as LAC    participant LNS as LNS    Note over LAC,LNS: 阶段1: 建立 IKE SA    LAC-&gt;&gt;LNS: 提供算法列表 + Nonce + ECDH 公钥    LNS-&gt;&gt;LAC: 选择算法 + Nonce + ECDH 公钥    Note over LAC,LNS: 双方计算共享密钥    LAC-&gt;&gt;LNS: 身份认证(加密)    LNS-&gt;&gt;LAC: 身份认证响应    Note over LAC,LNS: IKE SA 建立成功    Note over LAC,LNS: 阶段2: 建立 IPsec SA    LAC-&gt;&gt;LNS: 提议 ESP + AES + SHA    LNS-&gt;&gt;LAC: 确认参数    Note over LAC,LNS: 双方生成 IPsec 加密/认证密钥&lt;br/&gt;IPsec SA 生效</code></pre><h4 id="3-1-IKE协商：生成密钥与安全关联（2个子阶段）"><a href="#3-1-IKE协商：生成密钥与安全关联（2个子阶段）" class="headerlink" title="3.1 IKE协商：生成密钥与安全关联（2个子阶段）"></a>3.1 IKE协商：生成密钥与安全关联（2个子阶段）</h4><p>IKE是IPsec的“前置工具”，分两步完成密钥和规则协商，确保后续加密参数一致。</p><h5 id="子阶段1：建立IKE-SA（保护后续协商安全）"><a href="#子阶段1：建立IKE-SA（保护后续协商安全）" class="headerlink" title="子阶段1：建立IKE SA（保护后续协商安全）"></a>子阶段1：建立IKE SA（保护后续协商安全）</h5><ul><li><strong>目的</strong>：建立临时加密通道（IKE SA），避免后续IPsec参数协商被窃听。  </li><li><strong>流程</strong>：  <ol><li><strong>IKE_SA_INIT Request（LAC→LNS）</strong>：<br>LAC发送支持的算法列表（加密：AES-256-GCM；哈希：SHA-256；密钥交换：ECDH）、随机数（Nonce）、LAC的ECDH公钥。  </li><li><strong>IKE_SA_INIT Response（LNS→LAC）</strong>：<br>LNS从LAC的算法列表中选择一套（如确定AES-256+SHA-256+ECDH），返回自身随机数、ECDH公钥，可选附加LNS证书（身份标识）。  </li><li><strong>共享密钥生成</strong>：<br>LAC和LNS分别用自身私钥、对方公钥、双方随机数，通过ECDH算法计算出 <strong>共享密钥（Shared Secret）</strong>，再衍生出IKE SA的加密密钥、认证密钥（双方结果完全一致，无需传输密钥）。  </li><li><strong>IKE_AUTH Request&#x2F;Response（身份认证）</strong>：  <ul><li>LAC用IKE SA密钥加密自身身份（如LAC公网IP）和认证数据（私钥签名的哈希值），发送给LNS；  </li><li>LNS验证LAC身份后，同样加密自身身份返回；  </li><li>验证通过，<strong>IKE SA建立成功</strong>（有效期几小时，用于保护后续子SA协商）。</li></ul></li></ol></li></ul><h5 id="子阶段2：建立IPsec-SA（确定数据加密规则）"><a href="#子阶段2：建立IPsec-SA（确定数据加密规则）" class="headerlink" title="子阶段2：建立IPsec SA（确定数据加密规则）"></a>子阶段2：建立IPsec SA（确定数据加密规则）</h5><ul><li><strong>目的</strong>：在IKE SA保护下，协商IPsec的具体加密规则，生成IPsec SA。  </li><li><strong>流程</strong>：  <ol><li><strong>CREATE_CHILD_SA Request（LAC→LNS）</strong>：<br>LAC提出IPsec参数需求：隧道模式（必选，保护原始IP地址）、ESP协议（加密+认证）、加密算法（AES-256-GCM）、认证算法（SHA-256）。  </li><li><strong>CREATE_CHILD_SA Response（LNS→LAC）</strong>：<br>LNS确认参数，双方基于IKE SA密钥，通过密钥派生算法生成 <strong>IPsec SA的加密密钥、认证密钥</strong>。  </li><li><strong>IPsec SA生效</strong>：<br>双方记录IPsec SA信息（SPI、算法、密钥、有效期：几分钟到1小时），此时IPsec隧道的“加密规则”正式确定。</li></ol></li></ul><h4 id="3-2-IPsec隧道激活：加密L2TP流量"><a href="#3-2-IPsec隧道激活：加密L2TP流量" class="headerlink" title="3.2 IPsec隧道激活：加密L2TP流量"></a>3.2 IPsec隧道激活：加密L2TP流量</h4><p>IPsec SA建立后，LAC与LNS之间的所有L2TP隧道流量（用户PPP数据）会被ESP协议加密，封装流程如下：  </p><ol><li><strong>原始数据</strong>：L2TP封装后的报文（含用户PPP帧，源IP：LAC内网IP，目的IP：LNS内网IP）；  </li><li><strong>ESP加密</strong>：用IPsec SA加密密钥（AES-256）加密整个原始数据，同时用认证密钥（SHA-256）计算数据哈希值（存于ESP认证字段，防篡改）；  </li><li><strong>添加ESP头&#x2F;尾</strong>：  <ul><li>头部：SPI（标识对应的IPsec SA）、序列号（防重放攻击，每次发送递增）；  </li><li>尾部：填充信息（确保数据长度符合加密块要求）、Next Header（标识原始协议为L2TP）；</li></ul></li><li><strong>添加公网IP头</strong>：源IP（LAC公网IP）、目的IP（LNS公网IP）、协议字段&#x3D;50（标识ESP协议）；  </li><li><strong>公网传输</strong>：加密后的报文通过互联网发送至LNS，即使被截取也无法解密。</li></ol><h3 id="阶段4：用户身份二次认证（企业级权限校验）"><a href="#阶段4：用户身份二次认证（企业级权限校验）" class="headerlink" title="阶段4：用户身份二次认证（企业级权限校验）"></a>阶段4：用户身份二次认证（企业级权限校验）</h3><p>核心目标：通过企业内部RADIUS服务器，做更严格的身份和权限校验（避免运营商侧认证通过但非企业合法用户的情况）。</p><ol><li><p><strong>LNS发起认证请求</strong><br>LNS从L2TP报文中提取用户账号&#x2F;密码，发送至企业内部RADIUS服务器，请求校验。</p></li><li><p><strong>RADIUS认证与权限返回</strong>  </p><ul><li>RADIUS服务器查询用户白名单、权限配置（如是否允许访问财务系统、可访问的内网网段）；  </li><li>认证通过：返回用户权限信息（如可访问的内网网段192.168.1.0&#x2F;24、VLAN ID&#x3D;10）；  </li><li>认证失败：拒绝用户接入，终止连接。</li></ul></li></ol><h3 id="阶段5：分配内网IP，访问企业资源"><a href="#阶段5：分配内网IP，访问企业资源" class="headerlink" title="阶段5：分配内网IP，访问企业资源"></a>阶段5：分配内网IP，访问企业资源</h3><p>核心目标：用户终端获得企业内网IP，通过加密隧道访问内网资源，完成通信闭环。</p><ol><li><p><strong>分配企业内网IP（IPCP阶段）</strong><br>LNS通过 <strong>PPP的IPCP（IP控制协议）</strong> 给用户终端分配企业内网IP地址（如192.168.1.100，与企业办公区设备同网段），同时返回DNS服务器地址、子网掩码。</p></li><li><p><strong>用户访问内网资源</strong>  </p><ul><li>终端发送请求（如访问OA系统）：数据先封装为PPP帧→L2TP隧道封装→IPsec加密→公网传输至LNS；  </li><li>LNS处理：解密IPsec流量→解封装L2TP&#x2F;PPP帧→根据用户权限转发至内网服务器（如OA服务器192.168.1.5）；  </li><li>响应返回：服务器响应数据按原路（内网→LNS→IPsec加密→L2TP隧道→用户终端）返回，用户终端接收后解析显示。</li></ul></li><li><p><strong>密钥更新（无缝保障安全）</strong><br>IPsec SA到期前（如1小时），LAC与LNS通过IKE的 <strong>CREATE_CHILD_SA</strong> 消息协商新的IPsec SA（复用已有的IKE SA，无需重新认证），实现密钥“无缝更新”，避免长期使用同一密钥导致安全风险。</p></li></ol><h2 id="三、关键技术总结"><a href="#三、关键技术总结" class="headerlink" title="三、关键技术总结"></a>三、关键技术总结</h2><h3 id="3-1-数据封装顺序（从用户到公网）"><a href="#3-1-数据封装顺序（从用户到公网）" class="headerlink" title="3.1 数据封装顺序（从用户到公网）"></a>3.1 数据封装顺序（从用户到公网）</h3><p><code>用户应用数据（如HTTP请求）→ PPP帧封装（含用户标识）→ L2TP隧道封装（跨公网传输）→ IPsec ESP加密（安全保障）→ 公网IP头封装（路由转发）</code></p><pre><code class=" mermaid">flowchart TB    App[&quot;用户应用数据&lt;br/&gt;(HTTP 请求)&quot;]    PPP[&quot;PPP 帧封装&lt;br/&gt;(用户认证信息)&quot;]    L2TP[&quot;L2TP 隧道封装&lt;br/&gt;(Tunnel ID / Session ID)&quot;]    ESP[&quot;IPsec ESP 加密&lt;br/&gt;(AES+SHA, SPI, 序列号)&quot;]    IP[&quot;公网IP头&lt;br/&gt;(LAC公网 → LNS公网)&quot;]    App --&gt; PPP --&gt; L2TP --&gt; ESP --&gt; IP</code></pre><h3 id="3-2-IPsec的核心安全保障"><a href="#3-2-IPsec的核心安全保障" class="headerlink" title="3.2 IPsec的核心安全保障"></a>3.2 IPsec的核心安全保障</h3><table><thead><tr><th>安全维度</th><th>实现机制</th></tr></thead><tbody><tr><td>机密性</td><td>AES-256等对称加密算法，加密IP层数据</td></tr><tr><td>完整性</td><td>SHA-256等哈希算法，生成数据摘要，防止篡改</td></tr><tr><td>抗重放</td><td>ESP头部序列号，拒绝重复接收的数据包</td></tr><tr><td>身份认证</td><td>IKE协商中的预共享密钥&#x2F;证书，确保LAC与LNS为授权设备</td></tr></tbody></table><h3 id="3-3-适用场景"><a href="#3-3-适用场景" class="headerlink" title="3.3 适用场景"></a>3.3 适用场景</h3><ul><li>企业员工远程办公（在家&#x2F;出差访问内网OA、ERP）；  </li><li>分支机构互联（如上海分公司通过VPDN+IPsec访问杭州总部内网）；  </li><li>物联网设备远程管理（如各地充电桩、ATM机接入企业管理平台）；  </li><li>高安全需求行业（金融、政务、医疗），需符合数据传输合规要求。</li></ul><h2 id="四、整体流程图"><a href="#四、整体流程图" class="headerlink" title="四、整体流程图"></a>四、整体流程图</h2><pre><code class=" mermaid">sequenceDiagram    participant Client as 用户终端(Client)    participant LAC as LAC(运营商接入设备)    participant LNS as LNS(企业L2TP服务器)    participant RADIUS as RADIUS(企业认证服务器)    participant Intranet as 企业内网资源    %% 阶段1 PPP 拨号    Client-&gt;&gt;LAC: 拨号请求(账号/密码)    LAC-&gt;&gt;Client: LCP 参数协商    Client-&gt;&gt;LAC: CHAP/PAP 认证响应    LAC-&gt;&gt;Client: 认证成功 → PPP 链路建立    %% 阶段2 L2TP 隧道    LAC-&gt;&gt;LNS: 请求建立 L2TP 隧道    LNS-&gt;&gt;LAC: 分配 Tunnel ID / Session ID    Note over LAC,LNS: L2TP 隧道建立成功    %% 阶段3 IPsec 建立    LAC-&gt;&gt;LNS: IKE_SA_INIT (算法/Nonce/ECDH 公钥)    LNS-&gt;&gt;LAC: 响应 (选择算法/公钥)    Note over LAC,LNS: 计算共享密钥，建立 IKE SA    LAC-&gt;&gt;LNS: CREATE_CHILD_SA (ESP/AES/SHA 提议)    LNS-&gt;&gt;LAC: 确认参数    Note over LAC,LNS: IPsec SA 生效，L2TP 流量受保护    %% 阶段4 二次认证    LNS-&gt;&gt;RADIUS: 转发用户凭证进行认证    RADIUS-&gt;&gt;LNS: 返回认证结果+权限    LNS-&gt;&gt;Client: 通知认证通过/拒绝    %% 阶段5 分配内网IP并访问    LNS-&gt;&gt;Client: IPCP 分配内网IP/DNS    Client-&gt;&gt;Intranet: 访问内网应用(OA/ERP等)    Intranet-&gt;&gt;Client: 返回业务数据(通过L2TP+IPsec)</code></pre>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue-element-admin动态多标签页（带参数+缓存不刷新）完整实现指南</title>
    <link href="/2025/09/18/vue-element-admin%20%E5%8A%A8%E6%80%81%E5%A4%9A%E6%A0%87%E7%AD%BE%E9%A1%B5%EF%BC%88%E5%B8%A6%E5%8F%82%E6%95%B0+%E7%BC%93%E5%AD%98%E4%B8%8D%E5%88%B7%E6%96%B0%EF%BC%89%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%8D%97/"/>
    <url>/2025/09/18/vue-element-admin%20%E5%8A%A8%E6%80%81%E5%A4%9A%E6%A0%87%E7%AD%BE%E9%A1%B5%EF%BC%88%E5%B8%A6%E5%8F%82%E6%95%B0+%E7%BC%93%E5%AD%98%E4%B8%8D%E5%88%B7%E6%96%B0%EF%BC%89%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-element-admin-动态多标签页（带参数-缓存不刷新）完整实现指南"><a href="#vue-element-admin-动态多标签页（带参数-缓存不刷新）完整实现指南" class="headerlink" title="vue-element-admin 动态多标签页（带参数 + 缓存不刷新）完整实现指南"></a>vue-element-admin 动态多标签页（带参数 + 缓存不刷新）完整实现指南</h1><h2 id="一、需求背景与核心目标"><a href="#一、需求背景与核心目标" class="headerlink" title="一、需求背景与核心目标"></a>一、需求背景与核心目标</h2><p>在 vue-element-admin 项目开发中，经常遇到 “同一页面模板需加载不同参数数据” 的场景（如设备详情、端口状态回溯等），核心需求如下：</p><ol><li><p><strong>多实例共存</strong>：同一页面模板可同时打开多个标签页（如 “端口状态回溯 - 路由器 A”“端口状态回溯 - 路由器 B”），每个标签页对应不同参数；</p></li><li><p><strong>标题带参数</strong>：标签页标题需包含业务参数，直观区分不同标签，避免标题重复；</p></li><li><p><strong>切换不刷新</strong>：标签页来回切换时，不重复请求接口、不重置页面状态（如表格分页、表单填写进度），借助 keep-alive 实现缓存；</p></li><li><p><strong>路由不冲突</strong>：动态生成的路由需唯一，避免重复注册导致的路由冗余或解析错误。</p></li></ol><h2 id="二、核心实现原理"><a href="#二、核心实现原理" class="headerlink" title="二、核心实现原理"></a>二、核心实现原理</h2><p>通过 “<strong>唯一路由标识 + 动态路由注册 + 组件 name 同步 + dynamicTitle 配置 + keep-alive 缓存</strong>” 的组合方案，解决上述需求，核心逻辑拆解如下：</p><ol><li><p><strong>唯一路由标识</strong>：用 “页面标识 + 参数编码” 生成唯一路由 <code>name</code>（如 <code>InterfaceHistory_路由器A_北京</code>），确保路由系统将不同参数的同模板页面识别为独立路由；</p></li><li><p><strong>动态路由注册</strong>：首次访问某参数页面时，通过 <code>$router.addRoutes()</code> 动态注册路由，同时判断路由是否已存在，避免重复注册；</p></li><li><p><strong>组件 name 同步</strong>：动态导入页面组件时，修改组件默认导出的 <code>name</code>，使其与路由 <code>name</code> 一致，确保 keep-alive 能通过 <code>name</code> 精准匹配缓存；</p></li><li><p><strong>dynamicTitle 配置</strong>：在路由 <code>meta</code> 中设置 <code>dynamicTitle: true</code>，开启动态标题识别，让 TagsView 组件优先读取带参数的 <code>meta.title</code>（如 “端口状态回溯 - 路由器 A”），实现标签页标题差异化；</p></li><li><p><strong>keep-alive 缓存</strong>：借助 vue-element-admin 内置的 keep-alive 机制，通过组件 <code>name</code> 匹配缓存，实现标签页切换时不重复刷新页面。</p></li></ol><h2 id="三、详细实现步骤（以-“端口状态回溯”-页面为例）"><a href="#三、详细实现步骤（以-“端口状态回溯”-页面为例）" class="headerlink" title="三、详细实现步骤（以 “端口状态回溯” 页面为例）"></a>三、详细实现步骤（以 “端口状态回溯” 页面为例）</h2><h3 id="步骤-1：编写动态跳转函数（核心逻辑）"><a href="#步骤-1：编写动态跳转函数（核心逻辑）" class="headerlink" title="步骤 1：编写动态跳转函数（核心逻辑）"></a>步骤 1：编写动态跳转函数（核心逻辑）</h3><p>在触发跳转的页面（如设备列表页）中，编写跳转函数，完成 “参数处理 → 路由存在性判断 → 动态注册路由 → 页面跳转” 全流程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* 跳转到端口状态回溯页面（带参数，支持多标签页共存）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">hostname</span> - 设备主机名（必传参数）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; [city] - 城市（可选参数）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">goToInterfaceHistory</span>(<span class="hljs-params">hostname, city</span>) &#123;<br><br> <span class="hljs-comment">// 1. 参数校验：必传参数为空时直接返回，避免无效跳转</span><br><br> <span class="hljs-keyword">if</span> (!hostname) <span class="hljs-keyword">return</span>;<br><br> <span class="hljs-comment">// 2. 生成唯一标识 key：对参数编码（处理特殊字符，如空格、符号），避免路由路径冲突</span><br><br> <span class="hljs-keyword">const</span> encodedHostname = <span class="hljs-built_in">encodeURIComponent</span>(hostname);<br><br> <span class="hljs-keyword">const</span> encodedCity = city ? <span class="hljs-string">&#x27;_&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(city) : <span class="hljs-string">&#x27;&#x27;</span>;<br><br> <span class="hljs-keyword">const</span> uniqueKey = encodedHostname + encodedCity;<br><br> <span class="hljs-comment">// 3. 生成唯一路由 name：页面标识 + 唯一 key，确保路由全局唯一</span><br><br> <span class="hljs-keyword">const</span> uniqueRouteName = <span class="hljs-string">`InterfaceHistory_<span class="hljs-subst">$&#123;uniqueKey&#125;</span>`</span>;<br><br> <span class="hljs-comment">// 4. 检查路由是否已注册：避免重复调用 addRoutes 导致路由冗余</span><br><br> <span class="hljs-keyword">const</span> allRoutes = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-property">options</span>.<span class="hljs-property">routes</span> || [];<br><br> <span class="hljs-keyword">let</span> isRouteExists = <span class="hljs-literal">false</span>;<br><br> <span class="hljs-comment">// 遍历路由树（含子路由），判断目标路由是否存在</span><br><br> <span class="hljs-keyword">const</span> <span class="hljs-title function_">checkRouteExists</span> = (<span class="hljs-params">routes</span>) =&gt; &#123;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> route <span class="hljs-keyword">of</span> routes) &#123;<br><br>     <span class="hljs-keyword">if</span> (route.<span class="hljs-property">name</span> === uniqueRouteName) &#123;<br><br>       isRouteExists = <span class="hljs-literal">true</span>;<br><br>       <span class="hljs-keyword">return</span>;<br><br>     &#125;<br><br>     <span class="hljs-keyword">if</span> (route.<span class="hljs-property">children</span> &amp;&amp; route.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br><br>       <span class="hljs-title function_">checkRouteExists</span>(route.<span class="hljs-property">children</span>);<br><br>     &#125;<br><br>   &#125;<br><br> &#125;;<br><br> <span class="hljs-title function_">checkRouteExists</span>(allRoutes);<br><br> <span class="hljs-comment">// 5. 未注册则动态添加路由</span><br><br> <span class="hljs-keyword">if</span> (!isRouteExists) &#123;<br><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">addRoutes</span>([<br><br>     &#123;<br><br>       <span class="hljs-attr">path</span>: <span class="hljs-string">`/devOpsSnap/interfaceHistory/<span class="hljs-subst">$&#123;uniqueKey&#125;</span>`</span>, <span class="hljs-comment">// 路由路径含唯一 key，避免路径重复</span><br><br>       <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/layout&#x27;</span>), <span class="hljs-comment">// 继承项目主布局（需与项目实际结构一致）</span><br><br>       <span class="hljs-attr">children</span>: [<br><br>         &#123;<br><br>           <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 子路由默认路径（空路径匹配父路径，访问时无需额外拼接）</span><br><br>           <span class="hljs-attr">name</span>: uniqueRouteName, <span class="hljs-comment">// 唯一路由 name（与组件 name 同步）</span><br><br>           <span class="hljs-comment">// 动态导入页面组件，并修改组件 name 与路由 name 一致（关键：确保缓存生效）</span><br><br>           <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/devOpsSnap/interfaceHistory.vue&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> &#123;<br><br>             <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span> &amp;&amp; <span class="hljs-variable language_">module</span>.<span class="hljs-property">default</span>) &#123;<br><br>               <span class="hljs-variable language_">module</span>.<span class="hljs-property">default</span>.<span class="hljs-property">name</span> = uniqueRouteName; <span class="hljs-comment">// 同步组件 name 与路由 name</span><br><br>             &#125;<br><br>             <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>;<br><br>           &#125;),<br><br>           <span class="hljs-attr">meta</span>: &#123;<br><br>             <span class="hljs-attr">title</span>: <span class="hljs-string">`端口状态回溯 - <span class="hljs-subst">$&#123;hostname&#125;</span>`</span>, <span class="hljs-comment">// 动态标题（含业务参数，直观区分标签）</span><br><br>             <span class="hljs-attr">dynamicTitle</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 关键配置：开启动态标题识别，让 TagsView 读取带参数标题</span><br><br>             <span class="hljs-attr">affix</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 允许关闭标签页（非固定标签，固定标签需设为 true）</span><br><br>             <span class="hljs-attr">noCache</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 开启缓存（false 表示缓存，true 表示不缓存，需与 keep-alive 配合）</span><br><br>           &#125;<br><br>         &#125;<br><br>       ]<br><br>     &#125;<br><br>   ]);<br><br> &#125;<br><br> <span class="hljs-comment">// 6. 跳转到目标路由：通过唯一 name 跳转（比 path 跳转更可靠，避免路径拼接错误）</span><br><br> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br><br>   <span class="hljs-attr">name</span>: uniqueRouteName,<br><br>   <span class="hljs-attr">query</span>: &#123;<br><br>     <span class="hljs-attr">hostname</span>: hostname, <span class="hljs-comment">// 传递业务参数（组件内通过 $route.query 获取）</span><br><br>     <span class="hljs-attr">city</span>: city || <span class="hljs-string">&#x27;&#x27;</span><br><br>   &#125;<br><br> &#125;);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤-2：目标页面组件配置（接收参数-加载数据）"><a href="#步骤-2：目标页面组件配置（接收参数-加载数据）" class="headerlink" title="步骤 2：目标页面组件配置（接收参数 + 加载数据）"></a>步骤 2：目标页面组件配置（接收参数 + 加载数据）</h3><p>在目标页面（如 <code>interfaceHistory.vue</code>）中，无需额外复杂配置，只需从 <code>$route.query</code> 获取参数并加载数据，缓存由 keep-alive 自动管理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;interface-history-container&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-comment">&lt;!-- 页面标题：显示带参数的业务信息 --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">el-page-header</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;端口状态回溯&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">content</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">       端口状态回溯 - &#123;&#123; $route.query.hostname &#125;&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;$route.query.city&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;city-tag&quot;</span>&gt;</span>（&#123;&#123; $route.query.city &#125;&#125;）<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">el-page-header</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-comment">&lt;!-- 业务内容：如表格展示端口数据 --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span> <span class="hljs-attr">border</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; margin-top: 20px;&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;端口名称&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;portName&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;端口状态&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-tag</span> <span class="hljs-attr">:type</span>=<span class="hljs-string">&quot;scope.row.status === &#x27;up&#x27; ? &#x27;success&#x27; : &#x27;danger&#x27;&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">           &#123;&#123; scope.row.status === &#x27;up&#x27; ? &#x27;正常&#x27; : &#x27;异常&#x27; &#125;&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">el-tag</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;速率&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;speed&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;最后更新时间&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;updateTime&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;InterfaceHistory&#x27;</span>, <span class="hljs-comment">// 初始 name 可自定义，后续会被动态修改为 uniqueRouteName</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-attr">tableData</span>: [] <span class="hljs-comment">// 存储端口状态数据</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 组件首次创建时加载数据（缓存切换时不会重复执行，仅首次触发）</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">loadPortHistoryData</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">    * 加载端口状态回溯数据</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">    */</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">async</span> <span class="hljs-title function_">loadPortHistoryData</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">try</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// 从路由 query 中获取参数</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">const</span> &#123; hostname, city &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">query</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">// 调用接口获取数据（替换为项目实际接口）</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$api</span>.<span class="hljs-property">devOpsSnap</span>.<span class="hljs-title function_">getPortHistory</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-attr">hostname</span>: hostname,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-attr">city</span>: city</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-variable language_">this</span>.<span class="hljs-property">tableData</span> = response.<span class="hljs-property">data</span>.<span class="hljs-property">list</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">     &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;加载端口状态数据失败，请重试！&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;端口数据加载错误：&#x27;</span>, error);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"> &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.interface-history-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"> <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.city-tag</span> &#123;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"> <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"> <span class="hljs-attribute">color</span>: <span class="hljs-number">#409eff</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="步骤-3：确认项目-keep-alive-配置（确保缓存生效）"><a href="#步骤-3：确认项目-keep-alive-配置（确保缓存生效）" class="headerlink" title="步骤 3：确认项目 keep-alive 配置（确保缓存生效）"></a>步骤 3：确认项目 keep-alive 配置（确保缓存生效）</h3><p>vue-element-admin 默认在 <code>src/layout/components/AppMain.vue</code> 中配置了 keep-alive，无需额外修改，确保配置如下即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-main&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- keep-alive 缓存组件：include 基于组件 name 匹配，仅缓存包含在 cachedViews 中的组件 --&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">:include</span>=<span class="hljs-string">&quot;cachedViews&quot;</span>&gt;</span><br><br>     <span class="hljs-comment">&lt;!-- 路由视图：key 用 $route.fullPath 确保不同参数路由触发视图更新 --&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;$route.fullPath&quot;</span> /&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><br> <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"> <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;AppMain&#x27;</span>,</span><br><span class="language-javascript"></span><br><span class="language-javascript"> <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">// 从 vuex 的 tagsView 模块中获取需缓存的视图列表（动态路由的 uniqueRouteName 会自动加入）</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-title function_">cachedViews</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">tagsView</span>.<span class="hljs-property">cachedViews</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">   &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"> &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.app-main</span> &#123;</span><br><span class="language-css"></span><br><span class="language-css"> <span class="hljs-attribute">min-height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100vh</span> - <span class="hljs-number">50px</span>);</span><br><span class="language-css"></span><br><span class="language-css"> <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"></span><br><span class="language-css"> <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css"></span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四、关键配置解析：dynamicTitle-true"><a href="#四、关键配置解析：dynamicTitle-true" class="headerlink" title="四、关键配置解析：dynamicTitle: true"></a>四、关键配置解析：<code>dynamicTitle: true</code></h2><h3 id="1-作用：实现标签页标题差异化"><a href="#1-作用：实现标签页标题差异化" class="headerlink" title="1. 作用：实现标签页标题差异化"></a>1. 作用：实现标签页标题差异化</h3><p>在 vue-element-admin 的 TagsView 组件（<code>src/layout/components/TagsView/index.vue</code>）中，默认读取路由 <code>meta.title</code> 的固定值作为标签页标题。若未配置 <code>dynamicTitle: true</code>，即使 <code>meta.title</code> 是动态的，TagsView 仍可能优先读取路由原型的固定 <code>meta.title</code>，导致所有同类标签页标题重复。</p><p>配置 <code>dynamicTitle: true</code> 后，TagsView 会通过以下逻辑优先读取带参数的动态标题（源码核心逻辑）：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sas">// TagsView 组件中获取标签标题的逻辑<br><br>getTagTitle(route) &#123;<br><br> // 若路由 meta 配置了 dynamicTitle: true，且路由实例有 <span class="hljs-keyword">title</span>，优先使用动态 <span class="hljs-keyword">title</span><br><br> <span class="hljs-keyword">if</span> (route.meta.dynamicTitle <span class="hljs-variable">&amp;&amp;</span> route.<span class="hljs-keyword">title</span>) &#123;<br><br>   <span class="hljs-keyword">return</span> route.<span class="hljs-keyword">title</span>;<br><br> &#125;<br><br> // 否则使用默认的 meta.<span class="hljs-keyword">title</span>（固定值）<br><br> <span class="hljs-keyword">return</span> route.meta.<span class="hljs-keyword">title</span> || <span class="hljs-string">&#x27;未命名页面&#x27;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-配置位置与要求"><a href="#2-配置位置与要求" class="headerlink" title="2. 配置位置与要求"></a>2. 配置位置与要求</h3><ul><li><p><strong>配置位置</strong>：必须在动态注册的子路由 <code>meta</code> 中配置，与动态 <code>title</code> 一一对应（参考步骤 1 中的路由配置）；</p></li><li><p><strong>配合要求</strong>：需与动态生成的 <code>meta.title</code> 配合使用（如 <code>title: 端口状态回溯 - $&#123;hostname&#125;</code>），若 <code>title</code> 是固定值，<code>dynamicTitle: true</code> 无意义。</p></li></ul><h2 id="五、注意事项与常见问题解决"><a href="#五、注意事项与常见问题解决" class="headerlink" title="五、注意事项与常见问题解决"></a>五、注意事项与常见问题解决</h2><h3 id="1-路由-name-唯一性"><a href="#1-路由-name-唯一性" class="headerlink" title="1. 路由 name 唯一性"></a>1. 路由 name 唯一性</h3><ul><li><p><strong>问题</strong>：若 <code>uniqueRouteName</code> 不唯一，会导致路由冲突或缓存错乱；</p></li><li><p><strong>解决</strong>：确保 <code>uniqueRouteName</code> 由 “页面标识 + 参数编码” 生成（如 <code>InterfaceHistory_$&#123;encodedHostname&#125;_$&#123;encodedCity&#125;</code>），对特殊字符用 <code>encodeURIComponent</code> 编码。</p></li></ul><h3 id="2-避免重复注册路由"><a href="#2-避免重复注册路由" class="headerlink" title="2. 避免重复注册路由"></a>2. 避免重复注册路由</h3><ul><li><p><strong>问题</strong>：多次跳转同一参数页面时，重复调用 <code>addRoutes</code> 会导致路由冗余；</p></li><li><p><strong>解决</strong>：跳转前通过遍历 <code>$router.options.routes</code> 检查路由是否已存在（参考步骤 1 中的 <code>checkRouteExists</code> 函数），仅在路由不存在时注册。</p></li></ul><h3 id="3-组件-name-与路由-name-同步"><a href="#3-组件-name-与路由-name-同步" class="headerlink" title="3. 组件 name 与路由 name 同步"></a>3. 组件 name 与路由 name 同步</h3><ul><li><p><strong>问题</strong>：若组件 <code>name</code> 与路由 <code>name</code> 不一致，keep-alive 无法匹配缓存，导致切换标签页重复刷新；</p></li><li><p><strong>解决</strong>：动态导入组件时，必须修改 <code>module.default.name</code> 为 <code>uniqueRouteName</code>（参考步骤 1 中的组件导入逻辑）。</p></li></ul><h3 id="4-参数传递方式选择"><a href="#4-参数传递方式选择" class="headerlink" title="4. 参数传递方式选择"></a>4. 参数传递方式选择</h3><ul><li><p><strong>query 传递</strong>：推荐使用，参数会显示在 URL 中，刷新页面参数不丢失（如 <code>?hostname=路由器A&amp;city=北京</code>）；</p></li><li><p><strong>params 传递</strong>：参数不会显示在 URL 中，但刷新页面后参数会丢失，需配合 <code>localStorage</code> 或 <code>sessionStorage</code> 存储参数。</p></li></ul><h3 id="5-缓存清理"><a href="#5-缓存清理" class="headerlink" title="5. 缓存清理"></a>5. 缓存清理</h3><ul><li><p>关闭标签页时，vue-element-admin 会自动从 <code>cachedViews</code> 中移除对应的组件 <code>name</code>，无需手动清理；</p></li><li><p>若需手动清理某标签页缓存，可调用 vuex 的 <code>tagsView/delView</code> 方法：</p></li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 手动清理指定路由的缓存</span><br><br><span class="hljs-built_in">this</span>.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;tagsView/delView&#x27;</span>, <span class="hljs-built_in">this</span>.<span class="hljs-variable">$route</span>);<br></code></pre></td></tr></table></figure><h2 id="六、方案优势与适用场景"><a href="#六、方案优势与适用场景" class="headerlink" title="六、方案优势与适用场景"></a>六、方案优势与适用场景</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li><p><strong>完整性</strong>：同时解决 “多标签页共存”“标题带参数”“切换不刷新” 三大核心需求；</p></li><li><p><strong>兼容性</strong>：完全适配 vue-element-admin 原有架构，无需修改框架核心代码；</p></li><li><p><strong>可扩展性</strong>：支持多参数组合（如设备名 + 城市 + 时间），只需扩展 <code>uniqueKey</code> 生成逻辑；</p></li><li><p><strong>性能优</strong>：基于 keep-alive 缓存，减少重复接口请求，提升用户体验。</p></li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li><p>同一页面模板加载不同参数数据（如设备详情、用户详情、订单详情）；</p></li><li><p>需同时打开多个同类页面（如同时查看多个设备的端口状态、多个用户的订单记录）；</p></li><li><p>要求切换页面保留操作状态（如表格分页、筛选条件、表单填写进度）。</p></li></ol><blockquote><p>（注：文档部分内容可能由 AI 生成）</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>华为/新华三ACL核心笔记</title>
    <link href="/2025/09/10/%E5%8D%8E%E4%B8%BA%E6%96%B0%E5%8D%8E%E4%B8%89ACL%E6%A0%B8%E5%BF%83%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/09/10/%E5%8D%8E%E4%B8%BA%E6%96%B0%E5%8D%8E%E4%B8%89ACL%E6%A0%B8%E5%BF%83%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="华为-新华三ACL核心笔记"><a href="#华为-新华三ACL核心笔记" class="headerlink" title="华为&#x2F;新华三ACL核心笔记"></a>华为&#x2F;新华三ACL核心笔记</h1><h3 id="一、ACL核心思想：网络的“门卫”"><a href="#一、ACL核心思想：网络的“门卫”" class="headerlink" title="一、ACL核心思想：网络的“门卫”"></a><strong>一、ACL核心思想：网络的“门卫”</strong></h3><p>华为&#x2F;新华三的ACL与思科&#x2F;锐捷核心思想完全一致，是网络流量的“门卫”。它根据预定义的规则，对数据包进行“你是谁？（源IP）”、“你要去哪？（目的IP）”、“你去干什么？（协议&#x2F;端口）”的盘问，并决定放行（<code>permit</code>）或阻拦（<code>deny</code>）。</p><ul><li><strong>工作原理</strong>：自上而下，逐条匹配，一旦匹配成功就立刻执行动作，并<strong>停止</strong>后续匹配。</li><li><strong>默认规则</strong>：所有ACL末尾都有一条看不见的 <code>rule deny ip source any destination any</code>，即“默认禁止所有”。</li></ul><hr><h3 id="二、通配符掩码（反掩码）：华为-华三的“模糊匹配”技巧"><a href="#二、通配符掩码（反掩码）：华为-华三的“模糊匹配”技巧" class="headerlink" title="二、通配符掩码（反掩码）：华为&#x2F;华三的“模糊匹配”技巧"></a><strong>二、通配符掩码（反掩码）：华为&#x2F;华三的“模糊匹配”技巧</strong></h3><p>华为&#x2F;新华三设备使用<strong>通配符掩码</strong>，其含义和功能与思科&#x2F;锐捷<strong>完全一致</strong>。<code>0</code>表示需匹配，<code>1</code>表示不关心。</p><table><thead><tr><th align="left">例子</th><th align="left">通配符掩码</th><th align="left">解释</th><th align="left">等效写法</th></tr></thead><tbody><tr><td align="left"><code>192.168.1.1 0</code></td><td align="left"><code>0</code></td><td align="left">匹配<strong>唯一</strong>的主机 <code>192.168.1.1</code></td><td align="left"><code>source 192.168.1.1 0</code></td></tr><tr><td align="left"><code>192.168.1.0 0.0.0.255</code></td><td align="left"><code>0.0.0.255</code></td><td align="left">匹配 <code>192.168.1.0</code> 网段的所有主机</td><td align="left"></td></tr><tr><td align="left"><code>0.0.0.0 255.255.255.255</code></td><td align="left"><code>255.255.255.255</code></td><td align="left">匹配<strong>任何</strong>IP地址</td><td align="left"><code>any</code></td></tr></tbody></table><hr><h3 id="三、ACL类型详解与实战配置"><a href="#三、ACL类型详解与实战配置" class="headerlink" title="三、ACL类型详解与实战配置"></a><strong>三、ACL类型详解与实战配置</strong></h3><p>华为&#x2F;新华三的ACL体系采用**“类型驱动”** 的严格分类，每种类型有固定的编号范围，功能划分非常清晰。</p><h4 id="1-基本ACL-Basic-ACL-2000-2999"><a href="#1-基本ACL-Basic-ACL-2000-2999" class="headerlink" title="1. 基本ACL (Basic ACL, 2000-2999)"></a><strong>1. 基本ACL (Basic ACL, 2000-2999)</strong></h4><p><strong>功能</strong>：等同于思科的<strong>标准ACL</strong>。仅根据<strong>源IP地址</strong>进行过滤。<br><strong>配置示例</strong>：允许内网（<code>192.168.1.0/24</code>）上网，禁止其他所有流量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 创建基本ACL 2000<br>acl number 2000<br> rule 5 permit <span class="hljs-built_in">source</span> 192.168.1.0 0.0.0.255  // rule 5为规则编号，可自定义<br>// 应用ACL：通常应用在离“目的地”近的接口入方向（inbound）<br>interface GigabitEthernet0/0/1<br> traffic-filter inbound acl 2000<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong>：控制粒度粗，放置在离源太近的地方可能会误伤其他合法流量。</p><h4 id="2-高级ACL-Advanced-ACL-3000-3999"><a href="#2-高级ACL-Advanced-ACL-3000-3999" class="headerlink" title="2. 高级ACL (Advanced ACL, 3000-3999)"></a><strong>2. 高级ACL (Advanced ACL, 3000-3999)</strong></h4><p><strong>功能</strong>：等同于思科的<strong>扩展ACL</strong>。可根据<strong>源IP、目的IP、协议、源端口、目的端口</strong>等进行精细过滤。<strong>是企业网络中的绝对主力。</strong><br><strong>配置示例</strong>：允许内网访问外部Web和DNS，但禁止访问外部MySQL数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 创建高级ACL 3000<br>acl number 3000<br> rule 5 permit tcp <span class="hljs-built_in">source</span> 192.168.1.0 0.0.0.255 destination any destination-port eq 80<br> rule 10 permit tcp <span class="hljs-built_in">source</span> 192.168.1.0 0.0.0.255 destination any destination-port eq 443<br> rule 15 permit udp <span class="hljs-built_in">source</span> any destination any destination-port eq 53<br> rule 20 deny tcp <span class="hljs-built_in">source</span> any destination any destination-port eq 3306<br> rule 25 permit ip <span class="hljs-built_in">source</span> any destination any // 显式允许其他所有流量<br>// 应用ACL：通常应用在离“源”近的接口出方向（outbound）<br>interface GigabitEthernet0/0/2<br> traffic-filter outbound acl 3000<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong>：规则顺序至关重要！<code>rule</code> 后的编号（如5,10,15）决定了匹配顺序，编号越小优先级越高。</p><h4 id="3-二层ACL-Layer-2-ACL-4000-4999"><a href="#3-二层ACL-Layer-2-ACL-4000-4999" class="headerlink" title="3. 二层ACL (Layer 2 ACL, 4000-4999)"></a><strong>3. 二层ACL (Layer 2 ACL, 4000-4999)</strong></h4><p><strong>功能</strong>：华为&#x2F;华三特色功能。基于<strong>源&#x2F;目的MAC地址、以太网协议类型</strong>等二层信息进行过滤。<br><strong>配置示例</strong>：阻止来自特定MAC地址 <code>aabb-ccdd-eeff</code> 的所有流量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 创建二层ACL 4000<br>acl number 4000<br> rule 5 deny dest-mac aabb-ccdd-eeff ffff-ffff-ffff // 目的MAC匹配<br> rule 10 permit<br>// 应用ACL<br>interface GigabitEthernet0/0/3<br> traffic-filter inbound acl 4000<br></code></pre></td></tr></table></figure><h4 id="4-用户自定义ACL-User-defined-ACL-5000-5999"><a href="#4-用户自定义ACL-User-defined-ACL-5000-5999" class="headerlink" title="4. 用户自定义ACL (User-defined ACL, 5000-5999)"></a><strong>4. 用户自定义ACL (User-defined ACL, 5000-5999)</strong></h4><p><strong>功能</strong>：通过报文头偏移量进行比特位级别的高级匹配，用于过滤特定格式的协议报文。<strong>属于专家级功能。</strong><br><strong>配置示例</strong>：匹配IP报文头协议字段为1（ICMP）的报文。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">acl number 5000<br> rule 5 permit ip-head 8 1 0x01 0xff // 匹配协议字段为1<br></code></pre></td></tr></table></figure><hr><h3 id="四、高级ACL（3000系列）的核心：五元组语法详解"><a href="#四、高级ACL（3000系列）的核心：五元组语法详解" class="headerlink" title="四、高级ACL（3000系列）的核心：五元组语法详解"></a><strong>四、高级ACL（3000系列）的核心：五元组语法详解</strong></h3><p>“五元组”是高级ACL进行精细流量控制的基石。华为的配置语法更显式，要求明确写出 <code>source</code>、<code>destination</code>、<code>destination-port</code> 等关键字。</p><h4 id="通用命令语法格式"><a href="#通用命令语法格式" class="headerlink" title="通用命令语法格式"></a><strong>通用命令语法格式</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rule [rule-id] permit/deny [protocol] <span class="hljs-built_in">source</span> &#123;src-addr wildcard&#125; [src-port op port] destination &#123;dest-addr wildcard&#125; [dest-port op port]<br></code></pre></td></tr></table></figure><h4 id="语法元素拆解与示例"><a href="#语法元素拆解与示例" class="headerlink" title="语法元素拆解与示例"></a><strong>语法元素拆解与示例</strong></h4><table><thead><tr><th align="left">语法元素</th><th align="left">说明与可选值</th><th align="left">华为&#x2F;华三配置示例</th></tr></thead><tbody><tr><td align="left"><strong><code>[protocol]</code></strong></td><td align="left"><code>ip</code>, <code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>gre</code></td><td align="left"><code>permit tcp ...</code></td></tr><tr><td align="left"><strong><code>source &#123;src-addr wildcard&#125;</code></strong></td><td align="left">定义源IP地址范围，必须带 <code>source</code> 关键字</td><td align="left"><code>source 192.168.1.0 0.0.0.255</code></td></tr><tr><td align="left"><strong><code>[src-port op port]</code></strong></td><td align="left"><strong>可选</strong>。定义源端口，运算符：<code>eq</code>, <code>gt</code>, <code>lt</code>, <code>range</code></td><td align="left"><code>source-port eq 80</code></td></tr><tr><td align="left"><strong><code>destination &#123;dest-addr wildcard&#125;</code></strong></td><td align="left">定义目的IP地址范围，必须带 <code>destination</code> 关键字</td><td align="left"><code>destination any</code></td></tr><tr><td align="left"><strong><code>[dest-port op port]</code></strong></td><td align="left"><strong>可选</strong>。定义目的端口，运算符同上。</td><td align="left"><code>destination-port eq 443</code></td></tr></tbody></table><h4 id="综合配置示例与场景解读"><a href="#综合配置示例与场景解读" class="headerlink" title="综合配置示例与场景解读"></a><strong>综合配置示例与场景解读</strong></h4><p><strong>场景1：允许内网用户访问外部所有Web服务（HTTP&#x2F;HTTPS）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">acl number 3001<br> rule 5 permit tcp <span class="hljs-built_in">source</span> 192.168.1.0 0.0.0.255 destination any destination-port eq 80<br> rule 10 permit tcp <span class="hljs-built_in">source</span> 192.168.1.0 0.0.0.255 destination any destination-port eq 443<br></code></pre></td></tr></table></figure><p><strong>场景2：允许来自任何地方的DNS查询请求（UDP 53）到达DNS服务器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">acl number 3002<br> rule 5 permit udp <span class="hljs-built_in">source</span> any destination 192.168.1.53 0 destination-port eq 53<br></code></pre></td></tr></table></figure><p><strong>场景3：允许管理员IP（172.16.1.100）远程管理所有服务器（10.0.0.0&#x2F;24网段）的SSH服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">acl number 3003<br> rule 5 permit tcp <span class="hljs-built_in">source</span> 172.16.1.100 0 destination 10.0.0.0 0.0.0.255 destination-port eq 22<br></code></pre></td></tr></table></figure><p><strong>场景4：使用 <code>established</code> 关键字允许外部Web服务器返回的流量（TCP连接应答包）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">acl number 3004<br> rule 5 permit tcp <span class="hljs-built_in">source</span> any destination 192.168.1.0 0.0.0.255 tcp-established<br></code></pre></td></tr></table></figure><p><em>注意：华为&#x2F;华三使用 <code>tcp-established</code> 关键字来实现与思科 <code>established</code> 相同的功能。</em></p><hr><h3 id="五、总结与最佳实践"><a href="#五、总结与最佳实践" class="headerlink" title="五、总结与最佳实践"></a><strong>五、总结与最佳实践</strong></h3><table><thead><tr><th align="left">特性</th><th align="left"><strong>基本ACL (2000-2999)</strong></th><th align="left"><strong>高级ACL (3000-3999)</strong></th><th align="left"><strong>二层ACL (4000-4999)</strong></th></tr></thead><tbody><tr><td align="left"><strong>匹配依据</strong></td><td align="left">仅源IP</td><td align="left">五元组（源IP、目的IP、协议、端口）</td><td align="left">源&#x2F;目的MAC地址</td></tr><tr><td align="left"><strong>控制粒度</strong></td><td align="left">粗</td><td align="left"><strong>细（绝对主力）</strong></td><td align="left">特殊</td></tr><tr><td align="left"><strong>规则管理</strong></td><td align="left"><strong>优（规则有序号，可编辑）</strong></td><td align="left"><strong>优（规则有序号，可编辑）</strong></td><td align="left"><strong>优（规则有序号，可编辑）</strong></td></tr><tr><td align="left"><strong>企业应用</strong></td><td align="left">较少</td><td align="left"><strong>强烈推荐</strong></td><td align="left">特定场景</td></tr></tbody></table><p><strong>黄金法则</strong>：</p><ol><li><strong>最小权限</strong>：只放行必要的流量。</li><li><strong>精确优先</strong>：将最具体的规则放在前面（使用较小的 <code>rule-id</code>）。</li><li><strong>靠近源&#x2F;目的</strong>：基本ACL近目的，高级ACL近源。</li><li><strong>类型选择</strong>：根据需求选择正确的ACL类型，<strong>高级ACL 3000系列</strong>适用绝大部分场景。</li><li><strong>先规划后配置</strong>：在文本编辑器里规划好 <code>rule-id</code> 和规则，再粘贴到设备。</li></ol><hr><h3 id="六、配置Checklist-常见错误"><a href="#六、配置Checklist-常见错误" class="headerlink" title="六、配置Checklist &amp; 常见错误"></a><strong>六、配置Checklist &amp; 常见错误</strong></h3><p><strong>配置前 Checklist：</strong></p><ul><li><input disabled="" type="checkbox"> 需求是否明确？（允许什么？拒绝什么？）</li><li><input disabled="" type="checkbox"> 是否选择了正确的ACL类型？（基本、高级还是二层？）</li><li><input disabled="" type="checkbox"> <code>rule-id</code> 的顺序是否最优？（精确规则ID小）</li><li><input disabled="" type="checkbox"> 是否显式添加了 <code>rule deny ip source any destination any</code>？</li><li><input disabled="" type="checkbox"> 通配符掩码计算是否正确？</li><li><input disabled="" type="checkbox"> ACL应用的方向（<code>inbound</code>&#x2F;<code>outbound</code>）和接口是否正确？</li></ul><p><strong>常见错误：</strong></p><ul><li><strong>错误1</strong>：在基本ACL（2000）中尝试配置目的端口或协议。</li><li><strong>错误2</strong>：混淆接口应用方向，<code>inbound</code> 和 <code>outbound</code> 应用错误。</li><li><strong>错误3</strong>：忘记了ACL末尾的隐式拒绝所有，导致预期外的流量被拒绝。</li><li><strong>错误4</strong>：错误理解了通配符掩码，匹配了错误的IP范围。</li><li><strong>错误5</strong>：在配置中遗漏了关键字，如 <code>source</code>, <code>destination</code>, <code>destination-port</code>。华为语法要求更显式。</li></ul>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>思科/锐捷ACL核心笔记</title>
    <link href="/2025/09/10/%E6%80%9D%E7%A7%91%E9%94%90%E6%8D%B7ACL%E6%A0%B8%E5%BF%83%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/09/10/%E6%80%9D%E7%A7%91%E9%94%90%E6%8D%B7ACL%E6%A0%B8%E5%BF%83%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="思科-锐捷ACL核心笔记"><a href="#思科-锐捷ACL核心笔记" class="headerlink" title="思科&#x2F;锐捷ACL核心笔记"></a>思科&#x2F;锐捷ACL核心笔记</h1><h3 id="一、ACL核心思想：网络的“门卫”"><a href="#一、ACL核心思想：网络的“门卫”" class="headerlink" title="一、ACL核心思想：网络的“门卫”"></a><strong>一、ACL核心思想：网络的“门卫”</strong></h3><p>想象ACL是公司大门的保安，他手持一份“规则清单”，对每一个数据包进行盘问：“你是谁？（源IP）”、“你要去哪？（目的IP）”、“你去干什么？（协议&#x2F;端口）”。根据清单上的规则，决定是放行（<code>permit</code>）还是阻拦（<code>deny</code>）。</p><ul><li><strong>工作原理</strong>：自上而下，逐条匹配，一旦匹配成功就立刻执行动作，并<strong>停止</strong>后续匹配。</li><li><strong>默认规则</strong>：所有ACL末尾都有一条看不见的 <code>deny ip any any</code>，即“默认禁止所有”。</li></ul><hr><h3 id="二、通配符掩码：保安的“模糊匹配”技巧"><a href="#二、通配符掩码：保安的“模糊匹配”技巧" class="headerlink" title="二、通配符掩码：保安的“模糊匹配”技巧"></a><strong>二、通配符掩码：保安的“模糊匹配”技巧</strong></h3><p>通配符掩码（Wildcard Mask）决定IP地址的哪些位必须精确匹配（<code>0</code>），哪些位可以忽略不管（<code>1</code>）。</p><table><thead><tr><th align="left">例子</th><th align="left">通配符掩码</th><th align="left">解释</th><th align="left">等效写法</th></tr></thead><tbody><tr><td align="left"><code>192.168.1.1 0.0.0.0</code></td><td align="left"><code>0.0.0.0</code></td><td align="left">匹配<strong>唯一</strong>的主机 <code>192.168.1.1</code></td><td align="left"><code>host 192.168.1.1</code></td></tr><tr><td align="left"><code>192.168.1.0 0.0.0.255</code></td><td align="left"><code>0.0.0.255</code></td><td align="left">匹配 <code>192.168.1.0</code> 网段的所有主机（<code>192.168.1.0</code> - <code>192.168.1.255</code>）</td><td align="left"></td></tr><tr><td align="left"><code>0.0.0.0 255.255.255.255</code></td><td align="left"><code>255.255.255.255</code></td><td align="left">匹配<strong>任何</strong>IP地址</td><td align="left"><code>any</code></td></tr></tbody></table><hr><h3 id="三、ACL类型详解与实战配置"><a href="#三、ACL类型详解与实战配置" class="headerlink" title="三、ACL类型详解与实战配置"></a><strong>三、ACL类型详解与实战配置</strong></h3><h3 id="1-标准ACL：只看出身（源IP）"><a href="#1-标准ACL：只看出身（源IP）" class="headerlink" title="1. 标准ACL：只看出身（源IP）"></a><strong>1. 标准ACL：只看出身（源IP）</strong></h3><p><strong>功能</strong>：只检查数据包的<strong>源IP地址</strong>。控制粗粒度，相当于保安只问你“是哪个公司的？”。<br><strong>配置示例</strong>：允许内网（<code>192.168.1.0/24</code>）上网，禁止其他所有流量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">! 创建标准编号ACL 10<br>access-list 10 permit 192.168.1.0 0.0.0.255<br>! 应用ACL：通常应用在离“目的地”近的接口入方向（INBOUND）<br>interface GigabitEthernet0/1<br> ip access-group 10 <span class="hljs-keyword">in</span><br></code></pre></td></tr></table></figure><p><strong>注意事项</strong>：因其控制粗，放在离源太近的地方可能会误伤其他合法流量。</p><h3 id="2-扩展ACL：盘问一切（五元组）"><a href="#2-扩展ACL：盘问一切（五元组）" class="headerlink" title="2. 扩展ACL：盘问一切（五元组）"></a><strong>2. 扩展ACL：盘问一切（五元组）</strong></h3><p><strong>功能</strong>：检查<strong>源IP、目的IP、协议、源端口、目的端口</strong>。控制细粒度，保安会详细盘问“你是谁？去哪？干什么？”。<br><strong>配置示例</strong>：允许内网访问外部Web和DNS，但禁止访问外部MySQL数据库，并允许Ping。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">! 创建扩展编号ACL 110<br>access-list 110 permit tcp 192.168.1.0 0.0.0.255 any eq 80<br>access-list 110 permit tcp 192.168.1.0 0.0.0.255 any eq 443<br>access-list 110 permit udp any any eq 53<br>access-list 110 deny tcp any any eq 3306<br>access-list 110 permit icmp any any<br>access-list 110 deny ip any any ! 显式拒绝所有，便于查看计数器<br>! 应用ACL：通常应用在离“源”近的接口出方向（OUTBOUND）<br>interface GigabitEthernet0/0<br> ip access-group 110 out<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong>：规则顺序至关重要！精确的规则要放在上面，宽泛的规则（如<code>permit ip any any</code>）放在下面。</p><h3 id="3-命名ACL（企业级首选）：可编辑的智能清单"><a href="#3-命名ACL（企业级首选）：可编辑的智能清单" class="headerlink" title="3. 命名ACL（企业级首选）：可编辑的智能清单"></a><strong>3. 命名ACL（企业级首选）：可编辑的智能清单</strong></h3><p><strong>功能</strong>：标准&#x2F;扩展ACL的增强版，用名称而非编号标识。<strong>核心优势：可以自由插入、删除单条规则</strong>。<strong>创建时必须声明类型：<code>standard</code> 或 <code>extended</code></strong>。</p><h4 id="A-标准命名ACL-ip-access-list-standard"><a href="#A-标准命名ACL-ip-access-list-standard" class="headerlink" title="A. 标准命名ACL (ip access-list standard &lt;NAME&gt;)"></a><strong>A. 标准命名ACL (<code>ip access-list standard &lt;NAME&gt;</code>)</strong></h4><p><strong>配置示例</strong>：创建一个名为 <code>RESTRICT-ACCESS</code> 的ACL，阻止特定网段 <code>192.168.5.0/24</code>，允许其他所有。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip access-list standard RESTRICT-ACCESS<br> deny 192.168.5.0 0.0.0.255<br> permit any<br>interface GigabitEthernet0/1<br> ip access-group RESTRICT-ACCESS <span class="hljs-keyword">in</span><br></code></pre></td></tr></table></figure><h4 id="B-扩展命名ACL-ip-access-list-extended"><a href="#B-扩展命名ACL-ip-access-list-extended" class="headerlink" title="B. 扩展命名ACL (ip access-list extended &lt;NAME&gt;)"></a><strong>B. 扩展命名ACL (<code>ip access-list extended &lt;NAME&gt;</code>)</strong></h4><p><strong>配置示例</strong>：创建一个名为 <code>WEB-SERVER-POLICY</code> 的ACL。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip access-list extended WEB-SERVER-POLICY<br> remark --- 允许公众访问Web服务 ---<br> 10 permit tcp any host 203.0.113.10 eq 80<br> 20 permit tcp any host 203.0.113.10 eq 443<br> remark --- 允许IT部门进行SSH管理 ---<br> 30 permit tcp 172.16.1.0 0.0.0.255 host 203.0.113.10 eq 22<br> remark --- 显式拒绝并记录其他所有访问 ---<br> 40 deny ip any host 203.0.113.10 <span class="hljs-built_in">log</span><br>interface GigabitEthernet0/0<br> ip access-group WEB-SERVER-POLICY <span class="hljs-keyword">in</span><br></code></pre></td></tr></table></figure><p><strong>编辑操作演示</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip access-list extended WEB-SERVER-POLICY<br> 25 permit tcp any host 203.0.113.10 eq 25 ! 插入规则<br> no 30 ! 删除规则<br></code></pre></td></tr></table></figure><p><strong>注意事项</strong>：<code>ip access-list extended 2001</code> 中的 <code>2001</code> 是<strong>名称</strong>，不是编号！</p><hr><h3 id="四、扩展ACL-Extended-ACL-的核心：五元组语法详解"><a href="#四、扩展ACL-Extended-ACL-的核心：五元组语法详解" class="headerlink" title="四、扩展ACL(Extended ACL)的核心：五元组语法详解"></a><strong>四、扩展ACL(Extended ACL)的核心：五元组语法详解</strong></h3><p>“五元组”是扩展ACL进行精细流量控制的基石，它定义了匹配一个数据包所需的五个关键元素。</p><p><strong>五元组 (5-tuple) 指的是：</strong></p><ol><li><strong>源IP地址 (Source IP Address)</strong></li><li><strong>目的IP地址 (Destination IP Address)</strong></li><li><strong>协议 (Protocol)</strong></li><li><strong>源端口 (Source Port)</strong></li><li><strong>目的端口 (Destination Port)</strong></li></ol><h4 id="通用命令语法格式"><a href="#通用命令语法格式" class="headerlink" title="通用命令语法格式"></a><strong>通用命令语法格式</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">access-list &lt;100-199&gt; permit/deny &lt;协议&gt; &lt;源IP&gt; &lt;源通配符&gt; [运算符 源端口] &lt;目的IP&gt; &lt;目通配符&gt; [运算符 目的端口]<br></code></pre></td></tr></table></figure><h4 id="语法元素拆解与示例"><a href="#语法元素拆解与示例" class="headerlink" title="语法元素拆解与示例"></a><strong>语法元素拆解与示例</strong></h4><table><thead><tr><th align="left">语法元素</th><th align="left">说明与可选值</th><th align="left">配置示例</th></tr></thead><tbody><tr><td align="left"><strong><code>&lt;协议&gt;</code></strong></td><td align="left"><code>ip</code>, <code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>gre</code></td><td align="left"><code>permit tcp ...</code></td></tr><tr><td align="left"><strong><code>&lt;源IP&gt; &lt;源通配符&gt;</code></strong></td><td align="left">定义源IP地址范围</td><td align="left"><code>any</code>, <code>host 192.168.1.1</code></td></tr><tr><td align="left"><strong><code>[运算符 源端口]</code></strong></td><td align="left"><strong>可选</strong>。<code>eq</code>, <code>gt</code>, <code>lt</code>, <code>range</code></td><td align="left"><code>eq 80</code>, <code>range 5000 5010</code></td></tr><tr><td align="left"><strong><code>&lt;目的IP&gt; &lt;目通配符&gt;</code></strong></td><td align="left">定义目的IP地址范围</td><td align="left"><code>any</code>, <code>host 10.0.0.10</code></td></tr><tr><td align="left"><strong><code>[运算符 目的端口]</code></strong></td><td align="left"><strong>可选</strong>。定义目的端口。运算符同上。</td><td align="left"><code>eq 443</code>, <code>eq www</code></td></tr></tbody></table><h4 id="综合配置示例与场景解读"><a href="#综合配置示例与场景解读" class="headerlink" title="综合配置示例与场景解读"></a><strong>综合配置示例与场景解读</strong></h4><p><strong>场景1：允许内网用户访问外部所有Web服务（HTTP&#x2F;HTTPS）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">access-list 110 permit tcp 192.168.1.0 0.0.0.255 any eq 80<br>access-list 110 permit tcp 192.168.1.0 0.0.0.255 any eq 443<br></code></pre></td></tr></table></figure><p><strong>场景2：允许来自任何地方的DNS查询请求（UDP 53）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">access-list 111 permit udp any host 192.168.1.53 eq 53<br></code></pre></td></tr></table></figure><p><strong>场景3：在命名ACL中，允许管理员IP远程管理所有服务器的SSH和RDP服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip access-list extended ADMIN-ACCESS<br> permit tcp host 172.16.1.100 10.0.0.0 0.0.0.255 eq 22<br> permit tcp host 172.16.1.100 10.0.0.0 0.0.0.255 eq 3389<br></code></pre></td></tr></table></figure><p><strong>场景4：使用 <code>established</code> 关键字允许外部Web服务器返回的流量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">access-list 112 permit tcp any 192.168.1.0 0.0.0.255 established<br></code></pre></td></tr></table></figure><hr><h3 id="五、总结与最佳实践"><a href="#五、总结与最佳实践" class="headerlink" title="五、总结与最佳实践"></a><strong>五、总结与最佳实践</strong></h3><table><thead><tr><th align="left">特性</th><th align="left"><strong>标准ACL</strong></th><th align="left"><strong>扩展ACL</strong></th><th align="left"><strong>标准命名ACL</strong></th><th align="left"><strong>扩展命名ACL</strong></th></tr></thead><tbody><tr><td align="left"><strong>匹配依据</strong></td><td align="left">仅源IP</td><td align="left">五元组</td><td align="left">仅源IP</td><td align="left">五元组</td></tr><tr><td align="left"><strong>控制粒度</strong></td><td align="left">粗</td><td align="left">细</td><td align="left">粗</td><td align="left">细</td></tr><tr><td align="left"><strong>可编辑性</strong></td><td align="left">差</td><td align="left">差</td><td align="left"><strong>优</strong></td><td align="left"><strong>优</strong></td></tr><tr><td align="left"><strong>可读性</strong></td><td align="left">差</td><td align="left">差</td><td align="left"><strong>优</strong></td><td align="left"><strong>优</strong></td></tr><tr><td align="left"><strong>企业应用</strong></td><td align="left">少</td><td align="left">较少</td><td align="left">一般</td><td align="left"><strong>强烈推荐</strong></td></tr></tbody></table><p><strong>黄金法则</strong>：</p><ol><li><strong>最小权限</strong>：只放行必要的流量。</li><li><strong>精确优先</strong>：将最具体的规则放在顶部。</li><li><strong>靠近源&#x2F;目的</strong>：标准ACL近目的，扩展ACL近源。</li><li><strong>命名ACL</strong>：生产环境一律使用命名ACL，其中<strong>扩展命名ACL</strong>是绝对主力。</li><li><strong>先规划后配置</strong>：在文本编辑器里写好规则，再粘贴到设备。</li></ol><hr><h3 id="六、配置Checklist-常见错误"><a href="#六、配置Checklist-常见错误" class="headerlink" title="六、配置Checklist &amp; 常见错误"></a><strong>六、配置Checklist &amp; 常见错误</strong></h3><p><strong>配置前 Checklist：</strong></p><ul><li><input disabled="" type="checkbox"> 需求是否明确？（允许什么？拒绝什么？）</li><li><input disabled="" type="checkbox"> 是否选择了正确的ACL类型？（标准还是扩展？）</li><li><input disabled="" type="checkbox"> 规则顺序是否最优？（精确规则在上）</li><li><input disabled="" type="checkbox"> 是否显式添加了 <code>deny ip any any</code> 并记录了日志？</li><li><input disabled="" type="checkbox"> 通配符掩码计算是否正确？</li><li><input disabled="" type="checkbox"> ACL应用的方向（in&#x2F;out）和接口是否正确？</li></ul><p><strong>常见错误：</strong></p><ul><li><strong>错误1</strong>：为 <code>icmp</code> 或 <code>ip</code> 协议配置了端口。</li><li><strong>错误2</strong>：将标准ACL放置在离源太近的位置，误伤其他流量。</li><li><strong>错误3</strong>：忘记了ACL末尾的隐式拒绝所有，导致预期外的流量被拒绝。</li><li><strong>错误4</strong>：错误理解了通配符掩码，匹配了错误的IP范围。</li><li><strong>错误5</strong>：在编号ACL中尝试使用 <code>no</code> 命令删除单条规则，导致整个ACL被删除。</li></ul>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OSPF协议</title>
    <link href="/2025/08/28/OSPF%E5%8D%8F%E8%AE%AE/"/>
    <url>/2025/08/28/OSPF%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="OSPF协议核心技术笔记"><a href="#OSPF协议核心技术笔记" class="headerlink" title="OSPF协议核心技术笔记"></a>OSPF协议核心技术笔记</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>OSPF（Open Shortest Path First）是一种基于链路状态的内部网关路由协议，它通过构建全网统一的拓扑图并独立计算最优路径来实现高效的路由选择。</p><h2 id="完整工作流程"><a href="#完整工作流程" class="headerlink" title="完整工作流程"></a>完整工作流程</h2><h3 id="第一阶段：邻居发现与关系建立"><a href="#第一阶段：邻居发现与关系建立" class="headerlink" title="第一阶段：邻居发现与关系建立"></a>第一阶段：邻居发现与关系建立</h3><p><strong>核心机制：Hello协议</strong></p><ul><li>每台OSPF路由器定期向组播地址224.0.0.5发送Hello包</li><li>Hello包包含Router ID、Area ID、认证信息等参数</li><li>参数匹配的路由器成为邻居（2-Way状态）</li></ul><p><strong>工作机制</strong>：就像会议开始前，与会者互相打招呼确认身份和参会资格</p><h3 id="第二阶段：拓扑信息交换"><a href="#第二阶段：拓扑信息交换" class="headerlink" title="第二阶段：拓扑信息交换"></a>第二阶段：拓扑信息交换</h3><p><strong>在广播网络中：</strong></p><ol><li><p><strong>DR&#x2F;BDR选举</strong>（非抢占式）：</p><ul><li>比较接口优先级（默认1，0表示不参与）</li><li>优先级相同则比较Router ID</li><li>选举出指定路由器(DR)和备份指定路由器(BDR)</li></ul></li><li><p><strong>邻接关系建立</strong>：</p><ul><li>普通路由器(DROther)只与DR&#x2F;BDR建立邻接关系</li><li>通过DBD、LSR、LSU、LSAck包交换链路状态信息</li></ul></li></ol><p><strong>工作机制</strong>：大型会议选举出主持人和副主持人，普通参会者只需向主持人汇报，由主持人统一发布信息</p><h3 id="第三阶段：数据库同步"><a href="#第三阶段：数据库同步" class="headerlink" title="第三阶段：数据库同步"></a>第三阶段：数据库同步</h3><p><strong>LSA交换过程：</strong></p><ol><li>交换DBD包（数据库描述） - 相当于目录</li><li>请求缺失的LSA（LSR）</li><li>发送完整的LSA（LSU）</li><li>确认接收（LSAck）</li></ol><p><strong>关键概念</strong>：</p><ul><li><strong>LSA</strong>：链路状态通告，描述网络拓扑的基本单元</li><li><strong>LSDB</strong>：链路状态数据库，存储所有LSA构成完整拓扑图</li></ul><p><strong>工作机制</strong>：参会者通过主持人交换会议资料，确保每个人都拥有完整的会议材料</p><h3 id="第四阶段：路由计算"><a href="#第四阶段：路由计算" class="headerlink" title="第四阶段：路由计算"></a>第四阶段：路由计算</h3><p><strong>SPF算法执行：</strong></p><ol><li>每台路由器以自己为根节点</li><li>根据LSDB构建拓扑图</li><li>运行Dijkstra算法计算最短路径树</li><li>将最优路径装入路由表</li></ol><p><strong>Cost计算</strong>：参考带宽&#x2F;接口带宽（默认参考带宽100Mbps）</p><p><strong>工作机制</strong>：每个参会者根据会议材料独立规划自己的最佳行动方案</p><h3 id="第五阶段：维护与更新"><a href="#第五阶段：维护与更新" class="headerlink" title="第五阶段：维护与更新"></a>第五阶段：维护与更新</h3><p><strong>触发更新机制：</strong></p><ul><li>检测到拓扑变化立即生成新LSA</li><li>通过DR向全网泛洪更新（224.0.0.5）</li><li>每台路由器确认接收（LSAck）</li><li>收到更新的路由器重新运行SPF算法</li></ul><p><strong>工作机制</strong>：任何情况变化都通过主持人立即通报全体，每个人相应调整自己的计划</p><h2 id="多区域设计"><a href="#多区域设计" class="headerlink" title="多区域设计"></a>多区域设计</h2><h3 id="为什么需要分区域？"><a href="#为什么需要分区域？" class="headerlink" title="为什么需要分区域？"></a>为什么需要分区域？</h3><ul><li>减少LSDB大小和SPF计算范围</li><li>限制拓扑变化的影响范围</li><li>提高网络的可扩展性和稳定性</li></ul><h3 id="区域结构"><a href="#区域结构" class="headerlink" title="区域结构"></a>区域结构</h3><p><strong>骨干区域（Area 0）</strong>：</p><ul><li>所有流量的中枢</li><li>必须保持连续</li><li>所有非骨干区域必须直接连接</li></ul><p><strong>非骨干区域</strong>：</p><ul><li>标准区域、末节区域(Stub)</li><li>完全末节区域(Totally Stubby)</li><li>NSSA区域</li></ul><h3 id="区域间路由"><a href="#区域间路由" class="headerlink" title="区域间路由"></a>区域间路由</h3><p><strong>关键角色</strong>：</p><ul><li><strong>ABR</strong>：区域边界路由器，连接多个区域</li><li><strong>ASBR</strong>：自治系统边界路由器，连接外部网络</li></ul><p><strong>LSA类型作用</strong>：</p><ul><li>Type 1&#x2F;2：区域内拓扑细节</li><li>Type 3：区域间路由汇总（ABR产生）</li><li>Type 4&#x2F;5：外部路由信息（ASBR产生）</li></ul><p><strong>工作机制</strong>：将大型组织分为多个部门，每个部门内部处理自己的事务，部门间通过经理(ABR)进行协调，与外部组织的交流由专门的对外接口(ASBR)负责</p><h2 id="核心机制深度解析"><a href="#核心机制深度解析" class="headerlink" title="核心机制深度解析"></a>核心机制深度解析</h2><h3 id="1-为什么需要DR-BDR？"><a href="#1-为什么需要DR-BDR？" class="headerlink" title="1. 为什么需要DR&#x2F;BDR？"></a>1. 为什么需要DR&#x2F;BDR？</h3><p><strong>问题根源</strong>：解决多路访问网络中的<strong>N²问题</strong></p><ul><li>如果没有DR，N台路由器会形成<code>N(N-1)/2</code>个邻接关系</li><li>导致LSA被重复发送多次，浪费带宽资源</li><li>难以保证所有路由器的LSDB同步一致</li></ul><p><strong>工作机制</strong>：如果没有发言人，任何一个队员有消息都要对所有人喊一遍，现场会充满重复的噪音和混乱，无法保证信息一致性</p><h3 id="2-为什么通过DR广播，而不是DROther直接广播？"><a href="#2-为什么通过DR广播，而不是DROther直接广播？" class="headerlink" title="2. 为什么通过DR广播，而不是DROther直接广播？"></a>2. 为什么通过DR广播，而不是DROther直接广播？</h3><p><strong>可靠性设计</strong>：</p><ul><li>DR作为<strong>单一分发源</strong>，确保所有路由器从同一个权威来源接收信息</li><li>确认机制简单明确：只需向DR确认接收</li><li>避免复杂的全网确认机制，减少网络开销</li></ul><p><strong>工作机制</strong>：记者直接对全场喊话，无法知道谁没听清。通过发言人进行官方广播，流程清晰，来源权威，并可逐个确认</p><h3 id="3-如何保证所有路由器知道最新变化？"><a href="#3-如何保证所有路由器知道最新变化？" class="headerlink" title="3. 如何保证所有路由器知道最新变化？"></a>3. 如何保证所有路由器知道最新变化？</h3><p><strong>可靠的泛洪机制</strong>：</p><ul><li><strong>定向发送</strong>：DROther → DR (使用<code>224.0.0.6</code>)</li><li><strong>权威广播</strong>：DR → All (使用<code>224.0.0.5</code>)</li><li><strong>逐一确认</strong>：对每个LSU包都必须回复LSAck进行确认</li><li><strong>冗余备份</strong>：BDR实时同步，防止DR单点故障导致信息丢失</li></ul><p><strong>工作机制</strong>：消息传递路径固定且可靠（记者→发言人→全体），副发言人全程备份，确保信息分发过程万无一失</p><h2 id="协议特性总结"><a href="#协议特性总结" class="headerlink" title="协议特性总结"></a>协议特性总结</h2><h3 id="核心优势"><a href="#核心优势" class="headerlink" title="核心优势"></a>核心优势</h3><ol><li><strong>快速收敛</strong>：触发更新机制确保及时响应网络变化</li><li><strong>无环路由</strong>：基于统一的拓扑图计算，避免路由环路</li><li><strong>可扩展性</strong>：分层区域设计支持大规模网络部署</li><li><strong>可靠性</strong>：完善的确认和重传机制保证信息可靠传递</li></ol><h3 id="设计哲学"><a href="#设计哲学" class="headerlink" title="设计哲学"></a>设计哲学</h3><p><strong>用中心化的信息调度（DR&#x2F;BDR）保障分布式计算系统（每台路由器独立计算）的高效稳定运行，再通过分层区域设计实现大规模扩展。</strong></p><p>这种设计确保了OSPF能够适应从中小型企业网络到大型运营商网络的各种规模环境，在保证路由准确性的同时提供优秀的性能和可靠性。</p>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>STP生成树协议</title>
    <link href="/2025/08/25/STP%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE/"/>
    <url>/2025/08/25/STP%E7%94%9F%E6%88%90%E6%A0%91%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="STP生成树协议"><a href="#STP生成树协议" class="headerlink" title="STP生成树协议"></a><strong>STP生成树协议</strong></h1><h2 id="一、核心概念与要解决的问题"><a href="#一、核心概念与要解决的问题" class="headerlink" title="一、核心概念与要解决的问题"></a><strong>一、核心概念与要解决的问题</strong></h2><h3 id="1-协议定位与核心矛盾"><a href="#1-协议定位与核心矛盾" class="headerlink" title="1. 协议定位与核心矛盾"></a><strong>1. 协议定位与核心矛盾</strong></h3><ul><li><strong>全称</strong>：Spanning Tree Protocol</li><li><strong>本质</strong>：二层链路管理协议，通过<strong>逻辑阻塞</strong>冗余链路，构建 <strong>“无环且有冗余”</strong> 的二层网络拓扑。</li><li><strong>解决的核心问题</strong>：<ol><li><strong>广播风暴</strong>：消除二层环路导致的数据包无限循环转发。</li><li><strong>MAC表震荡</strong>：避免因环路引发的MAC地址表频繁刷新，导致设备无法正常转发。</li><li><strong>冗余备份</strong>：在主链路发生故障时，备份链路能够<strong>自动切换</strong>，保障网络高可用性。</li></ol></li></ul><h2 id="二、STP-802-1D-详细工作流程（选举过程）"><a href="#二、STP-802-1D-详细工作流程（选举过程）" class="headerlink" title="二、STP (802.1D) 详细工作流程（选举过程）"></a><strong>二、STP (802.1D) 详细工作流程（选举过程）</strong></h2><p>STP通过严格的<strong>选举过程</strong>构建无环拓扑，这个过程就像是为一支军队建立指挥体系：</p><h3 id="Step-1-选举根桥-Root-Bridge-最高指挥官"><a href="#Step-1-选举根桥-Root-Bridge-最高指挥官" class="headerlink" title="Step 1: 选举根桥 (Root Bridge) - 最高指挥官"></a><strong>Step 1: 选举根桥 (Root Bridge) - 最高指挥官</strong></h3><ul><li><strong>规则</strong>：所有交换机通过交换BPDU报文，比较<strong>桥ID (BID)</strong>，值最小的成为根桥。</li><li><strong>选举细节</strong>：<ul><li><strong>桥ID &#x3D; 桥优先级 (2字节) + MAC地址 (6字节)</strong></li><li>先比较优先级（默认为32768），数值小者优。</li><li>若优先级相同，则比较MAC地址，MAC地址小者优。</li></ul></li><li><strong>为什么</strong>：根桥是生成树的根，是所有路径计算的<strong>唯一参考点</strong>，确保网络中没有循环路径。</li></ul><h3 id="Step-2-选举根端口-Root-Port-每台交换机的“回家”之路"><a href="#Step-2-选举根端口-Root-Port-每台交换机的“回家”之路" class="headerlink" title="Step 2: 选举根端口 (Root Port) - 每台交换机的“回家”之路"></a><strong>Step 2: 选举根端口 (Root Port) - 每台交换机的“回家”之路</strong></h3><ul><li><strong>定义</strong>：在每台<strong>非根桥</strong>交换机上，有且只有一个根端口。这是到达根桥<strong>路径开销最小</strong>的端口。</li><li><strong>选举规则 (按顺序比较，直到决出胜负)</strong>：<ol><li><strong>最低的根路径开销</strong>：计算到达根桥的累计路径开销，值最小的端口胜出。</li><li><strong>最小的发送者桥ID</strong>：如果路径开销相同，则选择接收到BPDU报文中，发送方交换机BID最小的那个端口。</li><li><strong>最小的发送者端口ID</strong>：如果发送方BID也相同，则选择BPDU报文中<strong>发送方端口ID</strong>最小的那个端口。</li><li><strong>最小的本机端口ID</strong>：如果以上全部相同（极其罕见），则最终比较本机自己的端口ID，小者胜出。</li></ol></li><li><strong>核心功能：数据“上传”</strong>。根端口负责将本地的数据流量 <strong>“向上”发送往根桥方向</strong>。</li></ul><h3 id="Step-3-选举指定端口-Designated-Port-链路上的“权威出口”"><a href="#Step-3-选举指定端口-Designated-Port-链路上的“权威出口”" class="headerlink" title="Step 3: 选举指定端口 (Designated Port) - 链路上的“权威出口”"></a><strong>Step 3: 选举指定端口 (Designated Port) - 链路上的“权威出口”</strong></h3><ul><li><strong>定义</strong>：在<strong>每一个网络 segment（链路）</strong> 上，有且只有一个指定端口。这是该链路上负责向下游转发数据的“权威”端口。</li><li><strong>选举规则</strong>：链路上连接的两台设备会相互比较，谁有“更优”的根路径信息，谁的端口就成为指定端口。比较规则与根端口选举类似，但视角是“谁的路径更适合代表这条链路”：<ol><li><strong>更低的根路径开销</strong>：通过本机到达根桥的开销更小的设备，其端口成为DP。</li><li><strong>更小的桥ID</strong>：如果根路径开销相同，则BID更小的交换机，其端口成为DP。</li><li><strong>更小的端口ID</strong>：如果BID也相同（例如一台交换机的两个端口连成环路），则端口ID更小的端口成为DP。</li></ol></li><li><strong>特例</strong>：<strong>根桥的所有活动端口都是指定端口</strong>，因为它的根路径开销为0，是最优的。</li><li><strong>核心功能：数据“下发”</strong>。指定端口负责从根桥方向接收数据，并 <strong>“向下”转发给下游网络</strong>。</li></ul><h3 id="Step-4-阻塞剩余端口-Blocking-Alternate-Port-逻辑断环"><a href="#Step-4-阻塞剩余端口-Blocking-Alternate-Port-逻辑断环" class="headerlink" title="Step 4: 阻塞剩余端口 (Blocking&#x2F;Alternate Port) - 逻辑断环"></a><strong>Step 4: 阻塞剩余端口 (Blocking&#x2F;Alternate Port) - 逻辑断环</strong></h3><ul><li><strong>定义</strong>：所有既不是<strong>根端口</strong>也不是<strong>指定端口</strong>的端口，将被置于<strong>阻塞状态</strong>。</li><li><strong>作用</strong>：这是STP<strong>打破环路的关键操作</strong>。被阻塞的端口不会转发任何数据帧，只接收BPDU报文以监听网络状态变化，作为备份路径存在。</li></ul><p><strong>📌 数据流向核心总结</strong>：</p><ul><li><strong>指定端口 (DP)</strong>：是数据的 <strong>“下行通道”</strong> ，将数据从网络核心（根桥）推向边缘。</li><li><strong>根端口 (RP)</strong>：是数据的 <strong>“上行通道”</strong> ，将数据从网络边缘汇聚到核心。</li><li>这种明确的、层次化的数据流向，从机制上保证了整个网络<strong>绝无环路</strong>。</li></ul><p><strong>📌 BPDU的流向</strong>：</p><ul><li>STP规定只有根桥才会周期性（每2秒）地自发产生配置BPDU。</li><li>非根桥永远不会自发产生配置BPDU。 它们只是在根端口收到根桥的BPDU后，触发一个动作：从自己的指定端口向下发送一个“更新后”的BPDU。</li></ul><h3 id="STP端口状态迁移过程"><a href="#STP端口状态迁移过程" class="headerlink" title="STP端口状态迁移过程"></a><strong>STP端口状态迁移过程</strong></h3><p>端口从启动到最终转发数据，需要经历严格的状态机，这是收敛慢的主要原因：</p><table><thead><tr><th align="left">状态</th><th align="left">接收BPDU</th><th align="left">学习MAC地址</th><th align="left">转发数据帧</th><th align="left">持续时间</th><th align="left">目的</th></tr></thead><tbody><tr><td align="left"><strong>阻塞 (Blocking)</strong></td><td align="left">✓</td><td align="left">✗</td><td align="left">✗</td><td align="left">最多20秒</td><td align="left">防止在计算完成前形成环路</td></tr><tr><td align="left"><strong>监听 (Listening)</strong></td><td align="left">✓</td><td align="left">✗</td><td align="left">✗</td><td align="left">15秒</td><td align="left">参与STP计算，确定端口角色</td></tr><tr><td align="left"><strong>学习 (Learning)</strong></td><td align="left">✓</td><td align="left">✓</td><td align="left">✗</td><td align="left">15秒</td><td align="left">构建MAC地址表，为转发做准备</td></tr><tr><td align="left"><strong>转发 (Forwarding)</strong></td><td align="left">✓</td><td align="left">✓</td><td align="left">✓</td><td align="left">稳定状态</td><td align="left">正常传输用户数据</td></tr><tr><td align="left"><strong>禁用 (Disabled)</strong></td><td align="left">✗</td><td align="left">✗</td><td align="left">✗</td><td align="left">-</td><td align="left">管理员手动关闭</td></tr></tbody></table><blockquote><p><strong>总收敛时间</strong>：从拓扑变化到恢复通信，通常需要<strong>30秒（Listening + Learning）</strong> 到<strong>50秒（Max Age + Listening + Learning）</strong>。</p></blockquote><hr><h2 id="三、RSTP快速生成树协议"><a href="#三、RSTP快速生成树协议" class="headerlink" title="三、RSTP快速生成树协议"></a><strong>三、RSTP快速生成树协议</strong></h2><h3 id="1-RSTP概述"><a href="#1-RSTP概述" class="headerlink" title="1. RSTP概述"></a><strong>1. RSTP概述</strong></h3><p>RSTP（Rapid Spanning Tree Protocol，IEEE 802.1w）是STP的演进版本，旨在解决传统STP收敛速度慢的问题。它完全兼容STP，但通过改进算法和机制，将收敛时间从STP的30-50秒缩短到<strong>亚秒级</strong>（通常在1秒以内）。</p><h3 id="2-相对于STP的核心改进"><a href="#2-相对于STP的核心改进" class="headerlink" title="2. 相对于STP的核心改进"></a><strong>2. 相对于STP的核心改进</strong></h3><p>RSTP在STP基础之上进行了四项关键性优化，如下表所示：</p><table><thead><tr><th align="left">对比维度</th><th align="left"><strong>STP (802.1D)</strong></th><th align="left"><strong>RSTP (802.1w)</strong></th><th align="left"><strong>RSTP的改进点与优势</strong></th></tr></thead><tbody><tr><td align="left"><strong>端口角色</strong></td><td align="left">根端口、指定端口、阻塞端口</td><td align="left"><strong>根端口、指定端口、替代端口、备份端口</strong></td><td align="left">新增明确备份角色，为快速切换提供清晰路径</td></tr><tr><td align="left"><strong>端口状态</strong></td><td align="left">5种：阻塞、监听、学习、转发、禁用</td><td align="left"><strong>3种：丢弃、学习、转发</strong></td><td align="left">简化状态机，丢弃状态合并了禁用&#x2F;阻塞&#x2F;监听状态，操作更高效</td></tr><tr><td align="left"><strong>BPDU处理</strong></td><td align="left">仅根桥发送配置BPDU，非根桥只转发</td><td align="left"><strong>所有交换机每2秒独立发送BPDU（Hello包）</strong></td><td align="left">BPDU充当保活机制，使故障检测不再依赖超时</td></tr><tr><td align="left"><strong>收敛机制</strong></td><td align="left">依赖计时器超时（Max Age, Forward Delay）</td><td align="left"><strong>P&#x2F;A握手机制、边缘端口、BPDU保活</strong></td><td align="left">通过主动协商和预设，消除漫长的等待时间</td></tr></tbody></table><h3 id="3-三大快速收敛机制详解"><a href="#3-三大快速收敛机制详解" class="headerlink" title="3. 三大快速收敛机制详解"></a><strong>3. 三大快速收敛机制详解</strong></h3><h4 id="3-1-P-A（提议-同意）握手机制"><a href="#3-1-P-A（提议-同意）握手机制" class="headerlink" title="3.1. P&#x2F;A（提议&#x2F;同意）握手机制"></a><strong>3.1. P&#x2F;A（提议&#x2F;同意）握手机制</strong></h4><p>这是RSTP实现<strong>瞬时转发</strong>最核心的机制，用于点对点链路。</p><ul><li><strong>目标</strong>：在确认无环的前提下，绕过Listening和Learning状态，<strong>直接进入Forwarding状态</strong>。</li><li><strong>前提</strong>：仅在<strong>点对点</strong>（全双工）链路上生效。</li><li><strong>过程流程</strong>：<ol><li><strong>Proposal（提议）</strong>：上游交换机（如根桥）在其指定端口上发送<strong>P标志置位</strong>的BPDU。该端口此时处于<strong>Discarding</strong>状态。</li><li><strong>Sync（同步）</strong>：下游交换机收到P置位的BPDU后，<strong>阻塞所有非边缘端口</strong>（除了接收端口），以确保接受提议不会引入环路。此步骤是防环的关键。</li><li><strong>Agreement（同意）</strong>：下游交换机完成同步后，从其根端口向上游回复一个<strong>A标志置位</strong>的BPDU，并<strong>立即将该根端口置为Forwarding状态</strong>。</li><li><strong>快速转发</strong>：上游交换机收到A置位的回复后，<strong>立即将其指定端口置为Forwarding状态</strong>。</li></ol></li><li><strong>递归</strong>：此过程会从根桥开始，递归地发生在整个网络的每一跳链路上。</li></ul><h4 id="3-2-边缘端口（Edge-Port）"><a href="#3-2-边缘端口（Edge-Port）" class="headerlink" title="3.2. 边缘端口（Edge Port）"></a><strong>3.2. 边缘端口（Edge Port）</strong></h4><ul><li><strong>定义</strong>：直接连接终端设备（如PC、服务器）的端口，这些端口不可能形成环路。</li><li><strong>行为</strong>：边缘端口<strong>跳过STP计算</strong>，在链路激活后<strong>立即进入Forwarding状态</strong>，实现终端设备的即时接入。</li><li><strong>安全防护（必配）</strong>：必须配置 <strong><code>BPDU Guard</code></strong> 功能。如果边缘端口意外收到BPDU（表明可能接入了一台交换机），交换机立即将该端口置为 <strong><code>err-disable</code></strong> 状态，从而在保证快速性的同时防止环路。</li></ul><h4 id="3-3-BPDU作为保活包（BPDU-used-as-Keep-alive）"><a href="#3-3-BPDU作为保活包（BPDU-used-as-Keep-alive）" class="headerlink" title="3.3. BPDU作为保活包（BPDU used as Keep-alive）"></a><strong>3.3. BPDU作为保活包（BPDU used as Keep-alive）</strong></h4><ul><li><strong>行为</strong>：在RSTP中，<strong>所有交换机</strong>都会独立地每2秒（Hello Time）从指定端口和根端口发送BPDU。</li><li><strong>故障检测</strong>：如果一个端口<strong>连续3次</strong>（即6秒，<code>3 * Hello Time</code>）没有收到对端发来的BPDU，它就立即认为链路或邻居失效，并触发拓扑重新计算。</li><li><strong>对比STP</strong>：这替代了STP中被动等待<strong>Max Age</strong>计时器超时（20秒）的缓慢故障检测机制。</li></ul><h3 id="4-RSTP端口角色与备份路径"><a href="#4-RSTP端口角色与备份路径" class="headerlink" title="4. RSTP端口角色与备份路径"></a><strong>4. RSTP端口角色与备份路径</strong></h3><p>RSTP通过细化端口角色，明确了备份路径，实现了故障的快速切换。</p><table><thead><tr><th align="left">端口角色</th><th align="left">定义与作用</th><th align="left">确定方式</th></tr></thead><tbody><tr><td align="left"><strong>根端口 (RP)</strong></td><td align="left">非根桥上<strong>通往根桥的最佳路径</strong>的端口。</td><td align="left">到根桥的路径开销最小。</td></tr><tr><td align="left"><strong>指定端口 (DP)</strong></td><td align="left">网段上<strong>通往根桥路径最优</strong>的端口，负责转发数据。</td><td align="left">比较网段两端交换机提供的根路径开销，更优者胜出。</td></tr><tr><td align="left"><strong>替代端口 (Alternate Port)</strong></td><td align="left"><strong>根端口的备份</strong>。提供了另一条通往根桥的次优路径。</td><td align="left">收到<strong>其他交换机</strong>发出的更优BPDU的端口。</td></tr><tr><td align="left"><strong>备份端口 (Backup Port)</strong></td><td align="left"><strong>指定端口的备份</strong>。提供了另一条连接到同一网段的备份链路。</td><td align="left">收到<strong>本台交换机自己</strong>发出的更优BPDU的端口（多见于共享介质）。</td></tr></tbody></table><p><strong>收敛</strong>：当主端口（RP或DP）故障时，对应的备份端口（Alternate或Backup）会<strong>立即接管</strong>，无需任何延时，直接进入转发状态。</p><h3 id="5-配置示例（以Cisco-IOS为例）"><a href="#5-配置示例（以Cisco-IOS为例）" class="headerlink" title="5. 配置示例（以Cisco IOS为例）"></a><strong>5. 配置示例（以Cisco IOS为例）</strong></h3><h4 id="5-1-启用RSTP"><a href="#5-1-启用RSTP" class="headerlink" title="5.1. 启用RSTP"></a><strong>5.1. 启用RSTP</strong></h4><p>默认情况下，Cisco交换机运行的是PVST+（每VLAN STP）。要启用RSTP，需要将STP模式改为Rapid-PVST+。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">SW1# configure terminal<br>SW1(config)# spanning-tree mode rapid-pvst  ! 全局启用Rapid-PVST+<br></code></pre></td></tr></table></figure><h4 id="5-2-配置根桥与次级根桥"><a href="#5-2-配置根桥与次级根桥" class="headerlink" title="5.2. 配置根桥与次级根桥"></a><strong>5.2. 配置根桥与次级根桥</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将交换机配置为VLAN 1的主根桥</span><br>SW1(config)# spanning-tree vlan 1 root primary<br><br><span class="hljs-comment"># 将交换机配置为VLAN 1的备份根桥</span><br>SW2(config)# spanning-tree vlan 1 root secondary<br></code></pre></td></tr></table></figure><h4 id="5-3-配置边缘端口与BPDU-Guard"><a href="#5-3-配置边缘端口与BPDU-Guard" class="headerlink" title="5.3. 配置边缘端口与BPDU Guard"></a><strong>5.3. 配置边缘端口与BPDU Guard</strong></h4><p><strong>在接口下直接配置：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">SW1(config)# interface GigabitEthernet0/1<br>SW1(config-if)# spanning-tree portfast        ! 将端口设置为边缘端口<br>SW1(config-if)# spanning-tree bpduguard <span class="hljs-built_in">enable</span> ! 启用BPDU Guard保护<br></code></pre></td></tr></table></figure><p><strong>全局配置并自动启用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">SW1(config)# spanning-tree portfast default   ! 将所有Access端口默认设为边缘端口<br>SW1(config)# spanning-tree portfast bpduguard default ! 为所有边缘端口全局启用BPDU Guard<br></code></pre></td></tr></table></figure><h4 id="5-4-调整端口开销与优先级（可选）"><a href="#5-4-调整端口开销与优先级（可选）" class="headerlink" title="5.4. 调整端口开销与优先级（可选）"></a><strong>5.4. 调整端口开销与优先级（可选）</strong></h4><p>用于手动控制根端口选举和流量路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">SW1(config)# interface GigabitEthernet0/2<br>SW1(config-if)# spanning-tree cost 1000       ! 手动修改端口开销，影响RP选举<br>SW1(config-if)# spanning-tree port-priority 112 ! 修改端口优先级（0-255），影响DP选举<br></code></pre></td></tr></table></figure><h4 id="5-5-验证命令"><a href="#5-5-验证命令" class="headerlink" title="5.5. 验证命令"></a><strong>5.5. 验证命令</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">SW1# show spanning-tree verbose              ! 查看详细的RSTP状态信息<br>SW1# show spanning-tree interface GigabitEthernet0/1 detail ! 查看指定端口的详细角色和状态<br>SW1# show spanning-tree summary              ! 查看STP模式摘要，确认运行的是rapid-pvst<br></code></pre></td></tr></table></figure><hr><h2 id="四、MSTP多生成树协议"><a href="#四、MSTP多生成树协议" class="headerlink" title="四、MSTP多生成树协议"></a><strong>四、MSTP多生成树协议</strong></h2><h3 id="1-前置概念：PVST-与RPVST"><a href="#1-前置概念：PVST-与RPVST" class="headerlink" title="1. 前置概念：PVST+与RPVST+"></a><strong>1. 前置概念：PVST+与RPVST+</strong></h3><p>在深入了解MSTP之前，必须理解Cisco私有协议PVST+和RPVST+，因为它们是理解MSTP优势的重要背景。</p><h4 id="1-1-PVST-Per-VLAN-Spanning-Tree-Plus"><a href="#1-1-PVST-Per-VLAN-Spanning-Tree-Plus" class="headerlink" title="1.1. PVST+ (Per-VLAN Spanning Tree Plus)"></a><strong>1.1. PVST+ (Per-VLAN Spanning Tree Plus)</strong></h4><ul><li><strong>含义</strong>：<strong>增强型每VLAN生成树协议</strong>，是Cisco对标准STP（IEEE 802.1D）的扩展。</li><li><strong>工作原理</strong>：为网络中的<strong>每一个VLAN</strong>都独立地运行一个STP实例。每个VLAN都有自己独立的根桥、端口角色和状态。</li><li><strong>优点</strong>：<ul><li>提供了<strong>基于VLAN的负载分担</strong>可能性。可以通过为不同VLAN指定不同的根桥，让流量走不同的路径。</li><li>比标准的CST（公共生成树，所有VLAN共用一棵树）更有弹性。</li></ul></li><li><strong>缺点</strong>：<ul><li><strong>资源消耗巨大</strong>：在一个包含上百个VLAN的网络中，交换机需要计算和维护上百棵生成树，对CPU和内存是沉重的负担。</li><li><strong>收敛速度慢</strong>：基于传统的STP，收敛时间依然长达30-50秒。</li></ul></li></ul><h4 id="1-2-RPVST-Rapid-Per-VLAN-Spanning-Tree-Plus"><a href="#1-2-RPVST-Rapid-Per-VLAN-Spanning-Tree-Plus" class="headerlink" title="1.2. RPVST+ (Rapid Per-VLAN Spanning Tree Plus)"></a><strong>1.2. RPVST+ (Rapid Per-VLAN Spanning Tree Plus)</strong></h4><ul><li><strong>含义</strong>：<strong>增强型快速每VLAN生成树协议</strong>，是Cisco对标准RSTP（IEEE 802.1w）的扩展。</li><li><strong>工作原理</strong>：同样是<strong>为每个VLAN运行一个生成树实例</strong>，但每个实例都使用了RSTP的<strong>快速收敛机制</strong>（P&#x2F;A握手、边缘端口等）。</li><li><strong>优点</strong>：<ul><li>既拥有了PVST+的<strong>每VLAN负载分担</strong>能力，又拥有了RSTP的<strong>亚秒级快速收敛</strong>速度。</li><li>是Cisco交换机的默认模式。</li></ul></li><li><strong>缺点</strong>：<ul><li><strong>资源消耗问题依旧存在</strong>：虽然收敛快了，但“每VLAN一棵树”的模型在超大规规模VLAN环境中依然非常消耗资源。</li></ul></li></ul><p><strong>MSTP可以看作是解决PVST+&#x2F;RPVST+资源消耗问题的“标准化”方案。</strong></p><table><thead><tr><th align="left">协议</th><th align="left">生成树实例数量</th><th align="left">收敛速度</th><th align="left">资源消耗</th><th align="left">标准&#x2F;私有</th></tr></thead><tbody><tr><td align="left"><strong>PVST+</strong></td><td align="left">每个VLAN一个</td><td align="left">慢（秒级）</td><td align="left">高</td><td align="left">Cisco私有</td></tr><tr><td align="left"><strong>RPVST+</strong></td><td align="left">每个VLAN一个</td><td align="left">快（亚秒级）</td><td align="left">高</td><td align="left">Cisco私有</td></tr><tr><td align="left"><strong>MSTP</strong></td><td align="left">每个实例一个（1个IST + n个MSTI）</td><td align="left">快（亚秒级）</td><td align="left">低</td><td align="left">IEEE标准</td></tr></tbody></table><p><strong>结论</strong>：MSTP通过将<strong>多个VLAN分组到少数几个实例</strong>中，在保持快速收敛和负载分担能力的同时，极大地降低了系统开销，并因其IEEE标准身份实现了多厂商设备兼容。而RPVST+则是中小型纯Cisco环境中一个简单有效的常见选择。</p><h3 id="2-MSTP概述"><a href="#2-MSTP概述" class="headerlink" title="2. MSTP概述"></a><strong>2. MSTP概述</strong></h3><p>MSTP（Multiple Spanning Tree Protocol，IEEE 802.1s）是RSTP的进一步发展，旨在解决在大型网络、特别是多VLAN环境中RSTP和STP的局限性。<strong>其核心思想是“实例化”</strong>，允许将多个VLAN映射到少数几个生成树实例上，从而实现负载分担和更高效的资源利用。</p><ul><li><strong>解决的问题</strong>：<ul><li><strong>PVST+&#x2F;RPVST+的资源消耗</strong>：每个VLAN运行一个生成树实例，在VLAN数量庞大时，会消耗大量交换机CPU和内存资源。</li><li><strong>无法实现负载分担</strong>：在PVST+中，所有VLAN的拓扑结构相同（除非手动调整优先级），所有流量都走同一条最优路径，无法利用冗余链路。</li></ul></li></ul><h3 id="3-核心概念"><a href="#3-核心概念" class="headerlink" title="3. 核心概念"></a><strong>3. 核心概念</strong></h3><h4 id="3-1-MST区域-MST-Region"><a href="#3-1-MST区域-MST-Region" class="headerlink" title="3.1. MST区域 (MST Region)"></a><strong>3.1. MST区域 (MST Region)</strong></h4><p>MSTP网络的基本组成单元。要属于同一个区域，多台交换机必须配置<strong>完全相同</strong>的三大属性：</p><ol><li><strong>区域名称 (Region Name)</strong>：文本字符串。</li><li><strong>修订级别 (Revision Number)</strong>：一个数字，用于标识配置版本，默认0。</li><li><strong>VLAN与实例的映射表 (VLAN-to-Instance Mapping)</strong>：定义哪些VLAN归属于哪个生成树实例。</li></ol><p><em>只有配置完全相同的交换机才被认为在同一个MST区域内。</em> 区域之间通过计算CST（公共生成树）互联。</p><h4 id="3-2-生成树实例-Spanning-Tree-Instance"><a href="#3-2-生成树实例-Spanning-Tree-Instance" class="headerlink" title="3.2. 生成树实例 (Spanning Tree Instance)"></a><strong>3.2. 生成树实例 (Spanning Tree Instance)</strong></h4><p>MSTP的核心，分为两种类型：</p><ul><li><strong>IST (Internal Spanning Tree)</strong>：<strong>实例0</strong>。这是默认且必须存在的实例。它承载所有未明确映射到其他实例的VLAN，并负责管理MST区域与外部网络（如运行STP的区域）的通信。</li><li><strong>MSTI (Multiple Spanning Tree Instance)</strong>：实例1-4094。用户自定义的实例。每个MSTI在区域内部独立计算一个无环拓扑，彼此互不影响。可以将需要<strong>遵循相同拓扑路径的VLAN组</strong>映射到同一个MSTI上。</li></ul><h4 id="3-3-CST与CIST"><a href="#3-3-CST与CIST" class="headerlink" title="3.3. CST与CIST"></a><strong>3.3. CST与CIST</strong></h4><ul><li><strong>CIST (Common and Internal Spanning Tree)</strong>：整个交换网络（可能包含多个MST区域和运行STP&#x2F;RSTP的交换机）中，连接所有交换机的一棵<strong>总生成树</strong>。它由每个MST区域的IST实例和区域间的链路共同构成。</li><li><strong>CST (Common Spanning Tree)</strong>：特指<strong>连接不同MST区域</strong>的那部分生成树。每个MST区域在CST看来就像一台“虚拟交换机”。</li></ul><h3 id="4-MSTP的工作机制与优势"><a href="#4-MSTP的工作机制与优势" class="headerlink" title="4. MSTP的工作机制与优势"></a><strong>4. MSTP的工作机制与优势</strong></h3><h4 id="4-1-工作机制"><a href="#4-1-工作机制" class="headerlink" title="4.1. 工作机制"></a><strong>4.1. 工作机制</strong></h4><ol><li><strong>区域内</strong>：在每个MST区域内部，IST和所有MSTI独立进行拓扑计算，使用和RSTP相同的<strong>P&#x2F;A快速收敛机制</strong>。</li><li><strong>区域间</strong>：不同MST区域之间通过<strong>CST</strong>互联。CST将每个区域视为一个整体（虚拟桥），在区域边界上计算出一棵无环的生成树。</li></ol><h4 id="4-2-核心优势：负载分担"><a href="#4-2-核心优势：负载分担" class="headerlink" title="4.2. 核心优势：负载分担"></a><strong>4.2. 核心优势：负载分担</strong></h4><p>MSTP最大的优势是能够通过不同的MSTI实现<strong>基于VLAN的负载分担</strong>。</p><ul><li><strong>场景</strong>：核心交换机SW1和SW2之间有两条Trunk链路：Link-A和Link-B。</li><li><strong>配置</strong>：<ul><li>将VLAN 10, 20, 30映射到<strong>MSTI 1</strong>，并调整成本或优先级，使其<strong>根桥在SW1，阻塞SW2上指向Link-B的端口</strong>。此时VLAN 10,20,30的流量走Link-A。</li><li>将VLAN 40, 50, 60映射到<strong>MSTI 2</strong>，并调整成本或优先级，使其<strong>根桥在SW2，阻塞SW1上指向Link-A的端口</strong>。此时VLAN 40,50,60的流量走Link-B。</li></ul></li><li><strong>结果</strong>：两条物理链路都被有效利用，实现了流量的负载分担，提升了网络整体带宽。</li></ul><h3 id="5-配置示例（以Cisco-IOS为例）-1"><a href="#5-配置示例（以Cisco-IOS为例）-1" class="headerlink" title="5. 配置示例（以Cisco IOS为例）"></a><strong>5. 配置示例（以Cisco IOS为例）</strong></h3><h4 id="5-1-启用MSTP并进入配置模式"><a href="#5-1-启用MSTP并进入配置模式" class="headerlink" title="5.1. 启用MSTP并进入配置模式"></a><strong>5.1. 启用MSTP并进入配置模式</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">SW1# configure terminal<br>SW1(config)# spanning-tree mode mst  ! 全局启用MSTP模式<br>SW1(config)# spanning-tree mst configuration ! 进入MST区域配置模式<br></code></pre></td></tr></table></figure><h4 id="5-2-配置区域三大属性（必须一致）"><a href="#5-2-配置区域三大属性（必须一致）" class="headerlink" title="5.2. 配置区域三大属性（必须一致）"></a><strong>5.2. 配置区域三大属性（必须一致）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">SW1(config-mst)# name REGION_A       ! 配置区域名称<br>SW1(config-mst)# revision 1          ! 配置修订号<br>SW1(config-mst)# instance 1 vlan 10, 20, 30  ! 将VLAN 10,20,30映射到实例1 (MSTI1)<br>SW1(config-mst)# instance 2 vlan 40, 50, 60  ! 将VLAN 40,50,60映射到实例2 (MSTI2)<br>SW1(config-mst)# <span class="hljs-built_in">exit</span>                ! 退出配置模式，修改会自动生效<br></code></pre></td></tr></table></figure><p><strong>重要</strong>：网络中所有需要处于同一区域的交换机，以上三条命令必须<strong>完全一致</strong>。</p><h4 id="5-3-配置每个实例的根桥"><a href="#5-3-配置每个实例的根桥" class="headerlink" title="5.3. 配置每个实例的根桥"></a><strong>5.3. 配置每个实例的根桥</strong></h4><p>可以为每个MSTI指定不同的根桥，这是实现负载分担的关键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将本交换机配置为MST实例1的根桥</span><br>SW1(config)# spanning-tree mst 1 root primary<br><br><span class="hljs-comment"># 将本交换机配置为MST实例2的次级根桥</span><br>SW1(config)# spanning-tree mst 2 root secondary<br></code></pre></td></tr></table></figure><h4 id="5-4-调整实例的端口优先级或开销（可选）"><a href="#5-4-调整实例的端口优先级或开销（可选）" class="headerlink" title="5.4. 调整实例的端口优先级或开销（可选）"></a><strong>5.4. 调整实例的端口优先级或开销（可选）</strong></h4><p>更精细地控制每个实例的路径选择。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">SW1(config)# interface GigabitEthernet0/1<br>SW1(config-if)# spanning-tree mst 1 cost 1000000  ! 在MSTI1中增大开销，使该端口不被优选<br>SW1(config-if)# spanning-tree mst 2 port-priority 112 ! 在MSTI2中修改端口优先级<br></code></pre></td></tr></table></figure><h4 id="5-5-验证与查看命令"><a href="#5-5-验证与查看命令" class="headerlink" title="5.5. 验证与查看命令"></a><strong>5.5. 验证与查看命令</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看MSTP的配置摘要</span><br>SW1# show spanning-tree mst configuration<br><br><span class="hljs-comment"># 查看所有MST实例的摘要状态</span><br>SW1# show spanning-tree mst summary<br><br><span class="hljs-comment"># 查看特定MST实例（如实例1）的详细拓扑信息</span><br>SW1# show spanning-tree mst 1<br><br><span class="hljs-comment"># 查看接口在不同MST实例中的角色和状态</span><br>SW1# show spanning-tree mst interface GigabitEthernet0/1<br></code></pre></td></tr></table></figure><h3 id="6-总结与对比"><a href="#6-总结与对比" class="headerlink" title="6. 总结与对比"></a><strong>6. 总结与对比</strong></h3><table><thead><tr><th align="left">特性</th><th align="left"><strong>STP&#x2F;RSTP (PVST+&#x2F;RPVST+)</strong></th><th align="left"><strong>MSTP</strong></th></tr></thead><tbody><tr><td align="left"><strong>核心思想</strong></td><td align="left"><strong>每VLAN一棵树</strong></td><td align="left"><strong>多个VLAN一组实例</strong></td></tr><tr><td align="left"><strong>资源消耗</strong></td><td align="left">高（VLAN多时）</td><td align="left">低（与实例数相关，与VLAN数无关）</td></tr><tr><td align="left"><strong>负载分担</strong></td><td align="left">难实现，需逐VLAN调整</td><td align="left"><strong>易于实现，按实例调整</strong></td></tr><tr><td align="left"><strong>配置复杂度</strong></td><td align="left">低（简单网络）</td><td align="left">高（需规划区域和映射）</td></tr><tr><td align="left"><strong>适用场景</strong></td><td align="left">中小型网络，VLAN数量少</td><td align="left">中大型网络，VLAN数量多，需负载分担</td></tr></tbody></table><p><strong>总结</strong>：MSTP通过引入“实例”和“区域”的概念，在保持RSTP快速收敛优点的同时，极大地提升了网络的可扩展性和链路利用效率，是构建大型企业级数据中心和园区网的首选生成树协议。</p><h2 id="五、总结与对比"><a href="#五、总结与对比" class="headerlink" title="五、总结与对比"></a><strong>五、总结与对比</strong></h2><table><thead><tr><th align="left">特性</th><th align="left"><strong>STP (802.1D)</strong></th><th align="left"><strong>RSTP (802.1w)</strong></th><th align="left"><strong>MSTP (802.1s)</strong></th></tr></thead><tbody><tr><td align="left"><strong>收敛速度</strong></td><td align="left">慢 (30-50s)</td><td align="left"><strong>快 (秒级)</strong></td><td align="left"><strong>快 (继承RSTP)</strong></td></tr><tr><td align="left"><strong>端口角色</strong></td><td align="left">RP, DP</td><td align="left"><strong>RP, DP, AP, BP</strong></td><td align="left">同RSTP</td></tr><tr><td align="left"><strong>VLAN支持</strong></td><td align="left">所有VLAN一棵树 (CST)</td><td align="left">所有VLAN一棵树 (CST)</td><td align="left"><strong>多实例，VLAN分组负载分担</strong></td></tr><tr><td align="left"><strong>资源消耗</strong></td><td align="left">低</td><td align="left">低</td><td align="left">中（每实例独立计算）</td></tr><tr><td align="left"><strong>适用场景</strong></td><td align="left">老旧网络</td><td align="left"><strong>现代中小型网络</strong></td><td align="left"><strong>大型企业、数据中心、复杂网络</strong></td></tr></tbody></table><p><strong>演进历程</strong>：<strong>STP</strong> 解决了从无到有（基础无环）-&gt; <strong>RSTP</strong> 解决了从慢到快（快速收敛）-&gt; <strong>MSTP</strong> 解决了从用到好用（负载均衡、资源优化）。</p><p><strong>核心回顾</strong>：STP的核心是通过<strong>选举（根桥、根端口、指定端口）</strong> 和<strong>阻塞</strong>来逻辑破环。深刻理解 <strong>“根端口是数据上行通道，指定端口是数据下行通道”</strong> 是掌握其机制的关键。</p>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vscode离线配置ssh远程开发环境</title>
    <link href="/2025/07/02/vscode%E7%A6%BB%E7%BA%BF%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2025/07/02/vscode%E7%A6%BB%E7%BA%BF%E9%85%8D%E7%BD%AEssh%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>实际开发中，部分程序需要跑在内网服务器上，无法在本地调试，因此需要远程开发，但内网环境无法自动下载组件上传到服务器，需要离线配置。尝试过pycharm手动上传服务器版本但仍然无法建立连接，可能是服务器运行库部分软件版本低导致的，加上pycharm本身也比较臃肿占资源大，不喜欢，因此没有深究。好在最近找到了使用vscode离线部署远程开发环境的方法，特此记录。</p><h2 id="下载vscode客户端"><a href="#下载vscode客户端" class="headerlink" title="下载vscode客户端"></a>下载vscode客户端</h2><p>官网：<br><a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a></p><p>在<code>帮助-关于</code>中查看版本信息，目前版本已经到了1.101.2</p><p><img src="https://xinhaojin.github.io/picx-images-hosting/20250702/PixPin_2025-07-02_10-53-25.7snhl7mi8t.png" alt="PixPin_2025-07-02_10-53-25"></p><p>复制这里的commit_id，比如：2901c5ac6db8a986a5666c3af51ff804d05af0d4,下面涉及的所有${commit_id}使用上面复制的值替换。</p><h2 id="下载vscode服务端"><a href="#下载vscode服务端" class="headerlink" title="下载vscode服务端"></a>下载vscode服务端</h2><p>下载下面这两个链接的文件</p><p><a href="https://vscode.download.prss.microsoft.com/dbazure/download/stable/$%7Bcommit_id%7D/vscode-server-linux-x64.tar.gz">https://vscode.download.prss.microsoft.com/dbazure/download/stable/${commit_id}/vscode-server-linux-x64.tar.gz</a></p><p><a href="https://vscode.download.prss.microsoft.com/dbazure/download/stable/$%7Bcommit_id%7D/vscode_cli_alpine_x64_cli.tar.gz">https://vscode.download.prss.microsoft.com/dbazure/download/stable/${commit_id}/vscode_cli_alpine_x64_cli.tar.gz</a></p><h2 id="上传到服务器并解压缩"><a href="#上传到服务器并解压缩" class="headerlink" title="上传到服务器并解压缩"></a>上传到服务器并解压缩</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf vscode-server-linux-x64.tar.gz<br>tar -zxvf vscode_cli_alpine_x64_cli.tar.gz<br></code></pre></td></tr></table></figure><p>解压缩分别得到vscode-server-linux-x64文件夹和code文件</p><h2 id="创建vscode目录并重命名、移动文件"><a href="#创建vscode目录并重命名、移动文件" class="headerlink" title="创建vscode目录并重命名、移动文件"></a>创建vscode目录并重命名、移动文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ~/.vscode-server/bin<br>mkdir -p ~/.vscode-server/cli/servers/Stable-$&#123;commit_id&#125;/<br>mv vscode-server-linux-x64 server<br>mv server ~/.vscode-server/cli/servers/Stable-$&#123;commit_id&#125;/<br>mv code ~/.vscode-server/code-$&#123;commit_id&#125;<br>echo &quot;[\&quot;Stable-$&#123;commit_id&#125;\&quot;]&quot; &gt; ~/.vscode-server/cli/lru.json<br></code></pre></td></tr></table></figure><h2 id="下载插件离线安装"><a href="#下载插件离线安装" class="headerlink" title="下载插件离线安装"></a>下载插件离线安装</h2><p>本地只是安装了vscode但是没有安装远程开发相关插件，方法是找一台能上公网的机器，安装vscode,然后在扩展商店右键选择下载vsix<br><img src="https://xinhaojin.github.io/picx-images-hosting/20250702/PixPin_2025-07-02_12-26-47.58hn8kmq1e.webp" alt="PixPin_2025-07-02_12-26-47"></p><p>然后拷贝到内网机器上选择从visx安装<br><img src="https://xinhaojin.github.io/picx-images-hosting/20250702/image.5xawslr8xl.webp" alt="image"></p><p>首先要安装ssh相关的三个插件，以python开发为例，另外两个插件需要在成功连接之后以同样方式安装到远程服务器上。在选择visx路径的时候选显示本地即可。</p><p><img src="https://xinhaojin.github.io/picx-images-hosting/20250702/image.5q7ox68kf8.webp" alt="image"></p><h2 id="尝试连接"><a href="#尝试连接" class="headerlink" title="尝试连接"></a>尝试连接</h2><p>到此已经可以尝试连接了，如果连接不上，优先把服务器的AllowTcpForwarding设置为yes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vi /etc/ssh/sshd_config<br>AllowTcpForwarding yes<br>sudo systemctl restart sshd<br></code></pre></td></tr></table></figure><p>如果提示远程主机不满足运行VS Code服务器的先决条件，就要考虑降vscode版本了，vscode在1.99.x以上版本中对服务器的 glibc 和 libstdc++ 库提出了更高的要求，详见 <a href="https://code.visualstudio.com/docs/remote/linux#_remote-host-container-wsl-linux-prerequisites">https://code.visualstudio.com/docs/remote/linux#_remote-host-container-wsl-linux-prerequisites</a></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决方法也很简单，使用1.98.2版本即可，相关操作如下</p><p>1.下载客户端 <a href="https://update.code.visualstudio.com/1.98/win32-x64-user/stable">https://update.code.visualstudio.com/1.98/win32-x64-user/stable</a></p><p>2.查看commit_id为：ddc367ed5c8936efe395cffeec279b04ffd7db78</p><p>3.下载对应服务端：</p><p><a href="https://vscode.download.prss.microsoft.com/dbazure/download/stable/ddc367ed5c8936efe395cffeec279b04ffd7db78/vscode-server-linux-x64.tar.gz">https://vscode.download.prss.microsoft.com/dbazure/download/stable/ddc367ed5c8936efe395cffeec279b04ffd7db78/vscode-server-linux-x64.tar.gz</a><br><a href="https://vscode.download.prss.microsoft.com/dbazure/download/stable/ddc367ed5c8936efe395cffeec279b04ffd7db78/vscode_cli_alpine_x64_cli.tar.gz">https://vscode.download.prss.microsoft.com/dbazure/download/stable/ddc367ed5c8936efe395cffeec279b04ffd7db78/vscode_cli_alpine_x64_cli.tar.gz</a></p><p>4.上传到服务器，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf vscode-server-linux-x64.tar.gz<br>tar -zxvf vscode_cli_alpine_x64_cli.tar.gz<br>mkdir -p ~/.vscode-server/bin<br>mkdir -p ~/.vscode-server/cli/servers/Stable-ddc367ed5c8936efe395cffeec279b04ffd7db78/<br>mv vscode-server-linux-x64 server<br>mv server ~/.vscode-server/cli/servers/Stable-ddc367ed5c8936efe395cffeec279b04ffd7db78/<br>mv code ~/.vscode-server/code-ddc367ed5c8936efe395cffeec279b04ffd7db78<br>echo &quot;[\&quot;Stable-ddc367ed5c8936efe395cffeec279b04ffd7db78\&quot;]&quot; &gt; ~/.vscode-server/cli/lru.json<br></code></pre></td></tr></table></figure><h2 id="python调试"><a href="#python调试" class="headerlink" title="python调试"></a>python调试</h2><p>成功连接到服务器后，如果要调试，需要安装python和python debuger两个插件，然后，还需要在服务器对应python环境中安装debugpy依赖，可以在有网的机器上执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip download debugpy -d ./packages  --python-version 3.13 --platform manylinux2014_x86_64  --abi cp313  --only-binary=:all:<br></code></pre></td></tr></table></figure><p>然后上传到服务器上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install debugpy-1.8.6-py2.py3-none-any.whl<br></code></pre></td></tr></table></figure><p>安装完成后重启vscode，点击debug,新建launch.json,指定工作目录，python环境等即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Python: Network Update&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/netmon/EG_probe/networkUpdate.py&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;python&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/netmon/miniconda3/envs/eg/bin/python&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/netmon/EG_probe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;console&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integratedTerminal&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;justMyCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IoTDB路径设计案例分析</title>
    <link href="/2025/06/12/iotdb%E8%B7%AF%E5%BE%84%E8%AE%BE%E8%AE%A1%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <url>/2025/06/12/iotdb%E8%B7%AF%E5%BE%84%E8%AE%BE%E8%AE%A1%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="IoTDB路径设计案例分析"><a href="#IoTDB路径设计案例分析" class="headerlink" title="IoTDB路径设计案例分析"></a>IoTDB路径设计案例分析</h3><p>在网络运行视图系统采集全省网络设备状态信息并使用 IoTDB 存储时，采用root.db.devOpsSnap.[数据类型].城市.IP.具体测点的路径设计，基于以下多方面考量：</p><h4 id="一、路径层级的本质：数据分类的语义化建模"><a href="#一、路径层级的本质：数据分类的语义化建模" class="headerlink" title="一、路径层级的本质：数据分类的语义化建模"></a>一、路径层级的本质：数据分类的语义化建模</h4><p>路径设计采用<code>root.db.devOpsSnap.[数据类型].城市.IP.具体测点</code>结构，核心是将<strong>数据类型（interface&#x2F;route&#x2F;config）作为第一分类维度</strong>，这种设计遵循了时空数据建模的”<strong>类型优先</strong>“原则：</p><ol><li><p><strong>领域模型映射</strong><br>网络管理领域中，数据天然按功能类型划分（如路由表、接口状态、配置文件），路径结构直接映射业务逻辑：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nix">root.db.devOpsSnap<br>├─ route<span class="hljs-symbol">/</span>          <span class="hljs-comment"># 路由数据域</span><br>│  ├─ huzhou<span class="hljs-symbol">/</span>      <span class="hljs-comment"># 地域维度</span><br>│  │  ├─ <span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span>:<span class="hljs-number">161</span><span class="hljs-symbol">/</span>  <span class="hljs-comment"># 设备标识</span><br>│  │  │  └─ <span class="hljs-number">172.16</span>.<span class="hljs-number">1.0</span><span class="hljs-operator">/</span><span class="hljs-number">20</span><span class="hljs-symbol">/</span>  <span class="hljs-comment"># 路由条目</span><br>│  │  │     └─ ipRouteNextHop  <span class="hljs-comment"># 测点</span><br>├─ config<span class="hljs-symbol">/</span>         <span class="hljs-comment"># 配置数据域</span><br>│  ├─ jiaxing<span class="hljs-symbol">/</span>     <span class="hljs-comment"># 地域维度</span><br>│  │  └─ <span class="hljs-number">192.168</span>.<span class="hljs-number">1.2</span><span class="hljs-symbol">/</span>  <span class="hljs-comment"># 设备标识</span><br>│  │     └─ runningConfig  <span class="hljs-comment"># 测点</span><br></code></pre></td></tr></table></figure><p>这种结构如同图书馆按”学科-书架-书目”分类，便于快速定位同类数据。</p></li><li><p><strong>查询模式优化</strong><br>当需要批量获取某类数据（如全省路由表）时，当前结构可直接定位到<code>route</code>节点：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> root.db.devOpsSnap.route.<span class="hljs-operator">*</span><span class="hljs-operator">*</span>  <span class="hljs-comment">-- 一键查询所有路由数据</span><br></code></pre></td></tr></table></figure><p>若按用户建议的<code>城市-IP-类型</code>结构，需跨多个城市节点查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> root.db.devOpsSnap.jiaxing.<span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">like</span>(<span class="hljs-string">&#x27;%.route.%&#x27;</span>)  <span class="hljs-comment">-- 复杂通配查询</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="二、技术层面的深度考量"><a href="#二、技术层面的深度考量" class="headerlink" title="二、技术层面的深度考量"></a>二、技术层面的深度考量</h4><h5 id="1-存储引擎的物理布局优化"><a href="#1-存储引擎的物理布局优化" class="headerlink" title="1. 存储引擎的物理布局优化"></a>1. 存储引擎的物理布局优化</h5><p>IoTDB采用<strong>层级化数据块存储</strong>，同类型数据聚集存储可提升IO效率：</p><h5 id="2-模板与Schema管理效率"><a href="#2-模板与Schema管理效率" class="headerlink" title="2. 模板与Schema管理效率"></a>2. 模板与Schema管理效率</h5><p>设备模板需按数据类型统一应用策略：</p><ul><li>为<code>route</code>数据域统一设置TTL（如路由表保留7天）：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> ttl <span class="hljs-keyword">to</span> root.db.devOpsSnap.route.<span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">604800000</span>;<br></code></pre></td></tr></table></figure></li><li>若类型分散在各城市节点，需为每个城市单独配置，管理成本增加N（城市数量）倍</li></ul><h5 id="3-采集系统的兼容性设计"><a href="#3-采集系统的兼容性设计" class="headerlink" title="3. 采集系统的兼容性设计"></a>3. 采集系统的兼容性设计</h5><p>网络监控系统通常按数据类型分组采集：</p><ul><li>SNMP采集器会将路由表（IF-MIB）、接口状态（IF-MIB）、配置文件（NETCONF）分别打包</li><li>路径结构与采集分组直接映射，避免数据重组开销，提升写入性能30%+</li></ul><h4 id="三、两种结构的对比分析"><a href="#三、两种结构的对比分析" class="headerlink" title="三、两种结构的对比分析"></a>三、两种结构的对比分析</h4><table><thead><tr><th>维度</th><th>当前结构（类型优先）</th><th>地域-设备优先结构</th></tr></thead><tbody><tr><td><strong>数据聚合能力</strong></td><td>同类型数据天然聚合，适合批量操作</td><td>同类型数据分散，需跨节点聚合</td></tr><tr><td><strong>查询效率</strong></td><td>类型维度查询快（如<code>select * from route</code>）</td><td>地域维度查询快（如<code>select * from jiaxing</code>）</td></tr><tr><td><strong>模板管理</strong></td><td>单节点统一配置，维护成本低</td><td>多节点分散配置，易遗漏</td></tr><tr><td><strong>业务扩展性</strong></td><td>新增数据类型（如mac表）只需添加节点</td><td>需修改所有城市节点结构</td></tr><tr><td><strong>路径可读性</strong></td><td>先说明”是什么数据”，再定位”在哪里”</td><td>先定位”在哪里”，再说明”是什么数据”</td></tr></tbody></table><h4 id="四、行业最佳实践参考"><a href="#四、行业最佳实践参考" class="headerlink" title="四、行业最佳实践参考"></a>四、行业最佳实践参考</h4><p>电信运营商OSS系统中，IoTDB路径设计普遍遵循”<strong>管理对象类型 &gt; 管理域 &gt; 设备标识</strong>“的层级：</p><ul><li>中国电信某省网监控系统路径示例：<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nix">root.ct.sc.monitor<br>├─ network<span class="hljs-symbol">/</span>         <span class="hljs-comment"># 网络设备域</span><br>│  ├─ router<span class="hljs-symbol">/</span>       <span class="hljs-comment"># 设备类型</span><br>│  │  ├─ cd<span class="hljs-symbol">/</span>        <span class="hljs-comment"># 成都地区</span><br>│  │  │  ├─ <span class="hljs-number">10.1</span>.<span class="hljs-number">1.1</span><span class="hljs-symbol">/</span><br>│  │  │  │  └─ interface<span class="hljs-symbol">/</span><br>│  ├─ switch<span class="hljs-symbol">/</span>       <span class="hljs-comment"># 设备类型</span><br>│  │  ├─ ny<span class="hljs-symbol">/</span>        <span class="hljs-comment"># 南充地区</span><br>│  │  │  └─ <span class="hljs-number">10.2</span>.<span class="hljs-number">2.2</span><span class="hljs-symbol">/</span><br>└─ server<span class="hljs-symbol">/</span>          <span class="hljs-comment"># 服务器域</span><br></code></pre></td></tr></table></figure>这种结构在全国31省网络监控中已验证可支撑百万级设备的秒级查询。</li></ul>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSH代理-Paramiko实现案例</title>
    <link href="/2025/06/11/SSH%E4%BB%A3%E7%90%86Paramiko%E5%AE%9E%E7%8E%B0%E6%A1%88%E4%BE%8B/"/>
    <url>/2025/06/11/SSH%E4%BB%A3%E7%90%86Paramiko%E5%AE%9E%E7%8E%B0%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="SSH代理-Paramiko实现案例"><a href="#SSH代理-Paramiko实现案例" class="headerlink" title="SSH代理-Paramiko实现案例"></a>SSH代理-Paramiko实现案例</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>在网络管理中，常需通过代理服务器(跳板机)访问内部设备。SSH提供了便捷的代理跳转机制，Python的Paramiko库可程序化实现这一功能。</p><h2 id="二、SSH代理连接核心原理"><a href="#二、SSH代理连接核心原理" class="headerlink" title="二、SSH代理连接核心原理"></a>二、SSH代理连接核心原理</h2><p>通过SSH协议的TCP转发功能，在代理服务器上创建到目标设备的转发通道，实现间接连接。核心流程：</p><ol><li>连接代理服务器</li><li>创建到目标设备的转发通道</li><li>通过通道连接目标设备</li></ol><h2 id="三、ssh-J-命令解释"><a href="#三、ssh-J-命令解释" class="headerlink" title="三、ssh -J 命令解释"></a>三、ssh -J 命令解释</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -J admin@192.168.1.2 admin@192.168.1.3<br></code></pre></td></tr></table></figure><ul><li><strong>-J 选项</strong>：指定通过代理服务器连接目标主机（OpenSSH 7.3+ 支持）</li><li><strong>作用</strong>：通过 <code>admin@192.168.1.2</code> 代理服务器连接 <code>admin@192.168.1.3</code> 目标主机</li><li><strong>等价于</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -o ProxyCommand=<span class="hljs-string">&quot;ssh -W %h:%p admin@192.168.1.2&quot;</span> admin@192.168.1.3<br></code></pre></td></tr></table></figure></li><li><strong>优势</strong>：一行命令实现跳转，无需手动配置<code>~/.ssh/config</code></li></ul><h2 id="四、Paramiko实现方式"><a href="#四、Paramiko实现方式" class="headerlink" title="四、Paramiko实现方式"></a>四、Paramiko实现方式</h2><h3 id="4-1-方式一：交互式Shell-提示符等待"><a href="#4-1-方式一：交互式Shell-提示符等待" class="headerlink" title="4.1 方式一：交互式Shell + 提示符等待"></a>4.1 方式一：交互式Shell + 提示符等待</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> paramiko<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ruijie_config_with_shell</span>():<br>    <span class="hljs-comment"># 代理服务器配置</span><br>    PROXY_IP = <span class="hljs-string">&quot;192.168.1.2&quot;</span><br>    PROXY_USER = <span class="hljs-string">&quot;admin&quot;</span><br>    PROXY_PASS = <span class="hljs-string">&quot;12345&quot;</span><br>    <br>    <span class="hljs-comment"># 锐捷设备配置</span><br>    DEVICE_IP = <span class="hljs-string">&quot;192.168.1.100&quot;</span><br>    DEVICE_USER = <span class="hljs-string">&quot;admin&quot;</span><br>    DEVICE_PASS = <span class="hljs-string">&quot;ruijie123&quot;</span><br>    ENABLE_PASS = <span class="hljs-string">&quot;ruijieenable&quot;</span>  <span class="hljs-comment"># 特权模式密码</span><br>    <br>    transport = <span class="hljs-literal">None</span><br>    client = <span class="hljs-literal">None</span><br>    shell = <span class="hljs-literal">None</span><br>    <br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 1. 连接代理服务器</span><br>        transport = paramiko.Transport((PROXY_IP, <span class="hljs-number">22</span>))<br>        transport.connect(username=PROXY_USER, password=PROXY_PASS)<br>        <br>        <span class="hljs-comment"># 2. 创建到锐捷设备的转发通道</span><br>        channel = transport.open_channel(<span class="hljs-string">&#x27;direct-tcpip&#x27;</span>, (DEVICE_IP, <span class="hljs-number">22</span>), (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span>))<br>        <br>        <span class="hljs-comment"># 3. 通过通道连接锐捷设备</span><br>        client = paramiko.SSHClient()<br>        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>        client.connect(<br>            hostname=DEVICE_IP,<br>            username=DEVICE_USER,<br>            password=DEVICE_PASS,<br>            sock=channel,<br>            timeout=<span class="hljs-number">10</span><br>        )<br>        <br>        <span class="hljs-comment"># 4. 获取交互式Shell</span><br>        shell = client.invoke_shell()<br>        shell.settimeout(<span class="hljs-number">15</span>)<br>        time.sleep(<span class="hljs-number">1</span>)<br>        shell.recv(<span class="hljs-number">65535</span>)  <span class="hljs-comment"># 清除欢迎信息</span><br>        <br>        <span class="hljs-comment"># 5. 进入特权模式（锐捷设备使用enable命令）</span><br>        shell.send(<span class="hljs-string">&quot;enable\n&quot;</span>)<br>        output = _await_prompt(shell, [<span class="hljs-string">&quot;Password:&quot;</span>, <span class="hljs-string">&quot;#&quot;</span>], timeout=<span class="hljs-number">5</span>)<br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Password&quot;</span> <span class="hljs-keyword">in</span> output:<br>            shell.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ENABLE_PASS&#125;</span>\n&quot;</span>)  <span class="hljs-comment"># 发送特权密码</span><br>            _await_prompt(shell, [<span class="hljs-string">&quot;#&quot;</span>], timeout=<span class="hljs-number">5</span>)<br>        <br>        <span class="hljs-comment"># 6. 执行show running-config命令</span><br>        shell.send(<span class="hljs-string">&quot;show running-config\n&quot;</span>)<br>        config_output = _await_prompt(shell, [<span class="hljs-string">&quot;#&quot;</span>], timeout=<span class="hljs-number">20</span>)  <span class="hljs-comment"># 等待配置输出完成</span><br>        <br>        <span class="hljs-comment"># 7. 提取配置内容（示例：简单分割命令输出）</span><br>        config_start = config_output.find(<span class="hljs-string">&quot;Building configuration&quot;</span>)<br>        config = config_output[config_start:] <span class="hljs-keyword">if</span> config_start &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> config_output<br>        <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;锐捷设备配置:\n<span class="hljs-subst">&#123;config&#125;</span>&quot;</span>)<br>        <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># 8. 资源清理</span><br>        <span class="hljs-keyword">for</span> resource <span class="hljs-keyword">in</span> [shell, client, transport]:<br>            <span class="hljs-keyword">if</span> resource:<br>                resource.close()<br><br><span class="hljs-comment"># 辅助函数：等待提示符（简化版）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_await_prompt</span>(<span class="hljs-params">shell, prompts, timeout=<span class="hljs-number">10</span></span>):<br>    start_time = time.time()<br>    output = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> time.time() - start_time &lt; timeout:<br>        <span class="hljs-keyword">if</span> shell.recv_ready():<br>            output += shell.recv(<span class="hljs-number">4096</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-string">&#x27;ignore&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(prompt <span class="hljs-keyword">in</span> output <span class="hljs-keyword">for</span> prompt <span class="hljs-keyword">in</span> prompts):<br>                <span class="hljs-keyword">return</span> output<br>        time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-keyword">return</span> output<br></code></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>适用于需要交互式操作场景</li><li>通过循环等待提示符判断命令完成</li><li>灵活性高但性能较差</li></ul><h3 id="4-2-方式二：exec-command直接执行"><a href="#4-2-方式二：exec-command直接执行" class="headerlink" title="4.2 方式二：exec_command直接执行"></a>4.2 方式二：exec_command直接执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> paramiko<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ruijie_config_with_exec</span>():<br>    <span class="hljs-comment"># 代理与设备配置（同交互式方式）</span><br>    PROXY_IP = <span class="hljs-string">&quot;192.168.1.2&quot;</span><br>    PROXY_USER = <span class="hljs-string">&quot;admin&quot;</span><br>    PROXY_PASS = <span class="hljs-string">&quot;12345&quot;</span><br>    DEVICE_IP = <span class="hljs-string">&quot;192.168.1.100&quot;</span><br>    DEVICE_USER = <span class="hljs-string">&quot;admin&quot;</span><br>    DEVICE_PASS = <span class="hljs-string">&quot;ruijie123&quot;</span><br>    <br>    transport = <span class="hljs-literal">None</span><br>    client = <span class="hljs-literal">None</span><br>    <br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 1. 连接代理服务器并创建转发通道</span><br>        transport = paramiko.Transport((PROXY_IP, <span class="hljs-number">22</span>))<br>        transport.connect(username=PROXY_USER, password=PROXY_PASS)<br>        channel = transport.open_channel(<span class="hljs-string">&#x27;direct-tcpip&#x27;</span>, (DEVICE_IP, <span class="hljs-number">22</span>), (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span>))<br>        <br>        <span class="hljs-comment"># 2. 连接锐捷设备</span><br>        client = paramiko.SSHClient()<br>        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>        client.connect(<br>            hostname=DEVICE_IP,<br>            username=DEVICE_USER,<br>            password=DEVICE_PASS,<br>            sock=channel,<br>            timeout=<span class="hljs-number">10</span><br>        )<br>        <br>        <span class="hljs-comment"># 3. 直接执行show running-config命令（锐捷设备无需进入特权模式也可执行部分查询）</span><br>        <span class="hljs-comment"># 注意：实际环境可能需要先进入特权模式</span><br>        stdin, stdout, stderr = client.exec_command(<br>            <span class="hljs-string">&quot;show running-config&quot;</span>,  <span class="hljs-comment"># 直接执行命令</span><br>            timeout=<span class="hljs-number">20</span>  <span class="hljs-comment"># 配置输出可能较大，延长超时</span><br>        )<br>        <br>        <span class="hljs-comment"># 4. 获取配置内容</span><br>        config = stdout.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        error = stderr.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <br>        <span class="hljs-keyword">if</span> error:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;命令错误: <span class="hljs-subst">&#123;error&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;锐捷设备配置:\n<span class="hljs-subst">&#123;config[:<span class="hljs-number">100</span>]&#125;</span>... (总长度: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(config)&#125;</span>字符)&quot;</span>)<br>            <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># 5. 资源清理</span><br>        <span class="hljs-keyword">for</span> resource <span class="hljs-keyword">in</span> [client, transport]:<br>            <span class="hljs-keyword">if</span> resource:<br>                resource.close()<br></code></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>直接执行命令并获取结果</li><li>适用于非交互式简单命令</li><li>性能好但灵活性低</li></ul><h2 id="五、两种方式对比"><a href="#五、两种方式对比" class="headerlink" title="五、两种方式对比"></a>五、两种方式对比</h2><table><thead><tr><th>方式</th><th>交互式Shell</th><th>exec_command</th></tr></thead><tbody><tr><td>核心</td><td>模拟人工交互</td><td>直接执行命令</td></tr><tr><td>场景</td><td>配置设备、复杂交互</td><td>查询信息、简单命令</td></tr><tr><td>性能</td><td>较差（循环等待）</td><td>较好（阻塞执行）</td></tr><tr><td>资源</td><td>CPU占用高</td><td>CPU占用低</td></tr></tbody></table><h2 id="六、适用建议"><a href="#六、适用建议" class="headerlink" title="六、适用建议"></a>六、适用建议</h2><ul><li><strong>交互式Shell</strong>：设备配置、需要多步交互的场景</li><li><strong>exec_command</strong>：信息查询、性能要求高的批量操作</li><li><strong>ssh -J</strong>：手动命令行跳转，简单快捷</li></ul><h2 id="七、关键优势"><a href="#七、关键优势" class="headerlink" title="七、关键优势"></a>七、关键优势</h2><ul><li><strong>安全性</strong>：所有流量通过SSH加密</li><li><strong>便捷性</strong>：无需开放目标设备公网访问</li><li><strong>灵活性</strong>：支持复杂网络环境下的设备管理</li></ul>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SNMP代理案例</title>
    <link href="/2025/06/11/SNMP%E4%BB%A3%E7%90%86/"/>
    <url>/2025/06/11/SNMP%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="SNMP代理案例"><a href="#SNMP代理案例" class="headerlink" title="SNMP代理案例"></a>SNMP代理案例</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在某些网络环境中，直接访问目标设备的 SNMP 服务可能受到限制，例如由于网络隔离、防火墙限制或设备配置问题。为了绕过这些限制，可以使用 SNMP 代理服务器。代理服务器接收来自客户端的 SNMP 请求，然后将请求转发到目标设备，并将响应返回给客户端。这种方式可以实现对目标设备的间接访问和管理。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>以下是运行此 SNMP 代理程序所需的依赖项：</p><ol><li><strong>Python</strong>：程序基于 Python 编写，需要 Python 环境（建议使用 Python 3.7 及以上版本）。</li><li><strong>asyncudp</strong>：用于异步 UDP 通信，可通过 <code>pip install asyncudp</code> 安装。</li><li><strong>pysnmp</strong>：用于处理 SNMP 请求和响应，可通过 <code>pip install pysnmp</code> 安装。</li><li><strong>logging</strong>：Python 内置的日志模块，用于记录程序运行日志。</li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端程序（<code>snmp_proxy_client.py</code>）通过 UDP 协议向代理服务器发送 SNMP 请求。请求内容包括目标设备的 IP 地址、端口号、社区字符串和 OID。代理服务器接收到请求后，会根据这些信息向目标设备发起 SNMP 查询，并将查询结果返回给客户端。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>服务端程序（<code>snmp_proxy_server.py</code>）运行在代理服务器上，监听指定的 UDP 端口（默认为 161）。当接收到客户端的请求时，服务端会解析请求内容，使用 <code>pysnmp</code> 库向目标设备发起 SNMP 查询，并将查询结果返回给客户端。服务端还配置了日志记录功能，用于记录请求和响应信息，便于调试和监控。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="客户端代码：snmp-proxy-client-py"><a href="#客户端代码：snmp-proxy-client-py" class="headerlink" title="客户端代码：snmp_proxy_client.py"></a>客户端代码：<code>snmp_proxy_client.py</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> sys<br><br>PROXY_SERVER = (<span class="hljs-string">&quot;192.168.1.2&quot;</span>, <span class="hljs-number">161</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query_snmp</span>(<span class="hljs-params">ip, port, community, oid</span>):<br>    <span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_DGRAM) <span class="hljs-keyword">as</span> s:<br>        s.settimeout(<span class="hljs-number">10</span>)<br>        msg = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ip&#125;</span>|<span class="hljs-subst">&#123;port&#125;</span>|<span class="hljs-subst">&#123;community&#125;</span>|<span class="hljs-subst">&#123;oid&#125;</span>&quot;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        s.sendto(msg, PROXY_SERVER)<br>        response, _ = s.recvfrom(<span class="hljs-number">65536</span>)<br>        <span class="hljs-keyword">return</span> response.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    ip = <span class="hljs-string">&quot;192.168.1.3&quot;</span><br>    port = <span class="hljs-number">161</span><br>    community = <span class="hljs-string">&quot;public&quot;</span><br>    oid = <span class="hljs-string">&quot;1.3.6.1.2.1.1.5.0&quot;</span><br><br>    result = query_snmp(ip, port, community, oid)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Response:&quot;</span>, result)<br></code></pre></td></tr></table></figure><h3 id="服务端代码：snmp-proxy-server-py"><a href="#服务端代码：snmp-proxy-server-py" class="headerlink" title="服务端代码：snmp_proxy_server.py"></a>服务端代码：<code>snmp_proxy_server.py</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncudp<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">from</span> logging.handlers <span class="hljs-keyword">import</span> RotatingFileHandler<br><span class="hljs-keyword">from</span> pysnmp.hlapi.asyncio <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 配置日志</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_logger</span>():<br>    logger = logging.getLogger(<span class="hljs-string">&#x27;snmp_proxy&#x27;</span>)<br>    logger.setLevel(logging.INFO)<br>    <br>    <span class="hljs-comment"># 创建文件处理器，最大5MB，保留2个备份</span><br>    file_handler = RotatingFileHandler(<br>        <span class="hljs-string">&#x27;snmp_proxy.log&#x27;</span>, <br>        maxBytes=<span class="hljs-number">5</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>,  <span class="hljs-comment"># 5MB</span><br>        backupCount=<span class="hljs-number">2</span><br>    )<br>    file_handler.setLevel(logging.INFO)<br>    <br>    <span class="hljs-comment"># 创建控制台处理器</span><br>    console_handler = logging.StreamHandler()<br>    console_handler.setLevel(logging.INFO)<br>    <br>    <span class="hljs-comment"># 定义日志格式</span><br>    formatter = logging.Formatter(<span class="hljs-string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)<br>    file_handler.setFormatter(formatter)<br>    console_handler.setFormatter(formatter)<br>    <br>    <span class="hljs-comment"># 添加处理器</span><br>    logger.addHandler(file_handler)<br>    logger.addHandler(console_handler)<br>    <br>    <span class="hljs-keyword">return</span> logger<br><br>logger = setup_logger()<br>LOCAL_ADDR = (<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">161</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">snmp_get</span>(<span class="hljs-params">target_ip, port, community, oid</span>):<br>    <span class="hljs-keyword">try</span>:<br>        logger.info(<span class="hljs-string">f&quot;向目标设备 <span class="hljs-subst">&#123;target_ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span> 发送SNMP请求, OID: <span class="hljs-subst">&#123;oid&#125;</span>&quot;</span>)<br>        snmp_engine = SnmpEngine()<br><br>        transport_target = <span class="hljs-keyword">await</span> UdpTransportTarget.create(<br>            (target_ip, port),<br>            timeout=<span class="hljs-number">5.0</span>,<br>            retries=<span class="hljs-number">3</span><br>        )<br><br>        iterator = get_cmd(<br>            snmp_engine,<br>            CommunityData(community, mpModel=<span class="hljs-number">1</span>),  <span class="hljs-comment"># SNMP v2c</span><br>            transport_target,<br>            ContextData(),<br>            ObjectType(ObjectIdentity(oid))<br>        )<br><br>        error_indication, error_status, error_index, var_binds = <span class="hljs-keyword">await</span> iterator<br><br>        <span class="hljs-keyword">if</span> error_indication:<br>            error_msg = <span class="hljs-string">f&quot;SNMP请求错误: <span class="hljs-subst">&#123;error_indication&#125;</span>&quot;</span><br>            logger.error(error_msg)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;ERROR: <span class="hljs-subst">&#123;error_indication&#125;</span>&quot;</span><br>        <span class="hljs-keyword">elif</span> error_status:<br>            error_msg = <span class="hljs-string">f&quot;SNMP状态错误: <span class="hljs-subst">&#123;error_status.prettyPrint()&#125;</span>&quot;</span><br>            logger.error(error_msg)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;ERROR: <span class="hljs-subst">&#123;error_status.prettyPrint()&#125;</span>&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> var_bind <span class="hljs-keyword">in</span> var_binds:<br>                result = var_bind[<span class="hljs-number">1</span>].prettyPrint()<br>                logger.info(<span class="hljs-string">f&quot;从目标设备 <span class="hljs-subst">&#123;target_ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span> 收到响应: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        error_msg = <span class="hljs-string">f&quot;SNMP请求异常: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span><br>        logger.error(error_msg)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;EXCEPTION: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span><br>    <span class="hljs-keyword">finally</span>:<br>        snmp_engine.close_dispatcher()<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">proxy_handler</span>(<span class="hljs-params">sock, addr, data</span>):<br>    client_ip, client_port = addr<br>    logger.info(<span class="hljs-string">f&quot;接收到来自客户端 <span class="hljs-subst">&#123;client_ip&#125;</span>:<span class="hljs-subst">&#123;client_port&#125;</span> 的请求&quot;</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        decoded = data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).strip()<br>        parts = decoded.split(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(parts) != <span class="hljs-number">4</span>:<br>            error_msg = <span class="hljs-string">f&quot;来自客户端 <span class="hljs-subst">&#123;client_ip&#125;</span>:<span class="hljs-subst">&#123;client_port&#125;</span> 的请求格式错误&quot;</span><br>            logger.error(error_msg)<br>            sock.sendto(<span class="hljs-string">b&quot;ERROR: INVALID FORMAT&quot;</span>, addr)<br>            <span class="hljs-keyword">return</span><br><br>        target_ip, port_str, community, oid = parts<br>        <span class="hljs-keyword">try</span>:<br>            port = <span class="hljs-built_in">int</span>(port_str)<br>        <span class="hljs-keyword">except</span> ValueError:<br>            error_msg = <span class="hljs-string">f&quot;来自客户端 <span class="hljs-subst">&#123;client_ip&#125;</span>:<span class="hljs-subst">&#123;client_port&#125;</span> 的端口号无效&quot;</span><br>            logger.error(error_msg)<br>            sock.sendto(<span class="hljs-string">b&quot;ERROR: INVALID PORT&quot;</span>, addr)<br>            <span class="hljs-keyword">return</span><br><br>        logger.info(<span class="hljs-string">f&quot;转发请求到 <span class="hljs-subst">&#123;target_ip&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span> | OID: <span class="hljs-subst">&#123;oid&#125;</span> | 社区: <span class="hljs-subst">&#123;community&#125;</span>&quot;</span>)<br>        result = <span class="hljs-keyword">await</span> snmp_get(target_ip, port, community, oid)<br>        <br>        logger.info(<span class="hljs-string">f&quot;向客户端 <span class="hljs-subst">&#123;client_ip&#125;</span>:<span class="hljs-subst">&#123;client_port&#125;</span> 发送响应&quot;</span>)<br>        sock.sendto(result.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), addr)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        error_msg = <span class="hljs-string">f&quot;处理客户端 <span class="hljs-subst">&#123;client_ip&#125;</span>:<span class="hljs-subst">&#123;client_port&#125;</span> 请求时发生内部错误: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span><br>        logger.error(error_msg)<br>        sock.sendto(<span class="hljs-string">b&quot;ERROR: INTERNAL SERVER ERROR&quot;</span>, addr)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_proxy</span>():<br>    sock = <span class="hljs-keyword">await</span> asyncudp.create_socket(local_addr=LOCAL_ADDR)<br>    logger.info(<span class="hljs-string">f&quot;SNMP代理服务器已启动，监听地址: <span class="hljs-subst">&#123;LOCAL_ADDR&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        data, addr = <span class="hljs-keyword">await</span> sock.recvfrom()<br>        asyncio.create_task(proxy_handler(sock, addr, data))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    asyncio.run(run_proxy())<br></code></pre></td></tr></table></figure><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><strong>灵活性</strong>：客户端可以通过代理服务器访问任何目标设备，无需直接连接到目标设备。</li><li><strong>安全性</strong>：代理服务器可以作为中间层，隐藏目标设备的网络拓扑结构，增强安全性。</li><li><strong>可扩展性</strong>：代理服务器可以处理多个客户端的请求，支持大规模部署。</li><li><strong>日志记录</strong>：服务端配置了详细的日志记录功能，便于监控和调试。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><strong>性能开销</strong>：代理服务器会增加请求和响应的延迟，尤其是在高负载情况下。</li><li><strong>单点故障</strong>：如果代理服务器出现故障，所有客户端的请求都将受到影响。</li><li><strong>配置复杂性</strong>：需要正确配置代理服务器和客户端的参数，否则可能导致请求失败。</li><li><strong>安全性风险</strong>：如果代理服务器被攻击，可能会泄露目标设备的信息。</li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li><strong>启动代理服务器</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python snmp_proxy_server.py<br></code></pre></td></tr></table></figure></li><li><strong>运行客户端程序</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python snmp_proxy_client.py<br></code></pre></td></tr></table></figure></li><li><strong>查看日志</strong>：<ul><li>代理服务器的日志文件为 <code>snmp_proxy.log</code>，可以查看请求和响应的详细信息</li></ul></li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2025</span>-<span class="hljs-number">06</span>-<span class="hljs-number">10</span> <span class="hljs-number">17</span>:<span class="hljs-number">29</span>:<span class="hljs-number">49</span>,<span class="hljs-number">083</span> - INFO - 接收到来自客户端 <span class="hljs-number">192.168.1.1:50014</span> 的请求<br><span class="hljs-attribute">2025</span>-<span class="hljs-number">06</span>-<span class="hljs-number">10</span> <span class="hljs-number">17</span>:<span class="hljs-number">29</span>:<span class="hljs-number">49</span>,<span class="hljs-number">084</span> - INFO - 转发请求到 <span class="hljs-number">192.168.1.3:161</span> | OID: <span class="hljs-number">1.3.6.1</span>.<span class="hljs-number">2.1.1.5</span>.<span class="hljs-number">0</span> | 社区: ccbnms<br><span class="hljs-attribute">2025</span>-<span class="hljs-number">06</span>-<span class="hljs-number">10</span> <span class="hljs-number">17</span>:<span class="hljs-number">29</span>:<span class="hljs-number">49</span>,<span class="hljs-number">084</span> - INFO - 向目标设备 <span class="hljs-number">192.168.1.3:161</span> 发送SNMP请求, OID: <span class="hljs-number">1.3.6.1</span>.<span class="hljs-number">2.1.1.5</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">2025</span>-<span class="hljs-number">06</span>-<span class="hljs-number">10</span> <span class="hljs-number">17</span>:<span class="hljs-number">29</span>:<span class="hljs-number">49</span>,<span class="hljs-number">386</span> - INFO - 从目标设备 <span class="hljs-number">192.168.1.3:161</span> 收到响应: ZS_GeDai<br><span class="hljs-attribute">2025</span>-<span class="hljs-number">06</span>-<span class="hljs-number">10</span> <span class="hljs-number">17</span>:<span class="hljs-number">29</span>:<span class="hljs-number">49</span>,<span class="hljs-number">387</span> - INFO - 向客户端 <span class="hljs-number">192.168.1.1:50014</span> 发送响应<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu24重装记录</title>
    <link href="/2025/04/25/ubuntu24%E9%87%8D%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/04/25/ubuntu24%E9%87%8D%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>不小心把服务器mysql数据删除了，之前用宝塔面板无脑装的可道云用不了了，考虑到服务器上也没有什么重要的内容，决定重装系统，顺便把可道云换成docker版的，把我必装的一部分软件和配置都记录一下，有些软件安装之前已经写过文章，这里可能重复了，但这算是一个汇总版</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ul><li>rufus制作启动U盘选择GPT分区</li><li>bios选择U盘启动</li><li>安装时文件系统选择NTFS</li><li>磁盘分区时在free空间单独分配出给&#x2F;home的空间，剩余的修改&#x2F;目录的分配大小，写一个超过硬盘大小的空间把剩余的都分配给&#x2F;</li></ul><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><h3 id="root密码"><a href="#root密码" class="headerlink" title="root密码"></a>root密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo su -<br>passwd<br></code></pre></td></tr></table></figure><h3 id="允许root远程ssh登录"><a href="#允许root远程ssh登录" class="headerlink" title="允许root远程ssh登录"></a>允许root远程ssh登录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/ssh/ssh_config<br>PermitRootLogin yes<br>port xxxx<br></code></pre></td></tr></table></figure><h3 id="更改软件源"><a href="#更改软件源" class="headerlink" title="更改软件源"></a>更改软件源</h3><p>清华源官方:<code>https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</code></p><p>修改<code>/etc/apt/sources.list.d/ubuntu.sources</code>为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs conf">Types: deb<br>URIs: https://mirrors.tuna.tsinghua.edu.cn/ubuntu<br>Suites: noble noble-updates noble-backports<br>Components: main restricted universe multiverse<br>Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg<br><br># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释<br># Types: deb-src<br># URIs: https://mirrors.tuna.tsinghua.edu.cn/ubuntu<br># Suites: noble noble-updates noble-backports<br># Components: main restricted universe multiverse<br># Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg<br><br># 以下安全更新软件源包含了官方源与镜像站配置，如有需要可自行修改注释切换<br>Types: deb<br>URIs: https://mirrors.tuna.tsinghua.edu.cn/ubuntu<br>Suites: noble-security<br>Components: main restricted universe multiverse<br>Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg<br><br># Types: deb-src<br># URIs: https://mirrors.tuna.tsinghua.edu.cn/ubuntu<br># Suites: noble-security<br># Components: main restricted universe multiverse<br># Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg<br><br># 预发布软件源，不建议启用<br><br># Types: deb<br># URIs: https://mirrors.tuna.tsinghua.edu.cn/ubuntu<br># Suites: noble-proposed<br># Components: main restricted universe multiverse<br># Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg<br><br># # Types: deb-src<br># # URIs: https://mirrors.tuna.tsinghua.edu.cn/ubuntu<br># # Suites: noble-proposed<br># # Components: main restricted universe multiverse<br># # Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br>sudo apt upgrade<br></code></pre></td></tr></table></figure><h3 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">date<br>sudo timedatectl set-timezone Asia/Shanghai<br>date<br></code></pre></td></tr></table></figure><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><h3 id="v2raya"><a href="#v2raya" class="headerlink" title="v2raya"></a>v2raya</h3><p>官方文档<code>https://v2raya.org/docs/prologue/installation/docker/</code><br>之前写过的文章<code>https://xinhaojin.github.io/2025/01/01/ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEv2raya/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mzz2017/v2raya<br>docker run -d \<br>  --restart=always \<br>  --privileged \<br>  --network=host \<br>  --name v2raya \<br>  -e V2RAYA_LOG_FILE=/tmp/v2raya.log \<br>  -e V2RAYA_V2RAY_BIN=/usr/local/bin/xray \<br>  -e V2RAYA_NFTABLES_SUPPORT=off \<br>  -e IPTABLES_MODE=legacy \<br>  -v /lib/modules:/lib/modules:ro \<br>  -v /etc/resolv.conf:/etc/resolv.conf \<br>  -v /etc/v2raya:/etc/v2raya \<br>  mzz2017/v2raya<br></code></pre></td></tr></table></figure><h3 id="proxychains4"><a href="#proxychains4" class="headerlink" title="proxychains4"></a>proxychains4</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install proxychains4<br></code></pre></td></tr></table></figure><p>编辑<code>/etc/proaychains4.conf</code></p><p>添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">http 192.168.31.100 10808<br></code></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install apt-transport-https ca-certificates curl software-properties-common -y<br>echo &quot;deb [arch=$(dpkg --print-architecture)] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list<br>sudo apt update<br>sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y<br>sudo usermod -aG docker username # 授权普通用户使用<br>systemctl enable docker #开机启动<br></code></pre></td></tr></table></figure><p>更改docker镜像源,修改<code>/etc/docker/daemon.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>  <span class="hljs-string">&quot;https://docker.1ms.run&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;https://docker.xuanyuan.me&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="miniconda"><a href="#miniconda" class="headerlink" title="miniconda"></a>miniconda</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -P /home/user/download https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<br>cd /home/user/download<br>bash Miniconda3-latest-Linux-x86_64.sh<br>source ~/.bashrc<br>conda init<br></code></pre></td></tr></table></figure><p>pip换源,<code>~/.pip/pip.conf</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[global]</span><br>index-url = https:<span class="hljs-comment">//pypi.mirrors.ustc.edu.cn/simple/</span><br>extra-index-url = https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple/</span><br>                http:<span class="hljs-comment">//mirrors.aliyun.com/pypi/simple/</span><br><br><span class="hljs-selector-attr">[install]</span><br>trusted-host = pypi<span class="hljs-selector-class">.mirrors</span><span class="hljs-selector-class">.ustc</span><span class="hljs-selector-class">.edu</span><span class="hljs-selector-class">.cn</span><br>            pypi<span class="hljs-selector-class">.tuna</span><span class="hljs-selector-class">.tsinghua</span><span class="hljs-selector-class">.edu</span><span class="hljs-selector-class">.cn</span><br>            mirrors<span class="hljs-selector-class">.aliyun</span>.com<br></code></pre></td></tr></table></figure><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>-g hexo-cli<br>mkdir <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>cd <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>hexo init<br>npm <span class="hljs-keyword">install </span>hexo-theme-fluid --save<br>npm <span class="hljs-keyword">install </span>hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql:8.3.0<br>mkdir -p  /home/jxh/mysql/&#123;conf,data,log&#125;<br>cd /home/jxh/mysql/conf<br>vim my.cnf<br></code></pre></td></tr></table></figure><p>my.cnf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs conf">[client]<br>#设置客户端默认字符集utf8mb4<br>default-character-set=utf8mb4<br>[mysql]<br>#设置服务器默认字符集为utf8mb4<br>default-character-set=utf8mb4<br>[mysqld]<br>#配置服务器的服务号，具备日后需要集群做准备<br>server-id = 1<br>#开启MySQL数据库的二进制日志，用于记录用户对数据库的操作SQL语句，具备日后需要集群做准备<br>log-bin=mysql-bin<br>#设置清理超过30天的日志，以免日志堆积造过多成服务器内存爆满。2592000秒等于30天的秒数<br>binlog_expire_logs_seconds = 2592000<br>#解决MySQL8.0版本GROUP BY问题<br>sql_mode=&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;<br>#允许最大的连接数<br>max_connections=1000<br># 禁用符号链接以防止各种安全风险<br>symbolic-links=0<br># 设置东八区时区<br>default-time_zone = &#x27;+8:00&#x27;<br>```shell<br>docker run \<br>-p 3306:3306 \<br>--restart=always \<br>--name mysql \<br>--privileged=true \<br>-v /home/jxh/mysql/log:/var/log/mysql \<br>-v /home/jxh/mysql/data:/var/lib/mysql \<br>-v /home/jxh/mysql/conf/my.cnf:/etc/mysql/my.cnf \<br>-e MYSQL_ROOT_PASSWORD=12345678 \<br>-d mysql:8.3.0 <br>docker exec -it mysql bash<br>mysql -u root -p<br></code></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install nginx<br></code></pre></td></tr></table></figure><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>添加nodejs仓库，获得最新的nodejs版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://deb.nodesource.com/setup_lts.x | <span class="hljs-built_in">sudo</span> -E bash -<br></code></pre></td></tr></table></figure><p>安装nodejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install nodejs<br>node -v<br>npm -v<br>npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h3 id="kodbox"><a href="#kodbox" class="headerlink" title="kodbox"></a>kodbox</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt  install docker-compose<br></code></pre></td></tr></table></figure><p>compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># docker-compose up -d </span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mariadb:10.6</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">--transaction-isolation=READ-COMMITTED</span> <span class="hljs-string">--log-bin=binlog</span> <span class="hljs-string">--binlog-format=ROW</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql:/var/lib/mysql&quot;</span>       <span class="hljs-comment"># 将数据库数据保存到指定目录</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=999999999</span>      <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MARIADB_AUTO_UPGRADE=1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MARIADB_DISABLE_UPGRADE_BACKUP=1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_DATABASE=kodbox</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_USER=kodbox</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_PASSWORD=999999999</span><br><br>  <span class="hljs-attr">app:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">kodcloud/kodbox</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">88</span><span class="hljs-string">:80</span>                       <span class="hljs-comment"># 左边80是使用端口，可以修改</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./site:/var/www/html&quot;</span>      <span class="hljs-comment"># 将可道云站点数据保存到指定目录</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_HOST=db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REDIS_HOST=redis</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_DATABASE=kodbox</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_USER=kodbox</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_PASSWORD=999999999</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:alpine</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./redis:/data&quot;</span>  <span class="hljs-comment"># 将 Redis 数据保存到指定目录    </span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up -d<br>docker rename kodbox_app_1 kodbox<br>docker exec -it kodbox bash<br>vi /etc/nginx/nginx.conf<br>    client_max_body_size 8G;        <br>    client_header_timeout 3600s;<br>    client_body_timeout 3600s;<br>    fastcgi_connect_timeout 3600s;<br>    fastcgi_send_timeout 3600s;<br>    fastcgi_read_timeout 3600s;<br>printenv | grep PHP_INI_DIR<br>vi /usr/local/etc/php/php.ini-production<br>    post_max_size = 8G;<br>    upload_max_filesize = 8G;<br>    memory_limit = 8G;<br>    max_execution_time = 3600;<br>    max_input_time = 3600;<br>vi /usr/local/etc/php-fpm.d/www.conf<br>    request_terminate_timeout 3600<br>    php_admin_value[memory_limit] = 8G<br></code></pre></td></tr></table></figure><h3 id="rclone"><a href="#rclone" class="headerlink" title="rclone"></a>rclone</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install rclone<br>rclone config<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>略</p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win11添加开机自启动脚本实现网卡异常自动重启</title>
    <link href="/2025/04/01/win11%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E7%BD%91%E5%8D%A1%E5%BC%82%E5%B8%B8%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/"/>
    <url>/2025/04/01/win11%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E7%BD%91%E5%8D%A1%E5%BC%82%E5%B8%B8%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>两台主机使用网线互联，使用Input Directorv2.2实现键鼠共享，但是由于其中一台机器某些软件原因有时候会掐断导致ping失败网络不通，共享键鼠中断，解决办法是禁用网卡后重启，但是每次重置都需要手动操作，所以写了一个脚本实现自动检测网络不通，自动重启网卡。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>net_monitor.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE, STARTUPINFO, STARTF_USESHOWWINDOW</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置参数</span></span><br><span class="line"><span class="comment"># 目标 IP 地址</span></span><br><span class="line">TARGET_IP = <span class="string">&quot;192.168.10.2&quot;</span></span><br><span class="line"><span class="comment"># 网络接口名称</span></span><br><span class="line">NIC_NAME = <span class="string">&quot;share&quot;</span></span><br><span class="line"><span class="comment"># 最大重试次数</span></span><br><span class="line">MAX_RETRIES = <span class="number">10</span></span><br><span class="line"><span class="comment"># 单次 ping 超时时间（秒）</span></span><br><span class="line">PING_TIMEOUT = <span class="number">1</span></span><br><span class="line"><span class="comment"># 检查间隔（秒）</span></span><br><span class="line">CHECK_INTERVAL = <span class="number">1</span></span><br><span class="line"><span class="comment"># 日志文件绝对路径</span></span><br><span class="line">LOG_FILE = <span class="string">&quot;net_monitor.log&quot;</span></span><br><span class="line"><span class="comment"># 最大日志文件大小（1MB）</span></span><br><span class="line">MAX_LOG_SIZE = <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化日志记录器（新增文件大小监控）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_logger</span>():</span><br><span class="line">    <span class="comment"># 创建日志记录器</span></span><br><span class="line">    logger = logging.getLogger(__name__)</span><br><span class="line">    <span class="comment"># 设置日志级别为 INFO</span></span><br><span class="line">    logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义文件处理器（达到 1MB 时清空）</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TruncatingFileHandler</span>(logging.FileHandler):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">emit</span>(<span class="params">self, record</span>):</span><br><span class="line">            <span class="comment"># 检查日志文件是否存在且大小超过最大限制</span></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(<span class="variable language_">self</span>.baseFilename) <span class="keyword">and</span> os.path.getsize(<span class="variable language_">self</span>.baseFilename) &gt; MAX_LOG_SIZE:</span><br><span class="line">                <span class="comment"># 清空日志文件</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.baseFilename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.truncate()</span><br><span class="line">            <span class="comment"># 调用父类的 emit 方法记录日志</span></span><br><span class="line">            <span class="built_in">super</span>().emit(record)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建自定义文件处理器</span></span><br><span class="line">    handler = TruncatingFileHandler(LOG_FILE, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 定义日志格式</span></span><br><span class="line">    formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">    <span class="comment"># 为处理器设置日志格式</span></span><br><span class="line">    handler.setFormatter(formatter)</span><br><span class="line">    <span class="comment"># 为日志记录器添加处理器</span></span><br><span class="line">    logger.addHandler(handler)</span><br><span class="line">    <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化日志记录器</span></span><br><span class="line">logger = setup_logger()</span><br><span class="line"><span class="comment"># 上一次的日志消息</span></span><br><span class="line">last_log_message = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录操作日志（带文件大小检查）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_action</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">global</span> last_log_message</span><br><span class="line">    <span class="comment"># 如果最新日志是网络连接正常且和上一条日志相同，仅更新时间</span></span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">&quot;网络连接正常。&quot;</span> <span class="keyword">and</span> message == last_log_message:</span><br><span class="line">        <span class="comment"># 读取日志文件的所有行</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(LOG_FILE, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.readlines()</span><br><span class="line">        <span class="comment"># 如果日志文件有内容</span></span><br><span class="line">        <span class="keyword">if</span> lines:</span><br><span class="line">            <span class="comment"># 获取最后一行</span></span><br><span class="line">            last_line = lines[-<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 生成新的时间戳</span></span><br><span class="line">            timestamp = logging.Formatter(<span class="string">&#x27;%(asctime)s&#x27;</span>).<span class="built_in">format</span>(logging.LogRecord(</span><br><span class="line">                name=__name__,</span><br><span class="line">                level=logging.INFO,</span><br><span class="line">                pathname=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                lineno=<span class="number">0</span>,</span><br><span class="line">                msg=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                args=(),</span><br><span class="line">                exc_info=<span class="literal">None</span></span><br><span class="line">            ))</span><br><span class="line">            <span class="comment"># 生成新的最后一行日志</span></span><br><span class="line">            new_last_line = <span class="string">f&quot;<span class="subst">&#123;timestamp&#125;</span> - INFO - <span class="subst">&#123;message&#125;</span>\n&quot;</span></span><br><span class="line">            <span class="comment"># 更新最后一行日志</span></span><br><span class="line">            lines[-<span class="number">1</span>] = new_last_line</span><br><span class="line">            <span class="comment"># 将更新后的日志写回文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(LOG_FILE, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.writelines(lines)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 记录日志消息</span></span><br><span class="line">        logger.info(message)</span><br><span class="line">        <span class="comment"># 更新上一次的日志消息</span></span><br><span class="line">        last_log_message = message</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测目标主机是否可达</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ping_host</span>(<span class="params">ip</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 执行 ping 命令，隐藏 ping 窗口</span></span><br><span class="line">        result = Popen(<span class="string">f&#x27;ping -n 1 -w <span class="subst">&#123;<span class="built_in">int</span>(PING_TIMEOUT * <span class="number">1000</span>)&#125;</span> <span class="subst">&#123;ip&#125;</span>&#x27;</span>, </span><br><span class="line">                     shell=<span class="literal">True</span>, stdout=PIPE, stderr=PIPE, </span><br><span class="line">                     creationflags=<span class="number">0x08000000</span>)</span><br><span class="line">        <span class="comment"># 获取 ping 命令的输出</span></span><br><span class="line">        output = result.communicate()[<span class="number">0</span>].decode(<span class="string">&#x27;gbk&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断输出中是否包含 TTL 信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;TTL=&#x27;</span> <span class="keyword">in</span> output</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 记录 ping 错误信息</span></span><br><span class="line">        log_action(<span class="string">f&quot;Ping 失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查网卡是否已断开连接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_nic_disconnected</span>(<span class="params">nic_name</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建启动信息对象，隐藏控制台窗口</span></span><br><span class="line">        si = STARTUPINFO()</span><br><span class="line">        si.dwFlags |= STARTF_USESHOWWINDOW</span><br><span class="line">        si.wShowWindow = subprocess.SW_HIDE  <span class="comment"># 隐藏窗口</span></span><br><span class="line">        </span><br><span class="line">        result = subprocess.Popen(</span><br><span class="line">            <span class="string">f&#x27;netsh interface show interface &quot;<span class="subst">&#123;nic_name&#125;</span>&quot;&#x27;</span>,</span><br><span class="line">            shell=<span class="literal">True</span>,</span><br><span class="line">            stdout=PIPE,</span><br><span class="line">            stderr=PIPE,</span><br><span class="line">            startupinfo=si,  <span class="comment"># 使用配置好的启动信息</span></span><br><span class="line">            creationflags=subprocess.CREATE_NO_WINDOW  <span class="comment"># 额外保险（旧版Python兼容）</span></span><br><span class="line">        )</span><br><span class="line">        output = result.communicate()[<span class="number">0</span>].decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(output)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;已断开连接&quot;</span> <span class="keyword">in</span> output</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        log_action(<span class="string">f&quot;检查网卡状态出错: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启网络接口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restart_nic</span>(<span class="params">nic_name</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 记录尝试重启网络接口的信息</span></span><br><span class="line">        log_action(<span class="string">&quot;正在尝试重启网络适配器...&quot;</span>)</span><br><span class="line">        <span class="comment"># 禁用网络接口</span></span><br><span class="line">        os.system(<span class="string">f&#x27;netsh interface set interface &quot;<span class="subst">&#123;nic_name&#125;</span>&quot; admin=disable &gt;nul 2&gt;&amp;1&#x27;</span>)</span><br><span class="line">        <span class="comment"># 等待 2 秒</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 启用网络接口</span></span><br><span class="line">        os.system(<span class="string">f&#x27;netsh interface set interface &quot;<span class="subst">&#123;nic_name&#125;</span>&quot; admin=enable &gt;nul 2&gt;&amp;1&#x27;</span>)</span><br><span class="line">        <span class="comment"># 记录网络接口重启成功的信息</span></span><br><span class="line">        log_action(<span class="string">&quot;网卡重启成功。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 记录网络接口重启失败的信息</span></span><br><span class="line">        log_action(<span class="string">f&quot;重启网卡失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 连续失败次数</span></span><br><span class="line">    failure_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 检测目标主机是否可达</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ping_host(TARGET_IP):</span><br><span class="line">            <span class="comment"># 失败次数加 1</span></span><br><span class="line">            failure_count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 记录 ping 失败信息</span></span><br><span class="line">            log_action(<span class="string">f&quot;Ping 失败。当前连续失败次数: <span class="subst">&#123;failure_count&#125;</span>/<span class="subst">&#123;MAX_RETRIES&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># 如果连续失败次数达到最大重试次数</span></span><br><span class="line">            <span class="keyword">if</span> failure_count &gt;= MAX_RETRIES:</span><br><span class="line">                <span class="comment"># 检查网卡是否已断开连接</span></span><br><span class="line">                <span class="keyword">if</span> is_nic_disconnected(NIC_NAME):</span><br><span class="line">                    log_action(<span class="string">&quot;网卡已断开连接，跳过重启操作。&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 重启网络接口</span></span><br><span class="line">                    success = restart_nic(NIC_NAME)</span><br><span class="line">                    <span class="comment"># 记录重启结果</span></span><br><span class="line">                    log_action(<span class="string">f&quot;重启 <span class="subst">&#123;<span class="string">&#x27;成功&#x27;</span> <span class="keyword">if</span> success <span class="keyword">else</span> <span class="string">&#x27;失败&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="comment"># 重置失败次数</span></span><br><span class="line">                failure_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 重置失败次数</span></span><br><span class="line">            failure_count = <span class="number">0</span></span><br><span class="line">            <span class="comment"># 记录网络连接正常的信息</span></span><br><span class="line">            log_action(<span class="string">&quot;网络连接正常。&quot;</span>)</span><br><span class="line">        <span class="comment"># 等待指定的检查间隔时间</span></span><br><span class="line">        time.sleep(CHECK_INTERVAL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 执行主函数</span></span><br><span class="line">        main()</span><br><span class="line">        <span class="comment"># print(is_nic_disconnected(NIC_NAME))</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 记录程序终止信息</span></span><br><span class="line">        log_action(<span class="string">f&quot;程序终止: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># pyinstaller --onefile -w --uac-admin --noconfirm net_monitor.py</span></span><br></pre></td></tr></table></figure><p>net_monitor.bat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd /d &quot;C:\net_monitor&quot;</span><br><span class="line">start /b pythonw.exe net_monitor.py</span><br></pre></td></tr></table></figure><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><p>打开”开始菜单” -&gt; 输入”任务计划程序” -&gt; 选择”创建任务”<br>常规选项卡：</p><ul><li>输入任务名称：”net_monitor”</li><li>选择运行用户：”当前用户”</li><li>选择运行方式：”最高权限”</li><li>勾选”无论用户是否登录都要运行”</li><li>勾选”隐藏窗口”</li><li>配置win10<br>触发器选项卡：</li><li>选择”新建”</li><li>选择”启动时”<br>操作选项卡：</li><li>选择”新建”</li><li>选择”启动程序”</li><li>选择”程序或脚本”，并选择”net_monitor.bat”<br>确定创建任务</li></ul>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网工</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DBeaver连接MySQL和IoTDB数据库步骤</title>
    <link href="/2025/02/06/DBeaver%E8%BF%9E%E6%8E%A5MySQL%E5%92%8CIoTDB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%A5%E9%AA%A4/"/>
    <url>/2025/02/06/DBeaver%E8%BF%9E%E6%8E%A5MySQL%E5%92%8CIoTDB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="DBeaver连接MySQL和IoTDB数据库步骤"><a href="#DBeaver连接MySQL和IoTDB数据库步骤" class="headerlink" title="DBeaver连接MySQL和IoTDB数据库步骤"></a>DBeaver连接MySQL和IoTDB数据库步骤</h1><h2 id="一、DBeaver-连接-MySQL-数据库步骤"><a href="#一、DBeaver-连接-MySQL-数据库步骤" class="headerlink" title="一、DBeaver 连接 MySQL 数据库步骤"></a>一、DBeaver 连接 MySQL 数据库步骤</h2><ol><li><p><strong>新建数据库连接</strong>  </p><ul><li>打开 DBeaver，选择新建数据库连接。</li><li>在数据库类型中选择 MySQL。</li></ul></li><li><p><strong>编辑驱动设置</strong>  </p><ul><li>进入驱动设置页面，选择库选项。</li></ul></li><li><p><strong>添加驱动文件</strong>  </p><ul><li>添加 MySQL 驱动文件，例如 <code>mysql-connector-java-8.0.17.jar</code>。</li><li><code>https://gitee.com/liwei125/dbeaver-driver-all/blob/master/drivers/mysql/mysql8/mysql-connector-java-8.0.17.jar</code></li></ul></li><li><p><strong>设置驱动类</strong>  </p><ul><li>找到驱动类为 <code>com.mysql.cj.jdbc.Driver</code>，点击确定完成设置。</li></ul></li></ol><h2 id="二、DBeaver-连接-IoTDB-数据库步骤"><a href="#二、DBeaver-连接-IoTDB-数据库步骤" class="headerlink" title="二、DBeaver 连接 IoTDB 数据库步骤"></a>二、DBeaver 连接 IoTDB 数据库步骤</h2><h3 id="（一）下载-IoTDB-JDBC-驱动"><a href="#（一）下载-IoTDB-JDBC-驱动" class="headerlink" title="（一）下载 IoTDB JDBC 驱动"></a>（一）下载 IoTDB JDBC 驱动</h3><ul><li>从IoTDB官网<code>https://iotdb.apache.org/zh/UserGuide/latest/Ecosystem-Integration/DBeaver.html</code>下载与您 IoTDB 版本适配的 JDBC 驱动。</li></ul><h3 id="（二）安装-JDBC-驱动"><a href="#（二）安装-JDBC-驱动" class="headerlink" title="（二）安装 JDBC 驱动"></a>（二）安装 JDBC 驱动</h3><ol><li>打开 DBeaver，点击菜单栏中的 “数据库”。</li><li>选择 “驱动管理器”，点击 “新建”。</li><li>在弹出窗口中，填写以下信息：<ul><li><strong>类名</strong>：<code>org.apache.iotdb.jdbc.IoTDBDriver</code></li><li><strong>URL 模板</strong>：<code>jdbc:iotdb://127.0.0.1:6667/</code></li><li><strong>默认端口</strong>：<code>6667</code></li><li><strong>默认用户</strong>：<code>root</code></li></ul></li><li>点击 “添加文件”，选择之前下载的 JDBC 驱动 jar 文件，然后点击 “确定”。</li></ol><h3 id="（三）连接-IoTDB-数据库"><a href="#（三）连接-IoTDB-数据库" class="headerlink" title="（三）连接 IoTDB 数据库"></a>（三）连接 IoTDB 数据库</h3><ol><li>在 DBeaver 中，点击 “新建连接”，搜索 “IoTDB”。</li><li>输入数据库的连接信息，包含 IP 地址、端口号、用户名和密码。</li><li>点击 “测试连接”，确保连接成功。</li><li>若测试通过，点击 “确定” 完成连接设置。</li></ol><hr><p>通过上述步骤，即可在 DBeaver 中成功连接 MySQL 和 IoTDB 数据库，进而执行 SQL 查询和管理数据库。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用polkit实现普通用户管理systemctl服务</title>
    <link href="/2025/01/26/%E4%BD%BF%E7%94%A8polkit%E5%AE%9E%E7%8E%B0%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86systemctl%E6%9C%8D%E5%8A%A1/"/>
    <url>/2025/01/26/%E4%BD%BF%E7%94%A8polkit%E5%AE%9E%E7%8E%B0%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86systemctl%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>默认情况下，普通用户无法直接使用 <code>systemctl</code> 管理系统服务（如 <code>nginx</code>），因为需要管理员权限（<code>root</code> 或 <code>sudo</code>）。通过 <code>polkit</code>，可以为普通用户授权管理特定服务。</p><hr><h2 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2. 实现步骤"></a>2. 实现步骤</h2><h3 id="2-1-创建-polkit-规则文件"><a href="#2-1-创建-polkit-规则文件" class="headerlink" title="2.1 创建 polkit 规则文件"></a>2.1 创建 <code>polkit</code> 规则文件</h3><ol><li><p>进入 <code>polkit</code> 规则目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/polkit-1/rules.d/</span><br></pre></td></tr></table></figure></li><li><p>创建一个新的规则文件（例如 <code>20-nginx.rules</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi 20-nginx.rules</span><br></pre></td></tr></table></figure></li><li><p>添加以下内容（假设普通用户名为 <code>user1</code>）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">polkit.<span class="title function_">addRule</span>(<span class="keyword">function</span>(<span class="params">action, subject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (action.<span class="property">id</span> == <span class="string">&quot;org.freedesktop.systemd1.manage-units&quot;</span> &amp;&amp;</span><br><span class="line">        action.<span class="title function_">lookup</span>(<span class="string">&quot;unit&quot;</span>) == <span class="string">&quot;nginx.service&quot;</span> &amp;&amp;</span><br><span class="line">        subject.<span class="property">user</span> == <span class="string">&quot;user1&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> polkit.<span class="property">Result</span>.<span class="property">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong><code>action.id</code></strong>：指定操作类型，这里是管理 systemd 服务。</li><li><strong><code>action.lookup(&quot;unit&quot;)</code></strong>：指定服务名称（如 <code>nginx.service</code>）。</li><li><strong><code>subject.user</code></strong>：指定允许的用户（如 <code>user1</code>）。</li><li><strong><code>polkit.Result.YES</code></strong>：允许用户执行操作。</li></ul></li><li><p>保存并退出。</p></li></ol><hr><h3 id="2-2-验证规则文件"><a href="#2-2-验证规则文件" class="headerlink" title="2.2 验证规则文件"></a>2.2 验证规则文件</h3><ol><li><p>确保规则文件权限正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 644 /etc/polkit-1/rules.d/10-nginx.rules</span><br></pre></td></tr></table></figure></li><li><p>检查规则文件是否加载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart polkit</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="2-3-测试普通用户权限"><a href="#2-3-测试普通用户权限" class="headerlink" title="2.3 测试普通用户权限"></a>2.3 测试普通用户权限</h3><ol><li><p>切换到普通用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - user1</span><br></pre></td></tr></table></figure></li><li><p>尝试管理 <code>nginx</code> 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl stop nginx</span><br><span class="line">systemctl restart nginx</span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><ul><li>如果规则生效，普通用户可以直接执行这些命令，而无需 <code>sudo</code>。</li></ul></li></ol><hr><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h2><h3 id="3-1-规则文件命名"><a href="#3-1-规则文件命名" class="headerlink" title="3.1 规则文件命名"></a>3.1 规则文件命名</h3><ul><li>规则文件的命名格式为 <code>数字编号-描述.rules</code>（如 <code>10-nginx.rules</code>）。</li><li>数字编号越小，优先级越高。</li><li>确保数字编号唯一，避免冲突。</li></ul><h3 id="3-2-规则文件路径"><a href="#3-2-规则文件路径" class="headerlink" title="3.2 规则文件路径"></a>3.2 规则文件路径</h3><ul><li>系统范围的规则文件放在 <code>/etc/polkit-1/rules.d/</code>。</li><li>软件包安装的规则文件放在 <code>/usr/share/polkit-1/rules.d/</code>。</li></ul><h3 id="3-3-调试规则"><a href="#3-3-调试规则" class="headerlink" title="3.3 调试规则"></a>3.3 调试规则</h3><ul><li>如果规则未生效，检查以下内容：<ul><li>规则文件是否正确。</li><li>规则文件是否加载（重启 <code>polkit</code> 服务）。</li><li>用户是否匹配（<code>subject.user</code>）。</li></ul></li></ul><hr><h2 id="4-扩展功能"><a href="#4-扩展功能" class="headerlink" title="4. 扩展功能"></a>4. 扩展功能</h2><h3 id="4-1-授权多个用户"><a href="#4-1-授权多个用户" class="headerlink" title="4.1 授权多个用户"></a>4.1 授权多个用户</h3><p>如果需要授权多个用户，可以修改规则文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">polkit.<span class="title function_">addRule</span>(<span class="keyword">function</span>(<span class="params">action, subject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (action.<span class="property">id</span> == <span class="string">&quot;org.freedesktop.systemd1.manage-units&quot;</span> &amp;&amp;</span><br><span class="line">        action.<span class="title function_">lookup</span>(<span class="string">&quot;unit&quot;</span>) == <span class="string">&quot;nginx.service&quot;</span> &amp;&amp;</span><br><span class="line">        (subject.<span class="property">user</span> == <span class="string">&quot;user1&quot;</span> || subject.<span class="property">user</span> == <span class="string">&quot;user2&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> polkit.<span class="property">Result</span>.<span class="property">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-2-授权用户组"><a href="#4-2-授权用户组" class="headerlink" title="4.2 授权用户组"></a>4.2 授权用户组</h3><p>如果需要授权整个用户组，可以使用 <code>subject.isInGroup</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">polkit.<span class="title function_">addRule</span>(<span class="keyword">function</span>(<span class="params">action, subject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (action.<span class="property">id</span> == <span class="string">&quot;org.freedesktop.systemd1.manage-units&quot;</span> &amp;&amp;</span><br><span class="line">        action.<span class="title function_">lookup</span>(<span class="string">&quot;unit&quot;</span>) == <span class="string">&quot;nginx.service&quot;</span> &amp;&amp;</span><br><span class="line">        subject.<span class="title function_">isInGroup</span>(<span class="string">&quot;nginx-admins&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> polkit.<span class="property">Result</span>.<span class="property">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>通过 <code>polkit</code>，可以为普通用户授权管理特定的 <code>systemctl</code> 服务（如 <code>nginx</code>），而无需使用 <code>sudo</code>。关键步骤包括：</p><ol><li>创建规则文件。</li><li>定义允许的用户和服务。</li><li>验证规则文件并测试权限。</li></ol><p>这种方法既灵活又安全，适合在多用户环境中使用。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vlan实现机制</title>
    <link href="/2025/01/24/vlan%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6/"/>
    <url>/2025/01/24/vlan%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="VLAN标识符VID"><a href="#VLAN标识符VID" class="headerlink" title="VLAN标识符VID"></a>VLAN标识符VID</h2><ul><li>VLAN标记的最后12比特称为VLAN标识符VID，唯一标志以太网帧属于哪一个VLAN。</li><li>VID取值范围是0 ~ 4095 (0 ~ 2^12 - 1)。</li><li>0和4095不用来表示VLAN，有效取值范围是1 ~ 4094。</li></ul><h2 id="802-1Q帧"><a href="#802-1Q帧" class="headerlink" title="802.1Q帧"></a>802.1Q帧</h2><ul><li>在以太网帧基础上，用于实现虚拟局域网（VLAN）功能的一种数据帧格式</li><li>结构特点：在普通以太网帧中插入4字节VLAN标记，其最后12比特是VID（有效取值范围1 - 4094）。</li><li>处理方式：由交换机处理。收到普通以太网帧时“打标签”转变为802.1Q帧；转发时可能“去标签”变回普通以太网帧。</li><li>作用：实现VLAN间通信隔离与管理，将物理局域网划分为多个逻辑独立的虚拟局域网，提高网络安全性、灵活性和管理效率，如企业按部门划分VLAN提升安全性。</li></ul><h2 id="交换机端口类型"><a href="#交换机端口类型" class="headerlink" title="交换机端口类型"></a>交换机端口类型</h2><h4 id="Access端口"><a href="#Access端口" class="headerlink" title="Access端口"></a>Access端口</h4><ul><li>用途：一般用于连接用户计算机。</li><li>VLAN属性：只能属于一个VLAN。</li><li>PVID：PVID值与端口所属VLAN的ID相同（默认为1）。</li><li>接收处理方法：一般只接受“未打标签”的普通以太网MAC帧，根据接收帧的端口的PVID给帧“打标签”，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等。</li><li>发送处理方法：若帧中的VID与端口的PVID相等，则“去标签”并转发该帧；否则不转发。</li></ul><h4 id="Trunk端口"><a href="#Trunk端口" class="headerlink" title="Trunk端口"></a>Trunk端口</h4><ul><li>用途：一般用于交换机之间或交换机与路由器之间的互连。</li><li>VLAN属性：可以属于多个VLAN。</li><li>PVID：用户可以设置Trunk端口的PVID值，默认情况下，PVID值为1。</li><li>接收处理方法：接收“未打标签”的帧，根据接收帧的端口的PVID给帧“打标签”，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等；接收“已打标签的帧”。</li><li>发送处理方法：对VID等于PVID的帧，“去标签”再转发。</li></ul><h4 id="Hybrid端口-华为"><a href="#Hybrid端口-华为" class="headerlink" title="Hybrid端口(华为)"></a>Hybrid端口(华为)</h4><ul><li>用途：既可用于交换机之间或交换机与路由器之间的互连（同Trunk端口），也可用于交换机与用户计算机之间的互连（同Access端口）。</li><li>VLAN属性：可以属于多个VLAN（同Trunk端口）。</li><li>PVID：用户可以设置Hybrid端口的PVID值，默认情况下，PVID值为1（同Trunk端口）。</li><li>接收处理方法：接收“未打标签”的帧，根据接收帧的端口的PVID给帧“打标签”，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等；接收“已打标签的帧”。</li><li>发送处理方法：查看帧的VID是否在端口的“去标签”列表(即允许通过的vlan列表)中：若存在，则“去标签”后再转发；若不存在，则直接转发。</li></ul><h4 id="端口转发总结"><a href="#端口转发总结" class="headerlink" title="端口转发总结"></a>端口转发总结</h4><table><thead><tr><th>端口类型</th><th>接收处理方法</th><th>发送处理方法</th></tr></thead><tbody><tr><td>Access</td><td>一般只接收未打标签的普通以太网帧，并给其打标签</td><td>若帧中的VID等于端口PVID，则去掉标签并转发；否则丢弃</td></tr><tr><td>Trunk</td><td>接收已打标签的帧；接收未打标签的帧，根据端口的PVID值给帧打标签</td><td>帧中VID等于端口PVID，去掉标签再转发；帧中VID不等于端口PVID，直接转发</td></tr><tr><td>Hybrid(华为)</td><td>接收已打标签的帧；接收未打标签的帧，根据端口的PVID值给帧打标签</td><td>查看数据帧中的VID是否在端口的“去标签”列表中：如果存在，则去掉标签再转发；如果不存在，则直接转发</td></tr></tbody></table><p><img src="https://xinhaojin.github.io/picx-images-hosting/20250124/PixPin_2025-01-24_10-13-51.9dd298giwy.webp"><br><img src="https://xinhaojin.github.io/picx-images-hosting/20250124/image.sz1rv7ixl.webp"></p><ul><li>互连的Trunk端口的PVID值不等，可能会造成转发错误。因为发送端口可能会先去标签，接收端口按照自己的PVID打标签。<br><img src="https://xinhaojin.github.io/picx-images-hosting/20250124/image.1lbx9n7m6f.webp"><br><img src="https://xinhaojin.github.io/picx-images-hosting/20250124/image.13lvl1k0i5.webp"></li></ul>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网工</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EVENG懒人版5.1+SecureCRT9.6绿色版安装配置</title>
    <link href="/2025/01/17/EVENG%E6%87%92%E4%BA%BA%E7%89%885.1+SecureCRT9.6%E7%BB%BF%E8%89%B2%E7%89%88%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/01/17/EVENG%E6%87%92%E4%BA%BA%E7%89%885.1+SecureCRT9.6%E7%BB%BF%E8%89%B2%E7%89%88%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想找一个能同时模拟多个厂商网络设备的仿真软件，折腾了一通终于成功安装了EVENG，特此记录</p><h2 id="安装VMware-Workstation"><a href="#安装VMware-Workstation" class="headerlink" title="安装VMware Workstation"></a>安装VMware Workstation</h2><p>目前已经免费了，安装比较容易，略过</p><p>Windows功能中关闭：Virtual Machine Platform,Hyper-V,Window虚拟机监控程序平台</p><h2 id="安装EVENG懒人版"><a href="#安装EVENG懒人版" class="headerlink" title="安装EVENG懒人版"></a>安装EVENG懒人版</h2><p>论坛链接在此：<a href="https://www.emulatedlab.com/thread-489-1-1.html">https://www.emulatedlab.com/thread-489-1-1.html</a><br>「EVE-NG社区懒人版5.1-Small.ova」下载链接：<a href="https://pan.quark.cn/s/0819d692cc71">https://pan.quark.cn/s/0819d692cc71</a><br>包含以下设备：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Arista vEOS</span><br><span class="line">Cisco IOL</span><br><span class="line">Cisco vIOS Router</span><br><span class="line">Cisco vIOS Switch</span><br><span class="line">H3C vAC1000</span><br><span class="line">H3C vSR1000</span><br><span class="line">Huawei AR1000v</span><br><span class="line">Huawei CloudEngine 12800</span><br><span class="line">iKuai</span><br><span class="line">Juniper vMX VCP</span><br><span class="line">Juniper vMX VFP</span><br><span class="line">MikroTik RouterOS</span><br><span class="line">OpenWRT</span><br><span class="line">Ruijie vRoute</span><br><span class="line">Ruijie vSwitch</span><br><span class="line">Slax Mini VM</span><br><span class="line">Virtual PC (VPCS)</span><br></pre></td></tr></table></figure><p>下载完后使用VMware打开，网络设置为桥接，启动虚拟机后会显示IP，root密码eve<br><img src="https://xinhaojin.github.io/picx-images-hosting/20250117/image.3k83q92n1c.webp" alt="image"><br>在浏览器输入IP登录，用户admin密码eve，add an object - node即可添加设备</p><h2 id="安装SecureCRT并设置为telnet默认应用"><a href="#安装SecureCRT并设置为telnet默认应用" class="headerlink" title="安装SecureCRT并设置为telnet默认应用"></a>安装SecureCRT并设置为telnet默认应用</h2><p>「SecureCRT.9.6.0.CN.Portable OSSSR.COM.7z」下载链接：<a href="https://pan.quark.cn/s/0654db0bc802">https://pan.quark.cn/s/0654db0bc802</a></p><h3 id="设置为telnet默认应用"><a href="#设置为telnet默认应用" class="headerlink" title="设置为telnet默认应用"></a>设置为telnet默认应用</h3><p>在选项-全局选项-浏览器中点击”将SecureCRT设为默认应用”，然后打开Windows设置-默认应用，搜索telnet，检查是否已经设置成功。</p><p>回到浏览器中双击添加的网络设备，即可跳转到SecureCRT</p><h3 id="设置在同一窗口打开多个标签"><a href="#设置在同一窗口打开多个标签" class="headerlink" title="设置在同一窗口打开多个标签"></a>设置在同一窗口打开多个标签</h3><p>在SecureCRT\Data\Config\Global.ini文件中搜索”single”,修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Single Instance&quot;=00000001</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu下配置v2raya</title>
    <link href="/2025/01/01/ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEv2raya/"/>
    <url>/2025/01/01/ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEv2raya/</url>
    
    <content type="html"><![CDATA[<h2 id="v2raya"><a href="#v2raya" class="headerlink" title="v2raya"></a>v2raya</h2><p>v2raya 是一个基于 V2Ray 内核的跨平台代理软件，它提供了一个简单易用、功能强大的代理解决方案，支持多种代理协议和丰富的配置选项</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>官方文档：<a href="https://v2raya.org/docs">https://v2raya.org/docs</a></p><p>推荐使用docker安装，会比较顺利且易于管理</p><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mzz2017/v2raya</span><br></pre></td></tr></table></figure><p>启动,并设置自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --privileged \</span><br><span class="line">  --network=host \</span><br><span class="line">  --name v2raya \</span><br><span class="line">  -e V2RAYA_LOG_FILE=/tmp/v2raya.log \</span><br><span class="line">  -e V2RAYA_V2RAY_BIN=/usr/local/bin/v2ray \</span><br><span class="line">  -e V2RAYA_NFTABLES_SUPPORT=off \</span><br><span class="line">  -e IPTABLES_MODE=legacy \</span><br><span class="line">  -v /lib/modules:/lib/modules:ro \</span><br><span class="line">  -v /etc/resolv.conf:/etc/resolv.conf \</span><br><span class="line">  -v /etc/v2raya:/etc/v2raya \</span><br><span class="line">  mzz2017/v2raya</span><br></pre></td></tr></table></figure><p>开放端口2017,打开127.0.0.1:2017,注册账号后登录,如果忘记了可以重置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo v2raya --reset-password</span><br></pre></td></tr></table></figure><p>导入节点或订阅-选择n个节点-左上角启动<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241231/image.8hgjwazhb3.jpg" alt="image"><br>设置<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241231/image.361nbld967.jpg" alt="image"></p><h2 id="端口冲突"><a href="#端口冲突" class="headerlink" title="端口冲突"></a>端口冲突</h2><p>启动日志发现有53端口被占用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Failed to start: listen udp 0.0.0.0:53: bind: address already in use</span><br><span class="line">2024/12/31 15:07:16.332 [W] [asm_amd64.s:1700] v2ray-core: exit status 1</span><br></pre></td></tr></table></figure><p>查看端口占用情况后发现是systemd-resolved相关进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tulpn | grep 53</span><br></pre></td></tr></table></figure><p>停止systemd-resolved服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop systemd-resolved</span><br></pre></td></tr></table></figure><p>打开&#x2F;etc&#x2F;systemd&#x2F;resolved.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/resolved.conf</span><br></pre></td></tr></table></figure><p>修改内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Resolve]</span><br><span class="line">DNS=223.5.5.5 #取消注释，增加dns</span><br><span class="line">#FallbackDNS=</span><br><span class="line">#Domains=</span><br><span class="line">#LLMNR=no</span><br><span class="line">#MulticastDNS=no</span><br><span class="line">#DNSSEC=no</span><br><span class="line">#Cache=yes</span><br><span class="line">DNSStubListener=no #取消注释，把yes改为no</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.google.com</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>杂</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人名批量转成搜狗输入法短语格式实现快速打人名</title>
    <link href="/2024/12/31/%E4%BA%BA%E5%90%8D%E6%89%B9%E9%87%8F%E8%BD%AC%E6%88%90%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%9F%AD%E8%AF%AD%E6%A0%BC%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%89%93%E4%BA%BA%E5%90%8D/"/>
    <url>/2024/12/31/%E4%BA%BA%E5%90%8D%E6%89%B9%E9%87%8F%E8%BD%AC%E6%88%90%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E7%9F%AD%E8%AF%AD%E6%A0%BC%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%89%93%E4%BA%BA%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>老婆在学校打人名拼音很麻烦，于是想着用学生姓名创建词库导入输入法，但发现词频不够高不能自定义，还是不方便，于是采用了搜狗输入法的短语功能，通过输入姓名拼音缩写，快速打出姓名，节省时间。</p><h2 id="搜狗输入法短语格式"><a href="#搜狗输入法短语格式" class="headerlink" title="搜狗输入法短语格式"></a>搜狗输入法短语格式</h2><p>搜狗输入法的短语功能可以自定义短语，格式如下：</p><p>缩写,序号&#x3D;姓名</p><p>序号是指缩写相同情况下，该姓名的顺序，序号越小，排在越前面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hcy,1=贺辰扬</span><br><span class="line">gjy,2=高瑾妍</span><br></pre></td></tr></table></figure><h2 id="批量生成短语"><a href="#批量生成短语" class="headerlink" title="批量生成短语"></a>批量生成短语</h2><p>输入是姓名txt文件，每行一个姓名,names.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pinyin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pinyin_abbreviation</span>(<span class="params">name</span>):</span><br><span class="line">    pinyin_list = pinyin.get(name, <span class="built_in">format</span>=<span class="string">&quot;strip&quot;</span>, delimiter=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    abbreviation = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> pinyin_list.split(<span class="string">&quot; &quot;</span>):</span><br><span class="line">        abbreviation += p[:<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> abbreviation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    result_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;names.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = file.readlines()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;results.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            name = line.strip()  <span class="comment"># 去除行末的换行符</span></span><br><span class="line">            abbreviation = get_pinyin_abbreviation(name)</span><br><span class="line">            <span class="keyword">if</span> abbreviation <span class="keyword">in</span> result_dict:</span><br><span class="line">                result_dict[abbreviation][<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">                output_line = <span class="string">f&quot;<span class="subst">&#123;abbreviation&#125;</span>,<span class="subst">&#123;result_dict[abbreviation][<span class="number">1</span>]&#125;</span>=<span class="subst">&#123;name&#125;</span>\n&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result_dict[abbreviation] = [name, <span class="number">1</span>]</span><br><span class="line">                output_line = <span class="string">f&quot;<span class="subst">&#123;abbreviation&#125;</span>,1=<span class="subst">&#123;name&#125;</span>\n&quot;</span></span><br><span class="line">            output_file.write(output_line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>杂</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue3核心笔记</title>
    <link href="/2024/12/31/vue3%E6%A0%B8%E5%BF%83%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/12/31/vue3%E6%A0%B8%E5%BF%83%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想系统性学习一下vue,在B站看到了<code>技术蛋老师</code>的教学视频<code>https://github.com/eggtoopain/vue-router-4-tutorial</code>，受益匪浅，蛋老师提供了各个章节源码，但是没有归纳笔记，因此本人按照视频目录粗略归纳了一下内容,以便快速回顾。</p><h2 id="创建vue应用和插值表达式"><a href="#创建vue应用和插值表达式" class="headerlink" title="创建vue应用和插值表达式"></a>创建vue应用和插值表达式</h2><ul><li>以script方式引入vue.js</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建Vue应用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;<span class="title function_">data</span>(<span class="params"></span>)&#123;&#125;, <span class="attr">methods</span>:&#123;&#125;, <span class="attr">template</span>:<span class="string">&#x27;&#x27;</span>&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue3核心笔记<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&#x27;零食清单&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for-v-bind-v-model用法"><a href="#v-for-v-bind-v-model用法" class="headerlink" title="v-for,v-bind,v-model用法"></a>v-for,v-bind,v-model用法</h2><ul><li>v-for:循环元素</li><li>v-bind:单向绑定属性data-&gt;dom，“v-bind:”可以简写为“:”</li><li>v-model:双向绑定data&lt;-&gt;dom</li><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;food in foods&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;food.image&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; food.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;food.purchased&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; food.purchased &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: <span class="string">&#x27;零食清单&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">foods</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;原味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/原味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;辣味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/辣味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;炭烧味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/炭烧味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="key-v-show-computed用法"><a href="#key-v-show-computed用法" class="headerlink" title="key,v-show,computed用法"></a>key,v-show,computed用法</h2><ul><li>key:给每一个元素添加唯一标识，避免vue对元素进行重新渲染</li><li>v-show:根据条件显示元素，原理是根据CSS的display属性控制元素的显示与隐藏</li><li>computed:计算属性，依赖于data中的数据，可以缓存计算结果，提高渲染效率，适用于高频计算的属性</li><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">v-show</span>=<span class="string">&quot;beforeBuy.length&quot;</span>&gt;</span><span class="comment">&lt;!-- beforeBuy.length为true时显示,长度为0时隐藏 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>未购零食<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;food in beforeBuy&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;food.id&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;food.image&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; food.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;food.purchased&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">v-show</span>=<span class="string">&quot;afterBuy.length&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>已购零食<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;food in afterBuy&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;food.id&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;food.image&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; food.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;food.purchased&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">foods</span>: [</span></span><br><span class="line"><span class="language-javascript">                        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;原味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/原味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;辣味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/辣味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;炭烧味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/炭烧味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                    ]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">beforeBuy</span>(<span class="params"></span>) &#123;<span class="comment">//筛选purchased为false的元素</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !item.<span class="property">purchased</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">afterBuy</span>(<span class="params"></span>) &#123;<span class="comment">//筛选purchased为true的元素</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">purchased</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拆组件和引用组件"><a href="#拆组件和引用组件" class="headerlink" title="拆组件和引用组件"></a>拆组件和引用组件</h2><ul><li>拆组件：将一个大的组件拆分成多个小组件，提高代码的可维护性</li><li>引用组件：在其他组件中引用其他组件，提高代码的复用性</li><li>步骤<ul><li>创建组件：在单独的文件中定义组件，使用template标签定义组件的结构，如新建components&#x2F;AppSection.js文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="comment">/*html*/</span> <span class="string">``</span>,<span class="comment">//在反引号前面加上/*html*/，表示该字符串为html代码,vscode中使用es6-string-html插件来高亮关键字</span></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引用组件：在其他组件中引用组件，使用template标签引用组件,由于html不区分大小写，对于驼峰式命名的组件，需要使用kebab-case命名法，如AppSections.vue文件，在html引用时写成<app-sections></app-sections></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AppSections</span> <span class="keyword">from</span> <span class="string">&quot;./AppSections.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="title class_">AppSections</span> &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="comment">/*html*/</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;app-sections&gt;&lt;/app-sections&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AppSection.js</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="comment">/*html*/</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;section v-show=&quot;beforeBuy.length&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;未购零食&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li v-for=&quot;food in beforeBuy&quot; :key=&quot;food.id&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;img :src=&quot;food.image&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;span&gt;&#123;&#123; food.name &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;checkbox&quot; v-model=&quot;food.purchased&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/section&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;section v-show=&quot;afterBuy.length&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;已购零食&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li v-for=&quot;food in afterBuy&quot; :key=&quot;food.id&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;img :src=&quot;food.image&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;span&gt;&#123;&#123; food.name &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;checkbox&quot; v-model=&quot;food.purchased&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/section&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">foods</span>: [</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;原味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/原味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;辣味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/辣味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;炭烧味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/炭烧味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">beforeBuy</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !item.<span class="property">purchased</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">afterBuy</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">purchased</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AppSections</span> <span class="keyword">from</span> <span class="string">&quot;./AppSections.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="title class_">AppSections</span> &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="comment">/*html*/</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;app-sections&gt;&lt;/app-sections&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./components/App.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="props和组件复用"><a href="#props和组件复用" class="headerlink" title="props和组件复用"></a>props和组件复用</h2><ul><li>继续拆组件，把已购零食和未购零食拆分成两个组件，两个组件不同的是标题和数组，可以使用props来传递这两个数据</li><li>用props传参的方式来写子组件,子组件中规定参数类型</li></ul><p>子组件：AppSectionsList.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="comment">/*html*/</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;section v-show=&quot;buyChild.length&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;&#123;&#123;headline&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li v-for=&quot;food in buyChild&quot; :key=&quot;food.id&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;img :src=&quot;food.image&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;span&gt;&#123;&#123; food.name &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;checkbox&quot; v-model=&quot;food.purchased&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/section&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">headline</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">buyChild</span>: <span class="title class_">Object</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>父组件首先import子组件，然后在template中引用子组件，并传递props</li><li>父组件的computed中定义filters对象，filters对象中包含两个数组，分别为未购零食和已购零食的数组<br>父组件：AppSections.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AppSectionsList</span> <span class="keyword">from</span> <span class="string">&quot;./AppSectionsList.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="title class_">AppSectionsList</span> &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="comment">/*html*/</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;app-sections-list </span></span><br><span class="line"><span class="string">            headline=&quot;未购零食&quot; </span></span><br><span class="line"><span class="string">            :buyChild=&quot;filters.beforeBuy&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/app-sections-list&gt;</span></span><br><span class="line"><span class="string">        &lt;app-sections-list </span></span><br><span class="line"><span class="string">            headline=&quot;已购零食&quot; </span></span><br><span class="line"><span class="string">            :buyChild=&quot;filters.afterBuy&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/app-sections-list&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">foods</span>: [</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;原味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/原味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;辣味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/辣味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;炭烧味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/炭烧味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">filters</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">beforeBuy</span>: <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !item.<span class="property">purchased</span>),</span><br><span class="line">                <span class="attr">afterBuy</span>: <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">purchased</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>爷爷组件：App.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AppSections</span> <span class="keyword">from</span> <span class="string">&quot;./AppSections.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="title class_">AppSections</span> &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="comment">/*html*/</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;app-sections&gt;&lt;/app-sections&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="v-on-methods-v-if-style和class绑定事件"><a href="#v-on-methods-v-if-style和class绑定事件" class="headerlink" title="v-on,methods,v-if,style和class绑定事件"></a>v-on,methods,v-if,style和class绑定事件</h2><ul><li>v-on:绑定事件，可以简写为@<br>@submit.prevent可以阻止表单的默认事件，可以在事件处理函数中执行自定义逻辑</li><li>v-if:真正的条件渲染，根据条件决定是否渲染元素，可以有v-else-if、v-else<ul><li>v-show的原理是根据CSS的display属性控制元素的显示与隐藏,不会移除dom元素</li></ul></li><li>:class&#x3D;{className: true}</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入爱吃的鱿鱼丝...&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;newFood&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;foods.length &lt;=3&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;buttonColor: true&#125;&quot;</span> <span class="attr">v-else-if</span>=<span class="string">&quot;foods.length &gt; 3 &amp;&amp; foods.length &lt; 5&quot;</span>&gt;</span>再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;buttonColor: true&#125;&quot;</span> <span class="attr">v-else</span>&gt;</span>继续加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AppSections.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AppSectionsList</span> <span class="keyword">from</span> <span class="string">&quot;./AppSectionsList.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="title class_">AppSectionsList</span> &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="comment">/*html*/</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;app-sections-list headline=&quot;未购零食&quot; :buyChild=&quot;filters.beforeBuy&quot;&gt;&lt;/app-sections-list&gt;</span></span><br><span class="line"><span class="string">        &lt;app-sections-list headline=&quot;已购零食&quot; :buyChild=&quot;filters.afterBuy&quot;&gt;&lt;/app-sections-list&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;form @submit.prevent=&quot;add&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;text&quot; placeholder=&quot;输入爱吃的鱿鱼丝...&quot; v-model=&quot;newFood&quot; /&gt;</span></span><br><span class="line"><span class="string">            &lt;button type=&quot;submit&quot; v-if=&quot;foods.length &lt;=3&quot;&gt;添加&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;button type=&quot;submit&quot; :class=&quot;&#123;buttonColor: true&#125;&quot; v-else-if=&quot;foods.length &gt; 3 &amp;&amp; foods.length &lt; 5&quot;&gt;再加&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;button type=&quot;submit&quot; :class=&quot;&#123;buttonColor: true&#125;&quot; v-else&gt;继续加&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">foods</span>: [</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;原味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/原味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;辣味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/辣味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;炭烧味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/炭烧味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">newFood</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="property">length</span> + <span class="number">1</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">newFood</span>,</span><br><span class="line">                <span class="attr">image</span>: <span class="string">&#x27;../images/鱿鱼丝.png&#x27;</span>,</span><br><span class="line">                <span class="attr">purchased</span>: <span class="literal">false</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">newFood</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">filters</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">beforeBuy</span>: <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !item.<span class="property">purchased</span>),</span><br><span class="line">                <span class="attr">afterBuy</span>: <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">purchased</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>style.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.buttonColor</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h2><ul><li>$emit 是一个实例方法，用于在子组件中触发事件，使得父组件可以监听并响应这些事件。$emit 方法的第一个参数是事件名称，随后的参数是传递给事件处理函数的数据。</li><li>子组件：<ul><li>AppSectionsFrom.js</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="comment">/*html*/</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;form @submit.prevent=&quot;add&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;text&quot; placeholder=&quot;输入爱吃的鱿鱼丝...&quot; v-model=&quot;newFood&quot; /&gt;</span></span><br><span class="line"><span class="string">            &lt;button type=&quot;submit&quot;&gt;添加&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">newFood</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;addFather&#x27;</span>, <span class="variable language_">this</span>.<span class="property">newFood</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">newFood</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>父组件<ul><li>AppSections.js</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AppSectionsList</span> <span class="keyword">from</span> <span class="string">&quot;./AppSectionsList.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AppSectionsForm</span> <span class="keyword">from</span> <span class="string">&quot;./AppSectionsForm.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="title class_">AppSectionsList</span>, <span class="title class_">AppSectionsForm</span> &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="comment">/*html*/</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;app-sections-list headline=&quot;未购零食&quot; :buyChild=&quot;filters.beforeBuy&quot;&gt;&lt;/app-sections-list&gt;</span></span><br><span class="line"><span class="string">        &lt;app-sections-list headline=&quot;已购零食&quot; :buyChild=&quot;filters.afterBuy&quot;&gt;&lt;/app-sections-list&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;app-sections-form </span></span><br><span class="line"><span class="string">            @addFather=&quot;fatherAdd&quot;</span></span><br><span class="line"><span class="string">        &gt;&lt;/app-sections-form&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">foods</span>: [</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;原味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/原味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;辣味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/辣味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;炭烧味鱿鱼丝&#x27;</span>, <span class="attr">image</span>: <span class="string">&#x27;./images/炭烧味鱿鱼丝.png&#x27;</span>, <span class="attr">purchased</span>: <span class="literal">false</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">fatherAdd</span>(<span class="params">youyusi</span>) &#123;<span class="comment">//youyusi参数对应子组件的newFood</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="property">length</span> + <span class="number">1</span>,</span><br><span class="line">                <span class="attr">name</span>: youyusi,</span><br><span class="line">                <span class="attr">image</span>: <span class="string">&#x27;../images/鱿鱼丝.png&#x27;</span>,</span><br><span class="line">                <span class="attr">purchased</span>: <span class="literal">false</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">filters</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">beforeBuy</span>: <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !item.<span class="property">purchased</span>),</span><br><span class="line">                <span class="attr">afterBuy</span>: <span class="variable language_">this</span>.<span class="property">foods</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">purchased</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue项目组成逻辑、文件关系和作用"><a href="#vue项目组成逻辑、文件关系和作用" class="headerlink" title="vue项目组成逻辑、文件关系和作用"></a>vue项目组成逻辑、文件关系和作用</h2><p>vue把页面理解为一个组件树，每个组件对应一个.vue文件，组件树的根节点是App.vue文件，App.vue文件中包含了整个页面的结构和逻辑。</p><h3 id="SFC"><a href="#SFC" class="headerlink" title="SFC"></a>SFC</h3><p>Vue 单文件组件（Single File Component，简称 SFC）是 Vue.js 的一个核心特性，它允许开发者将组件的模板、逻辑和样式封装在一个单独的 .vue 文件中。这种文件结构使得组件的组织和复用变得更加简单和直观。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; greeting &#125;&#125; World&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      greeting: &#x27;Hello&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.hello &#123;</span><br><span class="line">  color: #42b983;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>使用 SFC 的好处：</p><p>1.组件化：每个 SFC 都是一个独立的组件，可以包含自己的模板、逻辑和样式。</p><p>2.模块化：SFC 使得组件可以被轻松地导入和导出，便于模块化开发。</p><p>3.维护性：将相关的代码组织在一起，便于维护和理解。</p><p>4.开发效率：可以在一个文件中快速地编辑模板、逻辑和样式，提高开发效率。</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>npm（node package manager）是一个开源的包管理工具，它可以帮助我们管理和发布代码。</p><p>生成 package.json 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>安装vue依赖包,会生成package-lock.json文件，该文件记录了当前项目依赖的具体版本号，以便于后续项目依赖的复现，依赖全都安装在node_modules目录下。</p><ul><li>package.json文件：简易包管理文件</li><li>package-lock.json文件：详细包管理文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue</span><br></pre></td></tr></table></figure><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p>webpack是一个模块打包工具，它可以将多个模块按照一定规则转换成浏览器可以识别的静态资源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i - D webpack webpack-cli webpack-dev-server //-D表示开发环境依赖，并不放到生产环境中</span><br><span class="line">npm i - D babel-loader @babel/core @babel/preset-env //防止浏览器不认识ES6语法，需要用babel把代码从高版本的ES6转为低版本的ES5</span><br><span class="line">npm i - D vue-loader vue-template-compiler css-loader vue-style-loader html-webpack-plugin</span><br></pre></td></tr></table></figure><p>创建webpack.config.js文件，配置webpack的入口和出口文件，以及loader：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">use</span>: <span class="string">&#x27;vue-loader&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">&#x27;vue-style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>] &#125;,</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建.babelrc文件，配置babel的转译规则：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">moudle.exports = <span class="punctuation">&#123;</span></span><br><span class="line">    presets<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;@babel/preset-env&#x27;<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>webpack命令简化，回到package.json文件中，添加scripts命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --mode development&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以使用npm run dev命令启动webpack开发环境，使用npm run build命令打包生产环境代码。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init //初始化git仓库</span><br></pre></td></tr></table></figure><p>新建.gitignore文件，配置不需要提交的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br><span class="line">dist</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line">/*.log</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">.env.local</span><br><span class="line">.env.development.local</span><br><span class="line">.env.test.local</span><br><span class="line">.env.production.local</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw?</span><br><span class="line"></span><br><span class="line"># System files</span><br><span class="line">Thumbs.db</span><br></pre></td></tr></table></figure><p>链接到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/username/project.git</span><br></pre></td></tr></table></figure><p>提交代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . //添加所有文件</span><br><span class="line">git commit -m &quot;提交信息&quot; //提交代码</span><br><span class="line">git push origin master //推送代码到远程仓库的master分支,本地也需要有master分支，查看分支：git branch -a，查看远程分支：git branch -r</span><br></pre></td></tr></table></figure><p>其他</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch -m old_name new_name //本地分支改名</span><br><span class="line">git checkout -b new_branch //创建新分支</span><br><span class="line">git branch -D branch_name //删除本地分支</span><br><span class="line">git checkout branch_name //切换分支</span><br><span class="line">git fetch //只下载远程分支的最新更改，但不会自动合并到你的本地分支，需要手动合并。</span><br><span class="line">git pull //下载远程分支的最新更改，并尝试将这些更改合并到你的本地分支。相当于 git fetch 和 git merge。</span><br></pre></td></tr></table></figure><h3 id="jsconfig-json"><a href="#jsconfig-json" class="headerlink" title="jsconfig.json"></a>jsconfig.json</h3><p>jsconfig.json文件是VS Code的配置文件，它可以帮助我们在VS Code中更好地开发JavaScript项目。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span><span class="comment">//使用@符号来表示src目录</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom.iterable&quot;</span><span class="punctuation">,</span> <span class="string">&quot;scripthost&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h3><p>vue-cli是一个脚手架工具，它可以帮助我们快速搭建基于Vue的项目结构。</p><p>创建一个新项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli //全局安装vue-cli</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project //创建新项目</span><br></pre></td></tr></table></figure><p>目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">├──.git/</span><br><span class="line">│   └── 版本控制相关文件</span><br><span class="line">├── dist/</span><br><span class="line">│   ├── css/</span><br><span class="line">│   │   └── 样式文件</span><br><span class="line">│   └── js/</span><br><span class="line">│       ├── favicon.ico</span><br><span class="line">│       └── index.html</span><br><span class="line">├── node_modules/</span><br><span class="line">│   └── 项目依赖的 Node.js 模块</span><br><span class="line">├── public/</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src/</span><br><span class="line">│   ├── assets/</span><br><span class="line">│   │   └── 静态资源文件，如图片、样式等</span><br><span class="line">│   │       └── logo.png</span><br><span class="line">│   ├── components/</span><br><span class="line">│   │   └── Vue 组件目录</span><br><span class="line">│   │       └── HelloWorld.vue</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── main.js</span><br><span class="line">├──.gitignore</span><br><span class="line">├── babel.config.js</span><br><span class="line">├── jsconfig.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── README.md</span><br><span class="line">└── vue.config.js</span><br></pre></td></tr></table></figure><h2 id="vue-router客户端路由的核心基础知识"><a href="#vue-router客户端路由的核心基础知识" class="headerlink" title="vue-router客户端路由的核心基础知识"></a>vue-router客户端路由的核心基础知识</h2><p>这里使用vite创建项目，使用vue-cli也差不多：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-vite</span><br><span class="line">create-vite my-vue-vite-project --template vue</span><br></pre></td></tr></table></figure><p>cd进入项目目录安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建router文件夹,创建index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件，一般放到views文件夹下，注意相对路径</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../views/About.vue&#x27;</span></span><br><span class="line"><span class="comment">//路由比较多的时候，使用对象的方式比较好管理，可以使router对象更加简洁</span></span><br><span class="line"><span class="keyword">const</span> routes =  [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">        <span class="comment">//createWebHistory:h5历史</span></span><br><span class="line">        <span class="comment">//createHashHistory:路由前面多一个#号</span></span><br><span class="line">        routes</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">//导出router对象，使得main.js文件更加简洁</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>新建views文件夹，创建对应组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">        Home</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">        About</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nav&gt;</span><br><span class="line">    &lt;a href=&quot;/&quot;&gt;a标签：主页&lt;/a&gt; |</span><br><span class="line">    &lt;a href=&quot;/about&quot;&gt;a标签：关于&lt;/a&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;router-link：主页&lt;/router-link&gt; |</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;router-link：关于&lt;/router-link&gt;</span><br><span class="line">    &lt;br&gt;点击a标签页面会有新的http请求，router-link不会。</span><br><span class="line"></span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;!-- 指定路由组件显示的位置 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span><span class="comment">//不需要写index.js，会自动识别</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="进阶案例"><a href="#进阶案例" class="headerlink" title="进阶案例"></a>进阶案例</h3><p>路由由数据动态决定，不写死，比如：<br>准备一个data.json文件，内容如下：<br>要把每一条数据单独做一条路由</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;鸡蛋&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chicken-egg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chicken-egg.jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;又名鸡卵、鸡子，是母鸡所产的卵&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;flavour&quot;</span><span class="punctuation">:</span> <span class="string">&quot;味甘，性平，无毒（煮熟后）&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;鸭蛋&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duck-egg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duck-egg.jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;又名鸭子、鸭卵、太平、鸭春、青皮等，为鸭科动物家鸭的卵，受精卵可孵化成小鸭&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;flavour&quot;</span><span class="punctuation">:</span> <span class="string">&quot;性涼、味甘&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;鹅蛋&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;goose-egg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;goose-egg.jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;家禽鹅生下的卵&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;flavour&quot;</span><span class="punctuation">:</span> <span class="string">&quot;有些油&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;鹌鹑蛋&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;quail-egg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;quail-egg.jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;鵪鶉所產的卵，蛋殼表面帶有棕褐色斑點&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;flavour&quot;</span><span class="punctuation">:</span> <span class="string">&quot;味甘、性平&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;笨蛋&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dumb-egg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dumb-egg.jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我才不是笨蛋&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;flavour&quot;</span><span class="punctuation">:</span> <span class="string">&quot;没吃过&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><strong>详细的逻辑请看注释****详细的逻辑请看注释</strong><br>App.vue中使用v-for添加路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nav&gt;</span><br><span class="line">    &lt;a href=&quot;/&quot;&gt;a标签：主页&lt;/a&gt; |</span><br><span class="line">    &lt;a href=&quot;/about&quot;&gt;a标签：关于&lt;/a&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;router-link：主页&lt;/router-link&gt; |</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;router-link：关于&lt;/router-link&gt;</span><br><span class="line">    &lt;br&gt;点击a标签页面会有新的http请求，router-link不会。</span><br><span class="line">    &lt;br&gt;下面是动态的路由：</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;router-link</span><br><span class="line">      v-for=&quot;item in dataEggs&quot;</span><br><span class="line">      :key=&quot;item.id&quot;</span><br><span class="line">      :to=&quot;`/eggs/$&#123;item.type&#125;`&quot;</span><br><span class="line">      &gt;</span><br><span class="line">      &#123;&#123; item.name &#125;&#125; |</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;!-- 指定路由组件显示的位置 --&gt;</span><br><span class="line">  &lt;button @click=&quot;backward&quot;&gt;退后&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;forward&quot;&gt;前进&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import dataEggs from &#x27;./data.json&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      dataEggs//ES6语法</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    backward() &#123;</span><br><span class="line">      this.$router.go(-1)//查看历史操作</span><br><span class="line">    &#125;,</span><br><span class="line">    forward() &#123;</span><br><span class="line">      this.$router.go(1)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.egg-active &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>router&#x2F;index.js中配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入组件，一般放到views文件夹下，注意相对路径</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../views/About.vue&#x27;</span></span><br><span class="line"><span class="comment">// import Eggs from &#x27;../views/Eggs.vue&#x27;//引入路由组件</span></span><br><span class="line"><span class="comment">// import NotFound from &#x27;../views/NotFound.vue&#x27;//引入404页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//路由比较多的时候，使用对象的方式比较好管理，可以使router对象更加简洁</span></span><br><span class="line"><span class="keyword">const</span> routes =  [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,</span><br><span class="line">    <span class="comment">// 动态路由：eggType是自定义属性名，跟data.json属性名无关</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/eggs/:eggType&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Eggs.vue&#x27;</span>) &#125;,<span class="comment">//碰到/eggs路径的时候应用Eggs动态路由组件,细节参数eggType，不可以写成egg-type,js中不允许用-</span></span><br><span class="line">    <span class="comment">// () =&gt; import(&#x27;../views/Eggs.vue&#x27;)这种写法是懒加载页面，只有当访问到该路由的时候才会加载，可以提高页面加载速度</span></span><br><span class="line">    <span class="comment">// 也可以给路由添加别名 &#123; path: &#x27;/eggs/:eggType&#x27;, name: &#x27;Eggs&#x27;, component: () =&gt; import(&#x27;../views/Eggs.vue&#x27;) &#125;,</span></span><br><span class="line">    <span class="comment">// 然后App.vue里可以用&lt;router-link :to=&quot;&#123; name: &#x27;Eggs&#x27;, params: &#123; eggType: item.type &#125; &#125;&quot;&gt;去跳转到Eggs页面</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/eggs&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/eggs/chicken-egg&#x27;</span> &#125;,<span class="comment">//重定向</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/NotFound.vue&#x27;</span>) &#125;,<span class="comment">//匹配所有路径，如果都不匹配，就渲染NotFound组件</span></span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">        <span class="comment">//createWebHistory:h5历史</span></span><br><span class="line">        <span class="comment">//createHashHistory:路由前面多一个#号</span></span><br><span class="line">        routes,</span><br><span class="line">        <span class="attr">linkActiveClass</span>: <span class="string">&#x27;egg-active&#x27;</span><span class="comment">//路由激活的class,App.vue里定义的</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">//导出router对象，使得main.js文件更加简洁</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>Egg.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-if=&quot;!dataEgg&quot;&gt;</span><br><span class="line">      &lt;h1&gt;查无此蛋&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;</span><br><span class="line">      &lt;h1&gt;&#123;&#123; dataEgg.name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123; dataEgg.description &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123; dataEgg.flavour &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;!-- &lt;img :src=&quot;`../../src/assets/images/$&#123;dataEgg.image&#125;`&quot;&gt; --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  import dataEggs from &#x27;../data.json&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">      eggType() &#123;</span><br><span class="line">        return this.$route.params.eggType</span><br><span class="line">        //this.$route 是一个包含当前路由信息的对象，它提供了许多有用的属性</span><br><span class="line">      &#125;,</span><br><span class="line">      dataEgg() &#123;</span><br><span class="line">        return dataEggs.find(</span><br><span class="line">          dataEgg =&gt; dataEgg.type === this.eggType</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;style scoped&gt;</span><br><span class="line">    img &#123;</span><br><span class="line">      width: 150px;</span><br><span class="line">      height: 150px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>其他：views&#x2F;NotFound.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">      404</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>华为防火墙安全策略基础</title>
    <link href="/2024/12/16/%E5%8D%8E%E4%B8%BA%E9%98%B2%E7%81%AB%E5%A2%99%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/12/16/%E5%8D%8E%E4%B8%BA%E9%98%B2%E7%81%AB%E5%A2%99%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="安全策略基础"><a href="#安全策略基础" class="headerlink" title="安全策略基础"></a>安全策略基础</h1><h2 id="安全策略的组成"><a href="#安全策略的组成" class="headerlink" title="安全策略的组成"></a>安全策略的组成</h2><p>每一条安全策略都是由匹配条件和动作组成的规则。防火墙接收到报文以后，将报文的属性与安全策略的匹配条件进行匹配。如果所有条件都匹配，则此报文成功匹配安全策略，防火墙按照该安全策略的动作处理这个报文及其后续双向流量。因此，安全策略的核心元素是匹配条件和动作。</p><h3 id="匹配条件"><a href="#匹配条件" class="headerlink" title="匹配条件"></a>匹配条件</h3><ul><li>谁</li><li>从哪里来到哪里去</li><li>干什么</li><li>什么时候</li></ul><p>用户、终端设备、时间段、地址、地区、服务、应用、URL分类等匹配条件可以帮助防火墙精准地识别和过滤恶意流量。</p><h3 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h3><ul><li><p><strong>允许</strong></p><ul><li>流量通过</li><li>可以执行内容安全检查</li></ul></li><li><p><strong>禁止</strong></p><ul><li>流量不通过</li><li>可以选择发送反馈报文，快速结束会话</li></ul></li></ul><h3 id="策略标识"><a href="#策略标识" class="headerlink" title="策略标识"></a>策略标识</h3><ul><li><p><strong>名称</strong></p><ul><li>唯一标识安全策略</li></ul></li><li><p><strong>描述</strong></p><ul><li>记录安全策略的相关信息</li></ul></li><li><p><strong>策略组</strong></p><ul><li>简化管理相同目的的安全策略</li></ul></li><li><p><strong>标签</strong></p><ul><li>标识安全策略</li><li>筛选具有相同特征的策略</li><li>建议使用固定前缀和颜色区分不同动作</li></ul></li></ul><h2 id="安全策略的命令行配置方式"><a href="#安全策略的命令行配置方式" class="headerlink" title="安全策略的命令行配置方式"></a>安全策略的命令行配置方式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;sysname&gt; system-view</span><br><span class="line">[sysname] security-policy</span><br><span class="line">[sysname-policy-security] rule name &quot;Allow access to the Internet&quot;</span><br><span class="line">[sysname-policy-security-rule-Allow access to the Internet] source-zone trust</span><br><span class="line">[sysname-policy-security-rule-Allow access to the Internet] destination-zone untrust</span><br><span class="line">[sysname-policy-security-rule-Allow access to the Internet] source-address 192.168.1.0 mask 24</span><br><span class="line">[sysname-policy-security-rule-Allow access to the Internet] source-address 192.168.2.0 mask 24</span><br><span class="line">[sysname-policy-security-rule-Allow access to the Internet] service http https</span><br><span class="line">[sysname-policy-security-rule-Allow access to the Internet] action permit</span><br><span class="line">[sysname-policy-security-rule-Allow access to the Internet] quit</span><br></pre></td></tr></table></figure><h2 id="缺省策略和匹配规则"><a href="#缺省策略和匹配规则" class="headerlink" title="缺省策略和匹配规则"></a>缺省策略和匹配规则</h2><h4 id="缺省策略"><a href="#缺省策略" class="headerlink" title="缺省策略"></a>缺省策略</h4><ul><li>出厂设置：存在一条显式的缺省策略<code>default</code>，默认禁止所有域间流量。</li><li>位置：永远位于策略列表的最底端，不可删除。</li></ul><h3 id="安全策略匹配流程"><a href="#安全策略匹配流程" class="headerlink" title="安全策略匹配流程"></a>安全策略匹配流程</h3><ul><li>用户创建的安全策略按创建顺序排列，新策略默认位于策略列表底部，缺省策略之前。</li><li>流量处理：防火墙接收到流量后，从上至下依次匹配安全策略。</li><li>匹配成功：一旦某条安全策略匹配成功，停止匹配，按该策略指定的动作处理流量。</li><li>未匹配：如果所有手工创建的安全策略都未匹配，则按缺省策略处理。</li></ul><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ul><li><strong>保持缺省策略</strong><ul><li>建议保持缺省策略的动作为禁止，不要修改。</li><li>缺省策略的目的是保证所有未明确允许的流量都被禁止，这是防火墙的基本设计理念。</li></ul></li><li><strong>策略顺序</strong><ul><li>安全策略的顺序至关重要。</li><li>创建安全策略后，需根据业务需要手动调整策略顺序，以确保策略匹配结果符合预期。</li></ul></li></ul><h2 id="本地安全策略和接口访问控制"><a href="#本地安全策略和接口访问控制" class="headerlink" title="本地安全策略和接口访问控制"></a>本地安全策略和接口访问控制</h2><p>针对从防火墙发出的流量、访问防火墙的流量的安全策略，叫做本地安全策略。<br>eg：ping防火墙接口，不需要专门写策略，允许指定协议即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet 0/0/1</span><br><span class="line">ip address 10.1.1.1 255.255.255.0</span><br><span class="line">service-manage enable //开启接口的访问控制功能。</span><br><span class="line">service-manage ping permit //允许通过Ping访问此接口。</span><br></pre></td></tr></table></figure><p>缺省情况下：</p><ul><li>防火墙带外管理口MGMT接口已经启用接口访问控制功能，并且允许通过HTTP、HTTPS、Ping、SSH、Telnet、NETCONF和SNMP访问防火墙</li><li>其他接口也启用了接口访问控制功能，但是未允许任何协议。</li></ul><p><strong>另外注意</strong>：如果想要从管理终端Ping防火墙的GE0&#x2F;0&#x2F;2接口，也需要开启GE0&#x2F;0&#x2F;1的接口访问控制功能，因为流量是从GE0&#x2F;0&#x2F;1进入防火墙的。</p><h2 id="哪些业务需要开放安全策略"><a href="#哪些业务需要开放安全策略" class="headerlink" title="哪些业务需要开放安全策略"></a>哪些业务需要开放安全策略</h2><p><strong>安全策略仅控制单播报文</strong>，你需要为所有合法的单播报文开放安全策略。缺省情况下，组播报文和广播报文不受防火墙的安全策略控制。防火墙直接转发组播报文和广播报文，不需要开放安全策略。</p><p>特别值得提醒的是：以上规则同样适用于网络互连互通的基础协议（包括BGP、BFD、DHCP、DHCPv6、LDP、OSPF），你需要为它们的单播报文配置安全策略。这是防火墙与路由器和交换机最大的不同。如果想要快速接入网络，你也可以使用命令undo firewall packet-filter basic-protocol enable取消这个控制。取消以后，上述协议的单播报文不受安全策略控制。</p><ul><li><p>华为防火墙作为状态检测防火墙，只需为报文发起方配置安全策略。</p><ul><li>收到发起方的首包报文后，执行安全策略检查并记录会话表。后续报文和回程报文只需命中会话表即可通过，不再检查安全策略。</li><li>如果通信双方都可能发起连接，需要为双向报文分别配置安全策略。</li></ul></li><li><p>源和目的在同一个安全区域内的域内流量，默认不需要配置安全策略。</p></li></ul><h1 id="引用对象"><a href="#引用对象" class="headerlink" title="引用对象"></a>引用对象</h1><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><p>对象是通用元素（如IP地址、服务、应用等）的集合。创建了集合形式的对象，你就可以在各种业务策略中直接引用该对象，而不需要一次次重复输入或选择。当需要修改多个业务策略的适用范围时，只需要修改其引用的对象，就可以快速完成多个策略的调整。使用对象，可以显著降低管理成本，提高维护效率。<br><strong>地址对象</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip address-set Research_Dept type object //object表示地址对象</span><br><span class="line">address 10 range 192.168.1.1 192.168.1.120 //指定IPv4地址段的起止地址</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip address-set Research_Dept type object </span><br><span class="line">address 11 192.168.1.1 0.0.0.255 //使用通配符指定地址范围</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip address-set Research_Dept type object </span><br><span class="line">address 11 192.168.1.1 mask 255.255.255.0 //使用掩码指定地址范围</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip address-set Research_Dept type object </span><br><span class="line">address 11 192.168.1.1 mask 24 //使用掩码长度指定地址范围</span><br></pre></td></tr></table></figure><p><strong>地址组</strong></p><ul><li>地址组可以添加地址、地址对象或地址组，可以方便地管理复杂的地址范围。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ip address-set R&amp;D_Dept type group //group表示地址组</span><br><span class="line">address address-set Research_Dept //将地址对象Research_Dept加入地址组R&amp;D_Dept</span><br><span class="line">address address-set Test_Dept</span><br><span class="line">ip address-set Product type group</span><br><span class="line">address address-set R&amp;D_Dept //将地址组R&amp;D_Dept加入地址组Product</span><br></pre></td></tr></table></figure><h2 id="在安全策略中引用地址对象和地址组"><a href="#在安全策略中引用地址对象和地址组" class="headerlink" title="在安全策略中引用地址对象和地址组"></a>在安全策略中引用地址对象和地址组</h2><p>eg:禁止地址组R&amp;D_Dept访问DMZ区域的HR服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">security-policy </span><br><span class="line"> rule name &quot;Deny R&amp;D_Dept to HR&quot; </span><br><span class="line"> source-zone trust</span><br><span class="line"> destination-zone dmz </span><br><span class="line"> source-address address-set R&amp;D_Dept //以地址组方式指定源地址</span><br><span class="line"> service HRService //自定义的HR服务</span><br><span class="line"> action deny</span><br></pre></td></tr></table></figure><p>在此基础上排除某个地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">security-policy </span><br><span class="line"> rule name &quot;Deny R&amp;D_Dept to HR&quot; </span><br><span class="line"> source-zone trust</span><br><span class="line"> destination-zone dmz </span><br><span class="line"> source-address address-set R&amp;D_Dept //以地址集方式指定源地址（192.168.1.1/24）</span><br><span class="line"> source-address-exclude 192.168.1.66 32 //排除此地址</span><br><span class="line"> service HRService //自定义的HR服务</span><br><span class="line"> action deny</span><br></pre></td></tr></table></figure><h2 id="在安全策略中引用服务和服务组"><a href="#在安全策略中引用服务和服务组" class="headerlink" title="在安全策略中引用服务和服务组"></a>在安全策略中引用服务和服务组</h2><ul><li><strong>服务</strong>是一个或多个应用协议的集合，<strong>由协议类型、源端口、目的端口等信息来指定</strong>。</li><li><strong>服务组</strong>是服务的集合，服务组的成员可以是服务，也可以是服务组。</li></ul><p>防火墙默认提供了常见的知名服务，即预定义服务，例如HTTP、FTP、Telnet、DNS等。在现实网络中，如果协议使用端口与预定义服务的端口不同时，需要创建自定义服务。例如，预定义服务ILS的端口号为1002，但是某些旧版软件可能使用389端口来接收ILS报文。此时，你需要自定义一个端口号为389的服务，并在安全策略中引用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">system-view</span><br><span class="line"> ip service-set new_ils type object //object表示自定义服务</span><br><span class="line"> service protocol tcp destination-port 389 //以目的端口指定ILS服务</span><br></pre></td></tr></table></figure><h3 id="自定义ICMP服务提高安全性"><a href="#自定义ICMP服务提高安全性" class="headerlink" title="自定义ICMP服务提高安全性"></a>自定义ICMP服务提高安全性</h3><p>对于TCP、UDP和SCTP服务，可以通过源端口和目的端口来定义，通常只定义目的端口即可。<br>对于ICMP和ICMPv6服务，需要使用类型号和消息码来定义。ICMP服务常用于Ping和Tracert，一般直接使用预定义的ICMP服务即可。但是，ICMP服务也经常被攻击者用来窥测网络或建立隐蔽通道。因此，如果你对安全性有更高的要求，可以自定义服务，仅开放特定类型的ICMP报文。<br>以Ping为例，Ping需要使用两种类型的ICMP报文：Echo Request（Type 8）和Echo Reply（Type 0）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">system-view</span><br><span class="line"> ip service-set ICMP_Echo_Request type object</span><br><span class="line"> service protocol icmp icmp-type 8 //自定义ICMP type 8</span><br></pre></td></tr></table></figure><p>eg:Trust区域的PC要Ping Untrust区域的交换机，安全策略配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">security-policy</span><br><span class="line"> rule name &quot;Allow Ping&quot; </span><br><span class="line"> source-zone trust </span><br><span class="line"> destination-zone untrust </span><br><span class="line"> source-address 10.1.1.10 24</span><br><span class="line"> destination-address 10.1.2.10 24</span><br><span class="line"> service ICMP_Echo_Request</span><br><span class="line"> action permit</span><br></pre></td></tr></table></figure><h2 id="在安全策略中引用应用"><a href="#在安全策略中引用应用" class="headerlink" title="在安全策略中引用应用"></a>在安全策略中引用应用</h2><p>防火墙可以根据服务和服务组识别常用的应用协议。不过，识别服务依赖端口识别技术，其主要依据的是端口号，因此只能用于识别FTP、HTTP等基础协议。然而，大量应用承载在HTTP协议之上，仅识别出服务已经不能解决应用管控的问题了。</p><p>报文五元组：源IP地址、源端口、目的IP地址、目的端口、协议类型</p><p>业务感知技术：流量特征分析</p><h2 id="其他引用类型"><a href="#其他引用类型" class="headerlink" title="其他引用类型"></a>其他引用类型</h2><p>地区组、域名组、URL分类等</p><h1 id="管理配置原则"><a href="#管理配置原则" class="headerlink" title="管理配置原则"></a>管理配置原则</h1><h2 id="使用安全区域划分网络"><a href="#使用安全区域划分网络" class="headerlink" title="使用安全区域划分网络"></a>使用安全区域划分网络</h2><p>防火墙默认提供Untrust、Trust、DMZ，通常分别用于连接外网、内网和具有中间状态的DMZ区。缺省情况下，同一个安全区域内的设备可以互相访问，不同安全区域内的设备互访需要开放安全策略。这种设计在性能和安全性之间取得了良好的平衡。如果网络被入侵，攻击者只能访问同一个安全区域内的资源，这就把损失控制在一个比较小的范围内。攻击者必须突破安全区域和安全策略的控制，才能访问其他资源。</p><ul><li>对于彼此之间没有交互的系统，不要将它们置于同一子网中。否则，攻击者只要突破外围防御措施，就可以更轻松地访问所有内容。</li><li>把具有相同安全级别的设备和业务资源部署在同一个安全区域中。</li><li>对于需要交互的不同安全等级的系统，请部署在不同安全区域，并开放严格的安全策略。例如，所有对外提供服务的服务器（如Web服务器、邮件服务器）应该部署在一个专用区域（通常为DMZ），不应该被外网直接访问的服务器（如数据库）必须部署在内部服务器区。</li></ul><h2 id="遵循最小授权原则"><a href="#遵循最小授权原则" class="headerlink" title="遵循最小授权原则"></a>遵循最小授权原则</h2><h3 id="1-精确匹配条件"><a href="#1-精确匹配条件" class="headerlink" title="1. 精确匹配条件"></a>1. 精确匹配条件</h3><ul><li>避免使用”Any”作为匹配条件，以减少安全风险。<ul><li>限制到具体的源&#x2F;目的IP地址和服务。</li><li>设置尽可能多的匹配条件，如用户、应用等。</li></ul></li></ul><h3 id="2-对外开放服务"><a href="#2-对外开放服务" class="headerlink" title="2. 对外开放服务"></a>2. 对外开放服务</h3><ul><li>如果需要对Internet开放服务：<ul><li>源IP可设置为”Any”，目的IP必须明确指定。</li><li>避免开放所有服务或端口，以防止字典攻击和暴力破解。</li></ul></li><li>对于非公开服务：<ul><li>必须限定源IP地址范围。</li><li>不允许任意源IP访问敏感业务。</li></ul></li></ul><h3 id="3-应用识别"><a href="#3-应用识别" class="headerlink" title="3. 应用识别"></a>3. 应用识别</h3><ul><li>利用防火墙的应用识别能力，实现精细化管控。<ul><li>根据应用类型或标签设置安全策略，如允许带有“企业应用”标签的应用。</li></ul></li></ul><h3 id="4-临时安全策略"><a href="#4-临时安全策略" class="headerlink" title="4. 临时安全策略"></a>4. 临时安全策略</h3><ul><li>为临时安全策略设置明确的生效时间，合作结束后自动失效。<ul><li>确保系统时间准确，推荐使用NTP同步时间。</li></ul></li></ul><h3 id="5-安全策略方向"><a href="#5-安全策略方向" class="headerlink" title="5. 安全策略方向"></a>5. 安全策略方向</h3><ul><li>华为防火墙作为状态检测防火墙：<ul><li>只需允许业务的主动发起方建立连接。</li></ul></li><li>仅在通信双方都需要主动发起连接的情况下，配置双向安全策略。</li><li>服务器的系统和软件更新：<ul><li>应通过统一的中央服务器获取。</li><li>在安全策略中限制到具体的域名或应用。</li></ul></li></ul><h2 id="顺序很重要，先精确后宽泛，先常用后少用"><a href="#顺序很重要，先精确后宽泛，先常用后少用" class="headerlink" title="顺序很重要，先精确后宽泛，先常用后少用"></a>顺序很重要，先精确后宽泛，先常用后少用</h2><ul><li>始终将更精确的安全策略放在前面，将更宽泛的安全策略放在后面。<ul><li>对于这些宽泛的安全策略，要持续分析，逐渐精确化，或者停用</li></ul></li><li>将频繁命中的安全策略放在更前面。<ul><li>命中次数越多，说明匹配此策略的流量越多。</li><li>让主要流量快速完成安全策略匹配，显著提高性能，这在高负载环境中尤为明显。</li></ul></li></ul><h1 id="部署安全策略"><a href="#部署安全策略" class="headerlink" title="部署安全策略"></a>部署安全策略</h1><h2 id="策略顺序"><a href="#策略顺序" class="headerlink" title="策略顺序"></a>策略顺序</h2><ol><li><strong>白名单（允许列表）</strong>：<ul><li>最优先级的策略是白名单，这些策略定义了哪些特定的流量是被明确允许的。这些策略应该尽可能具体，以确保只有合法的流量被允许通过。</li></ul></li><li><strong>业务相关的安全策略</strong>：<ul><li>接下来是与业务相关的安全策略，这些策略基于业务需求和安全政策来允许或拒绝特定的流量。</li></ul></li><li><strong>黑名单（拒绝列表）</strong>：<ul><li>黑名单策略通常位于白名单和业务相关策略之后。这些策略定义了哪些特定的流量是被明确拒绝的，例如已知的恶意IP地址、非法应用等。</li></ul></li><li><strong>临时安全策略</strong>：<ul><li>临时安全策略通常位于策略列表的底部，作为最后的手段。这种策略允许所有流量通过，用于在配置初期或在分析阶段确保业务不受影响，同时收集流量数据以便于后续策略的精确配置。</li></ul></li><li><strong>默认策略（缺省策略）</strong>：<ul><li>最后是默认策略，如果没有匹配到任何上述策略，流量将按照默认策略处理，通常是拒绝所有未明确允许的流量。<br>因此，黑名单策略通常位于临时安全策略之前，而临时安全策略位于默认策略之前。这种顺序确保了只有在白名单和业务策略中明确允许的流量才能通过，而所有未明确允许的流量都将被默认策略拒绝。通过这种方式，可以在不影响业务运行的情况下，逐步构建和优化安全策略。</li></ul></li></ol><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p> <strong>1.粗略确定白名单和黑名单</strong><br> <strong>2.写入临时安全策略允许所有流量</strong><br> <strong>3.迅速写入黑名单策略</strong><br> <strong>4.写入白名单策略</strong><br> <strong>5.精细化业务相关的安全策略以逐渐替代临时安全策略</strong></p>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>systemctl管理服务</title>
    <link href="/2024/12/11/systemctl%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1/"/>
    <url>/2024/12/11/systemctl%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>eg.netmon 用户，在名为‘py12’的 conda 虚拟环境中，在&#x2F;home&#x2F;netmon&#x2F;projects&#x2F;iotdev&#x2F;iotdev_flask 目录下，运行 flask 程序 flask_app.py</p><h2 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/systemd/system/iot_flask.service</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Gunicorn instance to serve Flask App</span><br><span class="line">After=network.target </span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=netmon</span><br><span class="line">Group=netmon</span><br><span class="line">WorkingDirectory=/home/netmon/projects/iotdev/iotdev_flask</span><br><span class="line">Environment=&quot;PATH=/home/netmon/.conda/envs/py12/bin&quot;</span><br><span class="line">ExecStart=/home/netmon/.conda/envs/py12/bin/python flask_app.py</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>下面是每部分的意义：</p><ul><li><p>​<code>[Unit]</code>​: 这个部分包含了服务的基本描述和依赖关系。</p><ul><li>​<code>Description</code>​: 定义了服务的简短描述，这里是“Gunicorn instance to serve Flask App”，表示这是一个用来运行 Flask 应用的 Gunicorn 服务实例。</li><li>​<code>After</code>​: 指定了服务的启动顺序，即在这个服务启动之前，网络服务必须已经启动和就绪。在这里，服务将在网络目标之后启动，这意味着只有当基本的网络连接已经建立后，Gunicorn 服务才会被启动。</li></ul></li><li><p>​<code>[Service]</code>​: 这个部分包含了服务的具体运行细节。</p><ul><li>​<code>User</code>​ 和 <code>Group</code>​: 指定服务将以哪个用户和用户组的身份运行。在这里，服务将以用户”netmon”和同名的用户组”netmon”的身份运行。</li><li>​<code>WorkingDirectory</code>​: 设置了服务的工作目录，也就是 Gunicorn 将从哪里开始执行。这里是”&#x2F;home&#x2F;netmon&#x2F;projects&#x2F;iotdev&#x2F;iotdev_flask”。</li><li>​<code>Environment</code>​: 设置了环境变量，这对于确保 Gunicorn 能够找到正确的 Python 解释器和 conda 环境至关重要。这里的路径应指向您 Conda 环境下的 bin 目录。</li><li>​<code>ExecStart</code>​: 指定了服务启动时要执行的命令。这里启动 Gunicorn，并指定了配置文件以及 Flask 应用的位置。</li><li>​<code>Restart</code>​: 设定了服务的重启策略。在这里，如果服务意外终止，systemd 将总是尝试重新启动它。</li></ul></li><li><p>​<code>[Install]</code>​: 这个部分定义了服务安装的相关设置。</p><ul><li>​<code>WantedBy</code>​: 指明了服务应该被哪些 target 所引用，以此来决定服务何时启动。在这里，服务被标记为在 multi-user.target 时启动，意味着在多用户界面（通常是在登录前）启动该服务。</li></ul></li></ul><h2 id="加载服务"><a href="#加载服务" class="headerlink" title="加载服务"></a>加载服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start iot_flask.service</span><br></pre></td></tr></table></figure><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable iot_flask.service</span><br></pre></td></tr></table></figure><h2 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status iot_flask.service</span><br></pre></td></tr></table></figure><h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop iot_flask.service</span><br></pre></td></tr></table></figure><p>如果要使用普通用户来管理服务，可以在 <code>~/.config/systemd/user</code> ​下面注册服务，注意不可以在配置文件中指定 user 和 group，管理命令是 <code>systemctl --user xxx</code>​</p><p>相对于使用 rc.local 来实现开机自启动，systemctl 有以下几个优势：</p><ol><li><strong>依赖关系管理</strong>：systemd 能够自动管理服务之间的依赖关系，确保服务按照正确的顺序启动。而 rc.local 则是在所有其他初始化脚本之后运行，无法保证服务间的依赖性。</li><li><strong>更好的资源控制</strong>：systemd 允许对服务的资源使用进行限制，例如 CPU 时间和内存使用量，这对于系统管理和安全性至关重要。rc.local 中的脚本则没有这样的功能。</li><li><strong>状态跟踪</strong>：systemd 能够记录服务的状态，这在故障排查时非常有用。rc.local 的脚本执行情况很难追踪。</li><li><strong>更快的启动速度</strong>：systemd 支持并行启动服务，因此能显著加快系统的启动速度。相比之下，rc.local 只能串行执行脚本，影响启动速度。</li><li><strong>统一性</strong>：systemd 提供了一种统一的方式来启动、停止、重启服务以及查看服务状态，使管理更加一致和简单。rc.local 是一种较旧的方法，可能不适用于所有的服务类型。</li><li><strong>定时任务</strong>：systemd 提供了 timer 单元来执行定时任务，而 rc.local 仅适用于开机一次性执行的任务。</li><li><strong>更丰富的命令行选项</strong>：systemctl 命令提供了丰富的选项来管理服务和单元文件，使得操作更加灵活。</li><li><strong>按需启动</strong>：systemd 只有在需要时才启动服务，有助于节省资源和提高系统效率。rc.local 中的脚本则是每次开机都执行，不考虑是否需要。</li><li><strong>集成日志管理</strong>：systemd 集成了日志管理系统，使得查看服务的日志变得更加方便，而 rc.local 执行的结果可能难以记录和追踪。</li></ol><p>综上所述，systemd 提供了更强大、更灵活的服务管理方式，相较于 rc.local，它在系统管理方面提供了更多的便利性和可靠性。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu使用rclone挂载Alist到本地</title>
    <link href="/2024/11/22/ubuntu%E4%BD%BF%E7%94%A8rclone%E6%8C%82%E8%BD%BDAlist%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
    <url>/2024/11/22/ubuntu%E4%BD%BF%E7%94%A8rclone%E6%8C%82%E8%BD%BDAlist%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="安装rclone"><a href="#安装rclone" class="headerlink" title="安装rclone"></a>安装rclone</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install rclone</span><br></pre></td></tr></table></figure><h2 id="配置rclone"><a href="#配置rclone" class="headerlink" title="配置rclone"></a>配置rclone</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure><p>选择新存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">No configurations found - make a new one.</span><br><span class="line">n) New remote</span><br><span class="line">e) Edit existing remote</span><br><span class="line">d) Delete existing remote</span><br><span class="line">q) Quit config</span><br><span class="line">n/e/d/q&gt; n</span><br></pre></td></tr></table></figure><p>输入名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&gt; alist</span><br></pre></td></tr></table></figure><p>选择类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line">[snip]</span><br><span class="line">42 / WebDAV</span><br><span class="line">type&gt; 42</span><br></pre></td></tr></table></figure><p>输入网址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0.0.0.0:5244/dav</span><br></pre></td></tr></table></figure><p>输入用户名和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User name&gt;</span><br><span class="line">Password&gt;</span><br></pre></td></tr></table></figure><p>测试连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone ls alist:</span><br></pre></td></tr></table></figure><p>如果连接成功，会显示目录下的文件列表</p><h2 id="挂载Alist到本地"><a href="#挂载Alist到本地" class="headerlink" title="挂载Alist到本地"></a>挂载Alist到本地</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/remote</span><br><span class="line">rclone mount alist:/ /home/remote  --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 --use-mmap --vfs-cache-mode full --daemon</span><br></pre></td></tr></table></figure><h2 id="卸载Alist"><a href="#卸载Alist" class="headerlink" title="卸载Alist"></a>卸载Alist</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fusermount f -qzu /home/remote</span><br></pre></td></tr></table></figure><h2 id="设置开启自动挂载"><a href="#设置开启自动挂载" class="headerlink" title="设置开启自动挂载"></a>设置开启自动挂载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/rclone.service</span><br></pre></td></tr></table></figure><p>注意两处：<br>1.延时30s挂载，防止某些依赖服务尚未启动：ExecStartPre&#x3D;&#x2F;bin&#x2F;sleep 30<br>2.去除–daemon守护进程模式，systemd 本身会将服务作为守护进程运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit] </span><br><span class="line">Description=rclone挂载到/home/remote</span><br><span class="line"></span><br><span class="line">[Service] </span><br><span class="line">User=root </span><br><span class="line">ExecStartPre=/bin/sleep 30</span><br><span class="line">ExecStart=/usr/bin/rclone mount alist:/ /home/remote  --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 --use-mmap --vfs-cache-mode full</span><br><span class="line"></span><br><span class="line">[Install] </span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># reload守护进程</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"># 设置service文件自启</span><br><span class="line">systemctl enable rclone.service</span><br><span class="line"></span><br><span class="line"># 启动service文件</span><br><span class="line">systemctl start rclone.service</span><br></pre></td></tr></table></figure><h2 id="挂载完成后就有很多事可以做了，比如定期自动备份到云盘"><a href="#挂载完成后就有很多事可以做了，比如定期自动备份到云盘" class="headerlink" title="挂载完成后就有很多事可以做了，比如定期自动备份到云盘"></a>挂载完成后就有很多事可以做了，比如定期自动备份到云盘</h2><p>以博客文章备份举例：每周日0点备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 * * 0 cp -r /home/jxh/blog/source/_posts /home/remote/blog/md_$(date +\%Y\%m\%d)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACL写法(思科+华为)</title>
    <link href="/2024/11/22/ACL%E5%86%99%E6%B3%95(%E6%80%9D%E7%A7%91+%E5%8D%8E%E4%B8%BA)/"/>
    <url>/2024/11/22/ACL%E5%86%99%E6%B3%95(%E6%80%9D%E7%A7%91+%E5%8D%8E%E4%B8%BA)/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>说明</th><th>思科&#x2F;锐捷</th><th>华为</th></tr></thead><tbody><tr><td>允许10.1.1.0&#x2F;24网段访问192.168.1.0&#x2F;24网段的所有服务（基于IP协议）</td><td><code>ip access-list extended 101</code><br><code>10 permit ip 10.1.1.0 0.0.0.255 192.168.1.0 0.0.0.255</code></td><td><code>acl number 3001</code><br><code>rule 10 permit ip source 10.1.1.0 0.0.0.255 destination 192.168.1.0 0.0.0.255</code></td></tr><tr><td>禁止172.16.2.0&#x2F;24网段访问10.0.0.0&#x2F;8网段的所有服务（基于IP协议）</td><td><code>ip access-list extended 102</code><br><code>10 deny ip 172.16.2.0 0.0.0.255 10.0.0.0 0.255.255.255</code></td><td><code>acl number 3002</code><br><code>rule 10 deny ip source 172.16.2.0 0.0.0.255 destination 10.0.0.0 0.255.255.255</code></td></tr><tr><td>允许192.168.5.0&#x2F;24网段使用HTTP协议（端口80）访问20.20.20.0&#x2F;24网段的Web服务器</td><td><code>ip access-list extended 103</code><br><code>10 permit tcp 192.168.5.0 0.0.0.255 20.20.20.0 0.0.0.255 eq 80</code></td><td><code>acl number 3003</code><br><code>rule 10 permit tcp source 192.168.5.0 0.0.0.255 destination 20.20.20.0 0.0.0.255 destination-port eq 80</code></td></tr><tr><td>禁止11.11.11.0&#x2F;24网段使用FTP协议（端口21）访问172.31.1.0&#x2F;24网段的FTP服务器</td><td><code>ip access-list extended 104</code><br><code>10 deny tcp 11.11.11.0 0.0.0.255 172.31.1.0 0.0.0.255 eq 21</code></td><td><code>acl number 3004</code><br><code>rule 10 deny tcp source 11.11.11.0 0.0.0.255 destination 172.31.1.0 0.0.0.255 destination-port eq 21</code></td></tr><tr><td>应用ACL</td><td><code>int g0/1</code><br><code>ip access-group 101 in/out</code></td><td><code>int e0/0/1</code><br><code>traffic-filter inbound/outbound acl 3001</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网工</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RIP+OSPF+BGP配置(思科+华为)</title>
    <link href="/2024/11/22/RIP+OSPF+BGP%E9%85%8D%E7%BD%AE(%E6%80%9D%E7%A7%91+%E5%8D%8E%E4%B8%BA)/"/>
    <url>/2024/11/22/RIP+OSPF+BGP%E9%85%8D%E7%BD%AE(%E6%80%9D%E7%A7%91+%E5%8D%8E%E4%B8%BA)/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th><strong>协议</strong></th><th><strong>思科（Cisco）</strong></th><th><strong>华为（Huawei）</strong></th></tr></thead><tbody><tr><td><strong>RIP</strong></td><td><code>router rip</code><br> <code>version 2</code><br> <code>network &lt;network&gt;</code><br> <code>no auto-summary</code></td><td><code>rip 1</code><br> <code>version 2</code><br> <code>network &lt;network&gt;</code><br> <code>undo auto-summary</code></td></tr><tr><td><strong>OSPF</strong></td><td><code>router ospf &lt;process-id&gt;</code><br> <code>network &lt;network&gt; &lt;wildcard-mask&gt; area &lt;area-id&gt;</code><br> <code>router-id &lt;router-id&gt;</code></td><td><code>ospf &lt;process-id&gt;</code><br> <code>network &lt;network&gt; &lt;wildcard-mask&gt;</code><br> <code>router-id &lt;router-id&gt;</code><br> <code>area &lt;area-id&gt;</code></td></tr><tr><td><strong>BGP</strong></td><td><code>router bgp &lt;asn&gt;</code><br> <code>network &lt;network&gt; mask &lt;subnet-mask&gt;</code><br> <code>neighbor &lt;ip-address&gt; remote-as &lt;asn&gt;</code></td><td><code>bgp &lt;asn&gt;</code><br> <code>network &lt;network&gt; &lt;subnet-mask&gt;</code><br> <code>peer &lt;ip-address&gt; as-number &lt;asn&gt;</code></td></tr></tbody></table><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a><strong>说明：</strong></h3><ol><li><p><strong>RIP（Routing Information Protocol）</strong></p><ul><li><strong>思科</strong>：通过 <code>router rip</code> 启用 RIP，并配置 RIP 版本和网络，通常需要禁用 <code>auto-summary</code>。</li><li><strong>华为</strong>：通过 <code>rip &lt;instance-id&gt;</code> 启用 RIP，配置类似于思科，但命令稍有不同，使用 <code>undo auto-summary</code> 来禁用自动汇总功能。</li></ul></li><li><p><strong>OSPF（Open Shortest Path First）</strong></p><ul><li><strong>思科</strong>：需要通过 <code>router ospf &lt;process-id&gt;</code> 启动 OSPF 路由进程，配置网络并指定所属区域。<code>router-id</code> 可选，通常用于避免自动选取路由器 ID。</li><li><strong>华为</strong>：配置 <code>ospf &lt;process-id&gt;</code> 启动 OSPF，指定网络和区域，<code>router-id</code> 配置也可选。</li></ul></li><li><p><strong>BGP（Border Gateway Protocol）</strong></p><ul><li><strong>思科</strong>：使用 <code>router bgp &lt;asn&gt;</code> 启用 BGP，配置网络、邻居关系以及AS号等。</li><li><strong>华为</strong>：在 <code>bgp &lt;asn&gt;</code> 配置下启用 BGP，使用 <code>network</code> 配置网络，<code>peer</code> 配置邻居 IP 和 AS 号。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网工</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NAT地址转换配置（思科+华为）</title>
    <link href="/2024/11/22/NAT%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2%E9%85%8D%E7%BD%AE%EF%BC%88%E6%80%9D%E7%A7%91+%E5%8D%8E%E4%B8%BA%EF%BC%89/"/>
    <url>/2024/11/22/NAT%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2%E9%85%8D%E7%BD%AE%EF%BC%88%E6%80%9D%E7%A7%91+%E5%8D%8E%E4%B8%BA%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="思科"><a href="#思科" class="headerlink" title="思科"></a>思科</h2><p><img src="https://xinhaojin.github.io/picx-images-hosting/20241122/wechat_2024-11-22_150031_298.1e8mwfyk77.webp"></p><h3 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int g0/0.10</span><br><span class="line">encap dot1q 10</span><br><span class="line">ip add 192.168.10.254 255.255.255.0</span><br><span class="line">ip nat inside</span><br><span class="line">int g0/1.20</span><br><span class="line">encap dot1q 20</span><br><span class="line">ip add 192.168.20.254 255.255.255.0</span><br><span class="line">ip nat inside</span><br><span class="line">int s0/1/0</span><br><span class="line">no shutdown</span><br><span class="line">ip add 11.11.11.1 255.255.255.0</span><br><span class="line">ip nat outside</span><br><span class="line">clock rate 96000</span><br><span class="line">exit</span><br><span class="line">ip nat pool ppp 11.11.11.2 11.11.11.4 netmask 255.255.255.0</span><br><span class="line">access-list 100 permit ip 192.168.10.0 0.0.0.255 any</span><br><span class="line">access-list 100 permit ip 192.168.20.0 0.0.0.255 any</span><br><span class="line">ip nat inside source list 100 pool ppp overload </span><br><span class="line">ip route 22.22.22.0 255.255.255.0 11.11.11.10</span><br></pre></td></tr></table></figure><h2 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h2><p><img src="https://xinhaojin.github.io/picx-images-hosting/20241122/%E5%9B%BE%E7%89%871.6t75evdqq1.webp"></p><h3 id="路由器配置-1"><a href="#路由器配置-1" class="headerlink" title="路由器配置"></a>路由器配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int g0/0/0.10</span><br><span class="line">dot1q termination vid 10</span><br><span class="line">arp broadcast enable</span><br><span class="line">ip add 192.168.10.254 24</span><br><span class="line">int g0/0/1.20</span><br><span class="line">dot1q termination vid 20</span><br><span class="line">arp broadcast enable</span><br><span class="line">ip add 192.168.20.254 24</span><br><span class="line">int g0/0/2</span><br><span class="line">ip add 11.11.11.1 24</span><br><span class="line">quit</span><br><span class="line">nat address-group 1 11.11.11.2 11.11.11.4</span><br><span class="line">acl 2000</span><br><span class="line">rule permit source 192.168.10.0 0.0.0.255</span><br><span class="line">rule permit source 192.168.20.0 0.0.0.255</span><br><span class="line">int g0/0/2</span><br><span class="line">nat outbound 2000 address-group 1</span><br><span class="line">quit</span><br><span class="line">ip route-static 22.22.22.0 24 11.11.11.10</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th><strong>配置项</strong></th><th><strong>思科路由器 NAT 配置</strong></th><th><strong>华为路由器 NAT 配置</strong></th></tr></thead><tbody><tr><td><strong>接口配置</strong><br>路由器本身不处理VLAN，VLAN是在交换机层面上实现的，必须使用子接口实现</td><td>创建子接口，通过 <code>encap dot1q</code> 设置 VLAN ID，配置 IP 地址，并标记为 <code>ip nat inside</code>。</td><td>创建子接口，通过 <code>dot1q termination vid</code> 设置 VLAN，配置 IP 地址，并启用 ARP 广播。</td></tr><tr><td><strong>外网接口配置</strong></td><td>配置外部接口 IP 地址，并标记为 <code>ip nat outside</code>。启用该接口并设置时钟频率（如适用）。</td><td>配置外部接口的 IP 地址。</td></tr><tr><td><strong>NAT 地址池</strong></td><td>通过 <code>ip nat pool</code> 定义公共 IP 地址池供内网访问外网时使用。</td><td>通过 <code>nat address-group</code> 创建公共 IP 地址池。</td></tr><tr><td><strong>访问控制列表 (ACL)</strong></td><td>创建 ACL，定义哪些内部 IP 地址可以进行 NAT 地址转换。</td><td>使用 <code>acl</code> 配置访问控制列表，定义允许进行 NAT 转换的源地址。</td></tr><tr><td><strong>配置源 NAT</strong></td><td>使用 <code>ip nat inside source list</code> 配置 ACL 中定义的地址范围，将流量映射到外部地址池。</td><td>通过 <code>nat outbound</code> 命令将流量映射到外部地址池，实现源地址转换。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网工</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>思科核心交换机双机热备份</title>
    <link href="/2024/11/21/%E6%80%9D%E7%A7%91%E6%A0%B8%E5%BF%83%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%E4%BB%BD/"/>
    <url>/2024/11/21/%E6%80%9D%E7%A7%91%E6%A0%B8%E5%BF%83%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<p><img src="https://xinhaojin.github.io/picx-images-hosting/20241119/image.969rucnjap.webp" alt="image"></p><table><thead><tr><th><strong>描述</strong></th><th><strong>交换机A</strong></th><th><strong>交换机B</strong></th></tr></thead><tbody><tr><td><strong>配置vlan接口地址</strong></td><td><code>int vlan 10</code><br> <code>ip add 192.168.10.254 255.255.255.0</code><br> <code>int vlan 20</code><br> <code>ip add 192.168.20.254 255.255.255.0</code></td><td><code>int vlan 10</code><br> <code>ip add 192.168.10.253 255.255.255.0</code><br> <code>int vlan 20</code><br> <code>ip add 192.168.20.253 255.255.255.0</code></td></tr><tr><td><strong>配置虚拟地址优先级<br>抢占<br>监控上行接口（中断时切换）<br>（standby编号可以指定其他，但为了方便一般与vlan号相同）</strong></td><td><code>int vlan 10</code><br> <code>standby 10 ip 192.168.10.252</code><br> <code>standby 10 priority 101</code><br> <code>standby 10 preempt</code><br> <code>standby 10 track f0/1</code><br> <code>standby 10 track f0/2</code> <br><code>int vlan 20</code><br> <code>standby 20 ip 192.168.20.252</code><br> <code>standby 20 priority 100(default)</code><br> <code>standby 20 track f0/1</code><br> <code>standby 20 track f0/2</code></td><td><code>int vlan 10</code><br> <code>standby 10 ip 192.168.10.252</code><br> <code>standby 10 priority 100(default)</code><br> <code>standby 10 track f0/1</code><br> <code>standby 10 track f0/2</code><br><code>int vlan 20</code><br> <code>standby 20 ip 192.168.20.252</code><br> <code>standby 20 priority 101</code><br> <code>standby 10 preempt</code><br> <code>standby 20 track f0/1</code><br> <code>standby 20 track f0/2</code></td></tr><tr><td><strong>配置生成树，分配vlan，负载均衡</strong></td><td><code>spanning-tree mode pvst</code><br> <code>spanning-tree vlan 10 root primary</code><br> <code>spanning-tree vlan 20 root secondary</code></td><td><code>spanning-tree mode pvst</code><br> <code>spanning-tree vlan 20 root primary</code><br> <code>spanning-tree vlan 10 root secondary</code></td></tr><tr><td><strong>配置上行接口为路由接口，关闭二层交换功能</strong></td><td><code>int f0/1</code><br> <code>no switchport</code><br> <code>ip add 192.168.11.13 255.255.255.252</code><br><code>int f0/2</code><br> <code>no switchport</code><br> <code>ip add 192.168.11.9 255.255.255.252</code></td><td><code>int f0/1</code><br> <code>no switchport</code><br> <code>ip add 192.168.11.1 255.255.255.252</code><br><code>int f0/2</code><br> <code>no switchport</code><br> <code>ip add 192.168.11.5 255.255.255.252</code></td></tr><tr><td><strong>捆绑链路聚合接口</strong></td><td><code>int f0/3</code><br> <code>switchport trunk encapsulation dot1q</code><br> <code>switchport mode trunk</code><br> <code>channel-group 1 mode on</code> <br><code>int f0/4</code><br> <code>switchport trunk encapsulation dot1q</code><br> <code>switchport mode trunk</code><br> <code>channel-group 1 mode on</code></td><td><code>int f0/3</code><br> <code>switchport trunk encapsulation dot1q</code><br> <code>switchport mode trunk</code><br> <code>channel-group 1 mode on</code><br><code>int f0/4</code><br> <code>switchport trunk encapsulation dot1q</code><br> <code>switchport mode trunk</code><br> <code>channel-group 1 mode on</code></td></tr><tr><td><strong>其余端口配置为trunk</strong></td><td><code>int range f0/5-7</code><br> <code>switchport trunk encapsulation dot1q</code><br> <code>switchport mode trunk</code><br> <code>switchport trunk allowed vlan all(default)</code></td><td><code>int range f0/5-7</code><br> <code>switchport trunk encapsulation dot1q</code><br> <code>switchport mode trunk</code><br> <code>switchport trunk allowed vlan all(default)</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网工</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>思科锐捷网络设备配置命令</title>
    <link href="/2024/11/21/%E6%80%9D%E7%A7%91%E9%94%90%E6%8D%B7%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/11/21/%E6%80%9D%E7%A7%91%E9%94%90%E6%8D%B7%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>类别</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><strong>基础命令</strong></td><td><code>enable</code></td><td>进入特权模式</td></tr><tr><td></td><td><code>configure terminal</code></td><td>进入全局配置模式</td></tr><tr><td></td><td><code>show running-config</code></td><td>查看当前运行的配置</td></tr><tr><td></td><td><code>show startup-config</code></td><td>查看启动时的配置</td></tr><tr><td></td><td><code>copy running-config startup-config</code></td><td>保存当前配置到启动配置文件</td></tr><tr><td></td><td><code>reload</code></td><td>重新启动交换机</td></tr><tr><td><strong>接口配置</strong></td><td><code>interface &lt;接口号&gt;</code></td><td>进入指定接口配置模式</td></tr><tr><td></td><td><code>interface range &lt;接口范围&gt;</code></td><td>配置多个接口（例如 <code>interface range fastEthernet 0/1 - 24</code>）</td></tr><tr><td></td><td><code>ip address &lt;ip地址&gt; &lt;子网掩码&gt;</code></td><td>配置接口的IP地址和子网掩码</td></tr><tr><td></td><td><code>no shutdown</code></td><td>启动接口（默认接口关闭时需要启用）</td></tr><tr><td></td><td><code>shutdown</code></td><td>关闭接口</td></tr><tr><td></td><td><code>description &lt;接口描述&gt;</code></td><td>设置接口描述</td></tr><tr><td></td><td><code>speed &lt;速度&gt;</code></td><td>设置接口速率（例如 <code>speed 100</code>）</td></tr><tr><td></td><td><code>duplex &lt;双工模式&gt;</code></td><td>设置接口双工模式（<code>full</code> 或 <code>half</code>）</td></tr><tr><td></td><td><code>switchport mode access</code></td><td>设置端口为访问模式</td></tr><tr><td></td><td><code>switchport mode trunk</code></td><td>设置端口为干线模式</td></tr><tr><td></td><td><code>switchport trunk encapsulation dot1q</code></td><td>设置干线端口的封装方式为IEEE 802.1Q</td></tr><tr><td></td><td><code>switchport trunk allowed vlan &lt;vlan列表&gt;</code></td><td>配置允许通过的VLAN列表</td></tr><tr><td></td><td><code>switchport trunk native vlan &lt;vlan编号&gt;</code></td><td>设置干线端口的原生VLAN（通常是VLAN 1）</td></tr><tr><td></td><td><code>switchport access vlan &lt;vlan编号&gt;</code></td><td>将端口分配给指定VLAN</td></tr><tr><td></td><td><code>switchport nonegotiate</code></td><td>禁用干线端口的协商</td></tr><tr><td></td><td><code>switchport mode dynamic auto</code></td><td>设置接口为动态自动模式，允许接口协商是否为访问端口或干线端口</td></tr><tr><td></td><td><code>switchport mode dynamic desirable</code></td><td>设置接口为动态协商模式，要求端口以干线端口身份进行协商</td></tr><tr><td></td><td><code>int g0/0/0.1</code></td><td>添加子接口，适合单臂路由实现vlan间通信</td></tr><tr><td></td><td><code>encapsulation dot1Q 10</code></td><td>给子接口打上vlan标签</td></tr><tr><td></td><td><code>ip address 192.168.10.254 255.255.255.0</code></td><td>配置子接口IP地址和子网掩码</td></tr><tr><td><strong>VLAN配置</strong></td><td><code>vlan &lt;vlan编号&gt;</code></td><td>创建VLAN或进入现有VLAN配置模式</td></tr><tr><td></td><td><code>name &lt;vlan名称&gt;</code></td><td>设置VLAN名称</td></tr><tr><td></td><td><code>show vlan brief</code></td><td>显示VLAN的基本信息</td></tr><tr><td></td><td><code>show vlan</code></td><td>显示所有VLAN的信息</td></tr><tr><td></td><td><code>vlan database</code></td><td>进入VLAN数据库模式</td></tr><tr><td></td><td><code>exit</code></td><td>退出VLAN数据库模式</td></tr><tr><td><strong>STP配置</strong></td><td><code>spanning-tree vlan &lt;vlan编号&gt; root primary</code></td><td>设置VLAN根桥为主设备</td></tr><tr><td></td><td><code>spanning-tree vlan &lt;vlan编号&gt; priority &lt;优先级值&gt;</code></td><td>设置VLAN根桥的优先级</td></tr><tr><td></td><td><code>spanning-tree mode &lt;pvst| rapid-pvst</code></td><td>设置STP模式</td></tr><tr><td></td><td><code>spanning-tree vlan &lt;vlan编号&gt; cost &lt;路径成本&gt;</code></td><td>设置VLAN的STP路径成本</td></tr><tr><td></td><td><code>spanning-tree portfast</code></td><td>启用端口快速收敛（用于接入层端口）</td></tr><tr><td></td><td><code>spanning-tree bpduguard enable</code></td><td>启用BPDU Guard（防止非法根桥）</td></tr><tr><td></td><td><code>show spanning-tree</code></td><td>显示STP状态</td></tr><tr><td><strong>静态路由</strong></td><td><code>ip route &lt;目标网络地址&gt; &lt;子网掩码&gt; &lt;下一跳地址&gt;</code></td><td>添加一条静态路由。指定目标网络地址、子网掩码和下一跳路由器的 IP 地址。</td></tr><tr><td></td><td><code>ip route 0.0.0.0 0.0.0.0 &lt;下一跳地址&gt;</code></td><td>添加默认路由，通常用于指向出口路由器的下一跳地址。</td></tr><tr><td></td><td><code>ip route &lt;目标网络地址&gt; &lt;子网掩码&gt; &lt;出口接口&gt;</code></td><td>添加静态路由并指定出接口，而非下一跳地址。适用于直接连接的网络。</td></tr><tr><td></td><td><code>no ip route &lt;目标网络地址&gt; &lt;子网掩码&gt; &lt;下一跳地址&gt;</code></td><td>删除已配置的静态路由。</td></tr><tr><td></td><td><code>show ip route</code></td><td>查看当前设备的路由表，显示静态路由、动态路由等所有路由信息。</td></tr><tr><td><strong>路由协议</strong></td><td><code>router rip</code></td><td>启用RIP路由协议</td></tr><tr><td></td><td><code>network &lt;网络地址&gt;</code></td><td>指定RIP路由协议的网络</td></tr><tr><td></td><td><code>version 2</code></td><td>RIP版本2，支持CIDR地址</td></tr><tr><td></td><td><code>router ospf &lt;进程ID&gt;</code></td><td>启用OSPF路由协议</td></tr><tr><td></td><td><code>network &lt;网络地址&gt; &lt;反向掩码&gt; area &lt;区域号&gt;</code></td><td>配置OSPF的网络和区域</td></tr><tr><td></td><td><code>router bgp &lt;AS号&gt;</code></td><td>启用BGP路由协议</td></tr><tr><td></td><td><code>neighbor &lt;邻居IP地址&gt; remote-as &lt;AS号&gt;</code></td><td>配置BGP邻居及其AS号</td></tr><tr><td></td><td><code>network &lt;网络地址&gt; mask &lt;子网掩码&gt;</code></td><td>配置BGP的网络公告</td></tr><tr><td></td><td><code>redistribute ospf</code></td><td>将OSPF路由重新分发到其他路由协议</td></tr><tr><td><strong>NAT配置</strong></td><td><code>ip nat inside source list &lt;访问控制列表编号&gt; interface &lt;接口号&gt; overload</code></td><td>配置动态NAT，使用访问控制列表（ACL）来控制哪些地址可以进行NAT，指定外部接口并启用超载模式（overload）</td></tr><tr><td></td><td><code>ip nat inside</code></td><td>配置接口为内部网络接口（NAT Inside）。通常是本地私有地址的接口。</td></tr><tr><td></td><td><code>ip nat outside</code></td><td>配置接口为外部网络接口（NAT Outside）。通常是连接到公共Internet的接口。</td></tr><tr><td></td><td><code>ip nat inside source static &lt;内部IP地址&gt; &lt;外部IP地址&gt;</code></td><td>配置静态NAT，将一个内部IP地址映射到一个固定的外部IP地址（1:1映射）。</td></tr><tr><td></td><td><code>ip nat inside source static &lt;内部IP地址&gt; &lt;外部IP地址&gt; extendable</code></td><td>配置扩展的静态NAT，允许在NAT映射的IP地址用尽时动态扩展静态NAT映射。</td></tr><tr><td></td><td><code>ip nat inside source list &lt;ACL编号&gt; pool &lt;池名称&gt; overload</code></td><td>配置基于ACL的动态NAT并使用NAT池（例如，当有多个外部IP地址时）。启用超载功能允许多个内部IP共享一个外部IP。</td></tr><tr><td></td><td><code>ip nat pool &lt;池名称&gt; &lt;起始IP地址&gt; &lt;结束IP地址&gt; netmask &lt;子网掩码&gt;</code></td><td>创建一个NAT池，指定池的起始和结束IP地址及子网掩码，用于动态分配外部IP地址给内部IP。</td></tr><tr><td></td><td><code>ip nat inside source list &lt;ACL编号&gt; interface &lt;接口号&gt; overload</code></td><td>配置基于ACL的动态NAT，指定外部接口并启用超载模式，允许多个内部地址共享一个外部IP地址。</td></tr><tr><td></td><td><code>ip nat translation tcp-timeout &lt;秒数&gt;</code></td><td>设置TCP连接的NAT超时时间，默认为24小时（86400秒）。</td></tr><tr><td></td><td><code>ip nat translation udp-timeout &lt;秒数&gt;</code></td><td>设置UDP连接的NAT超时时间。默认为5分钟（300秒）。</td></tr><tr><td></td><td><code>ip nat translation udp-timeout &lt;秒数&gt;</code></td><td>设置UDP连接的NAT超时时间。默认为5分钟（300秒）。</td></tr><tr><td></td><td><code>ip nat translation no-fragment</code></td><td>禁用NAT转换时的IP分片（Fragmentation）。</td></tr><tr><td></td><td><code>show ip nat translations</code></td><td>查看当前NAT转换表，显示所有活动的NAT条目。</td></tr><tr><td></td><td><code>clear ip nat translations *</code></td><td>清除所有NAT转换条目。</td></tr><tr><td></td><td><code>show ip nat statistics</code></td><td>查看NAT统计信息，如NAT池使用情况、命中次数、转换次数等。</td></tr><tr><td></td><td><code>clear ip nat statistics</code></td><td>清除NAT的统计数据。</td></tr><tr><td></td><td><code>ip nat enable</code></td><td>在接口上启用NAT功能，通常在接口配置模式下使用。</td></tr><tr><td></td><td><code>ip route &lt;目标网络&gt; &lt;子网掩码&gt; &lt;NAT接口&gt;</code></td><td>配置NAT接口的静态路由。确保NAT流量能够正确路由到外部网络。</td></tr><tr><td><strong>ACL配置</strong></td><td><code>ip access-lists extended &lt;编号&gt;</code></td><td>创建&#x2F;进入扩展ACL</td></tr><tr><td></td><td><code>&lt;编号&gt; permit ip permit ip &lt;源地址&gt; &lt;反掩码&gt; &lt;目标地址&gt; &lt;反掩码&gt;</code></td><td>添加rule</td></tr><tr><td></td><td><code>ip access-group &lt;ACL编号&gt; in/out</code></td><td>应用ACL到接口的流量方向（in&#x2F;out）</td></tr><tr><td></td><td><code>show access-lists &lt;编号&gt;</code></td><td>查看ACL配置及规则</td></tr><tr><td><strong>端口安全</strong></td><td><code>switchport port-security</code></td><td>启用端口安全</td></tr><tr><td></td><td><code>switchport port-security maximum &lt;最大数量&gt;</code></td><td>设置端口允许的最大MAC地址数量</td></tr><tr><td></td><td><code>switchport port-security violation &lt;protect/restrict/shutdown&gt;</code></td><td>配置端口安全违规处理方式</td></tr><tr><td></td><td><code>show port-security</code></td><td>查看端口安全的配置信息</td></tr><tr><td><strong>SNMP配置</strong></td><td><code>snmp-server community &lt;community_string&gt; RO</code></td><td>配置SNMP社区字符串并设置只读权限</td></tr><tr><td></td><td><code>snmp-server enable traps</code></td><td>启用SNMP陷阱</td></tr><tr><td><strong>日志配置</strong></td><td><code>logging buffered &lt;大小&gt;</code></td><td>设置日志缓冲区大小</td></tr><tr><td></td><td><code>logging console</code></td><td>启用控制台日志输出</td></tr><tr><td><strong>NTP配置</strong></td><td><code>ntp server &lt;NTP服务器地址&gt;</code></td><td>配置NTP服务器</td></tr><tr><td><strong>SSH配置</strong></td><td><code>ip domain-name &lt;域名&gt;</code></td><td>配置域名（用于SSH）</td></tr><tr><td></td><td><code>crypto key generate rsa</code></td><td>生成RSA密钥对（用于SSH）</td></tr><tr><td></td><td><code>ip ssh version 2</code></td><td>启用SSH版本2</td></tr><tr><td></td><td><code>line vty 0 4</code></td><td>进入VTY线路配置模式（配置远程访问）</td></tr><tr><td></td><td><code>login local</code></td><td>使用本地用户名和密码进行登录</td></tr><tr><td></td><td><code>transport input ssh</code></td><td>仅允许SSH远程访问</td></tr><tr><td><strong>EtherChannel</strong></td><td><code>interface range &lt;接口范围&gt;</code></td><td>进入多个接口配置模式（例如 <code>interface range gig 0/1 - 2</code>）</td></tr><tr><td></td><td><code>channel-group &lt;编号&gt; mode on</code></td><td>配置EtherChannel，开启通道组</td></tr><tr><td></td><td><code>channel-group &lt;编号&gt; mode passive</code></td><td>设置EtherChannel为被动模式（等待对端聚合）</td></tr><tr><td></td><td><code>channel-group &lt;编号&gt; mode active</code></td><td>设置EtherChannel为主动模式</td></tr><tr><td></td><td><code>show etherchannel summary</code></td><td>查看EtherChannel状态</td></tr><tr><td><strong>VTP配置</strong></td><td><code>vtp mode &lt;模式&gt;</code></td><td>设置VTP模式（<code>server</code>, <code>client</code>, <code>transparent</code>）</td></tr><tr><td></td><td><code>vtp domain &lt;域名&gt;</code></td><td>设置VTP域名</td></tr><tr><td></td><td><code>vtp password &lt;密码&gt;</code></td><td>设置VTP密码</td></tr><tr><td><strong>DHCP配置</strong></td><td><code>ip dhcp pool &lt;池名称&gt;</code></td><td>创建一个DHCP地址池</td></tr><tr><td></td><td><code>network &lt;网络地址&gt; &lt;子网掩码&gt;</code></td><td>配置DHCP池的网络地址和子网掩码</td></tr><tr><td></td><td><code>default-router &lt;默认网关地址&gt;</code></td><td>配置DHCP客户端的默认网关</td></tr><tr><td></td><td><code>dns-server &lt;DNS服务器地址&gt;</code></td><td>配置DHCP客户端的DNS服务器地址</td></tr><tr><td></td><td><code>domain-name &lt;域名&gt;</code></td><td>配置DHCP客户端的域名</td></tr><tr><td></td><td><code>lease &lt;租期&gt;</code></td><td>设置DHCP租期（单位：天、小时、分钟）</td></tr><tr><td></td><td><code>excluded-address &lt;地址范围&gt;</code></td><td>配置DHCP池中排除的地址范围，不会分配给DHCP客户端</td></tr><tr><td></td><td><code>address &lt;地址&gt; &lt;子网掩码&gt;</code></td><td>配置DHCP池的特定IP地址和子网掩码</td></tr><tr><td></td><td><code>ip dhcp excluded-address &lt;起始地址&gt; &lt;结束地址&gt;</code></td><td>配置排除的DHCP地址范围，确保这些地址不会被分配给客户端</td></tr><tr><td></td><td><code>show ip dhcp pool</code></td><td>查看DHCP池的状态和分配的地址信息</td></tr><tr><td></td><td><code>show ip dhcp binding</code></td><td>查看DHCP客户端的IP地址绑定信息</td></tr><tr><td></td><td><code>clear ip dhcp binding &lt;IP地址&gt;</code></td><td>清除指定DHCP客户端的IP地址绑定</td></tr><tr><td></td><td><code>ip helper-address &lt;服务器地址&gt;</code></td><td>配置DHCP中继代理，指向DHCP服务器的IP地址</td></tr><tr><td><strong>系统管理</strong></td><td><code>show version</code></td><td>查看系统版本信息</td></tr><tr><td></td><td><code>show ip interface brief</code></td><td>查看接口状态摘要</td></tr><tr><td></td><td><code>show interfaces</code></td><td>查看接口详细信息</td></tr><tr><td></td><td><code>show running-config</code></td><td>查看当前运行配置</td></tr><tr><td></td><td><code>show startup-config</code></td><td>查看启动配置</td></tr><tr><td></td><td><code>show logging</code></td><td>查看日志信息</td></tr><tr><td></td><td><code>clear logging</code></td><td>清除日志信息</td></tr><tr><td><strong>工程配置3招</strong></td><td><code>no ip domain lookup</code></td><td>关闭域名解析（防止敲错命令查询）</td></tr><tr><td></td><td><code>line console 0</code></td><td>进入控制台线路0的配置模式</td></tr><tr><td></td><td><code>logging synchronous</code></td><td>log当前显示信息同步，不会打断控制台的输入</td></tr><tr><td></td><td><code>no exec - timeout</code></td><td>关闭会话超时，防止一段时间不操作自动退出</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网工</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vlan间通信(单臂路由、多臂路由、三层交换)配置命令(思科+华为)</title>
    <link href="/2024/11/20/vlan%E9%97%B4%E9%80%9A%E4%BF%A1(%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1%E3%80%81%E5%A4%9A%E8%87%82%E8%B7%AF%E7%94%B1%E3%80%81%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2)%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4(%E6%80%9D%E7%A7%91+%E5%8D%8E%E4%B8%BA)/"/>
    <url>/2024/11/20/vlan%E9%97%B4%E9%80%9A%E4%BF%A1(%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1%E3%80%81%E5%A4%9A%E8%87%82%E8%B7%AF%E7%94%B1%E3%80%81%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2)%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4(%E6%80%9D%E7%A7%91+%E5%8D%8E%E4%B8%BA)/</url>
    
    <content type="html"><![CDATA[<h2 id="单臂路由"><a href="#单臂路由" class="headerlink" title="单臂路由"></a>单臂路由</h2><p>路由器单个接口配置多个子接口，打上vlan标签，模拟三层交换机的vlanif接口功能</p><p>注意：路由器不具备vlan划分和处理能力，一个物理接口默认只处理一个vlan网络，因此需要为每个vlan配置一个物理子接口作为vlan网关地址，而不是直接配置vlan接口（某些路由器接口不支持配置子接口）<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241119/image.361lo71l31.webp" alt="image"></p><table><thead><tr><th><strong>描述</strong></th><th><strong>思科</strong></th><th><strong>华为</strong></th></tr></thead><tbody><tr><td><strong>创建 VLAN</strong></td><td>vlan 10 <br> vlan 20</td><td>vlan batch 10 20</td></tr><tr><td><strong>设置 Access 接口并指定 VLAN</strong></td><td>int f0&#x2F;1 <br> no shutdown <br> switchport mode access <br> switchport access vlan 10 <br> int f0&#x2F;2 <br> no shutdown <br> switchport mode access <br> switchport access vlan 20</td><td>int e0&#x2F;1 <br> port link-type access <br> port default vlan 10 <br> int e0&#x2F;2 <br> port link-type access <br> port default vlan 20</td></tr><tr><td><strong>设置 Trunk 接口并允许 VLAN 数据通过</strong></td><td>int f0&#x2F;3 <br> no shutdown <br> switchport mode trunk <br> switchport trunk allow vlan all</td><td>int e0&#x2F;3 <br> port link-type trunk <br> port trunk allow-pass vlan all</td></tr><tr><td><strong>路由器设置子接口</strong></td><td>int g0&#x2F;0&#x2F;0 <br> no shutdown <br> int g0&#x2F;0&#x2F;0.1 <br> encapsulation dot1Q 10 <br> ip add 192.168.10.254 255.255.255.0 <br> encapsulation dot1Q 20 <br> ip add 192.168.20.254 255.255.255.0 <br> ip routing</td><td>int g0&#x2F;0&#x2F;0.10 <br> dot1q termination vid 10 <br> arp broadcast enable <br> ip address 192.168.10.254 24 <br> int g0&#x2F;0&#x2F;0.20 <br> dot1q termination vid 20 <br> arp broadcast enable <br> ip address 192.168.20.254 24</td></tr></tbody></table><h2 id="多臂路由"><a href="#多臂路由" class="headerlink" title="多臂路由"></a>多臂路由</h2><p>路由器多个接口连接交换机，配置作为vlan网关地址，利用路由功能实现不同vlan间通信<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241119/image.1vyohv7k8o.webp" alt="image"></p><table><thead><tr><th><strong>描述</strong></th><th><strong>思科</strong></th><th><strong>华为</strong></th></tr></thead><tbody><tr><td><strong>创建 VLAN</strong></td><td>vlan 10 <br> vlan 20</td><td>vlan batch 10 20</td></tr><tr><td><strong>设置 Access 接口并指定 VLAN</strong></td><td>int f0&#x2F;1 <br> no shutdown <br> switchport mode access <br> switchport access vlan 10 <br> int f0&#x2F;2 <br> no shutdown <br> switchport mode access <br> switchport access vlan 20 <br> int f0&#x2F;3 <br> no shutdown <br> switchport mode access <br> switchport access vlan 10 <br> int f0&#x2F;4 <br> no shutdown <br> switchport mode access <br> switchport access vlan 20</td><td>int e0&#x2F;1 <br> port link-type access <br> port default vlan 10 <br> int e0&#x2F;2 <br> port link-type access <br> port default vlan 20 <br> int e0&#x2F;3 <br> port link-type access <br> port default vlan 10 <br> int e0&#x2F;4 <br> port link-type access <br> port default vlan 20</td></tr><tr><td><strong>设置路由器接口 IP</strong></td><td>int g0&#x2F;0&#x2F;0 <br> no shutdown <br> ip add 192.168.10.254 255.255.255.0 <br> int g0&#x2F;0&#x2F;1 <br> no shutdown <br> ip add 192.168.20.254 255.255.255.0</td><td>int g0&#x2F;0&#x2F;0 <br> ip add 192.168.10.254 24 <br> int g0&#x2F;0&#x2F;1 <br> ip add 192.168.20.254 24</td></tr></tbody></table><h2 id="三层交换机"><a href="#三层交换机" class="headerlink" title="三层交换机"></a>三层交换机</h2><p>创建vlan接口，配置接口楼地址为vlan网关地址，实现不同vlan间通信</p><p>注意：思科三层交换机要开启路由功能<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241119/image.99tdqmsj9i.webp" alt="image"></p><table><thead><tr><th><strong>描述</strong></th><th><strong>思科</strong></th><th><strong>华为</strong></th></tr></thead><tbody><tr><td><strong>创建 VLAN</strong></td><td>vlan 10 <br> vlan 20</td><td>vlan batch 10 20</td></tr><tr><td><strong>设置 Access 接口并指定 VLAN</strong></td><td>int f0&#x2F;1 <br> no shutdown <br> switchport mode access <br> switchport access vlan 10 <br> int f0&#x2F;2 <br> no shutdown <br> switchport mode access <br> switchport access vlan 20 <br> int f0&#x2F;3 <br> no shutdown <br> switchport mode access <br> switchport access vlan 10 <br> int f0&#x2F;4 <br> no shutdown <br> switchport mode access <br> switchport access vlan 20</td><td>int e0&#x2F;1 <br> port link-type access <br> port default vlan 10 <br> int e0&#x2F;2 <br> port link-type access <br> port default vlan 20 <br> int e0&#x2F;3 <br> port link-type access <br> port default vlan 10 <br> int e0&#x2F;4 <br> port link-type access <br> port default vlan 20</td></tr><tr><td><strong>设置 Trunk 接口并允许 VLAN 数据通过</strong></td><td>int f0&#x2F;3 <br> no shutdown <br> switchport mode trunk <br> switchport trunk allow vlan all</td><td>int e0&#x2F;3 <br> port link-type trunk <br> port trunk allow-pass vlan all</td></tr><tr><td><strong>设置三层交换机 VLAN 接口</strong></td><td>vlan 10 <br> vlan 20 <br> int vlan 10 <br> ip add 192.168.10.254 255.255.255.0 <br> int vlan 20 <br> ip add 192.168.20.254 255.255.255.0</td><td>vlan batch 10 20 <br> int vlanif 10 <br> ip add 192.168.10.254 24 <br> int vlanif 20 <br> ip add 192.168.20.254 24</td></tr><tr><td><strong>启用 IP 路由</strong></td><td>int f0&#x2F;1 <br> no shutdown <br> ip routing</td><td>&#x2F;</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网工</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DHCP故障排查，另起一个DHCP服务器竟然还不行，原因竟是下级路由器以下犯上</title>
    <link href="/2024/10/16/DHCP%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%EF%BC%8C%E5%8F%A6%E8%B5%B7%E4%B8%80%E4%B8%AADHCP%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%9F%E7%84%B6%E8%BF%98%E4%B8%8D%E8%A1%8C%EF%BC%8C%E5%8E%9F%E5%9B%A0%E7%AB%9F%E6%98%AF%E4%B8%8B%E7%BA%A7%E8%B7%AF%E7%94%B1%E5%99%A8%E4%BB%A5%E4%B8%8B%E7%8A%AF%E4%B8%8A/"/>
    <url>/2024/10/16/DHCP%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%EF%BC%8C%E5%8F%A6%E8%B5%B7%E4%B8%80%E4%B8%AADHCP%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%9F%E7%84%B6%E8%BF%98%E4%B8%8D%E8%A1%8C%EF%BC%8C%E5%8E%9F%E5%9B%A0%E7%AB%9F%E6%98%AF%E4%B8%8B%E7%BA%A7%E8%B7%AF%E7%94%B1%E5%99%A8%E4%BB%A5%E4%B8%8B%E7%8A%AF%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>家里小米路由器局域网网段是192.168.31.0&#x2F;24，但很多设备经常会获取到192.168.1.0&#x2F;24网段的IP，导致上不了网，让人非常恼火。<br>经常之前有段时间我误以为是光猫DHCP服务没有彻底关闭导致的，但我最近仔细琢磨了一下才想起来我的光猫其实设置的网段是192.168.10.0&#x2F;24网段，所以不是光猫的问题，而是DHCP服务故障。</p><p>家里连接的设备大概在20个左右，之前装宽带的师傅就跟我说不要在光猫lan口直接接交换机，应该买个性能好一点的路由器来做DHCP服务器，我想我的红米AX6000主路由应该足够强了，但还是莫名其妙的出现获取不到IP的情况，搞得人非常火大，于是决定另起一个DHCP服务。</p><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install isc-dhcp-server</span><br></pre></td></tr></table></figure><p>修改<code>/etc/dhcp/dhcpd.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 定义全局选项</span><br><span class="line">option domain-name-servers 223.5.5.5,223.6.6.6; # 使用阿里DNS服务器</span><br><span class="line"></span><br><span class="line"># 定义子网</span><br><span class="line">subnet 192.168.31.0 netmask 255.255.255.0 &#123;</span><br><span class="line">    range 192.168.31.2 192.168.31.220; # 指定IP地址分配范围</span><br><span class="line">    option routers 192.168.31.1; # 指定网关</span><br><span class="line">    option subnet-mask 255.255.255.0; # 指定子网掩码</span><br><span class="line">    option domain-name-servers 223.5.5.5,223.6.6.6; # 指定DNS服务器</span><br><span class="line">    authoritative;</span><br><span class="line">&#125;</span><br><span class="line"># 日志</span><br><span class="line"># grep dhcp /var/log/syslog</span><br></pre></td></tr></table></figure><p>修改<code>/etc/default/isc-dhcp-server</code>,指定配置文件路径和网络接口名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DHCPDv4_CONF=/etc/dhcp/dhcpd.conf</span><br><span class="line">INTERFACESv4=&quot;enp3s0&quot;</span><br><span class="line">INTERFACESv6=&quot;enp3s0&quot;</span><br></pre></td></tr></table></figure><p>设置为开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start isc-dhcp-server</span><br><span class="line">sudo systemctl enable isc-dhcp-server</span><br></pre></td></tr></table></figure><p>然后关闭路由器的DHCP服务</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>手机忘记此网络，重新连接，给我气笑了，获取到了192.168.1.100的IP，根本不是我的网段</p><p>查看日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep dhcp /var/log/syslog</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2024-10-17T21:26:57.401204+08:00 firebat-server dhcpd[2087508]: DHCPDISCOVER from c2:02:42:75:22:f5 (CET-AL00) via enp3s0</span><br><span class="line">2024-10-17T21:26:57.467998+08:00 firebat-server dhcpd[2087508]: DHCPREQUEST for 192.168.1.100 (192.168.1.1) from c2:02:42:75:22:f5 via enp3s0: wrong network.</span><br><span class="line">2024-10-17T21:26:57.468319+08:00 firebat-server dhcpd[2087508]: DHCPNAK on 192.168.1.100 to c2:02:42:75:22:f5 via enp3s0</span><br><span class="line">2024-10-17T21:26:57.596163+08:00 firebat-server dhcpd[2087508]: DHCPREQUEST for 192.168.1.100 (192.168.1.1) from c2:02:42:75:22:f5 via enp3s0: wrong network.</span><br><span class="line">2024-10-17T21:26:57.596290+08:00 firebat-server dhcpd[2087508]: DHCPNAK on 192.168.1.100 to c2:02:42:75:22:f5 via enp3s0</span><br><span class="line">2024-10-17T21:26:58.402446+08:00 firebat-server dhcpd[2087508]: DHCPOFFER on 192.168.31.5 to c2:02:42:75:22:f5 (CET-AL00) via enp3s0</span><br><span class="line">2024-10-17T21:27:05.243708+08:00 firebat-server dhcpd[2087508]: DHCPREQUEST for 192.168.1.119 from 24:27:30:4d:30:38 via enp3s0: wrong network.</span><br><span class="line">2024-10-17T21:27:05.244090+08:00 firebat-server dhcpd[2087508]: DHCPNAK on 192.168.1.119 to 24:27:30:4d:30:38 via enp3s0</span><br><span class="line">2024-10-17T21:27:05.276043+08:00 firebat-server dhcpd[2087508]: DHCPDISCOVER from 24:27:30:4d:30:38 via enp3s0</span><br><span class="line">2024-10-17T21:27:05.297040+08:00 firebat-server dhcpd[2087508]: DHCPREQUEST for 192.168.1.119 (192.168.1.1) from 24:27:30:4d:30:38 via enp3s0: wrong network.</span><br><span class="line">2024-10-17T21:27:05.297336+08:00 firebat-server dhcpd[2087508]: DHCPNAK on 192.168.1.119 to 24:27:30:4d:30:38 via enp3s0</span><br><span class="line">2024-10-17T21:27:06.278249+08:00 firebat-server dhcpd[2087508]: DHCPOFFER on 192.168.31.195 to 24:27:30:4d:30:38 via enp3s0</span><br></pre></td></tr></table></figure><p>日志显示有个192.168.1.1的狗东西TMD在积极地给我分配错误的IP，导致我的手机优先获取到了192.168.1.1这个DHCP服务器分配的IP。在我家的网络中，这只有可能是我192.168.31.1主路由的下级路由器。</p><h2 id="排障"><a href="#排障" class="headerlink" title="排障"></a>排障</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.1.1</span><br></pre></td></tr></table></figure><p>可以ping通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">正在 Ping 192.168.1.1 具有 32 字节的数据:</span><br><span class="line">来自 192.168.1.1 的回复: 字节=32 时间=3ms TTL=251</span><br><span class="line">来自 192.168.1.1 的回复: 字节=32 时间=3ms TTL=251</span><br><span class="line"></span><br><span class="line">192.168.1.1 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 2，已接收 = 2，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 3ms，最长 = 3ms，平均 = 3ms</span><br></pre></td></tr></table></figure><p>安装局域网扫描工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install arp-scan</span><br><span class="line">arp-scan 192.168.1.0/24</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Interface: enp3s0, type: EN10MB, MAC: 68:1d:ef:40:55:9a, IPv4: 192.168.31.31</span><br><span class="line">Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.1.1     00:5c:c2:45:87:4f       SHENZHEN MERCURY COMMUNICATION TECHNOLOGIES CO.,LTD.</span><br><span class="line">192.168.1.108   c8:bf:4c:31:5b:16       Beijing Xiaomi Mobile Software Co., Ltd</span><br><span class="line">192.168.1.113   a4:39:b3:ca:23:42       Beijing Xiaomi Mobile Software Co., Ltd</span><br><span class="line">192.168.1.217   b0:59:47:8e:f7:21       Shenzhen Qihu Intelligent Technology Company Limited</span><br><span class="line">192.168.1.119   24:27:30:4d:30:38       (Unknown)</span><br><span class="line"></span><br><span class="line">5 packets received by filter, 0 packets dropped by kernel</span><br><span class="line">Ending arp-scan 1.10.0: 256 hosts scanned in 1.929 seconds (132.71 hosts/sec). 5 responded</span><br></pre></td></tr></table></figure><p>明显是个水星路由器</p><p>再扫一下我的31网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp-scan 192.168.31.0/24</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Interface: enp3s0, type: EN10MB, MAC: 68:1d:ef:40:55:9a, IPv4: 192.168.31.31</span><br><span class="line">Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.31.1    24:cf:24:5d:64:da       Beijing Xiaomi Mobile Software Co., Ltd</span><br><span class="line">192.168.31.2    b0:59:47:8e:f7:21       Shenzhen Qihu Intelligent Technology Company Limited</span><br><span class="line">192.168.31.32   80:fa:5b:4e:ba:96       CLEVO CO.</span><br><span class="line">192.168.31.5    c2:02:42:75:22:f5       (Unknown: locally administered)</span><br><span class="line">192.168.31.6    d4:35:38:14:4f:4f       Beijing Xiaomi Mobile Software Co., Ltd</span><br><span class="line">192.168.31.3    68:ab:bc:ed:68:aa       Beijing Xiaomi Mobile Software Co., Ltd</span><br><span class="line">192.168.31.72   d4:bb:e6:64:60:29       Huawei Device Co., Ltd.</span><br><span class="line">192.168.31.34   b8:ab:62:ae:a5:a3       Hui Zhou Gaoshengda Technology Co.,LTD</span><br><span class="line">192.168.31.100  58:11:22:4a:95:91       ASUSTek COMPUTER INC.</span><br><span class="line">192.168.31.166  50:88:11:d7:66:b9       (Unknown)</span><br><span class="line">192.168.31.194  44:e6:4a:53:48:ac       (Unknown)</span><br><span class="line">192.168.31.80   4c:11:ae:01:22:29       Espressif Inc.</span><br><span class="line">192.168.31.130  50:2c:c6:09:f2:08       GREE ELECTRIC APPLIANCES, INC. OF ZHUHAI</span><br><span class="line"></span><br><span class="line">14 packets received by filter, 0 packets dropped by kernel</span><br><span class="line">Ending arp-scan 1.10.0: 256 hosts scanned in 1.940 seconds (131.96 hosts/sec). 13 responded</span><br></pre></td></tr></table></figure><p>没有192.168.1.1那个MAC地址的IP，我都不知道他是怎么上网的。</p><p>神奇的是有一个MAC为<code>b0:59:47:8e:f7:21</code>的设备，同时拥有两个网段的IP：192.168.31.2和192.168.1.217 ，生产厂商是Shenzhen Qihu Intelligent Technology Company Limited，qihu奇虎应该是360的东西，应该是我的无线摄像头，点开摄像头app一看IP果然是,小小摄像头获取了两个IP，设计的还比较聪明，有两个DHCP服务器就配置两个IP，这样能上网的概率高得多，其他设备要是有这么聪明就好了，不愧是360。</p><p>接下来我手机登录到内网机器宝塔面板的终端，一根根拔网线排查，每拔一次就输入<code>arp-scan 192.168.1.0/24</code>看一下192.168.1.1那个设备还在不在。果然，两三下就被我找到了罪魁祸首。</p><p>一看果然是水星路由器，登上去管理地址之后发现上网方式是宽带上网…，还改不了设置，看了下网口，网线插在了LAN口…，我都无语了，怪不得会以下犯上，他以为我是他的下级呢。</p><p>网线插了WAN口之后可以设置自动获取IP，这时候就正常了。</p><p>这也意味着我的路由器DHCP可以重新开启，内网ubuntu的DHCP可以关闭。但是不改了，先用着，总比路由器的DHCP服务能力强。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DHCP</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地可道云通过Alist挂载夸克云盘，实现网盘统一入口管理</title>
    <link href="/2024/10/02/%E6%9C%AC%E5%9C%B0%E5%8F%AF%E9%81%93%E4%BA%91%E9%80%9A%E8%BF%87Alist%E6%8C%82%E8%BD%BD%E5%A4%B8%E5%85%8B%E4%BA%91%E7%9B%98%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%9B%98%E7%BB%9F%E4%B8%80%E5%85%A5%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
    <url>/2024/10/02/%E6%9C%AC%E5%9C%B0%E5%8F%AF%E9%81%93%E4%BA%91%E9%80%9A%E8%BF%87Alist%E6%8C%82%E8%BD%BD%E5%A4%B8%E5%85%8B%E4%BA%91%E7%9B%98%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%9B%98%E7%BB%9F%E4%B8%80%E5%85%A5%E5%8F%A3%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前在mini主机上部署了可道云服务，可以在公网通过网页访问，速度很快，也很方便，看到他有个功能是网络挂载，于是就想着能不能把夸克云盘挂载上去实现统一管理，这样就省去了夸克网盘客户端。搜了一下没有能直接挂载夸克网盘到可道云的方法，倒是有很多把Alist挂载到可道云的方案，而Alist本身就是一种可以挂载各种云盘的管理神器，于是就有了曲线救国方案：先把夸克网盘挂载到Alist上，再把Alist挂载到可道云上。</p><h2 id="安装部署Alist"><a href="#安装部署Alist" class="headerlink" title="安装部署Alist"></a>安装部署Alist</h2><p>默认安装目录为<code>/opt/alist</code>，不需要目录参数，如果要自定义目录，增加一个目录参数，以下为安装到<code>/root/alist</code>的示例，注意：必须为绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Install</span></span><br><span class="line">curl -fsSL &quot;https://alist.nn.ci/v3.sh&quot; | bash -s install /root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">update</span></span><br><span class="line">curl -fsSL &quot;https://alist.nn.ci/v3.sh&quot; | bash -s update /root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Uninstall</span></span><br><span class="line">curl -fsSL &quot;https://alist.nn.ci/v3.sh&quot; | bash -s uninstall /root</span><br></pre></td></tr></table></figure><p>Alist是可以作为systemctl服务管理的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start alist</span><br><span class="line">systemctl enable alist</span><br><span class="line">systemctl stop alist</span><br><span class="line">systemctl status alist</span><br><span class="line">systemctl restart alist</span><br></pre></td></tr></table></figure><p>先cd到alist所在目录:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/alist</span><br></pre></td></tr></table></figure><p>设置新密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./alist admin set NEW_PASSWORD</span><br></pre></td></tr></table></figure><p>修改&#x2F;root&#x2F;alist&#x2F;data&#x2F;config.json配置文件,修改网页服务端口号，默认5244</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;http_port&quot;: 5244,</span><br></pre></td></tr></table></figure><h2 id="挂载夸克网盘到Alist"><a href="#挂载夸克网盘到Alist" class="headerlink" title="挂载夸克网盘到Alist"></a>挂载夸克网盘到Alist</h2><h3 id="获取夸克网盘cookie"><a href="#获取夸克网盘cookie" class="headerlink" title="获取夸克网盘cookie"></a>获取夸克网盘cookie</h3><p>pan.quark.cn,按F12或者右键检查，选择网络，然后刷新网页，搜索sort，双击sort所在网络请求，找到cookie，完整复制<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241002/image.6wqpc6izfx.png" alt="image"></p><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>访问服务器IP:5244,用admin和上面设置的密码登录，点击网页底部的管理，点击左侧栏存储，点击添加，驱动选夸克，WebDAV 策略选本地代理，挂载路径随便取个名字，由于我不打算挂载其他网盘，所以填了根目录&#x2F;，然后粘贴cookie，完成</p><p>回到Alist首页IP:5244,可以看到夸克网盘已经被挂载</p><h2 id="挂载Alist到可道云"><a href="#挂载Alist到可道云" class="headerlink" title="挂载Alist到可道云"></a>挂载Alist到可道云</h2><p>点击网络挂载，新增网络挂载，webdav url是http[s]:&#x2F;&#x2F;domain:port&#x2F;dav&#x2F;，即在Alist服务地址后面加&#x2F;dav,填入Alist的用户名和密码，保存即可<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241002/image.9rjdhz92fp.jpg" alt="image"><br>可以把webdav的文件夹发送一个快捷方式到桌面，然后重命名快捷方式<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241002/image.39l5op1q1h.jpg" alt="image"><br>这样就可以在可道云桌面打开夸克网盘的内容<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241002/image.1hs6tshze0.jpg" alt="image"><br>如果上面的两次挂载路径都写成&#x2F;，那么打开这个快捷方式就是夸克网盘的根目录</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>从可道云入口进入夸克网盘，下载速度被限制在20MB&#x2F;s左右，上传有40MB&#x2F;s</p><p>可道云本地文件夹上传下载均可以跑慢带宽<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241002/image.361jqz93ox.jpg" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网穿透:路由器拨号+端口转发+DDNS实现自定义域名访问内网服务器</title>
    <link href="/2024/10/01/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8B%A8%E5%8F%B7+%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91+DDNS%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/10/01/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8B%A8%E5%8F%B7+%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91+DDNS%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常用各种云盘，但感觉还是不够好：</p><ul><li>1.文件在别人服务器上终究不可靠，最近阿里云盘还曝出隐私文件泄露问题</li><li>2.这些个免费云盘又是限速又是要下载客户端才能用，很麻烦，这些个垃圾客户端一个都不想装</li></ul><p>于是就想搞一个私有云盘，电脑端直接用网页访问。</p><p>正好之前买的国内的云服务器到期了，甲骨文云上免费的两台服务器国内访问又很慢，做不了什么东西，于是买了个低功耗迷你主机，直接把物理服务器放家里，牢牢掌握所有权，还能把一些小服务迁移过来。</p><p>研究了一下开源的一些云盘系统，要么功能很复杂，要么UI太难看或者没有安卓客户端可用，要么是英文文档不想看。</p><p>最后决定用国内的一个不开源的网盘系统“可道云”，界面看起来比较舒服，也有许多插件可以用（在线预览视频图片、图片编辑、在线文档、markdown编辑器等等很方便），可以外链分享，不需要下载客户端，网页可以直接访问，支持用户管理，而且可以用宝塔面板一键部署</p><p>云盘是部署好了，内网访问一点毛病没有，问题是公网到底应该怎么访问？</p><p>总的来说两种方式：</p><ul><li>1.依赖中转服务器的，缺点：慢，数据经过别人手上<ul><li>一些内网穿透服务商，花生壳之类的，一般速度比较慢，还有一个国内的chmlfrp<code>https://appel.chmlfrp.cn/</code>, 带宽可以给8M，算是很好了</li><li>或者各种frp服务，都需要一台云服务器进行转发，也有免费提供服务的，也是慢</li><li>也试过Cloudflare的Tunnel，直接建立隧道，而且默认开启SSL，还是相当不错的，但是在国内Cloudflare的速度实在是，一个字，超级慢！</li></ul></li><li>2.P2P的模式，用公网IP通过端口映射连接内网设备，快的要命，缺点是麻烦，主要有以下一些问题：<ul><li>运营商通常不会分配公网IP，很难申请</li><li>有公网IP也没用，光猫防火墙默认开启无法关闭，并且禁用ping，并且端口映射功能阉割没法用，必须把光猫改成桥接模式，改用路由器拨号</li><li>即使光猫能端口映射也没用，光猫的DHCP服务器非常垃圾，所以一般用路由器承担DHCP服务器，这样的话内网设备通常和光猫不在同一网段，即使光猫可以做端口转发，也需要路由器和光猫转发两次，有点复杂</li><li>用路由器拨号也没用，路由器本身也有防护墙，可能没法关闭</li></ul></li></ul><h2 id="光猫改桥接用路由器拨号"><a href="#光猫改桥接用路由器拨号" class="headerlink" title="光猫改桥接用路由器拨号"></a>光猫改桥接用路由器拨号</h2><p>这一步联系运营商解决，改桥接后至少解决了光猫防火墙无法关闭的问题，路由器能够设置端口转发了</p><h2 id="路由器设置端口转发"><a href="#路由器设置端口转发" class="headerlink" title="路由器设置端口转发"></a>路由器设置端口转发</h2><p>我用的是小米路由器，自带端口转发功能，还有一个DMZ功能，可以把内网某个设备的所有端口映射到路由器公网IP的端口上，此时访问公网IP:端口等同于访问内网IP:端口，但是要注意：公网IP的80和443端口是被禁用的，用这个端口转发不会生效</p><p>高级设置-端口转发，这样会暴露所有端口，因此要在内网服务器上设置防火墙<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241001/image.8l027n0s5w.jpg" alt="image"><br>此时在 常用设置-上网设置 查看路由器公网IP，在后面添加内网服务的端口号，即可访问内网服务，我这里ipv4和ipv6（需要路由器开启ipv6功能）都可以<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241001/image.231uebwkjo.jpg" alt="image"></p><h2 id="设置DDNS"><a href="#设置DDNS" class="headerlink" title="设置DDNS"></a>设置DDNS</h2><p>这样设置完成后就只剩下一个问题了，运营商给的公网IP是会变的，即使网络一直在用不中断，也会随机改变，公网ipv6地址不确定会不会变，目前没看到变化，但姑且认为他也是会变的，这时候就需要用到DDNS了，</p><p>DDNS（动态域名系统）是一种服务，它允许你将动态IP地址映射到一个固定的域名上。这样，即使你的IP地址变化，你也能通过域名来访问你的服务器或服务。DDNS服务对于家庭用户和小型企业尤其有用，因为他们通常没有静态IP地址，但可能需要远程访问家中或办公室的网络资源。</p><p>实现DDNS的方式也有很多，有很多DDNS服务商可以提供相关服务，我没有用这些服务，而是利用了Cloudflare的API,定时主动更新DNS记录，需要申请API令牌<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241001/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240930192049.3godidonsg.jpg" alt="微信截图_20240930192049"><br><img src="https://xinhaojin.github.io/picx-images-hosting/20241001/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240930192159.8l027norme.jpg" alt="微信截图_20240930192159"><br>代码如下，实现的功能是每隔10分钟自动读取一次设备的公网IP（我这里设备是没有公网ipv4地址的，由于开启了端口转发，因此只要获取路由器的公网IP即可，如果路由器没有公网IPv4地址，可以用IPv6地址）并调用API对DNS记录进行更新，我这里同时添加了ipv4和ipv6地址到pan.xinhaojin.top，客户端如果支持ipv6会优先使用ipv6访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    filename=<span class="string">&quot;/root/DdnsOnCloudFlare/ddns.log&quot;</span>,</span><br><span class="line">    level=logging.INFO,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s [%(levelname)s] %(message)s&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cloudflare 配置</span></span><br><span class="line">ZONE_ID=<span class="string">&#x27;209367eb6xxxx67741f291252&#x27;</span></span><br><span class="line">RECORD_NAME=<span class="string">&#x27;pan.xinhaojin.top&#x27;</span></span><br><span class="line">API_KEY=<span class="string">&#x27;zRImW_Rxxxxxx_ecoRTzeXKR4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取公网 IPv4 地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ipv4_address</span>():</span><br><span class="line">    <span class="comment"># 模拟浏览器的 User-Agent</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://tool.lu/ip/&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 发送请求</span></span><br><span class="line">        response = requests.get(url, headers=headers, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 检查请求是否成功</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># 提取包含 IP 地址的行</span></span><br><span class="line">            pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;你的外网IP地址是：([0-9.]+)&lt;/p&gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">match</span> = pattern.search(response.text)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                <span class="comment"># 提取 IP 地址</span></span><br><span class="line">                ip_address = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> ip_address</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.error(<span class="string">&quot;未找到包含 IP 地址的信息&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.error(<span class="string">f&quot;请求失败，状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;发生异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取公网 IPv6 地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ipv6_address</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = subprocess.run(</span><br><span class="line">            [<span class="string">&quot;ip&quot;</span>, <span class="string">&quot;-6&quot;</span>, <span class="string">&quot;addr&quot;</span>, <span class="string">&quot;show&quot;</span>, <span class="string">&quot;enp3s0&quot;</span>],</span><br><span class="line">            capture_output=<span class="literal">True</span>,</span><br><span class="line">            text=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line">        lines = result.stdout.splitlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;240e&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                <span class="keyword">return</span> line.strip().split()[<span class="number">1</span>].split(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;获取 IPv6 地址失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出 Cloudflare DNS 记录</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_records</span>(<span class="params">zone_id, record_name, api_key, record_type</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">f&quot;https://api.cloudflare.com/client/v4/zones/<span class="subst">&#123;zone_id&#125;</span>/dns_records&quot;</span></span><br><span class="line">        headers = &#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;api_key&#125;</span>&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">        params = &#123;<span class="string">&quot;name&quot;</span>: record_name, <span class="string">&quot;type&quot;</span>: record_type&#125;</span><br><span class="line">        response = requests.get(url, headers=headers, params=params, timeout=<span class="number">10</span>)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        data = response.json()</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&quot;success&quot;</span>]:</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                (record[<span class="string">&quot;id&quot;</span>], record[<span class="string">&quot;content&quot;</span>])</span><br><span class="line">                <span class="keyword">for</span> record <span class="keyword">in</span> data[<span class="string">&quot;result&quot;</span>]</span><br><span class="line">            ]</span><br><span class="line">    <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;获取 <span class="subst">&#123;record_type&#125;</span> 记录失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 Cloudflare DNS 记录</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_record</span>(<span class="params">zone_id, api_key, record_id</span>):</span><br><span class="line">    url = <span class="string">f&quot;https://api.cloudflare.com/client/v4/zones/<span class="subst">&#123;zone_id&#125;</span>/dns_records/<span class="subst">&#123;record_id&#125;</span>&quot;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;api_key&#125;</span>&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.delete(url, headers=headers)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        data = response.json()</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&quot;success&quot;</span>]:</span><br><span class="line">            logging.info(<span class="string">f&quot;记录删除成功 (ID: <span class="subst">&#123;record_id&#125;</span>)&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;删除记录失败 (ID: <span class="subst">&#123;record_id&#125;</span>): <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Cloudflare DNS 记录</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_record</span>(<span class="params">zone_id, record_name, api_key, record_type, value</span>):</span><br><span class="line">    url = <span class="string">f&quot;https://api.cloudflare.com/client/v4/zones/<span class="subst">&#123;zone_id&#125;</span>/dns_records&quot;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;api_key&#125;</span>&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: record_type,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: record_name,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: value,</span><br><span class="line">        <span class="string">&quot;ttl&quot;</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="string">&quot;proxied&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, headers=headers, json=payload, timeout=<span class="number">10</span>)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        data = response.json()</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&quot;success&quot;</span>]:</span><br><span class="line">            logging.info(<span class="string">f&quot;<span class="subst">&#123;record_type&#125;</span> 记录创建成功 (值: <span class="subst">&#123;value&#125;</span>)&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;创建记录失败 (<span class="subst">&#123;record_type&#125;</span>, <span class="subst">&#123;value&#125;</span>): <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新记录</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_record</span>(<span class="params">zone_id, record_name, api_key, record_type, current_ip</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        records = list_records(zone_id, record_name, api_key, record_type)</span><br><span class="line">        found = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(records) &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> record_id, record_value <span class="keyword">in</span> records:</span><br><span class="line">                <span class="keyword">if</span> record_value == current_ip:</span><br><span class="line">                    found = <span class="literal">True</span></span><br><span class="line">                    logging.info(<span class="string">f&quot;<span class="subst">&#123;record_type&#125;</span> 记录值匹配，无需更新 (值: <span class="subst">&#123;record_value&#125;</span>)&quot;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logging.info(<span class="string">f&quot;<span class="subst">&#123;record_type&#125;</span> 记录值不同，删除旧记录 (当前值: <span class="subst">&#123;record_value&#125;</span>)&quot;</span>)</span><br><span class="line">                    delete_record(zone_id, api_key, record_id)</span><br><span class="line">                    time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">            logging.info(<span class="string">f&quot;未找到匹配的 <span class="subst">&#123;record_type&#125;</span> 记录，正在创建新记录...&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> create_record(zone_id, record_name, api_key, record_type, current_ip)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;更新记录函数发生异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主循环</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ipv4 = get_ipv4_address()</span><br><span class="line">            ipv6 = get_ipv6_address()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ipv4:</span><br><span class="line">                logging.info(<span class="string">f&quot;获取到的外部 IPv4 地址为: <span class="subst">&#123;ipv4&#125;</span>&quot;</span>)</span><br><span class="line">                update_record(ZONE_ID, RECORD_NAME, API_KEY, <span class="string">&quot;A&quot;</span>, ipv4)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.error(<span class="string">&quot;无法获取 IPv4 地址&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ipv6:</span><br><span class="line">                logging.info(<span class="string">f&quot;获取到的外部 IPv6 地址为: <span class="subst">&#123;ipv6&#125;</span>&quot;</span>)</span><br><span class="line">                update_record(ZONE_ID, RECORD_NAME, API_KEY, <span class="string">&quot;AAAA&quot;</span>, ipv6)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.error(<span class="string">&quot;无法获取 IPv6 地址&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">300</span>)  <span class="comment"># 等待 5 分钟</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">f&quot;主循环中发生异常: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># vi /etc/systemd/system/ddns.service</span></span><br></pre></td></tr></table></figure><p>添加一个服务到&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;ddns.service</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Update DNS Records Service</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Environment=&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">WorkingDirectory=/root/DdnsOnCloudFlare/</span><br><span class="line">ExecStart=/home/jxh/miniconda3/bin/python3 /root/DdnsOnCloudFlare/autoUpdateDNS.py</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable ddns</span><br><span class="line">systemctl start ddns</span><br></pre></td></tr></table></figure><p>正常log</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2025-01-03 23:57:19,913 [INFO] 获取到的外部 IPv4 地址为: 218.73.126.186</span><br><span class="line">2025-01-03 23:57:23,117 [INFO] A 记录值匹配，无需更新 (值: 218.73.126.186)</span><br><span class="line">2025-01-03 23:57:23,117 [INFO] 获取到的外部 IPv6 地址为: 240e:390:4831:fdf0::360</span><br><span class="line">2025-01-03 23:57:24,820 [INFO] AAAA 记录值匹配，无需更新 (值: 240e:390:4831:fdf0::360)</span><br><span class="line">2025-01-03 23:57:24,820 [INFO] AAAA 记录值不同，删除旧记录 (当前值: 240e:390:4831:fdf0::a62)</span><br><span class="line">2025-01-03 23:57:25,774 [INFO] 记录删除成功 (ID: 68acfa54b5ada2098976dfbf9a974294)</span><br></pre></td></tr></table></figure><h2 id="nginx配置注意事项"><a href="#nginx配置注意事项" class="headerlink" title="nginx配置注意事项"></a>nginx配置注意事项</h2><p>由于公网访问pan.xinhaojin.top需要增加端口号88，不是很优雅，所以会想到通过nginx转发，如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name pan.xinhaojin.top;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        return 301 http://pan.xinhaojin.top:88$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际配置后在内网可省略端口号，但公网访问不可省略端口号，且可能导致添加端口号也无法访问，原因是运营商禁80和443端口</p><p>下图配置的时候我应用了nginx端口转发，同时启用了https，网站访问起来很优雅，但还是不建议添加这个nginx配置，还是多一步手动添加端口号吧</p><h2 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h2><p><img src="https://xinhaojin.github.io/picx-images-hosting/20241002/image.9kg5luvriq.jpg" alt="image"><br><img src="https://xinhaojin.github.io/picx-images-hosting/20241001/WPS%E6%8B%BC%E5%9B%BE0.99tbrpgmfy.jpg" alt="WPS拼图0"><br>上传速度可以达到40MB&#x2F;s，哪个网盘有我快？（按理我上传没有有这么大带宽啊），反正5G网络测试下载里面的视频速度可以有10MB以上<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241001/image.2krw2ymfc9.jpg" alt="image"><br>下一步想看看能不能把夸克网盘挂载到这上面，这样就可以用这一个网页来管理我的私有云和常用的夸克云盘了</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网穿透</tag>
      
      <tag>DDNS</tag>
      
      <tag>端口转发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>firebat N100 mini主机设置远程网络唤醒(wol)</title>
    <link href="/2024/10/01/firebat%20N100%20mini%E4%B8%BB%E6%9C%BA%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E7%BD%91%E7%BB%9C%E5%94%A4%E9%86%92(wol)/"/>
    <url>/2024/10/01/firebat%20N100%20mini%E4%B8%BB%E6%9C%BA%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E7%BD%91%E7%BB%9C%E5%94%A4%E9%86%92(wol)/</url>
    
    <content type="html"><![CDATA[<h2 id="WOL"><a href="#WOL" class="headerlink" title="WOL"></a>WOL</h2><p>WoL（Wake-on-LAN）是一种允许通过网络远程打开计算机的协议。wolcmd 是一个常用于发送“魔法包”（Magic Packet）来唤醒计算机的命令行工具。</p><h2 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title="BIOS设置"></a>BIOS设置</h2><p>在BIOS中找到与网络唤醒相关的设置，这可能在“Power Management”、“Advanced”或“Integrated Peripherals”等菜单下。常见的选项有“Wake on LAN”、“Power on by PCI-E&#x2F;PCI”、“Power on by Onboard LAN”等。我这块主板的设置在Boot-&gt;network stack</p><p>启用网络唤醒：将找到的网络唤醒选项设置为“Enabled”。</p><p>如果BIOS不支持，那别玩儿了。</p><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><h3 id="安装ethtool"><a href="#安装ethtool" class="headerlink" title="安装ethtool"></a>安装ethtool</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ethtool</span><br></pre></td></tr></table></figure><p>获取安装位置,比如 <code>/usr/sbin/ethtool</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which ethtool</span><br></pre></td></tr></table></figure><h3 id="获取网卡名称"><a href="#获取网卡名称" class="headerlink" title="获取网卡名称"></a>获取网卡名称</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><p>列出所有网卡，找到需要用作唤醒网口的网卡名称，比如我这里的 <code>enp3s0</code><br><img src="https://xinhaojin.github.io/picx-images-hosting/20241001/image.5tqzzhajc8.png" alt="image"></p><h3 id="注册系统服务"><a href="#注册系统服务" class="headerlink" title="注册系统服务"></a>注册系统服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/systemd/system/wol.service</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Configure Wake <span class="literal">On</span> LAN</span><br><span class="line"> </span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=<span class="literal">on</span>eshot</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/sbin/ethtool -s enp3s0 wol g</span><br><span class="line"> </span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=basic.target</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start wol.service</span><br><span class="line">sudo systemctl enable wol.service</span><br><span class="line">systemctl status wol</span><br></pre></td></tr></table></figure><h3 id="获取MAC地址"><a href="#获取MAC地址" class="headerlink" title="获取MAC地址"></a>获取MAC地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link show enp3s0</span><br></pre></td></tr></table></figure><h2 id="客户端网络唤醒"><a href="#客户端网络唤醒" class="headerlink" title="客户端网络唤醒"></a>客户端网络唤醒</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>eg.Windows下，安装wolcmd(<a href="https://www.depicus.com/downloads/wolcmd.zip">https://www.depicus.com/downloads/wolcmd.zip</a>)</p><p>唤醒命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wolcmd MAC IP/Domain subnetmask</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wolcmd 68:1d:xx:xx:55:9a 192.168.31.31 255.255.255.0</span><br></pre></td></tr></table></figure><p>唤醒速度特别快，我键盘回车键按下还没弹起来，机器电源指示灯就已经亮了<br><img src="https://xinhaojin.github.io/picx-images-hosting/20241001/image.70ab83e0zu.jpg" alt="image"></p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install wakeonlan</span><br><span class="line">wakeonlan -i 192.168.31.31 68:1d:xx:xx:55:9a</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>测试发现公网通过域名方式没法唤醒，理论上应该是可行的，但实际这个魔法包传输过程中很有可能受到防火墙或其他安全策略的阻碍</p><p>此外，关机方式不同也会有区别，我尝试使用<code>shutdown now</code>,<code>halt</code>,<code>poweroff</code>来关机，然后分别尝试唤醒，发现通过<code>halt</code>方式关机后不支持唤醒,虽然这个方式反而是留下电源指示灯通电的。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>wol</tag>
      
      <tag>局域网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flask+gunicorn+vue+nginx Linux部署案例</title>
    <link href="/2024/09/30/flask+gunicorn+vue+nginx%20Linux%E9%83%A8%E7%BD%B2%E6%A1%88%E4%BE%8B/"/>
    <url>/2024/09/30/flask+gunicorn+vue+nginx%20Linux%E9%83%A8%E7%BD%B2%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假设现在拥有：</p><ul><li>flask后端代码：由flask_app.py作为启动程序</li><li>vue前端代码,且已经打包成dist文件夹</li></ul><h2 id="什么是Gunicorn"><a href="#什么是Gunicorn" class="headerlink" title="什么是Gunicorn"></a>什么是Gunicorn</h2><p>Gunicorn（“Green Unicorn”的缩写）是一个Python WSGI HTTP服务器，用于生产环境。它是一个预分叉的服务器，可以与多个工作进程一起运行，以处理并发请求。Gunicorn旨在解决Python web应用在生产环境中运行时的性能问题。</p><h2 id="flask配置"><a href="#flask配置" class="headerlink" title="flask配置"></a>flask配置</h2><p>flask_app.py<br>因为Gunicorn 会接管 Flask 应用的监听端口，所以不需要在 Flask 应用中指定端口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .......</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, threaded=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="guncorn配置"><a href="#guncorn配置" class="headerlink" title="guncorn配置"></a>guncorn配置</h2><p>新建guncorn_config.py</p><p>设置监听端口为54322</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all()</span><br><span class="line"><span class="comment"># 必须加上这两行，否则，由于某些模块在Gunicorn尝试monkey patch SSL之前已经被导入</span></span><br><span class="line"><span class="comment"># 会产生警告，这可能导致错误。为了避免这些问题，需要在导入其他依赖库之前先进行monkey patching，可以在本文件中写，也可以在主函数开头写</span></span><br><span class="line"><span class="comment"># gevent的猴子补丁会替换掉Python标准库中的一些函数和方法，使得原本阻塞的操作变得非阻塞</span></span><br><span class="line"><span class="comment"># 这意味着Gunicorn使用了协程来提高并发能力。</span></span><br><span class="line"><span class="comment"># 这种模式下，理论上单个工作进程就能处理大量的并发连接，因为每个连接并不需要消耗一个完整的操作系统线程。</span></span><br><span class="line"><span class="comment"># 如果请求的处理主要是CPU密集型的，增加更多的工作进程和线程可能并不会显著提升性能，反而可能因为上下文切换而造成性能下降</span></span><br><span class="line"><span class="comment"># Gunicorn配置文件</span></span><br><span class="line"><span class="comment"># bind - 绑定的IP地址和端口</span></span><br><span class="line">bind = <span class="string">&#x27;0.0.0.0:54322&#x27;</span></span><br><span class="line"><span class="comment"># workers - 启动的工作进程数量</span></span><br><span class="line">workers = <span class="number">4</span></span><br><span class="line"><span class="comment"># threads = 4</span></span><br><span class="line"><span class="comment"># worker_class - 工作进程类型，&#x27;sync&#x27;代表同步模式，还有其他异步模式如gevent和eventlet</span></span><br><span class="line"><span class="comment"># worker_class = &#x27;sync&#x27;</span></span><br><span class="line">worker_class = <span class="string">&#x27;gevent&#x27;</span></span><br><span class="line"><span class="comment"># timeout - 工作进程的超时时间，单位为秒</span></span><br><span class="line">timeout = <span class="number">30</span></span><br><span class="line"><span class="comment"># preload_app - 是否在每个工作进程中预加载应用</span></span><br><span class="line">preload_app = <span class="literal">True</span></span><br><span class="line"><span class="comment"># loglevel - 日志级别，可选值有&#x27;debug&#x27;, &#x27;info&#x27;, &#x27;warning&#x27;, &#x27;error&#x27;, &#x27;critical&#x27;</span></span><br><span class="line">loglevel = <span class="string">&#x27;info&#x27;</span></span><br><span class="line"><span class="comment"># accesslog - 访问日志的输出位置，&#x27;-&#x27;表示输出到标准输出</span></span><br><span class="line">accesslog = <span class="string">&#x27;-&#x27;</span></span><br><span class="line"><span class="comment"># errorlog - 错误日志的输出位置，&#x27;-&#x27;表示输出到标准输出</span></span><br><span class="line">errorlog = <span class="string">&#x27;-&#x27;</span></span><br><span class="line"><span class="comment"># capture_output - 是否捕获标准输出和标准错误流到日志中</span></span><br><span class="line">capture_output = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>由gunicorn托管flask</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -c gunicorn_config.py flask_app:app &amp;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭服务</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">lsof -ti :54322 | xargs <span class="built_in">kill</span> -9</span></span><br></pre></td></tr></table></figure><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p><p>在HTTP中添加以下两个Server</p><ul><li>第一个Server的作用是监听8080端口，指定前端静态资源目录</li><li>第二个Server的作用是监听54321端口，反向代理前端对54321端口的请求，转发给54322端口的gunicorn程序</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name _; # 替换为您的域名或IP地址</span><br><span class="line">    root /usr/share/nginx/html/dist;</span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        autoindex on;</span><br><span class="line">        alias /usr/share/nginx/html/dist/static/; # 指定静态资源目录</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 54321;</span><br><span class="line">    server_name _; # 替换为您的域名或IP地址</span><br><span class="line">    location / &#123;</span><br><span class="line">        # add_header Access-Control-Allow-Origin *;</span><br><span class="line">        try_files $uri $uri/  /index.html =404;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        proxy_pass http://127.0.0.1:54322; # Gunicorn监听的地址和端口</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
      <tag>flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软考网络工程师笔记</title>
    <link href="/2024/09/20/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/20/%E8%BD%AF%E8%80%83%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link /><link /><h2 id="第0章-计算机基础知识补充"><a href="#第0章-计算机基础知识补充" class="headerlink" title="第0章 计算机基础知识补充"></a>第0章 计算机基础知识补充</h2><h3 id="计量单位"><a href="#计量单位" class="headerlink" title="计量单位"></a>计量单位</h3><p>位(bit):最小数据单位</p><p>字节(Byte)8bit组成，存储空间的最小单位</p><p>存储:设计容量:1KB&#x3D;1024B，1MB&#x3D;1024KB</p><p>网络特指带宽，存取速度，比特率，传输速率等速率相关概念，1KB&#x2F;S&#x3D;1000B&#x2F;S，1MB&#x2F;S&#x3D;1000KB&#x2F;s</p><h3 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h3><table><thead><tr><th>数字</th><th>原码</th><th>反码</th><th>补码</th><th>移码</th></tr></thead><tbody><tr><td>5</td><td>00000101</td><td>00000101</td><td>00000101</td><td>10000101</td></tr><tr><td>-5</td><td>10000101</td><td>11111010</td><td>11111011</td><td>01111011</td></tr><tr><td>0</td><td>00000000</td><td>00000000</td><td>00000000</td><td>10000000</td></tr><tr><td>-0</td><td>10000000</td><td>11111111</td><td>00000000</td><td>10000000</td></tr></tbody></table><p>正数的原码、反码、补码相同</p><p>负数的反码是原码除符号位外取反，补码是反码加1</p><p>移码是反码最高位取反</p><p>原码和反码表示范围：-127 ~ +127 补码和移码表示范围：-128 ~ +127</p><h3 id="中央处理器CPU"><a href="#中央处理器CPU" class="headerlink" title="中央处理器CPU"></a>中央处理器CPU</h3><p>运算器：主要负责数据的加工和处理</p><table><thead><tr><th>部件名称</th><th>作用</th><th>特点</th></tr></thead><tbody><tr><td>算术逻辑单元 (ALU)</td><td>执行算术运算（如加法、减法）和逻辑运算（如AND、OR、NOT）。</td><td>是CPU中执行大多数数学和逻辑操作的核心部件。</td></tr><tr><td>通用寄存器</td><td>暂存操作数或地址。</td><td>CPU对其访问速度最快，常用于存储临时数据或中间结果。</td></tr><tr><td>累加器 (ACC)</td><td>暂存运算结果。</td><td>常用于存储ALU操作的结果，是进行计算时最常用的寄存器之一。</td></tr><tr><td>数据缓冲寄存器</td><td>暂存从内存或输入&#x2F;输出设备传输的数据。</td><td>作为数据传输的缓冲区，减少CPU与内存或I&#x2F;O设备间的速度差异。</td></tr><tr><td>状态条件寄存器</td><td>指示最近一次操作的状态，如零标志、进位标志、溢出标志等。</td><td>用于控制程序流程，如条件分支和循环。</td></tr></tbody></table><p>控制器：主要负责发出控制发号施令</p><table><thead><tr><th>部件名称</th><th>作用</th><th>特点</th></tr></thead><tbody><tr><td>程序计数器（PC）</td><td>存储下一条要执行的指令的地址。</td><td>确保指令按顺序执行，分支或跳转时更新为非顺序地址。</td></tr><tr><td>指令寄存器（IR）</td><td>暂存当前正在执行的指令。</td><td>从主存储器中读取指令后，指令会先存储在IR中。</td></tr><tr><td>指令译码器（ID）</td><td>解析指令寄存器中的指令，并确定需要执行的操作。</td><td>识别操作码和地址码，生成控制信号以激活硬件部件。</td></tr><tr><td>控制单元（CU）</td><td>生成控制信号，协调CPU内部各部件的工作。</td><td>根据指令译码器的输出和程序的状态，生成控制信号。</td></tr><tr><td>地址寄存器（AR）</td><td>存储当前访问的内存地址。</td><td>在访问内存时，AR存储操作数的地址。</td></tr><tr><td>数据寄存器（DR）</td><td>暂存从内存中读取的数据或要写入内存的数据。</td><td>在数据传输过程中，DR作为一个缓冲区保存数据。</td></tr></tbody></table><h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><p>由操作码（完成什么操作）和操作数（地址或数据）组成</p><h4 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h4><table><thead><tr><th>寻址方式</th><th>描述</th></tr></thead><tbody><tr><td>立即寻址</td><td>操作数直接给出，与指令一起编码。</td></tr><tr><td>直接寻址</td><td>指令中直接给出操作数的地址。</td></tr><tr><td>寄存器寻址</td><td>操作数存储在寄存器中，指令中给出寄存器的编号。</td></tr><tr><td>间接寻址</td><td>指令中给出寄存器的编号，寄存器中存储着操作数的地址，该地址在内存中。</td></tr></tbody></table><h4 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h4><p>CISC与RISC指令</p><table><thead><tr><th>特点 &#x2F; 架构类型</th><th><strong>CISC(复杂指令系统)</strong></th><th><strong>RISC(精简指令系统)</strong></th></tr></thead><tbody><tr><td><strong>芯片设计</strong></td><td>采用CISC技术的CPU,其芯片设计<strong>复杂度更高</strong>。</td><td>在RISC中,更适合采用<strong>硬布线逻辑执行指令</strong>。</td></tr><tr><td><strong>指令数目</strong></td><td>一般大于200条。</td><td>一般小于100条。</td></tr><tr><td><strong>指令字长</strong></td><td>不固定。</td><td>定长 (<strong>适合流水线</strong>)。</td></tr><tr><td><strong>可访存指令</strong></td><td>不加限制。</td><td>只有Load&#x2F;Store</td></tr><tr><td><strong>指令执行时间</strong></td><td>相差较大。</td><td>绝大多数在一个周期内完成。</td></tr><tr><td><strong>通用寄存器数量</strong></td><td>较少。</td><td>多。</td></tr><tr><td><strong>控制方式</strong></td><td>大部分<strong>微程序控制器</strong></td><td>大部分为组合逻辑控制。</td></tr><tr><td><strong>指令流水线</strong></td><td>可以通过一定方式实现。</td><td>必须实现</td></tr></tbody></table><h4 id="指令执行"><a href="#指令执行" class="headerlink" title="指令执行"></a>指令执行</h4><p>eg:取指4t，分析2t，执行3t，一共600条<br><strong>串行执行</strong></p><ul><li><strong>描述</strong>：一条指令执行完后，才能执行下一条指令。</li><li><strong>示例计算</strong>：（4+2+3）tx600&#x3D;5400t</li></ul><p><strong>流水线执行</strong></p><ul><li><strong>描述</strong>：一条指令的执行可以与下一条指令同时进行。</li><li><strong>示例计算</strong>：<ul><li>（4+2+3）t*（600-1）x4&#x3D;2405t</li><li>4tx600t+2t+3t&#x3D;2405t</li></ul></li></ul><h4 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a>指令周期</h4><table><thead><tr><th><strong>概念</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>指令寄存器（IR）</strong></td><td>操作码和地址码都应存入<strong>指令寄存器</strong>中以分析执行的一条指令。</td></tr><tr><td><strong>指令寄存器位数</strong></td><td>取决于<strong>指令字长</strong>。</td></tr><tr><td><strong>指令周期</strong></td><td>取出并执行一条指令所需的时间。</td></tr><tr><td><strong>总线周期</strong></td><td>CPU从存储器或I&#x2F;O接口存取一个字节所需的时间。</td></tr><tr><td><strong>时钟周期</strong></td><td>CPU处理动作的<strong>最小单位</strong>。</td></tr><tr><td><strong>相互关系</strong></td><td>- 一个<strong>指令周期</strong>可以划分为一个或多个<strong>总线周期</strong>。</td></tr><tr><td></td><td>- 一个<strong>总线周期</strong>可以划分为几个<strong>时钟周期</strong>。</td></tr></tbody></table><h3 id="存储器系统"><a href="#存储器系统" class="headerlink" title="存储器系统"></a>存储器系统</h3><h4 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h4><p><strong>组成</strong></p><ul><li><strong>存储体</strong>：实际存储数据的部分。</li><li><strong>控制线路</strong>：管理数据和地址的传输。</li><li><strong>地址寄存器</strong>：用于存储内存地址。</li><li><strong>数据寄存器</strong>：用于存储数据。</li><li><strong>地址译码电路</strong>：将地址转换为存储体中的具体位置。<br><strong>类型</strong>：<ul><li><strong>DRAM</strong>：构成主存的主要技术，成本效益高。</li><li><strong>SRAM</strong>：速度更快，成本更高，常用于Cache。</li></ul></li><li><strong>分级存储体系</strong>：解决容量、成本和速度的矛盾。</li></ul><p><strong>特殊类型</strong></p><ul><li><strong>EEPROM</strong>：电可擦除可编程只读存储器，适用于需要重写小数据量的应用。</li><li><strong>SAN</strong>：专用网络连接存储管理子系统和存储设备，分为<strong>FC SAN</strong>和<strong>IP SAN</strong>，支持高速数据传输。<br><strong>高级存储技术</strong></li><li><strong>相联存储器 (CAM, Content Addressable Memory)</strong>：可以根据内容而不是地址来检索数据的存储器，常用于高速查找操作。</li><li><strong>直接存储器访问 (DMA, Direct Memory Access)</strong>：允许某些硬件子系统在不经过CPU的情况下直接访问主存，用于高效数据传输，实际由DMA硬件完成。</li><li><strong>Spooling技术，即“假脱机技术”（Simultaneous Peripheral Operations On-Line）</strong>，是一种在计算机系统中用于管理和优化低速设备（如打印机）与高速设备（如CPU）之间数据流的技术。这种技术的核心思想是使用一类物理设备（如磁盘）来模拟另一类物理设备（如打印机），以减少CPU的等待时间并提高系统的整体效率。</li></ul><h4 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h4><ul><li><strong>磁盘调度</strong>：先进行<strong>移臂调度</strong>以移动读写头到正确的磁道，再进行<strong>旋转调度</strong>以等待数据到达读写头。</li><li><strong>SSD 固态硬盘</strong></li><li>分为两种类型：<ul><li>主流的<strong>闪存（FLASH 芯片）</strong>，提供快速读写能力。</li><li><strong>DRAM</strong>基于 SSD，适用于高吞吐量应用。</li></ul></li></ul><h4 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h4><ul><li><strong>功能</strong>：加速CPU与存储系统间的数据传输，缓解<strong>冯诺依曼瓶颈</strong>。</li><li><strong>性能依据</strong>：程序的<strong>局部性原理</strong>。</li><li><strong>命中率与失效率</strong>：<ul><li>访问命中率：<code>h</code></li><li>平均周期时间：<code>t3 = h * t1 + (1 - h) * t2</code></li></ul></li><li><strong>设计目标</strong>：在成本和性能之间找到平衡点，提高命中率。</li><li><strong>自动化</strong>：映射交换过程由硬件自动完成。</li></ul><h4 id="RAID技术"><a href="#RAID技术" class="headerlink" title="RAID技术"></a>RAID技术</h4><ul><li>提供不同的数据冗余和性能水平：<ul><li><strong>RAID 0</strong>：无冗余，最高磁盘利用率。</li><li><strong>RAID 1</strong>：镜像，提供数据冗余。</li><li><strong>RAID 3</strong>：使用一个专用的奇偶校验盘。</li><li><strong>RAID 5</strong>：数据和校验信息分散在所有磁盘上。</li><li><strong>RAID 6</strong>：提供更高级别的数据冗余。</li><li><strong>RAID 10</strong>：结合了镜像和条带化，提供性能和冗余。</li><li><strong>RAID 01</strong>：结合了条带化和镜像，提供性能和冗余。</li></ul></li></ul><h3 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h3><h4 id="软件开发模型"><a href="#软件开发模型" class="headerlink" title="软件开发模型"></a>软件开发模型</h4><p><strong>瀑布模型 (Waterfall Model)</strong></p><ul><li>将软件开发分为六个阶段：制定计划、需求分析、软件设计、程序编写、软件测试、运行维护。</li><li><strong>适用于需求明确且变化不大的大型软件项目</strong>。</li><li></li></ul><p><strong>增量模型 (Incremental Model)</strong></p><ul><li>引入了增量包的概念，允许在需求完全明确之前就开始开发。</li><li><strong>人员分配灵活</strong>，适用于可以分批次交付软件功能的项目。</li></ul><p><strong>喷泉模型 (Fountain Model)</strong></p><ul><li>强调<strong>迭代</strong>和<strong>并行</strong>开发，支持软件复用。</li><li><strong>适用于需求不断变化且需要快速响应的项目</strong>。<br><strong>快速原型模型 (Rapid Prototype Model)</strong></li><li>快速构建一个工作模型，然后根据用户反馈定义需求，之后抛弃原模型并开发最终产品。</li><li><strong>适用于需求不够明确的项目</strong>，通过迭代快速响应用户需求。</li></ul><p><strong>螺旋模型 (Spiral Model)</strong></p><ul><li>结合了瀑布模型的特点，并增加了<strong>风险分析</strong>。</li><li>适合大型且复杂的软件系统开发，尤其是在风险分析方面。</li></ul><p><strong>演化模型 (Evolutionary Model)</strong></p><ul><li>先构建一个初步的工作模型，然后根据需求逐步完善，而不是抛弃重来。</li><li><strong>适用于需求不断演进和变化的情况</strong>。</li></ul><p><strong>V模型 (V-Model)</strong></p><ul><li>明确标注了软件开发过程中的不同测试阶段与开发阶段的对应关系。</li><li><strong>强调测试活动与开发活动的并行性</strong>，适用于需要严格测试过程的项目。</li></ul><p><strong>智能模型 (Intelligent Model)</strong></p><ul><li>也称为“基于知识的软件开发模型”，结合了瀑布型和专家系统。</li><li><strong>利用专家系统辅助软件开发</strong>，提高效率和质量。</li></ul><h4 id="软件开发方法"><a href="#软件开发方法" class="headerlink" title="软件开发方法"></a>软件开发方法</h4><p><strong>结构化软件开发方法</strong></p><ul><li><strong>面向功能</strong>、<strong>面向数据流</strong>。</li><li><strong>自顶向下</strong>、<strong>逐层分解</strong>，建立处理流程。</li><li>使用<strong>流程图</strong>来表示程序的结构和逻辑。</li></ul><p><strong>面向对象的软件开发方法</strong></p><ul><li>基于<strong>对象</strong>概念，以<strong>对象为中心</strong>。</li><li>使用<strong>类</strong>和<strong>继承</strong>为构造机制。</li><li>构建相应的<strong>软件系统</strong>。</li></ul><p><strong>基于构件化的软件开发方法</strong></p><ul><li>使用<strong>预先建立的构件</strong>和<strong>模板</strong>。</li><li><strong>像搭积木一样</strong>进行构造开发软件。</li></ul><p><strong>面向数据结构的软件开发方法</strong></p><ul><li>从目标系统的<strong>输入</strong>、<strong>输出数据结构</strong>入手。</li><li>导出<strong>程序框架结构</strong>，再补充其它细节。</li><li>得到<strong>完整的程序结构图</strong>。</li></ul><h4 id="软件开发测试方法"><a href="#软件开发测试方法" class="headerlink" title="软件开发测试方法"></a>软件开发测试方法</h4><p><strong>白盒测试 (White-box Testing)</strong></p><ul><li>也称为<strong>结构测试</strong>或<strong>逻辑驱动测试</strong>。</li><li>在<strong>了解程序内部逻辑</strong>的基础上设计测试用例。</li><li>测试方法包括：<ul><li><strong>语句覆盖</strong>：确保每个语句至少执行一次。</li><li><strong>分支覆盖</strong>：确保每个决策点的每个分支都至少被执行一次。</li><li><strong>条件覆盖</strong>：确保每个条件的每个可能取值至少用一次。</li><li><strong>路径覆盖</strong>：确保程序中每一条可能的路径都至少被执行一次。</li></ul></li><li>目的是检测代码内部逻辑的错误。</li></ul><p><strong>黑盒测试 (Black-box Testing)</strong></p><ul><li>也称为<strong>数据驱动测试</strong>或<strong>功能测试</strong>。</li><li>在<strong>不了解程序内部逻辑</strong>的情况下，通过测试软件的功能来检验软件。</li><li>测试用例是基于<strong>软件需求</strong>和<strong>功能</strong>来设计的。</li><li>测试方法包括：<ul><li><strong>等价类划分</strong>：将输入数据划分为若干等价类，每个类中的数据作用相同。</li><li><strong>边界值分析</strong>：针对输入数据的边界值进行测试。</li><li><strong>错误猜测</strong>：基于经验和直觉选择测试用例。</li></ul></li><li>目的是检测程序是否能正确处理各种输入和使用场景。</li></ul><p><strong>灰盒测试 (Grey-box Testing)</strong></p><ul><li>结合了白盒测试和黑盒测试的特点。</li><li>在对程序内部有一定了解但了解不完全的情况下进行测试。</li><li>测试者了解程序的一部分内部逻辑和结构，但不需要像白盒测试那样了解全部细节。</li></ul><p><strong>其他测试方法</strong></p><ul><li><strong>单元测试</strong>：针对软件中最小可测试部分进行检查和验证。</li><li><strong>集成测试</strong>：在单元测试之后，测试不同模块间接口和集成后的功能。</li><li><strong>系统测试</strong>：测试完整的、集成的软件系统以验证系统符合规定的需求。</li><li><strong>验收测试</strong>：最终用户确认软件是否满足他们的业务需求和是否可以接受。</li></ul><h4 id="计算机相关知识产权法律法规"><a href="#计算机相关知识产权法律法规" class="headerlink" title="计算机相关知识产权法律法规"></a>计算机相关知识产权法律法规</h4><p><strong>知识产权</strong></p><ul><li>包括<strong>工业产权</strong>和<strong>著作权（版权）</strong>。</li></ul><p><strong>著作权归属</strong></p><ul><li><strong>作者开发</strong>：著作权属于<strong>开发者</strong>。</li><li><strong>职务开发</strong>：著作权由<strong>单位享有</strong>。</li><li><strong>合作开发</strong>：由<strong>合作方共同享有</strong>，不能单独转让。</li><li><strong>委托开发</strong>：按照<strong>合同约定</strong>，无约定时归<strong>受托人</strong>。</li><li><strong>任务开发</strong>：按照<strong>合同约定</strong>，无约定时归<strong>受托人</strong>。</li></ul><p><strong>侵权行为</strong></p><ul><li>以<strong>盈利为目的</strong>的使用他人作品都叫侵权，反之则<strong>不构成侵权</strong>。</li></ul><p><strong>商业秘密权</strong></p><ul><li>包括<strong>经营秘密</strong>和<strong>技术秘密</strong>，是企业竞争力的核心。</li></ul><p><strong>专利权</strong></p><ul><li>需要通过<strong>申请</strong>获得。</li><li>遵循<strong>先申请原则</strong>，即先申请者先获得专利。</li></ul><p><strong>计算机软件保护</strong></p><ul><li>计算机软件受到著作权法保护。</li><li>未经许可复制或修改软件是侵权行为。</li></ul><p><strong>合理使用</strong></p><ul><li>著作权法规定了<strong>合理使用</strong>的范围，如个人学习、研究等。</li></ul><p><strong>开源协议</strong></p><ul><li>开源软件需遵守相应的<strong>开源协议</strong>，如MIT、GPL等。</li></ul><p><strong>知识产权保护期限</strong></p><table><thead><tr><th>客体类型</th><th>权利类型</th><th>保护期限及备注</th></tr></thead><tbody><tr><td><strong>公民作品</strong></td><td>署名权、修改权、保护作品完整权利</td><td>没有限制</td></tr><tr><td><strong>公民作品</strong></td><td>发表权、使用权和获得报酬权</td><td>作者一生及死后50年</td></tr><tr><td><strong>单位作品</strong></td><td>发表权、使用权和获得报酬权</td><td>50年</td></tr><tr><td><strong>公民软件产品</strong></td><td>署名权、修改权</td><td>没有限制</td></tr><tr><td><strong>公民软件产品</strong></td><td>发表权、复制权、发行权、出租权等</td><td>作者一生及死后50年，合作作品以最后死亡者为准</td></tr><tr><td><strong>单位软件产品</strong></td><td>发表权、复制权、发行权、出租权等</td><td>作者一生及死后50年，合作作品以最后死亡者为准</td></tr><tr><td><strong>注册商标</strong></td><td>注册商标</td><td>有限期10年，未转移可注销，期满后6个月内必须续注</td></tr><tr><td><strong>发明专利权</strong></td><td>发明专利权</td><td>20年（申请日开始计算）</td></tr><tr><td><strong>实用新型和外观设计专利权</strong></td><td>实用新型和外观设计专利权</td><td>10年（申请日开始计算）</td></tr><tr><td><strong>商业机密</strong></td><td>商业机密</td><td>不确定</td></tr></tbody></table><h2 id="第1章-计算机网络概论"><a href="#第1章-计算机网络概论" class="headerlink" title="第1章 计算机网络概论"></a>第1章 计算机网络概论</h2><h3 id="计算机网络概论"><a href="#计算机网络概论" class="headerlink" title="计算机网络概论"></a>计算机网络概论</h3><ol><li><p><strong>计算机网络定义</strong>：计算机网络是通过通信线路和通信设备连接的许多的<strong>分散独立工作的计算机系统</strong>，遵从一定的协议用软件实现<strong>资源共享</strong>的系统。</p></li><li><p><strong>组成</strong>：分为 <strong>硬件</strong>、<strong>软件</strong>、<strong>协议</strong> 三部分。协议是计算机网络中进行数据交换而建立的<strong>规则</strong>、<strong>标准</strong>或<strong>约定</strong>的集合。</p></li><li><p><strong>协议</strong>：</p><ul><li>国际标准 <strong>OSI&#x2F;RM 七层协议</strong>。</li><li>公认标准 <strong>TCP&#x2F;IP 四层协议</strong>（或五层）。<strong>TCP&#x2F;IP 协议簇</strong>，包括一系列常用协议。</li></ul></li></ol><h3 id="计算机网络分类"><a href="#计算机网络分类" class="headerlink" title="计算机网络分类"></a>计算机网络分类</h3><p><strong>计算机网络按分布范围分类</strong>：</p><ol><li><strong>局域网 (LAN)</strong>：通常覆盖较小的地理区域，如一个办公室或校园。</li><li><strong>城域网 (MAN)</strong>：覆盖城市或地区级范围，比局域网大，但比广域网小。</li><li><strong>广域网 (WAN)</strong>：覆盖广泛地区，甚至跨国或全球，如互联网。</li></ol><table><thead><tr><th>特性</th><th><strong>局域网 (LAN)</strong></th><th><strong>城域网 (MAN)</strong></th><th><strong>广域网 (WAN)</strong></th></tr></thead><tbody><tr><td><strong>地理范围</strong></td><td>室内、校园内部</td><td>建筑物之间、城区内</td><td>国内、国际</td></tr><tr><td><strong>所有者&#x2F;运营者</strong></td><td>单位所有和运营</td><td>几个单位共有或政府</td><td>通信运营公司所有</td></tr><tr><td><strong>互通和通信方式</strong></td><td>共享介质、分组广播</td><td>共享介质、分组广播</td><td>共享介质、分组交换</td></tr><tr><td><strong>数据速率</strong></td><td>每秒几十兆位至几百兆位</td><td>每秒几兆位至几十兆位</td><td>每秒几十千位</td></tr><tr><td><strong>误码率</strong></td><td>最小</td><td>中</td><td>较大</td></tr><tr><td><strong>拓扑结构</strong></td><td>规则结构：总线型、星型和环形</td><td>规则结构：总线型、星型和环形</td><td>不规则的网状结构</td></tr><tr><td><strong>主要应用</strong></td><td>分布式数据处理、办公自动化</td><td>LAN互联、综合声音、视频和数据业务</td><td>远程数据传输</td></tr></tbody></table><p><strong>计算机网络按拓扑结构分类</strong>：</p><ul><li><strong>星型</strong>：中心节点连接所有其他节点，易于安装和管理。</li><li><strong>环形</strong>：每个节点通过两个相邻节点的连接形成一个闭合的环路。</li><li><strong>树型</strong>：分层结构，类似于树的分支。</li></ul><p><strong>其他分类</strong>：</p><ul><li>公用网与专用网：公用网为公众提供服务，专用网限于特定组织或团体内部使用。</li><li>通信网ISP与信息网ICP：ISP提供互联网接入服务，ICP提供内容服务。</li><li>校园网与企业网：校园网服务于教育机构，企业网服务于商业组织。</li><li>骨干网与接入网：骨干网构成网络的主要高速传输通道，接入网连接终端用户到骨干网。</li><li>有线网与无线网：有线网通过物理电缆传输数据，无线网通过无线电波传输数据。</li></ul><h3 id="网络协议体系结构"><a href="#网络协议体系结构" class="headerlink" title="网络协议体系结构"></a>网络协议体系结构</h3><p><strong>OSI&#x2F;RM（开放系统互联参考模型）</strong> 七层包括：</p><ol><li><strong>应用层</strong>：提供网络服务给最终用户的应用程序。</li><li><strong>表示层</strong>：确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。</li><li><strong>会话层</strong>：管理和控制两个通信系统之间的会话连接。</li><li><strong>传输层</strong>：负责在网络中两个节点之间提供可靠的数据传输服务。</li><li><strong>网络层</strong>：负责数据包从源到宿的传输和路由选择。</li><li><strong>数据链路层</strong>：在相邻的网络设备之间提供数据传输。</li><li><strong>物理层</strong>：负责在物理媒介上实现原始的比特流传输。</li></ol><table><thead><tr><th>OSI层次编号</th><th>层次名称</th><th>封装单位</th><th>地址标识</th><th>主要功能</th></tr></thead><tbody><tr><td>7</td><td>应用层</td><td>应用进程</td><td>进程号</td><td>应用层包含用户应用程序和协议。</td></tr><tr><td>6</td><td>表示层</td><td>应用进程</td><td>进程号</td><td>数据加密与压缩、语法表示与连接管理。</td></tr><tr><td>5</td><td>会话层</td><td>应用进程</td><td>进程号</td><td>会话链接的恢复与释放、对会话分段、同步等。</td></tr><tr><td>4</td><td>传输层</td><td>数据报文、数据段</td><td>端口号</td><td>提供端到端之间可靠透明的数据传输。分段与重组、应答、排序、差错控制及流量控制，保证数据传输正确完整。</td></tr><tr><td>3</td><td>网络层</td><td>数据包、数据分组</td><td>IP地址</td><td>路径选择，网络连接的多路复用、差错的检测与恢复、流量控制服务选择。</td></tr><tr><td>2</td><td>数据链路层</td><td>数据帧</td><td>MAC地址</td><td>不可靠信道-&gt;可靠信道。将比特组织成帧，链路上提供差错控制和流量控制。</td></tr><tr><td>1</td><td>物理层</td><td>比特流</td><td>bit流</td><td>提供物理通路、二进制数据比特流传输、定义机械&#x2F;电气特性接口。</td></tr></tbody></table><p><strong>TCP&#x2F;IP（因特网传输控制协议&#x2F;网际协议）</strong> 四层包括：</p><ul><li><strong>应用层</strong>：网络服务的最终用户界面，如HTTP、FTP等。</li><li><strong>传输层</strong>：确保数据的完整性和可靠性，如TCP和UDP。</li><li><strong>互联网层</strong>：负责数据包从源到宿的传输，使用IP进行路由选择。</li><li><strong>网络接口层</strong>：负责在网络介质上实现数据的物理传输。</li></ul><p><strong>注</strong>：TCP&#x2F;IP模型有时也细分为五层，将网络接口层进一步分为：</p><ul><li><strong>物理层</strong>：定义了物理媒介和电气信号的规范。</li><li><strong>数据链路层</strong>：确保物理层传输的数据无误，如以太网。</li></ul><table><thead><tr><th>层次</th><th>名称</th><th>封装单位</th><th>地址标识</th><th>主要功能</th><th>主要协议</th></tr></thead><tbody><tr><td>5</td><td>应用层</td><td>消息、数据</td><td>URL、域名、端口号</td><td>为应用软件提供网络服务和接口</td><td>HTTP, FTP, SMTP, DNS, SSH, Telnet, IMAP, POP</td></tr><tr><td>4</td><td>传输层</td><td>数据报文、数据段</td><td>端口号</td><td>提供端到端的通信和数据传输服务</td><td>TCP, UDP</td></tr><tr><td>3</td><td>网络层</td><td>数据包、数据分组</td><td>IP地址</td><td>负责数据包的路由和转发</td><td>IP, ICMP, ARP, IGMP, OSPF, BGP</td></tr><tr><td>2</td><td>数据链路层</td><td>帧</td><td>MAC地址</td><td>在相邻网络设备间传输帧，错误检测与纠正</td><td>Ethernet II, PPP, SLIP, ARP</td></tr><tr><td>1</td><td>物理层</td><td>比特流</td><td>物理地址</td><td>定义物理媒介和电气信号规范，实现比特流传输</td><td>Ethernet, Wi-Fi, DSL, Cable, Token Ring</td></tr></tbody></table><h3 id="计算机网络传输过程"><a href="#计算机网络传输过程" class="headerlink" title="计算机网络传输过程"></a>计算机网络传输过程</h3><p>网络数据传输过程：数据封装与解封装<br><img src="https://xinhaojin.github.io/picx-images-hosting/ca0d7164524bb7fd8a3fad2c815e3365.5q7cysnf6s.jpg"></p><h2 id="第2章-数据通信基础"><a href="#第2章-数据通信基础" class="headerlink" title="第2章 数据通信基础"></a>第2章 数据通信基础</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>通信的目的是传递信息，发送信息的叫做信源，接收信息的叫做信宿，中间的通信线路叫做信道，信道受到的干扰称为噪声。</p><p>信号分为模拟信号和数字信号</p><ul><li>模拟信号是连续的</li><li>数字信号是离散的</li></ul><h3 id="信道特性"><a href="#信道特性" class="headerlink" title="信道特性"></a>信道特性</h3><h4 id="信道带宽"><a href="#信道带宽" class="headerlink" title="信道带宽"></a>信道带宽</h4><p><strong>模拟信道带宽</strong><br>信道带宽$W &#x3D; f2 - f1$，其中$f1$是低频，$f2$是高频。物理介质一旦确定，带宽通常就固定了。<br><strong>数字信道带宽</strong></p><ul><li>尼奎斯特定理</li></ul><ol><li><strong>公式</strong>：<ul><li>最大码元速率：$B &#x3D; 2W$，其中$B$为码元速率，单位为波特（Baud）；$W$为信道带宽，单位为赫兹（Hz）。</li><li>极限数据速率：$R &#x3D; B\log_{2}N &#x3D; 2W\log_{2}N$，单位为比特&#x2F;秒（b&#x2F;s）。</li></ul></li><li><strong>解释</strong>：<ul><li>尼奎斯特定理指出理想低通信道下的最高码元传输速率是信道带宽的 2 倍。</li><li>码元速率即每秒发送包裹个数，它表示单位时间内通过信道传输的码元个数。</li><li>数据速率即每秒发送包裹重量，极限数据速率与码元速率和码元的离散值个数$N$有关。这里$N$表示不同的码元状态数，例如在二进制中，$N &#x3D; 2$，表示有两种不同的码元状态（0 和 1）。极限数据速率是在给定信道带宽和码元离散值个数的情况下，信道能够传输的最大数据速率。</li></ul></li></ol><ul><li>香农定理</li></ul><ol><li><strong>公式</strong>：$C &#x3D; W\log_{2}(1 + S&#x2F;N)$，其中$C$为信道容量，单位为比特&#x2F;秒（b&#x2F;s）；$W$为信道带宽，单位为赫兹（Hz）；$S$为信号功率，$N$为噪声功率，$S&#x2F;N$为信噪比。</li><li><strong>解释</strong>：<ul><li>香农定理给出了在有噪声的信道中，信道容量与信道带宽、信噪比之间的关系。</li><li>信道容量表示在特定信道条件下能够可靠传输的最大数据速率。</li><li>信噪比是信号功率与噪声功率的比值，通常用分贝（dB）表示，即$dB&#x3D;10\log_{10}(S&#x2F;N)$。</li></ul></li></ol><h4 id="信道延迟"><a href="#信道延迟" class="headerlink" title="信道延迟"></a>信道延迟</h4><p><strong>总延时构成</strong><br>总延时 &#x3D; 线路延迟 + 发送延迟。</p><p><strong>线路延迟</strong><br>线路延迟取决于传输距离和传输速度，计算公式为线路延迟 &#x3D; 传输距离&#x2F;传输速度，例如 1000 米电缆，延时为 5us（假设电缆中传播速度一般为光速的 67%，即 200m&#x2F;us）。</p><p><strong>发送延迟</strong><br>发送延迟与数据帧大小和速率有关，计算公式为发送延迟 &#x3D; 数据帧大小&#x2F;速率，例如在 100M 线路上发送 1000 字节数据，延时为 80us（$1000 * 8 &#x2F;(100 * 10^{6}) &#x3D; 8 * 10^{-5}s &#x3D; 80us$）。</p><p><strong>卫星信道时延</strong><br>卫星信道的时延大约 270ms（来回双向的延迟 540ms）。</p><h3 id="通信传输介质"><a href="#通信传输介质" class="headerlink" title="通信传输介质"></a>通信传输介质</h3><p><strong>有线介质</strong>：</p><ul><li><strong>同轴电缆</strong>：分粗、细，传送距离长且信号稳定，用于电视监视、音响设备传音频。</li><li><strong>双绞线</strong>：缠绕降干扰，100Mbps 用 4 根，1000Mbps 用 8 根。网口 RJ45，电话口 RJ11。5 类线 100M，超 5&#x2F;6 类线 1000M，7 类线 10G。</li><li><strong>光纤</strong>：利用光全反射传导，损耗低，适合长距离信息传递。<ul><li><strong>单模光纤</strong>：尺寸与光波长可比，5 - 10um，一种模式传播，带宽极宽，适用于大容量长距离通信（贵）。</li><li><strong>多模光纤</strong>：尺寸远大于光波波长，50um、62.5um，多种模式传播，用于小容量短距离通信（便宜）。</li></ul></li></ul><p><strong>无线介质</strong>：</p><ul><li><strong>无线电波</strong>：500kHz - 1000MHz，能量小、波长长、频率低，用于广电和无线通信。</li><li><strong>微波</strong>：300MHz - 300GHz，波长低、频率高、能量大，用于雷达、飞机导航。</li></ul><h3 id="数据编码"><a href="#数据编码" class="headerlink" title="数据编码"></a>数据编码</h3><p>看波解码</p><h4 id="极性编码"><a href="#极性编码" class="headerlink" title="极性编码"></a>极性编码</h4><p>极性码：1低电平，0高电平<br>单极性编码：1高电平，0无电平<br>双极性编码：0电平表示0，1则在正负之间交替翻转，1跳0不跳<br><img src="https://xinhaojin.github.io/picx-images-hosting/image.9gwik5f7t0.jpg" alt="image"></p><h4 id="曼彻斯特编码"><a href="#曼彻斯特编码" class="headerlink" title="曼彻斯特编码"></a>曼彻斯特编码</h4><p><img src="https://xinhaojin.github.io/picx-images-hosting/image.syw52i6i7.jpg" alt="image"></p><h4 id="差分曼彻斯特编码"><a href="#差分曼彻斯特编码" class="headerlink" title="差分曼彻斯特编码"></a>差分曼彻斯特编码</h4><p><img src="https://xinhaojin.github.io/picx-images-hosting/image.45ml1y9eh.jpg" alt="image"></p><h4 id="曼彻斯特编码特点总结"><a href="#曼彻斯特编码特点总结" class="headerlink" title="曼彻斯特编码特点总结"></a>曼彻斯特编码特点总结</h4><p>曼彻斯特编码和差分曼彻斯特编码是典型的双相码，特点如下：</p><ul><li>要求每一位都有一个电平转换，一高一低，必须翻转。</li><li>具有自定时和检测错误的功能。</li><li>将时钟和数据包含在信号数据流中，也称自同步码。</li><li>编码效率低，编码效率都是 50%。数据速率是码元速率的一半，当数据传输速率为 100Mbps 时，码元速率为 200M baud。</li></ul><h4 id="编码效率"><a href="#编码效率" class="headerlink" title="编码效率"></a>编码效率</h4><table><thead><tr><th>编码类型</th><th>编码效率</th><th>应用场景</th></tr></thead><tbody><tr><td>曼彻斯特编码</td><td>50%</td><td>以太网</td></tr><tr><td>4B&#x2F;5B 编码</td><td>80%</td><td>百兆以太网</td></tr><tr><td>8B&#x2F;10B 编码</td><td>80%</td><td>千兆以太网</td></tr><tr><td>64B&#x2F;66B 编码</td><td>97%</td><td>万兆以太网</td></tr></tbody></table><h3 id="数字调制技术"><a href="#数字调制技术" class="headerlink" title="数字调制技术"></a>数字调制技术</h3><p>数字信号转模拟信号<br><img src="https://xinhaojin.github.io/picx-images-hosting/image.5c0x822w8c.jpg" alt="image"></p><table><thead><tr><th>数字调制方式</th><th>描述</th><th>特征</th></tr></thead><tbody><tr><td>幅度键控（ASK）</td><td>用载波的两个不同振幅表示 0 和 1。</td><td>0没有振幅</td></tr><tr><td>频移键控（FSK）</td><td>用载波的两个不同频率表示 0 和 1。</td><td>有疏密</td></tr><tr><td>相移键控（PSK）</td><td>用载波的起始相位的变化表示 0 和 1。</td><td>像屁股</td></tr><tr><td>正交幅度调制（QAM）</td><td>把两个幅度相同但相位差 90°的模拟信号合成一个模拟信号。</td><td>&#x2F;</td></tr></tbody></table><ul><li>码元只取两个相位值叫2相调制， 码元可取4个相位叫4相调制， 则N&#x3D;2,N&#x3D;4。DPSK是2相调制, N&#x3D;2,QPSK是4相调制, N&#x3D;4。</li></ul><h3 id="脉冲编码调制（PCM）"><a href="#脉冲编码调制（PCM）" class="headerlink" title="脉冲编码调制（PCM）"></a>脉冲编码调制（PCM）</h3><p>模拟信号转数字信号<br><strong>PCM 数字化过程包含三个步骤：采样、量化和编码。</strong></p><p><strong>一、采样</strong><br>按照一定的时间间隔对模拟信号进行取样，把模拟信号的当前值作为样本。依据奈奎斯特采样定理，如果模拟信号的最高频率为$f_{max}$，若以大于等于$2f_{max}$的采样频率对其进行采样，则采样得到的离散信号序列就能完整地恢复出原始信号。公式为$f&#x3D;\frac{1}{T}\geq2f_{max}$，其中$f$是采样频率，$T$是采样周期。</p><p><strong>二、量化</strong><br>把取样后得到的样本由连续值转换为离散值，离散值的个数决定了量化的精度。</p><p><strong>三、编码</strong><br>把量化后的样本值变成相应的二进制代码。</p><h3 id="数据通信方式"><a href="#数据通信方式" class="headerlink" title="数据通信方式"></a>数据通信方式</h3><h4 id="按通信方向分"><a href="#按通信方向分" class="headerlink" title="按通信方向分"></a>按通信方向分</h4><ol><li><strong>单工通信</strong>：信息只能在一个方向传送，发送方不能接收，接收方不能发送（如电视、广播）。</li><li><strong>半双工通信</strong>：通信的双方可以交替发送和接收信息，但不能同时接收或发送（如对讲机、Wi-Fi）。</li><li><strong>全双工通信</strong>：通信双方可同时进行双向的信息传送（如电话、交换机）。</li></ol><h4 id="按同步方式分"><a href="#按同步方式分" class="headerlink" title="按同步方式分"></a>按同步方式分</h4><ol><li><strong>异步传输</strong>：把各个字符分开传输，在字符之间插入同步信息，典型的是插入起始位和停止位。HDLC 是典型的异步传输，起始标志位和结束标志位都是“01111110”。异步传输实现简单，但引入起止位影响传输效率，速率不会太高。</li><li><strong>同步传输</strong>：发送方在传送数据之前，先发送一串同步字符 SYNC，接收方检测到 2 个以上 SYNC 字符就确认已经进入同步状态，开始准备接收数据。同步传输效率更高，在短距离高速数据传输中大多采用。</li></ol><h3 id="数据交换方式"><a href="#数据交换方式" class="headerlink" title="数据交换方式"></a>数据交换方式</h3><p><strong>电路交换</strong></p><ul><li>概念：将数据传输分为电路建立、数据传输和电路拆除三个过程。在数据传送之前需建立一条物理通路，在线路被释放之前，该通路将一直被用户完全占有。</li><li>优点：独占性、实时性，适合传输大量的数据。</li><li>缺点：需建立一条物理连接，利用率低。代表为早期的电话系统。</li></ul><p><strong>报文交换</strong></p><ul><li>概念：报文从发送方传送到接收方采用存储转发的方式。报文中含有每一个下一跳节点，完整的报文在一个个节点间传送（数据不拆分）。</li><li>优点：不需要专用通道，线路利用率高，存储转发节点可校验纠错。</li><li>缺点：有通信时延。比如物流包裹。</li></ul><p><strong>分组交换</strong></p><ul><li>概念：将数据拆分成很小的分组进行传送，包括数据报和虚电路两种方式。</li><li>优点：利用率更高、可选路径、数据率转换、支持优先级。</li><li>缺点：时延、开销大。比如邮局寄信。<ul><li><strong>数据报</strong>：单向传送、无连接的。如普通信。每个分组被独立地处理，每个节点根据路由选择算法，被独立送到目的，路径和到达目的顺序都可能不一样。</li><li><strong>虚电路</strong>：交互式、逻辑链接。如挂号信。在数据传送之前，先建立起一条逻辑上的连接，每个分组都沿着一条路径传输，不会乱序。</li></ul></li></ul><h3 id="多路复用技术"><a href="#多路复用技术" class="headerlink" title="多路复用技术"></a>多路复用技术</h3><table><thead><tr><th>复用技术</th><th>概念</th><th>例子</th></tr></thead><tbody><tr><td>频分复用（FDM）</td><td>利用不同的频率区分不同的信号，子信道通过隔离频带防串扰</td><td>CATV、WIFI</td></tr><tr><td>时分复用（TDM）</td><td>不同的信号在不同的时间轮流占用信道，分为同步时分（如 T1、E1）和统计时分（如 ATM）</td><td>手枪、手机、T1、E1、ATM</td></tr><tr><td>波分复用（WDM）</td><td>利用不同的波长区分不同的信号</td><td>光纤</td></tr></tbody></table><h4 id="E1和T1"><a href="#E1和T1" class="headerlink" title="E1和T1"></a>E1和T1</h4><p><strong>T1 标准（美国和日本）</strong></p><ul><li>每路电话 64k。</li><li>计算公式：T1 &#x3D; 64k * 24 + 开销与间隔 &#x3D; 1.544Mbps。</li></ul><p><strong>E1 标准（欧洲）</strong></p><ul><li>每路电话 64k，传 30 路电话，2 路开销。</li><li>计算公式：E1 &#x3D; 64 * 30 + 64k * 2 &#x3D; 2.048Mbps。</li><li>ITU-T 标准 E1 信道数据速率是 2.048Mbps，把 32 个 8 位一组的数据样本组装成 125us 的基本帧，其中 30 个子信道用于语音传送，2 个子信道（CH0 和 CH16）用于控制信令。</li></ul><h4 id="同步数字序列"><a href="#同步数字序列" class="headerlink" title="同步数字序列"></a>同步数字序列</h4><table><thead><tr><th>光纤级</th><th>STS 级</th><th>链路速 Mbps</th><th>有效载荷 Mbps</th><th>负载 Mbps</th><th>SDH 对应</th><th>常用近似值</th></tr></thead><tbody><tr><td>OC-1</td><td>STS-1</td><td>51.840</td><td>50.112</td><td>1.728</td><td></td><td></td></tr><tr><td><strong>OC-3</strong></td><td>STS-3</td><td>155.520</td><td>150.336</td><td>5.184</td><td><strong>STM-1</strong></td><td><strong>155Mbps</strong></td></tr><tr><td>OC-9</td><td>STS-9</td><td>466.560</td><td>451.008</td><td>15.552</td><td>STM-3</td><td></td></tr><tr><td><strong>OC-12</strong></td><td>STS-12</td><td>622.080</td><td>601.344</td><td>20.736</td><td><strong>STM-4</strong></td><td><strong>622Mbps</strong></td></tr><tr><td>OC-18</td><td>STS-18</td><td>933.120</td><td>902.016</td><td>31.104</td><td>STM-6</td><td></td></tr><tr><td>OC-24</td><td>STS-24</td><td>1244.160</td><td>1202.688</td><td>41.472</td><td>STM-8</td><td></td></tr><tr><td>OC-36</td><td>STS-36</td><td>1866.240</td><td>1804.032</td><td>62.208</td><td>STM-13</td><td></td></tr><tr><td>OC-48</td><td>STS-48</td><td>2488.320</td><td>2405.376</td><td>82.944</td><td><strong>STM-16</strong></td><td><strong>2.5Gbps</strong></td></tr><tr><td>OC-96</td><td>STS-96</td><td>4976.640</td><td>4810.752</td><td>165.888</td><td>STM-32</td><td></td></tr><tr><td>OC-192</td><td>STS-192</td><td>9953.280</td><td>9621.504</td><td>331.776</td><td><strong>STM-64</strong></td><td><strong>10Gbps</strong></td></tr></tbody></table><h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><p>奇偶校验是一种简单的错误检测方法，它通过确保数据中1的个数为奇数（奇校验）或偶数（偶校验）来工作。</p><ul><li><p>原理</p><ul><li><strong>奇校验</strong>：数据位加上一个校验位，使得总的1的个数为奇数。</li><li><strong>偶校验</strong>：数据位加上一个校验位，使得总的1的个数为偶数。</li></ul></li><li><p>优点</p><ul><li>实现简单，成本低。</li></ul></li><li><p>缺点</p><ul><li>只能检测奇数个错误，不能纠正错误。</li><li>对偶数个错误无能为力。</li></ul></li></ul><h4 id="CRC循环冗余校验"><a href="#CRC循环冗余校验" class="headerlink" title="CRC循环冗余校验"></a>CRC循环冗余校验</h4><p>末尾加入 CRC 循环冗余校验码能检错不能纠错，广泛用于网络通信和磁盘存储。</p><p><strong>计算方法</strong>：<br>例如，信息码为 10111，生成多项式为 G(X)&#x3D;X⁴+X+1，计算 CRC 校验码。</p><ol><li><strong>判断校验位数</strong>：生成多项式的最高次方是几，校验位就是几位。这里生成多项式最高次方是 4，所以有 4 位校验位。</li><li><strong>补齐数据位后面的 0</strong>：10111 0000。</li><li><strong>提取生成多项式的系数</strong>：G(X)&#x3D;X⁴+X+1 &#x3D; 1<em>X⁴+0</em>X³+0<em>X²+1</em>X¹+1*X⁰ &#x3D; 10011。</li><li><strong>用第二步的结果，除以第三步的结果（不借位，相当于异或运算）</strong>：余数就是 CRC 校验码，余数不够位，前面补 0。<br><img src="https://xinhaojin.github.io/picx-images-hosting/image.969or8xe57.jpg" alt="image"></li></ol><h4 id="海明码校验"><a href="#海明码校验" class="headerlink" title="海明码校验"></a>海明码校验</h4><p>通过添加额外的校验位（海明位），使得每个海明位能够覆盖特定的数据位，能够纠正一位错误。<br><strong>海明码数据位和校验位的数量关系</strong></p><p>$2^r\geq k + r + 1$</p><p>其中，$r$表示校验位的数量，$k$表示数据位的数量。</p><p><strong>确定校验位个数的方法(海明不等式)</strong></p><ol><li>首先确定数据位的数量$k$。</li><li>然后根据上述公式，通过试错法或者逐步增加校验位的数量$r$，直到满足公式为止。</li><li>例如，如果有$4$个数据位，设校验位数量为$r$，则有$2^r\geq 4 + r + 1$。<ul><li>当$r &#x3D; 1$时，$2^1 &#x3D; 2$，$4 + 1 + 1 &#x3D; 6$，不满足公式。</li><li>当$r &#x3D; 2$时，$2^2 &#x3D; 4$，$4 + 2 + 1 &#x3D; 7$，不满足公式。</li><li>当$r &#x3D; 3$时，$2^3 &#x3D; 8$，$4 + 3 + 1 &#x3D; 8$，满足公式。</li><li>所以，对于$4$个数据位，需要$3$个校验位。</li></ul></li></ol><p><strong>海明距离</strong> ( 码距 ) ：一个码字要变成另一个码字时必须改变的最小位数。两个码字之间不同的比特数。</p><ul><li>例如：0101-&gt;0000：改变2位， 则海明距离为2<br><strong>编码方法</strong><br>假设传送信息1001011 ,第2^{i}(i&#x3D;0,1,2,3 \dotsc )位是校验位 ， 其余位存放数据。<br>则把数据放在3 , 5 , 6 , 7 , 9 , 10 , 11位置,1,2 , 4 , 8留作校验位。<br><img src="https://xinhaojin.github.io/picx-images-hosting/image.2yyar1qcti.jpg" alt="image"><br><img src="https://xinhaojin.github.io/picx-images-hosting/image.73tw367w30.jpg" alt="image"></li></ul><h2 id="第3章-广域网"><a href="#第3章-广域网" class="headerlink" title="第3章 广域网"></a>第3章 广域网</h2><h4 id="公共交换电话网PSTN"><a href="#公共交换电话网PSTN" class="headerlink" title="公共交换电话网PSTN"></a>公共交换电话网PSTN</h4><p>公共交换电话网（PSTN）是专为语音通信而建立的网络，自20世纪60年代起也被用于数据传输。</p><ul><li>电话网由以下部分组成：<ul><li>本地回路</li><li>干线</li><li>交换机</li></ul></li><li>干线和交换机通常使用数字传输和交换技术，而本地回路主要采用模拟线路。</li><li>电话线联网时，发送端通过调制解调器将数字信号转换为模拟信号，接收端再将模拟信号转换回数字信号。<ul><li>发送端：数字信号 → 模拟信号</li><li>接收端：模拟信号 → 数字信号</li></ul></li></ul><p><strong>机械特性</strong><br>RS-232-C没有正式规定连机器的标准，只有在其附录中建议使用25针的D型连接器，也有很多使用其他连接器，特别是在微型机RS-232-C串行接口上，大多使用9针连接器。</p><p><strong>电气特性</strong><br>RS-232-C采用的V.28标准电路，速率20kb&#x2F;s，最长15米。<br>信号源产生3-15V的信号<br><img src="https://xinhaojin.github.io/picx-images-hosting/image.9kg4kk0f3m.jpg" alt="image"></p><h4 id="公共数据网X-25"><a href="#公共数据网X-25" class="headerlink" title="公共数据网X.25"></a>公共数据网X.25</h4><ul><li>流量控制<ul><li>停止等待协议：发送方必须等待接收方的确认才能发送下一帧。</li><li>滑动窗口协议：允许连续发送多个帧而无需等待确认。</li></ul></li><li>差错控制<ul><li>ARQ协议：停止等待+超时重传</li><li>选择性重发ARQ：重传特定的某一帧 $W_{发}&#x3D;W_{收}\leq2^{k - 1}$, 确认机制为SREJ（Selective Reject）</li><li>后退N帧ARQ：允许发送方重传最后N帧 $W_{发}&#x3D;W_{收}\leq2^{k}-1$, 确认机制为REJ（Reject）</li></ul></li></ul><h4 id="帧中继网Frame-Relay"><a href="#帧中继网Frame-Relay" class="headerlink" title="帧中继网Frame Relay"></a>帧中继网Frame Relay</h4><p>帧中继（Frame Relay, FR）是一种在<strong>数据链路层</strong>工作的通信协议，它通过建立虚拟电路来实现数据的分组交换。它具有以下特点：</p><ul><li><strong>虚电路服务</strong>：在网络的第二层提供虚拟电路服务。</li><li><strong>本地标识</strong>：使用数据链路连接标识符（DLCI）进行本地标识。</li><li><strong>面向连接</strong>：提供面向连接的服务，确保数据传输的连续性。</li><li><strong>透明传输</strong>：支持基于分组的透明传输。</li><li><strong>错误检测与拥塞控制</strong>：仅进行错误检测和<strong>拥塞控制</strong>，不包括<strong>流量控制</strong>和重传机制，因此网络开销较小。</li><li><strong>带宽灵活性</strong>：能够根据需求动态调整带宽，适应突发数据传输。</li><li><strong>速率控制</strong>：通过承诺信息速率（CIR）和扩展信息速率（EIR）来控制数据传输速率。</li><li><strong>可变帧长</strong>：支持可变长度的帧，最大可达1600-4096字节，能够承载多种局域网数据帧。</li><li><strong>高传输速率</strong>：支持高达2-45Mbps的传输速率。</li><li><strong>延迟敏感性</strong>：由于不提供重传机制，不适合对延迟敏感的应用，如实时语音和视频通信。</li><li><strong>数据丢失</strong>：数据丢失的风险取决于运营商对虚电路的配置。</li><li><strong>可靠性</strong>：不保证数据的可靠提交。</li></ul><p>总的来说，帧中继是一种高效、灵活的网络协议，适用于需要快速数据传输和带宽动态调整的场景，但不适用于对数据传输可靠性和延迟有严格要求的应用。</p><h4 id="ISDN和ATM"><a href="#ISDN和ATM" class="headerlink" title="ISDN和ATM"></a>ISDN和ATM</h4><p>ISDN， Integrated Services Digital Network，综合数字业务网，目的是以数字系统代替模拟电话系统，把音频、视频、数据业务放在一个网上统一传输。</p><ul><li>分为窄带ISDN和宽带ISDN<ul><li>窄带ISDN提供两种用户接口<ul><li>基本速率 | BRI &#x3D; 2B+D &#x3D; 144 kbps</li><li>基群速率 | PRI &#x3D; 30B+D &#x3D; 2.048 Mbps</li></ul></li></ul></li><li>宽带ISDN，即ATM，异步传输模式（Asynchronous Transfer Mode）<ul><li>ATM是信元交换，信元为53字节固定长度。</li><li>ATM依然是以虚链路提供面向连接的服务。</li><li>ATM典型速率为150 Mbps。</li></ul></li></ul><h4 id="HDLC"><a href="#HDLC" class="headerlink" title="HDLC"></a>HDLC</h4><p>HDLC 是一种面向位（比特）的同步链路控制协议。</p><ul><li>通常使用 CRC-16、CRC-32 校验，帧边界 01111110</li></ul><table><thead><tr><th>记忆符</th><th>名称</th><th>S1字段</th><th>S0字段</th><th>功能</th></tr></thead><tbody><tr><td>RR</td><td>接收准备好</td><td>0</td><td>0</td><td>确认，且准备接受下一帧，已收妥N(R)以前的各帧</td></tr><tr><td>RNR</td><td>接收未准备好</td><td>1</td><td>0</td><td>确认，暂停接收下一帧，N(R)含义同上</td></tr><tr><td>REJ</td><td>拒绝接收</td><td>0</td><td>1</td><td>否认，否认N(R)起的各帧，但N(R)以前的帧已收妥</td></tr><tr><td>SREJ</td><td>选择拒绝接收</td><td>1</td><td>1</td><td>否认，只否认序号为N(R)的帧</td></tr></tbody></table><h2 id="第4章-局域网和城域网"><a href="#第4章-局域网和城域网" class="headerlink" title="第4章 局域网和城域网"></a>第4章 局域网和城域网</h2><h3 id="局域网和城域网体系架构IEEE-802"><a href="#局域网和城域网体系架构IEEE-802" class="headerlink" title="局域网和城域网体系架构IEEE 802"></a>局域网和城域网体系架构IEEE 802</h3><p><img src="https://xinhaojin.github.io/picx-images-hosting/image.2rv2y4xfgn.jpg" alt="image"><br>重点：802.3(CSMA&#x2F;CD)、802.11(无线局域网)、802.16(无线城域网)</p><ul><li>IEEE802.3的核心算法：CSMA&#x2F;CD</li><li>IEEE802.11的核心算法：CSMA&#x2F;CA</li></ul><h3 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA&#x2F;CD协议"></a>CSMA&#x2F;CD协议</h3><p>CSMA&#x2F;CD(Carrier Sense Multiple Access with Collision Detection)<br>协议是一种用于局域网通信的协议，它是一种<strong>载波监听多路访问&#x2F;冲突检测</strong>的协议。<br>CSMA基本原理： 发送数据之前， 先监听信道上是否有人在发送。若有， 说明信道正忙， 否则说明信道是空闲的， 然后根据预定的策略决定 ：</p><ul><li>若信道空闲 ， 是否立即发送。</li><li>若信道忙 ， 是否继续监听。<br>如果连续发生16次碰撞后， 认为网络繁忙或故障， 不再尝试发送。</li></ul><h4 id="三种监听算法"><a href="#三种监听算法" class="headerlink" title="三种监听算法"></a>三种监听算法</h4><p><img src="https://xinhaojin.github.io/picx-images-hosting/image.6pngeurn46.jpg" alt="image"></p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>非坚持型监听算法</td><td>后退随机时间，由于随机时延后退从而减少冲突概率，但会使信道闲置一段时间，降低信道利用率且增加发送时延。</td></tr><tr><td>1-坚持型监听算法</td><td>继续监听不等待，有利于抢占信道减少信道空闲时间，但多个站同时监听信道时必然发生冲突，冲突概率和利用率都高。</td></tr><tr><td>P-坚持型监听算法</td><td>若信道空闲，以概率 P 发送，以概率(1 - P)延迟一个时间单位，P 大小可调整。</td></tr></tbody></table><h4 id="冲突处理机制"><a href="#冲突处理机制" class="headerlink" title="冲突处理机制"></a>冲突处理机制</h4><p>检测到发生冲突后，立即停止发送，并发送干扰信号（Jamming）使所有站都停止发送，等待随机长的一段时间后重新监听，再尝试发送</p><h4 id="二进制指数退避算法"><a href="#二进制指数退避算法" class="headerlink" title="二进制指数退避算法"></a>二进制指数退避算法</h4><ul><li>检测到冲突后停止发送数据，等待随机时间再发送。</li><li>等待时间 &#x3D; τ * Random[0,1,…,2^(k)-1]，τ是基本退避时间，k &#x3D; min[重传次数,10]，重传 16 次后若还不能正常发送，认为网络拥塞或故障不再尝试重传。例如重传 12 次，k &#x3D; min[12,10]&#x3D;10，等待时间为 τ*Random[0,1023]，重传次数越多退避窗口越大以降低冲突概率。若连续发生 16 次碰撞，认为网络繁忙或故障不再尝试发送。</li></ul><h3 id="最小帧长计算"><a href="#最小帧长计算" class="headerlink" title="最小帧长计算"></a>最小帧长计算</h3><ul><li>最小帧长公式为：$L_{min}&#x3D;2R×d&#x2F;v$，其中$R$为网络数据速率，$d$为最大距离，$v$为传播速度。</li><li>不冲突条件为：发送时间≥传送时间+确认时间，即$L&#x2F;R≥2×d&#x2F;v$，由此可推出最小帧长公式。</li></ul><h3 id="以太网帧"><a href="#以太网帧" class="headerlink" title="以太网帧"></a>以太网帧</h3><h4 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h4><p><img src="https://xinhaojin.github.io/picx-images-hosting/image.1zi7ggpwfw.jpg" alt="image"></p><ul><li>前面 7+1 字节用于时钟同步，不计入帧长。</li><li>数据为 46 - 1500 字节，若不够至少填充到 46 字节。</li><li>校验位 4 字节，采用 CRC 循环冗余校验 32 位。</li><li>最小帧长 64 字节，由 6+6+2+46+4 得出。</li><li>最大帧长 1518 字节，由 6+6+2+1500+4 得出。</li></ul><h4 id="以太网报文封装"><a href="#以太网报文封装" class="headerlink" title="以太网报文封装"></a>以太网报文封装</h4><p><img src="https://xinhaojin.github.io/picx-images-hosting/image.1ovdnbb0c1.jpg" alt="image"></p><h4 id="快速以太网802-3u-100M"><a href="#快速以太网802-3u-100M" class="headerlink" title="快速以太网802.3u(100M)"></a>快速以太网802.3u(100M)</h4><table><thead><tr><th>属性</th><th>传输介质</th><th>特性阻抗</th><th>传输距离</th></tr></thead><tbody><tr><td>100Base-TX (4B5B)</td><td>两对5类UTP</td><td>100Ω</td><td>100m</td></tr><tr><td>100Base-TX (4B5B)</td><td>两对STP</td><td>150Ω</td><td>100m</td></tr><tr><td>100Base-FX</td><td>一对多模光纤MMF</td><td>62.5&#x2F;125μm</td><td>2km</td></tr><tr><td>100Base-FX</td><td>一对单模光纤SMF</td><td>8&#x2F;125μm</td><td>40km</td></tr><tr><td>100Base-T4</td><td>四对3类UTP</td><td>100Ω</td><td>100m</td></tr><tr><td>100Base-T2</td><td>两对3类UTP</td><td>100Ω</td><td>100m</td></tr></tbody></table><ul><li>传输距离L&gt;S&gt;T&gt;C</li></ul><h4 id="千兆以太网802-3z-802-3ab-1000M"><a href="#千兆以太网802-3z-802-3ab-1000M" class="headerlink" title="千兆以太网802.3z,802.3ab(1000M)"></a>千兆以太网802.3z,802.3ab(1000M)</h4><p>以下是您提供的信息，整理成Markdown格式的表格：</p><table><thead><tr><th>标准</th><th>名称</th><th>传输介质</th><th>传输距离</th><th>特点</th></tr></thead><tbody><tr><td></td><td>1000Base-SX</td><td>光纤(短波770~860nm)</td><td>550m</td><td>多模光纤(50,62.5um)</td></tr><tr><td>IEEE 802.3z</td><td>1000Base-LX</td><td>光纤(长波1270~1355nm)</td><td>5000m</td><td>单模(10um)或多模光纤(50,62.5um)</td></tr><tr><td>IEEE 802.3z</td><td>1000Base-CX</td><td>两对STP</td><td>25m</td><td>屏蔽双绞线, 同一房间内的设备之间</td></tr><tr><td>IEEE802.3ab</td><td>1000Base-T</td><td>四对UTP</td><td>100m</td><td>5类非屏蔽双绞线, 8B&#x2F;10B编码</td></tr></tbody></table><h4 id="万兆以太网802-3ae-10G"><a href="#万兆以太网802-3ae-10G" class="headerlink" title="万兆以太网802.3ae(10G)"></a>万兆以太网802.3ae(10G)</h4><table><thead><tr><th>名称</th><th>传输介质</th><th>传输距离</th><th>特点</th></tr></thead><tbody><tr><td>10GBase-S(Short)</td><td>50um多模光纤</td><td>300m</td><td>850nm串行</td></tr><tr><td>10GBase-S(Short)</td><td><strong>62.5um多模光纤</strong></td><td><strong>65m</strong></td><td>850nm串行</td></tr><tr><td>10GBase-L(Long)</td><td>单模光纤</td><td>10km</td><td>1310nm串行</td></tr><tr><td>**10GBase-E(Extended) **</td><td><strong>单模光纤</strong></td><td><strong>40km</strong></td><td><strong>1550nm串行</strong></td></tr><tr><td>10GBase-LX4</td><td>单模光纤</td><td>10km</td><td>1310nm 4*2.5Gbps 波分多路复用(WDM)</td></tr><tr><td>10GBase-LX4</td><td>50um多模光纤</td><td>300m</td><td>1310nm 4*2.5Gbps 波分多路复用(WDM)</td></tr><tr><td>10GBase-LX4</td><td>62.5um多模光纤</td><td>300m</td><td>1310nm 4*2.5Gbps 波分多路复用(WDM)</td></tr></tbody></table><h3 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h3><ul><li>冲突域<ul><li>冲突域是指连接在同一共享介质上的所有节点的集合，冲突域内所有节点竞争同一带宽，一个节点发出的报文(无论是单播、组播、广播)，其余节点都可以收到。</li></ul></li><li>广播域<ul><li>广播报文所能到达的整个访问范围称为二层广播域，简称广播域，同一广播域内的主机都能收到广播报文。</li></ul></li></ul><ul><li>中继器、网桥和集线器是一个冲突域</li><li>交换机的一个接口是一个冲突域</li><li>一个VLAN是一个广播域</li><li>路由器可以隔离广播域</li></ul><ul><li>虚拟局域网（Virtual Local Area Network, VLAN ）根据管理功能、组织机构或应用类型对交换局域网进行分段而形成的逻辑网络。<ul><li>不同 VLAN 通信必须经过三层设备：路由器、三层交换机、防火墙等。</li><li>虚拟局域网工作站可以不属于同一物理网段，任何交换端口都可以分配给某个 VLAN，属于同一 VLAN 的所有端口构成一个广播域。</li></ul></li></ul><h4 id="交换机VLAN划分"><a href="#交换机VLAN划分" class="headerlink" title="交换机VLAN划分"></a>交换机VLAN划分</h4><ul><li>静态划分VLAN:基于交换机端口</li><li>动态划分VLAN:基于MAC地址、基于策略、基于网络层协议、基于网络层地址</li><li><strong>VLAN划分配置</strong><ul><li><strong>静态划分VLAN</strong><ul><li>手动配置交换机接口加入特定VLAN</li><li>配置示例：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Huawei] vlan 10 // 创建VLAN 10</span><br><span class="line">[Huawei-vlan10] quit // 退出</span><br><span class="line">[Huawei] interface GigabitEthernet0/0/1 // 进入接口</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port link-type access // 设置接口为access类型</span><br><span class="line">[Huawei-GigabitEthernet0/0/1] port default vlan 10 // 将接口加入VLAN 10</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>动态划分VLAN</strong><ul><li>根据MAC地址、网络层地址、网络层协议、IP广播域或管理策略自动划分</li><li><strong>基于MAC地址划分</strong><ul><li>配置示例：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Huawei] vlan 20 // 创建VLAN 20</span><br><span class="line">[Huawei-vlan20] mac-vlan mac-address 5489-98FC-5825 // 将指定MAC地址终端加入VLAN 20</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>基于策略划分</strong><ul><li>配置示例：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Huawei] vlan 20 // 创建VLAN 20</span><br><span class="line">[Huawei-vlan20] policy-vlan mac-address 0-1-1 ip 10.1.1.1 priority 7</span><br><span class="line">// 基于策略划分VLAN，将指定MAC地址和IP地址的主机加入VLAN 20，并设置802.1p优先级为7</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h4 id="VLAN作用"><a href="#VLAN作用" class="headerlink" title="VLAN作用"></a>VLAN作用</h4><ul><li><strong>控制网络流量</strong>：隔离广播域，减少冲突，提升带宽利用率。</li><li><strong>提高安全性</strong>：限制不同VLAN间通信，增强网络保护。</li><li><strong>灵活管理</strong>：按功能划分工作组，支持移动办公。</li></ul><h4 id="VLAN标签"><a href="#VLAN标签" class="headerlink" title="VLAN标签"></a>VLAN标签</h4><ul><li><strong>802.1Q标签字段</strong><ul><li><strong>PRI (3位)</strong>: 优先级 (Priority)<ul><li>提供0~7共8个优先级</li><li>多个帧等待发送时，按优先级顺序发送数据包</li></ul></li><li><strong>VID (12位)</strong>: VLAN标识符<ul><li>最多表示4096个VLAN</li><li>VID 0用于识别优先级</li><li>VID 4095保留未用</li><li>最多可配置4094个VLAN</li><li>默认管理VLAN是1，不能删除</li></ul></li></ul></li><li><strong>交换机处理</strong><ul><li>添加和删除VLAN标签由专用硬件自动实现</li><li>处理速度快，不会引入太大延迟</li></ul></li><li><strong>用户视角</strong><ul><li>数据源产生标准的以太帧</li><li>目标接收的也是标准的以太帧</li><li>VLAN标记对用户是透明的</li></ul></li></ul><p><img src="https://xinhaojin.github.io/picx-images-hosting/image.7p8lw88de.jpg" alt="image"></p><h4 id="交换机端口类型"><a href="#交换机端口类型" class="headerlink" title="交换机端口类型"></a>交换机端口类型</h4><ul><li><strong>Access接口</strong><ul><li>只能传送单个VLAN数据</li><li>一般用于连接PC&#x2F;摄像头等终端</li></ul></li><li><strong>Trunk接口</strong><ul><li>能传送多个VLAN数据</li><li>一般用于交换机之间互联</li></ul></li><li><strong>Hybrid接口</strong><ul><li>混合接口，包含Access和Trunk属性</li></ul></li><li><strong>QinQ</strong><ul><li>双层标签</li><li>一般用于运营商城域网</li></ul></li></ul><h3 id="生成树协议"><a href="#生成树协议" class="headerlink" title="生成树协议"></a>生成树协议</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul><li>当以太网中的设备或链路出现故障时，我们希望网络不至于中断。这往往需要在构建以太网时就增加好冗余链路，使得网络中任意两个站点可以通过两条甚至多条路径连通。</li><li>在冗余链路提高了网络可靠性的同时，也会产生网络环路。</li><li>网络环路会带来以下问题:<ul><li>广播风暴</li><li>主机收到重复的广播帧</li><li>交换机的帧交换表震荡(漂移)<br><img src="https://xinhaojin.github.io/picx-images-hosting/image.73tw63bo1s.jpg" alt="image"></li></ul></li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>生成树协议 (Spanning Tree Protocol) 能够在网络中存在二层环路时，通过逻辑阻塞(Block)特定端口，从而打破环路，并且在网络出现拓扑变更时及时收敛，保障网络冗余性。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>不论交换机之间采用怎样的物理连接，交换机都能够自动计算并构建一个逻辑上没有环路的网络，其逻辑拓扑结构必须是树型的（无逻辑环路）。</li><li>最终生成的树型逻辑拓扑要确保连通整个网络的每一个部分。</li><li>当首次连接交换机或网络物理拓扑发生变化时（有可能是人为改变或故障），交换机都将进行生成树的重新计算。</li></ul><h3 id="生成树算法"><a href="#生成树算法" class="headerlink" title="生成树算法"></a>生成树算法</h3><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><ul><li>网桥ID(Bridge ID)<ul><li>网桥ID一共8个字节，由2个字节优先级和6个字节的MAC地址构成。桥优先级默认为 32768，可以手工修改。</li><li>MAC地址为交换机背板MAC。</li></ul></li><li>路径开销(Path Cost)<ul><li>路径开销是指从网桥到指定端口的距离。</li><li>路径开销越小，说明该路径越短，优先级越高。</li><li>路径开销的默认值及取值范围由选定的开销算法决定，<strong>路径开销与端口带宽成反比</strong></li><li>华为设备路径开销标准有:802.1d-1998、802.1t及私有的legacy，默认为802.1t标准。</li></ul></li></ul><table><thead><tr><th>带宽</th><th>802.1t</th><th>802.1d</th></tr></thead><tbody><tr><td>10M</td><td>2,000,000</td><td>100</td></tr><tr><td>100M</td><td>200,000</td><td>19</td></tr><tr><td>1000M</td><td>20,000</td><td>4</td></tr><tr><td>10G</td><td>2,000</td><td>2</td></tr></tbody></table><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>选举根交换机：网桥ID最小者<br><img src="https://xinhaojin.github.io/picx-images-hosting/image.1sezleumuh.jpg" alt="image"></li><li>选举根端口（对于非根交换机而言）<ul><li>端口到根交换机的路径开销最小</li><li>对端网桥ID最小</li><li>对端端口ID最小<br><img src="https://xinhaojin.github.io/picx-images-hosting/image.839zjasx18.jpg" alt="image"></li></ul></li><li>选举指定端口并阻塞备用端口<ul><li>根交换机的所有端口都是根端口</li><li>根端口的对端端口一定是指定端口</li><li>转发端口到根交换机的路径成本最小</li><li>本端的网桥ID最小<br><img src="https://xinhaojin.github.io/picx-images-hosting/image.8ojn5mwj7m.jpg" alt="image"></li></ul></li></ol><h3 id="城域网MAN"><a href="#城域网MAN" class="headerlink" title="城域网MAN"></a>城域网MAN</h3><ul><li><p><strong>城域网 (MAN,Metropolitan Area Network)</strong></p><ul><li>覆盖城市或城镇区域的计算机网络</li><li>连接多个局域网 (LAN) 和广域网 (WAN)</li><li>提供比局域网更广的覆盖范围，但比广域网更小</li></ul></li><li><p><strong>QinQ 技术</strong></p><ul><li>802.1ad 或 Stacked VLAN</li><li>允许在一个 VLAN 标签内嵌套另一个 VLAN 标签</li><li>用于服务提供商网络中区分不同客户的流量</li><li>在城域网中实现不同服务类型的逻辑隔离</li></ul></li><li><p><strong>E-LAN 技术</strong></p><ul><li>802.1Q 的 VLAN 帧标记</li><li>双层标记，打了两层 VLAN 标签</li><li>定义为 IEEE802.1ad，也称为 QinQ 技术</li></ul></li><li><p><strong>QinQ 实现</strong></p><ul><li>用户 VLAN 嵌套在运营商城域以太网 VLAN 中传送</li></ul></li><li><p><strong>IEEE802.1ah (PBB)</strong></p><ul><li>也称为 MAC-IN-MAC 技术，允许在以太网帧中嵌套另一个以太网帧。这种技术主要用于服务提供商的网络中，以实现更高效的网络管理和服务隔离。MAC-in-MAC 是 IEEE 802.1ah 标准的一部分，也被称为 Provider Backbone Bridge (PBB)。<br><img src="https://xinhaojin.github.io/picx-images-hosting/image.86tlh1yqsn.jpg" alt="image"></li></ul></li></ul><p>1、什么是城域网？城域网比局域网传输距离远，能够覆盖整个城市。能够提供分组传输的数据、语音和视频等多媒体业务。更大的传输容量，更高的传输效率。<br>2、<code>&lt;mark&gt;</code>城域以太网：①以太网专用线、②以太网虚拟专线、③以太局域网服务（E-LAN）最看好 <code>&lt;/mark&gt;</code><br>3、无线城域网标准：WiMAX(802.16d固定、802.16e移动)、WiMAXII(802.16m4G)<br><code>&lt;mark&gt;</code>Q-in-Q:运营商网桥协议(PBP)IEEE802.1ad(基于技术是在以太帧中插入运营商VLAN标记字段)。MAC-in-MAC:运营商主干网桥(PBB)IEEE802.1ah <code>&lt;/mark&gt;</code><br><img src="/./%E8%BD%AF%E8%80%83%E4%B8%AD%E7%BA%A7%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A8%E9%9D%A2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC2%E7%89%88(5%E4%B8%87%E5%AD%97)+%E9%85%8D%E5%A5%97%E8%A7%86%E9%A2%91%E5%8F%8A%E8%AF%BE%E4%BB%B6/4f533cceb4c5ea3cc831d3b90888cdef.png" alt="在这里插入图片描述"></p><h2 id="第5章-无线通信网"><a href="#第5章-无线通信网" class="headerlink" title="第5章 无线通信网"></a>第5章 无线通信网</h2><h3 id="无线移动通信制式标准"><a href="#无线移动通信制式标准" class="headerlink" title="无线移动通信制式标准"></a>无线移动通信制式标准</h3><h4 id="3G标准"><a href="#3G标准" class="headerlink" title="3G标准"></a>3G标准</h4><ul><li><strong>W-CDMA (Wideband Code Division Multiple Access)</strong>：频分双工</li><li><strong>CDMA-2000 (Code Division Multiple Access 2000)</strong>：频分双工</li><li><strong>TD-SCDMA (Time Division Synchronous Code Division Multiple Access)</strong>：时分双工，中国特有</li><li><strong>WiMAX (Worldwide Interoperability for Microwave Access)</strong>：IEEE 802.16d固定</li><li><strong>WiMAX (Worldwide Interoperability for Microwave Access)</strong>：IEEE 802.16e移动</li></ul><h4 id="4G标准"><a href="#4G标准" class="headerlink" title="4G标准"></a>4G标准</h4><ul><li><strong>UMB (Ultra Mobile Broadband)</strong>：超移动宽带 (不使用)</li><li><strong>LTE Advanced (Long Term Evolution Advanced)</strong>：长期演进技术</li><li><strong>WiMAX II (Worldwide Interoperability for Microwave Access II)</strong>：全球微波互联接入, IEEE 802.16m</li></ul><h4 id="5G标准"><a href="#5G标准" class="headerlink" title="5G标准"></a>5G标准</h4><ul><li><strong>5G NR (New Radio)</strong>：5G的核心技术，定义了5G的无线接口和信号处理方式</li><li><strong>NSA (Non-Standalone)</strong>：非独立组网，5G NR依赖于现有的4G LTE网络基础设施</li><li><strong>SA (Standalone)</strong>：独立组网，5G NR完全独立于4G LTE网络，提供完整的5G功能</li><li><strong>DSS (Dynamic Spectrum Sharing)</strong>：动态频谱共享，允许在同一频段上同时支持4G和5G服务</li><li><strong>mmWave (Millimeter Wave)</strong>：毫米波，使用高频段（如30GHz至300GHz）的频谱，以实现极高的数据传输速率</li></ul><h4 id="相关重点"><a href="#相关重点" class="headerlink" title="相关重点"></a>相关重点</h4><p><strong>移动通信3G和4G的区别</strong></p><ul><li>3G基于时分复用的语音交换网，4G是基于IP的分组交换网<br><strong>网络切片</strong></li><li>是一种按需组网的方式，可以让运营商在统一的基础设施上分离出多个虚拟的端到端网络，每个网络切片从无线接入网到承载网再到核心网上进行逻辑隔离， 以适配各种各样类型的应用。在一个网络切片中， 至少可分为<strong>无线网子切片、承载网子切片和核心网子切片</strong>三部分。<br><strong>5G通信技术的载波调制技术</strong></li><li>F-OFDM（Flexible Orthogonal Frequency Division Multiplexing）灵活正交频分复用。</li></ul><h3 id="WLAN无线局域网"><a href="#WLAN无线局域网" class="headerlink" title="WLAN无线局域网"></a>WLAN无线局域网</h3><h4 id="无线网的三种通信技术"><a href="#无线网的三种通信技术" class="headerlink" title="无线网的三种通信技术"></a>无线网的三种通信技术</h4><ul><li>红外线</li><li>扩展频谱<ul><li>将信号散布到更宽的带宽上以减少发送阻塞和干扰的几率，</li><li>用伪随机序列对代表数据的模拟信号进行调制</li><li>扩频跳频技术有利于保密通信</li></ul></li><li>窄带微波</li></ul><p>WLAN主要使用扩展频谱技术：频率跳动扩频FHSS（蓝牙）和直接序列扩展频谱DSSS（WiFi）<br><strong>三类WLAN网络</strong></p><ol><li><strong>基础无线网络</strong>：由固定的无线接入点构成，设备通过这些接入点连接到网络。</li><li><strong>Ad Hoc网络</strong>：一种临时的对等网络，设备之间直接通信，没有固定的接入点，适用于军队自组网络、临时会议、临时业务等。。</li><li><strong>分布式无线系统</strong>：多个接入点组成的网络，提供更广的覆盖范围和无缝漫游体验，通过多个AC控制多个AP。<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240909/image.4g4fzwe8ze.jpg" alt="image"></li></ol><h4 id="WLAN频谱与信道"><a href="#WLAN频谱与信道" class="headerlink" title="WLAN频谱与信道"></a>WLAN频谱与信道</h4><p>ISM频段,美国联邦通讯委员会FCC定义，无授权限制</p><ul><li>工业频段：902-928MHz</li><li>科学频段：2.4-2.4835GHz</li><li>医疗频段：5.725-5.875GHz<br>2.4G频段<br>-13个信道，相邻信道相差5MHz,3个不重叠信道：1，6，11，不重叠信道间隔5个信道<br>5G+5.8G频段<br>-5个不重叠信道</li></ul><h3 id="802-11"><a href="#802-11" class="headerlink" title="802.11"></a>802.11</h3><h4 id="802-11技术标准对比"><a href="#802-11技术标准对比" class="headerlink" title="802.11技术标准对比"></a>802.11技术标准对比</h4><table><thead><tr><th>特性</th><th>802.11</th><th>802.11b</th><th>802.11a</th><th>802.11g</th><th>802.11n</th><th>802.11ac</th><th>802.11ax</th></tr></thead><tbody><tr><td>标准发布时间</td><td>1997</td><td>1999</td><td>1999</td><td>2003</td><td>2009</td><td>2012</td><td>2018</td></tr><tr><td>频率范围</td><td>2.4GHz</td><td>2.4GHz</td><td>5GHz</td><td>2.4GHz</td><td>2.4GHz &amp; 5GHz</td><td>5GHz</td><td>2.4GHz &amp; 5GHz</td></tr><tr><td>非重叠信道</td><td>3</td><td>3</td><td>5</td><td>3</td><td>3+5</td><td>5</td><td>3+5</td></tr><tr><td>调制技术</td><td>FHSS&#x2F;DSSS</td><td>CCK&#x2F;DSSS</td><td>OFDM</td><td>CCK&#x2F;OFDM</td><td>OFDM</td><td>OFDM</td><td>OFDMA</td></tr><tr><td>最高速率</td><td>2M</td><td>11M</td><td>54M</td><td>54M</td><td>600M</td><td>6900M</td><td>9600M</td></tr><tr><td>实际吞吐</td><td>200K</td><td>5M</td><td>22M</td><td>22M</td><td>100+M</td><td>900M</td><td>1G以上</td></tr><tr><td>兼容性</td><td>N&#x2F;A</td><td>与11g产品可互通</td><td><strong>与11b&#x2F;g不能互通</strong></td><td>与11b产品可互通</td><td>向下兼容802.11a&#x2F;b&#x2F;g</td><td>向下兼容802.11a&#x2F;n</td><td>向下兼容802.11a&#x2F;n</td></tr></tbody></table><p><strong>Wi-Fi标准的工作频段</strong></p><ul><li>2.4GHz: 802.11、802.11b和802.11g</li><li>5GHz：802.11a和802.11ac</li><li>2.4GHz+5GHz：802.11n和802.11ax。<br><strong>不同802.11标准的最大速率</strong></li><li>802.11n最大支持600Mbps，商用产品大多支持到300Mbps</li><li>802.11ax速率可达9600Mbps</li></ul><h4 id="802-11MAC层访问控制机制"><a href="#802-11MAC层访问控制机制" class="headerlink" title="802.11MAC层访问控制机制"></a>802.11MAC层访问控制机制</h4><ul><li><strong>CSMA&#x2F;CA (Carrier Sense Multiple Access with Collision Avoidance)</strong><ul><li>分布式协调功能</li><li>大家争用访问（有竞争）</li></ul></li><li><strong>RTS&#x2F;CTS (Request to Send&#x2F;Clear to Send)</strong><ul><li>信道预约机制</li><li>要发送先打报告，其他终端记录信道占用时间</li></ul></li><li><strong>PCF (Point Coordination Function)</strong><ul><li>点协调功能</li><li>由 AP 集中轮询所有终端</li><li>将发送权限轮流交给各个终端，类似令牌（无竞争）<br>以下是为您优化后的 Markdown 格式内容：</li></ul></li></ul><h4 id="802-11-标准定义的帧间间隔（IFS）"><a href="#802-11-标准定义的帧间间隔（IFS）" class="headerlink" title="802.11 标准定义的帧间间隔（IFS）"></a>802.11 标准定义的帧间间隔（IFS）</h4><ul><li><strong>IFS (Interframe Space)</strong><ul><li>最长的 IFS。</li><li>优先级最低。</li><li>用于异步帧竞争访问时延。</li></ul></li><li><strong>PIFS (Point Coordination Interframe Space)</strong><ul><li>中等长度的 IFS。</li><li>优先级居中。</li><li>在 PCF（点协调功能）操作中使用。</li></ul></li><li><strong>SIFS (Short Interframe Space)</strong><ul><li>最短的 IFS。</li><li>优先级最高。</li><li>用于需要立即响应的操作，如确认 ACK（Acknowledgment）。</li></ul></li></ul><h3 id="移动AD-Hoc网络"><a href="#移动AD-Hoc网络" class="headerlink" title="移动AD Hoc网络"></a>移动AD Hoc网络</h3><p>802.11定义AD Hoc网络是由无线移动节点组成的对等网， 无需网络基础设施的支持， 每个节点<strong>既是主机 , 又是路由器</strong> , 是一种MANNET(Mobile Ad Hoc Network)网络。</p><h4 id="MANET-网络特点"><a href="#MANET-网络特点" class="headerlink" title="MANET 网络特点"></a>MANET 网络特点</h4><ul><li>网络拓扑结构动态变化，不能使用传统路由协议，使用的是DSDV ( Destination- sequenced Distance Vector ) 路由协议</li><li>无线信道提供的带宽较小，信号衰落和噪声干扰的影响却很大。</li><li>无线终端携带的电源能量有限。</li><li>容易招致网络窃听、欺骗、拒绝服务等恶意攻击的威胁。</li></ul><h3 id="WLAN安全机制"><a href="#WLAN安全机制" class="headerlink" title="WLAN安全机制"></a>WLAN安全机制</h3><ul><li>SSID 访问控制<ul><li>隐藏 SSID，使未授权用户无法搜索到网络。</li></ul></li><li>物理地址过滤<ul><li>在无线路由器上设置 MAC 地址的黑白名单，控制设备访问权限。</li></ul></li><li>WEP 认证和加密<ul><li>认证：PSK 预共享密钥认证。</li><li>加密：使用 RC4 加密算法。</li></ul></li><li>WPA (802.11i 草案)<ul><li>认证：采用 802.1x 认证协议。</li><li>加密：<ul><li>RC4（增强版）</li><li>TKIP（临时密钥完整性协议，动态改变密钥）</li><li>支持完整性认证和防重放攻击。</li></ul></li></ul></li><li>WPA2 (802.11i)<ul><li>针对 WPA 进行优化。</li><li>加密协议：由 RC4 变为基于 AES 的 CCMP（计数器模式密码块链消息认证码协议）。</li></ul></li></ul><h2 id="第6章-网络互联与互联网"><a href="#第6章-网络互联与互联网" class="headerlink" title="第6章 网络互联与互联网"></a>第6章 网络互联与互联网</h2><h3 id="网路互联设备"><a href="#网路互联设备" class="headerlink" title="网路互联设备"></a>网路互联设备</h3><table><thead><tr><th>设备层次</th><th>设备名称</th><th>工作原理</th></tr></thead><tbody><tr><td>物理层</td><td>中继器、集线器</td><td>从一个端口进入的数据，进行信号放大后泛洪到所有端口，延长传输距离</td></tr><tr><td>数据链路层</td><td>网桥、交换机</td><td>基于目的MAC地址转发数据帧，每个端口间都有独立通道</td></tr><tr><td>网络层</td><td>路由器、三层交换机</td><td>基于目的IP地址转发数据包，可以跨VLAN通信</td></tr><tr><td>四层以上设备</td><td>网关</td><td>基于传输层、应用层进行控制</td></tr></tbody></table><p><strong>网关</strong></p><p>网关是互连网络中操作在<strong>OSI传输层之上</strong>的设施。</p><p><strong>网关的主要功能</strong></p><ul><li><strong>连接网络层之上执行不同协议的子网</strong>，组成异构型的互联网。</li><li><strong>网关能对互不兼容的高层协议进行转换</strong>。</li><li>为了实现异构型设备之间的通信，<strong>网关要对不同传输层、会话层、表示层、应用层协议进行翻译和转换</strong>。</li></ul><p><strong>网关类型</strong></p><table><thead><tr><th>网关类型</th><th>解释</th></tr></thead><tbody><tr><td><strong>协议网关</strong></td><td>协议网关通常在使用不同协议的网络区域间做<strong>协议转换</strong>（路由器）。</td></tr><tr><td><strong>应用网关</strong></td><td>应用网关是在使用不同数据格式间翻译数据的系统（数据中台）。</td></tr><tr><td><strong>安全网关</strong></td><td>安全网关是各种技术的融合，具有重要且独特的保护作用，其范围从协议级过滤到十分复杂的应用级过滤（防火墙）。</td></tr></tbody></table><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><h4 id="IPv4报文格式"><a href="#IPv4报文格式" class="headerlink" title="IPv4报文格式"></a>IPv4报文格式</h4><table><thead><tr><th>字段名</th><th>位数</th><th>描述</th></tr></thead><tbody><tr><td>版本（Version）</td><td>4</td><td>IP协议版本，IPv4为4</td></tr><tr><td>首部长度（IHL）</td><td>4</td><td>首部长度，最小值5，最大值15，单位4字节，即首部长度20-60字节</td></tr><tr><td>服务类型（ToS）</td><td>8</td><td>指定服务质量，如优先级、延迟、吞吐量和可靠性</td></tr><tr><td>总长度（Total Length）</td><td>16</td><td>整个IP报文的长度，包括首部和数据，单位是字节，最长65535，分片发送</td></tr><tr><td>标识（Identification）</td><td>16</td><td>用于辨识从同一数据包分片的所有片段</td></tr><tr><td>标志（Flags）</td><td>3</td><td>控制和标识分片的标志位</td></tr><tr><td>片偏移（Fragment Offset）</td><td>13</td><td>分片在原始数据报文中的位置，单位字节</td></tr><tr><td>生存时间（TTL）</td><td>8</td><td>数据报文在网络中可以通过的最大路由器数，每经过一个路由器减1</td></tr><tr><td>协议（Protocol）</td><td>8</td><td>指示数据应该上交给哪个高层协议进行处理，最常用的值为1 (ICMP ) 17 ( UDP ) 和6 ( TCP )</td></tr><tr><td>首部检验和（Checksum）</td><td>16</td><td>用于检测首部在传输过程中的错误，当TTL减一时 ， 头部校验和必须重新计算</td></tr><tr><td>源IP地址（Source Address）</td><td>32</td><td>发送方的IP地址</td></tr><tr><td>目的IP地址（Destination Address）</td><td>32</td><td>接收方的IP地址</td></tr><tr><td>选项（Options）</td><td>可变</td><td>用于支持网络测试、调试等功能</td></tr><tr><td>填充（Padding）</td><td>可变</td><td>确保首部长度是32位字的整数倍</td></tr></tbody></table><h4 id="IP数据报分片"><a href="#IP数据报分片" class="headerlink" title="IP数据报分片"></a>IP数据报分片</h4><p><img src="https://xinhaojin.github.io/picx-images-hosting/20240909/image.6m3ulqwk6a.jpg" alt="image"><br><img src="https://xinhaojin.github.io/picx-images-hosting/20240909/image.7egq3hgyly.jpg" alt="image"></p><h4 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h4><p>以下是IPv4地址分类的Markdown表格表示：</p><table><thead><tr><th>类别</th><th>地址范围</th><th>网络部分位数</th><th>主机部分位数</th><th>私有地址范围</th><th>用途描述</th></tr></thead><tbody><tr><td>A类</td><td>0.0.0.0 - 127.255.255.255</td><td>8位</td><td>24位</td><td>10.0.0.0 - 10.255.255.255</td><td>用于超大型网络</td></tr><tr><td>B类</td><td>128.0.0.0 - 191.255.255.255</td><td>16位</td><td>16位</td><td>无</td><td>用于大型网络</td></tr><tr><td>C类</td><td>192.0.0.0 - 223.255.255.255</td><td>24位</td><td>8位</td><td>192.168.0.0 - 192.168.255.255</td><td>用于中小型网络</td></tr><tr><td>D类</td><td>224.0.0.0 - 239.255.255.255</td><td>32位</td><td>无</td><td>无</td><td>用于多播</td></tr><tr><td>E类</td><td>240.0.0.0 - 255.255.255.255</td><td>32位</td><td>无</td><td>无</td><td>用于实验和未来使用</td></tr></tbody></table><h4 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h4><ul><li><p><strong>0.0.0.0</strong></p><ul><li>主机端：DHCP分配过程中，表示本机，如DHCP Discover广播报文使用 <code>0.0.0.0:68 -&gt; 255.255.255.255:67</code>。</li><li>服务器端：表示本机所有IPv4地址，服务监听在 <code>0.0.0.0</code> 时可通过任意IP访问。</li><li>路由：表示默认路由，用于路由表中无匹配项时。</li></ul></li><li><p><strong>255.255.255.255</strong></p><ul><li>受限广播地址，同一广播域内的所有主机都会接收。</li></ul></li><li><p><strong>169.254.0.0&#x2F;16</strong></p><ul><li>DHCP故障或超时时，系统自动分配的链接本地地址，不能上网。</li></ul></li><li><p><strong>127.0.0.0&#x2F;8 (127.0.0.1 - 127.255.255.255)</strong></p><ul><li>本地环回地址，用于测试TCP&#x2F;IP协议栈是否正常。</li></ul></li><li><p><strong>RFC1918 私有IP地址</strong></p><ul><li><strong>A类</strong>：10.0.0.0&#x2F;8 (10.0.0.1 - 10.255.255.255)</li><li><strong>B类</strong>：172.16.0.0&#x2F;12 (172.16.0.1 - 172.31.255.255)</li><li><strong>C类</strong>：192.168.0.0&#x2F;16 (192.168.0.1 - 192.168.255.255)</li></ul></li><li><p><strong>常见组播地址</strong></p><ul><li>所有主机：224.0.0.1</li><li>所有路由器：224.0.0.2</li><li>所有运行OSPF的路由器：224.0.0.5</li><li>OSPF的DR和BDR的组播接收地址：224.0.0.6</li><li>RIPv2组播更新地址：224.0.0.9</li><li>VRRP组播地址：224.0.0.18</li></ul></li></ul><h3 id="ARP地址解析协议"><a href="#ARP地址解析协议" class="headerlink" title="ARP地址解析协议"></a>ARP地址解析协议</h3><p>ARP（Address Resolution Protocol）地址解析协议，用于在同一局域网（LAN）中解析IP地址对应的MAC地址。</p><h4 id="ARP协议工作流程"><a href="#ARP协议工作流程" class="headerlink" title="ARP协议工作流程"></a>ARP协议工作流程</h4><ol><li><strong>确定目标IP地址</strong>：主机A要发送数据给主机B。</li><li><strong>检查ARP缓存</strong>：主机A查找本地ARP缓存。</li><li><strong>ARP请求</strong>：缓存中未找到，发送ARP请求广播。</li><li><strong>ARP响应</strong>：主机B匹配IP地址后，回复其MAC地址。</li><li><strong>更新ARP缓存</strong>：主机A收到响应并更新ARP缓存。</li><li><strong>数据传输</strong>：使用解析出的MAC地址发送数据。</li><li><strong>定期更新</strong>：ARP缓存条目定期更新或过期。</li></ol><p><strong>常见报文封装格式</strong></p><ul><li>ARP封装在以太网中</li><li>ICMP封装在IP中</li><li>OSPF封装在IP中</li><li>RIP封装在UDP中</li><li>BGP封装在TCP中。</li></ul><h3 id="ICMP控制报文协议"><a href="#ICMP控制报文协议" class="headerlink" title="ICMP控制报文协议"></a>ICMP控制报文协议</h3><p>ICMP（Internet Control Message Protocol）控制报文协议，协议号为1 , 封装在IP报文中, 用来传递差错、控制、查询等信息, 典型应用 ping&#x2F; tracert依赖ICMP报文。</p><h4 id="ICMP报文类型与代码"><a href="#ICMP报文类型与代码" class="headerlink" title="ICMP报文类型与代码"></a>ICMP报文类型与代码</h4><h3 id="ICMP报文类型与代码-1"><a href="#ICMP报文类型与代码-1" class="headerlink" title="ICMP报文类型与代码"></a>ICMP报文类型与代码</h3><table><thead><tr><th>类型</th><th>代码</th><th>用途</th><th>查询类</th><th>差错类</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>Echo Reply - 回显应答 (Ping 应答)</td><td>√</td><td></td></tr><tr><td>3</td><td>0</td><td>Network Unreachable - 网络不可达</td><td></td><td>√</td></tr><tr><td>3</td><td>1</td><td>Host Unreachable - 主机不可达</td><td></td><td>√</td></tr><tr><td>3</td><td>2</td><td>Protocol Unreachable - 协议不可达</td><td></td><td>√</td></tr><tr><td>3</td><td>3</td><td>Port Unreachable - 端口不可达</td><td></td><td>√</td></tr><tr><td>3</td><td>4</td><td>Fragmentation needed but no frag bit set - 需要进行分片但设置不分片比特</td><td></td><td>√</td></tr><tr><td>3</td><td>13</td><td>Communication administratively prohibited by filtering - 由于过滤, 通信被强制禁止</td><td></td><td>√</td></tr><tr><td>4</td><td>0</td><td>Source Quench - 源抑制报文</td><td></td><td>√</td></tr><tr><td>5</td><td>1</td><td>Redirect for Host - 对主机重定向</td><td></td><td>√</td></tr><tr><td>8</td><td>0</td><td>Echo Request - 回显请求 (Ping 请求)</td><td>√</td><td></td></tr><tr><td>11</td><td>0</td><td>TTL equals 0 during transit - 传输期间生存时间为0</td><td></td><td>√</td></tr><tr><td>11</td><td>1</td><td>TTL equals 0 during reassembly - 在数据报组装期间生存时间为0</td><td></td><td>√</td></tr><tr><td>12</td><td>0</td><td>IP header bad (catchall error) - 坏的IP首部 (包括各种差错)</td><td></td><td>√</td></tr></tbody></table><h3 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h3><h4 id="传输控制协议-TCP"><a href="#传输控制协议-TCP" class="headerlink" title="传输控制协议 (TCP)"></a>传输控制协议 (TCP)</h4><ul><li>面向连接：在数据传输前建立连接，确保数据传输的稳定性。</li><li>可靠传输：通过确认和重传机制，确保数据正确无误地到达目的地。</li><li>流控及窗口机制：通过流量控制和拥塞控制，避免网络拥塞和数据丢失。</li><li>典型应用<ul><li>WEB浏览器：用于客户端与服务器之间的稳定数据传输。</li><li>电子邮件文件传输程序：用于确保邮件和附件的可靠传输。</li></ul></li></ul><h4 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h4><p><strong>首部固定20字节</strong></p><table><thead><tr><th>字段名</th><th>位数</th><th>描述</th></tr></thead><tbody><tr><td>源端口号</td><td>16位</td><td>标识发送方的端口号</td></tr><tr><td>目的端口号</td><td>16位</td><td>标识接收方的端口号</td></tr><tr><td>序列号</td><td>32位</td><td>用于确保数据的有序传输，接收方可以依据序列号重新组装数据</td></tr><tr><td>确认号</td><td>32位</td><td>用于确认收到的数据，是下一个期望接收的序列号</td></tr><tr><td>数据偏移</td><td>4位</td><td>指示TCP头部的长度，即数据区开始之前的字节数</td></tr><tr><td>保留</td><td>6位</td><td>保留给将来使用，目前应置为0</td></tr><tr><td>控制位</td><td>6位</td><td>包含SYN, ACK, FIN, RST, PSH, URG等标志位</td></tr><tr><td>窗口大小</td><td>16位</td><td>用于流量控制，指示发送方可以发送的数据量</td></tr><tr><td>检验和</td><td>16位</td><td>用于检测整个TCP段在传输过程中是否有错</td></tr><tr><td>紧急指针</td><td>16位</td><td>仅当URG控制位为1时才有意义，指出紧急数据的结束位置</td></tr><tr><td>选项</td><td>可变</td><td>提供额外的功能性，如MSS, 窗口缩放因子，SACK，时间戳等</td></tr><tr><td>填充</td><td>可变</td><td>确保TCP头部的长度是32位字的整数倍</td></tr></tbody></table><p><strong>TCP伪首部</strong></p><p>TCP 伪首部（pseudo-header）是一个在 TCP 报文计算校验和时使用的临时构造，它不是 TCP 报文的实际组成部分，也不会在网络中传输。它仅在发送端用于计算校验和，并在接收端用于校验，长度12字节。</p><table><thead><tr><th>字段名</th><th>长度</th><th>描述</th></tr></thead><tbody><tr><td>源IP地址</td><td>32位</td><td>发送方的IP地址</td></tr><tr><td>目的IP地址</td><td>32位</td><td>接收方的IP地址</td></tr><tr><td>保留</td><td>8位</td><td>通常置为0</td></tr><tr><td>协议</td><td>8位</td><td>指示上层协议类型，TCP为6</td></tr><tr><td>TCP报文长度</td><td>16位</td><td>指示TCP报文的总长度，包括TCP头部和数据</td></tr></tbody></table><h4 id="用户数据报协议-UDP"><a href="#用户数据报协议-UDP" class="headerlink" title="用户数据报协议 (UDP)"></a>用户数据报协议 (UDP)</h4><ul><li>面向无连接：不需要建立连接，直接发送数据包。</li><li>不可靠传输：不保证数据包的到达顺序或是否到达。</li><li>尽力而为的传输：网络繁忙或拥塞时，数据包可能会丢失。</li><li>典型应用<ul><li>域名系统 (DNS)：快速查询域名与IP地址的映射，不需要可靠传输。</li><li>视频应用：实时视频流，对延迟敏感，允许一定程度的数据丢失。</li><li>IP语音 (VoIP)：实时语音通信，优先保证通话的实时性。</li></ul></li></ul><h4 id="UDP报文格式"><a href="#UDP报文格式" class="headerlink" title="UDP报文格式"></a>UDP报文格式</h4><p>首部固定8个字节</p><table><thead><tr><th>字段名</th><th>位数</th><th>描述</th></tr></thead><tbody><tr><td>源端口号</td><td>16位</td><td>标识发送方的端口号，用于回复消息</td></tr><tr><td>目的端口号</td><td>16位</td><td>标识接收方的端口号</td></tr><tr><td>长度</td><td>16位</td><td>指示整个UDP报文的长度，包括UDP头部和UDP数据，单位是字节。如果长度字段为0，则表示报文只包含头部</td></tr><tr><td>检验和</td><td>16位</td><td>用于检测UDP报文在传输过程中是否有错。这个字段是可选的，如果设置为0，则表示没有进行检验和计算</td></tr><tr><td>数据</td><td>可变</td><td>实际传输的数据内容，长度由长度字段指定</td></tr></tbody></table><h4 id="TCP握手挥手"><a href="#TCP握手挥手" class="headerlink" title="TCP握手挥手"></a>TCP握手挥手</h4><p><img src="https://xinhaojin.github.io/picx-images-hosting/20240909/image.73twadmpgb.jpg" alt="image"><br><img src="https://xinhaojin.github.io/picx-images-hosting/20240909/image.54xpk1l50t.jpg" alt="image"></p><h4 id="流量控制和拥塞控制"><a href="#流量控制和拥塞控制" class="headerlink" title="流量控制和拥塞控制"></a>流量控制和拥塞控制</h4><ul><li>流量控制<ul><li>TCP滑动窗口<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240909/image.54xpk1l50t.jpg" alt="image"></li></ul></li><li>拥塞控制<ul><li>慢开始和拥塞避免<br><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_28.png" alt="image"><br><img src="https://xinhaojin.github.io/picx-images-hosting/20240909/image.3gocmz41ne.jpg" alt="image"></li></ul></li></ul><h3 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h3><table><thead><tr><th>特性</th><th>静态路由</th><th>默认路由</th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>手动配置的路由信息，指定数据包如何从源到目的地</td><td>一种特殊的静态路由，用于处理未知目的地的数据包</td></tr><tr><td><strong>持久性</strong></td><td>网络拓扑变化时不会自动改变，需要手动更新</td><td>作为路由表的一部分，不会因网络变化而自动改变</td></tr><tr><td><strong>配置</strong></td><td>在路由器或计算机的路由表中手动设置</td><td>设置一个默认网关，用于转发未匹配特定路由的数据包</td></tr><tr><td><strong>适用场景</strong></td><td>适用于网络规模较小、拓扑变化不大的环境</td><td>常用于连接到更大的网络或作为备份路由</td></tr><tr><td><strong>优点</strong></td><td>简单直接   无需额外路由协议处理   精确控制数据包路径</td><td>简化路由表   减少配置复杂性   为未知目的地提供出路</td></tr><tr><td><strong>缺点</strong></td><td>管理大型或动态网络困难   手动维护耗时</td><td>可能不是最优路径   依赖于默认网关配置</td></tr></tbody></table><ul><li><p><strong>内部网关协议 (IGP)</strong></p><ul><li>RIP (Routing Information Protocol)：路由信息协议</li><li>OSPF (Open Shortest Path First)：开放最短路径优先</li><li>IS-IS (Intermediate System-Intermediate System)：中间系统-中间系统</li></ul></li><li><p><strong>外部网关协议 (EGP)</strong></p><ul><li>BGP (Border Gateway Protocol)：边界网关协议</li></ul></li><li><p><strong>距离矢量协议</strong></p><ul><li>RIP (Routing Information Protocol)：路由信息协议</li></ul></li><li><p><strong>链路状态协议</strong></p><ul><li>OSPF (Open Shortest Path First)：开放最短路径优先</li><li>IS-IS (Intermediate System-Intermediate System)：中间系统-中间系统<br>以下是为您优化后的 Markdown 格式：</li></ul></li></ul><h4 id="RIP-协议"><a href="#RIP-协议" class="headerlink" title="RIP 协议"></a>RIP 协议</h4><ul><li><strong>基本信息</strong><ul><li>全称：Routing Information Protocol（路由信息协议）</li><li>类型：内部网关协议（IGP），距离矢量路由协议</li></ul></li><li><strong>特点</strong><ul><li>优先级：在华为设备上，RIP 的路由优先级为 100。</li><li>跳数限制：最大支持 15 跳；16 跳表示不可达。</li><li>适用场景：一般用于小型网络。</li></ul></li><li><strong>定时器</strong><ul><li>更新间隔：30 秒周期性更新路由表。</li><li>失效时间：180 秒无更新则认为路由不可达。</li><li>删除时间：300 秒后从路由表中删除该路由。</li></ul></li><li><strong>其他特性</strong><ul><li>支持等价负载均衡和链路冗余。</li><li>使用 UDP 520 端口进行路由信息的传输。<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240910/image.1lbrvlcc4r.png" alt="image">| 特性                               | RIPv1                | RIPv2                |<br>| ———————————- | ——————– | ——————– |<br>| 类型                               | 有类，不携带子网掩码 | 无类，携带子网掩码   |<br>| 更新方式                           | 广播更新             | 组播更新 (224.0.0.9) |<br>| 更新周期                           | 周期性更新 (30秒)    | 触发更新             |<br>| 支持特性                           | 不支持VLSM、CIDR     | 支持VLSM、CIDR       |<br>| 认证                               | 不提供认证           | 提供明文和MD5认证    |<br>| 以下是为您优化后的 Markdown 格式： |                      |                      |</li></ul></li></ul><p><strong>RIP 防环机制</strong></p><ul><li>最大跳数<ul><li>路由条目在发送时会自增 1 跳。</li><li>最大跳数为 16 跳，超过 16 跳的路由将被视为不可达。</li></ul></li><li>水平分割<ul><li>路由信息不会发送回它原始的来源，防止路由信息在两个路由器间循环。</li></ul></li><li>反向毒化的水平分割<ul><li>从邻居学习到的路由信息会被设置为 16 跳（不可达），然后重新发送给该邻居。</li><li>这是一种更为严格的水平分割，确保不会形成路由环路。</li></ul></li><li>抑制定时器和触发更新<ul><li><strong>抑制定时器</strong>：当路由信息发生变化时，会等待一段时间（通常为 180 秒），如果没有收到更好的路由信息，则接受该路由。</li><li><strong>触发更新</strong>：当路由表发生变化时，立即发送更新，而不是等待下一个周期性更新时间。</li><li>这两种机制共同作用，可以减少路由环路的风险。</li></ul></li></ul><p>RIP 通过这些机制来防止路由环路的产生，确保网络的稳定性。</p><h4 id="OSPF-协议"><a href="#OSPF-协议" class="headerlink" title="OSPF 协议"></a>OSPF 协议</h4><ul><li><strong>全称</strong>：Open Shortest Path First（开放式最短路径优先协议）</li><li><strong>类型</strong>：内部网关协议，链路状态路由协议</li><li><strong>开放性</strong>：意味着公有，任何厂商都能支持 OSPF，是当前业界使用最广泛的 IGP</li><li><strong>华为设备优先级</strong>：Internal 10, External 150</li></ul><p><strong>工作原理</strong></p><ul><li>路由器之间交互的是链路状态信息，而非直接交互路由</li><li>路由器了解整个网络的拓扑结构</li><li>使用 SPF 算法（Dijkstra 算法）计算到达目的地的最短路径</li></ul><p><strong>特点</strong></p><ul><li>支持 VLSM（可变长度子网掩码）</li><li>支持手工路由汇总</li><li>适应范围广，适用于各种规模的网络</li><li>快速收敛：网络拓扑变化后立即发送更新报文，实现快速同步</li><li>无自环：使用 SPF 算法，不会产生环路</li><li>区域划分：网络可划分为多个区域，减小路由器资源消耗和网络带宽占用</li></ul><h4 id="BGP-协议"><a href="#BGP-协议" class="headerlink" title="BGP 协议"></a>BGP 协议</h4><p>BGP（Border Gateway Protocol，边界网关协议）是一种外部网关协议，主要用于不同自治系统（AS）之间的路由寻址，以寻找最佳路由。</p><ul><li><p><strong>核心特性</strong></p><ul><li>用途：用于不同自治系统之间的路由选择。</li><li>协议版本：最新版本是 BGP4，BGP4+支持 IPv6。</li><li>端口：通过 TCP 179 端口建立连接。</li><li>类型：路径矢量协议，与距离矢量协议不同，BGP 考虑整体路径信息。</li><li>支持：支持 VLSM（可变长度子网掩码）和 CIDR（无类别域间路由）。</li></ul></li><li><p><strong>工作原理</strong></p><ul><li>建立连接：使用 <code>Open</code> 消息建立邻居关系。</li><li>周期性探测：通过 <code>Keepalive</code> 消息周期性探测邻居的存活状态。</li><li>BGP 发言人：每个自治系统至少选择一个路由器作为“BGP 发言人”，负责与其他自治系统的路由器交换路由信息。</li><li>增量更新：支持增量更新，即仅发送变化的路由信息。</li><li>认证：支持对邻居路由器的认证，增强安全性。</li><li>可靠传输：采用可靠传输机制，确保路由信息的准确性，防止路由环路。</li><li>策略选路：支持基于策略的路由选择，允许网络管理员根据特定需求定制路由决策。</li></ul></li><li><p><strong>应用场景</strong></p><ul><li>互联网服务提供商：用于 ISP 网络，管理大量跨自治系统的路由。</li><li>大型企业网络：连接企业内部网络与全球互联网。<br><strong>BGP报文</strong>| 报文类型                 | 功能描述                        | 备注（类比） |<br>| ———————— | ——————————- | ———— |<br>| 打开 (Open)              | 建立邻居关系                    | 建立外交     |<br>| 更新 (Update)            | 发送新的路由信息                | 更新外交信息 |<br>| 保持活动状态 (Keepalive) | 对Open的应答&#x2F;周期性确认邻居关系 | 保持外交活动 |<br>| 通告 (Notification)      | 报告检测到的错误                | 发布外交通告 |</li></ul></li></ul><p><strong>BGP选路规则</strong></p><ol><li><strong>下一跳检查</strong>：丢弃下一跳不可达的路由。</li><li><strong>Preference</strong>：优选Preference值最高的路由（私有属性，仅本地有效）。</li><li><strong>Local Preference</strong>：优选Local Preference值最高的路由。</li><li><strong>路由来源</strong>：优选手动聚合 &gt; 自动聚合 &gt; network声明 &gt; import引入 &gt; 从对等体学到的路由。</li><li><strong>AS Path长度</strong>：优选AS Path最短的路由。</li><li><strong>起源类型</strong>：起源类型IGP &gt; EGP &gt; Incomplete。</li><li><strong>MED（多出口鉴别器）</strong>：对于来自同一AS的路由，优选MED值最小的。</li><li><strong>EBGP与IBGP</strong>：优选从EBGP学来的路由（EBGP &gt; IBGP）。</li><li><strong>IGP成本</strong>：优选AS内部IGP成本最小的路由。</li><li><strong>Cluster List长度</strong>：优选Cluster List最短的路由。</li><li><strong>Originator ID</strong>：优选Originator ID最小的路由。</li><li><strong>Router ID</strong>：优选Router ID最小的路由器发布的路由。</li><li><strong>邻居IP地址</strong>：优选IP地址最小的邻居学来的路由。</li></ol><h4 id="ISIS-协议"><a href="#ISIS-协议" class="headerlink" title="ISIS 协议"></a>ISIS 协议</h4><p>IS-IS（Intermediate System to Intermediate System，中间系统到中间系统）是一种内部网关协议（IGP），在电信运营商网络中得到广泛应用。</p><ul><li><p><strong>基本特性</strong></p><ul><li>链路状态路由协议：和 OSPF 相似，通过链路状态数据库及 SPF 算法来计算路由。</li><li>运行层级：直接在链路层之上运行，区别于多数协议在 IP 层运行。</li><li>分层结构：具备两层结构，即 Level-1（L1）和 Level-2（L2）。</li></ul></li><li><p><strong>分层结构</strong></p><ul><li><strong>Level-1 (L1)</strong><ul><li>普通区域（Area）：负责单个区域内的路由。</li></ul></li><li><strong>Level-2 (L2)</strong><ul><li>骨干区域（Backbone）：由所有 Level-2 路由器（包括同时作为 L1 和 L2 的路由器）构成，负责区域间的路由。</li></ul></li></ul></li><li><p><strong>工作原理</strong></p><ul><li>Hello 协议：利用 Hello 协议来发现及维护与毗邻节点的关系。</li><li>SPF 算法：L1 和 L2 路由器均运行相同的 SPF 算法，以计算到达目的地的最优路径。</li><li>多实例参与：一个路由器能够同时参与 L1 和 L2，实现区域间的路由功能。</li></ul></li></ul><h2 id="第7章-下一代互联网IPV6"><a href="#第7章-下一代互联网IPV6" class="headerlink" title="第7章 下一代互联网IPV6"></a>第7章 下一代互联网IPV6</h2><h3 id="IPv4和IPv6对比"><a href="#IPv4和IPv6对比" class="headerlink" title="IPv4和IPv6对比"></a>IPv4和IPv6对比</h3><table><thead><tr><th>对比方面</th><th>IPv4 存在的问题</th><th>IPv6 的主要改进</th></tr></thead><tbody><tr><td>网络地址</td><td>32 位，提供 43 亿个地址，数量短缺</td><td>128 位，大幅增加地址数量</td></tr><tr><td>地址分配</td><td>分配不合理，约 1&#x2F;3 曾被美国占用，大型企业拥有地址多</td><td>-</td></tr><tr><td>路由速度</td><td>随着网络规模扩大，路由表庞大，查找速度慢</td><td>-</td></tr><tr><td>头部字段</td><td>多达 13 个字段，复杂</td><td>只有 8 个字段，简化</td></tr><tr><td>安全功能</td><td>没有加密、认证等机制</td><td>集成 IPSec，提供加密和认证功能</td></tr><tr><td>业务模式支持</td><td>没有扩展字段</td><td>支持多报头嵌套</td></tr><tr><td>分段处理</td><td>-</td><td>只能由源发节点分段，中间路由器不能分段，简化路由处理</td></tr><tr><td>MTU 发现</td><td>-</td><td>改进机制，帮助确定最大传输单元，避免分片</td></tr><tr><td>扩展性</td><td>-</td><td>支持多报头嵌套，增强扩展性</td></tr><tr><td>路由效率</td><td>-</td><td>减少头部字段，简化处理流程</td></tr></tbody></table><h3 id="IPV6报文格式"><a href="#IPV6报文格式" class="headerlink" title="IPV6报文格式"></a>IPV6报文格式</h3><p><img src="https://xinhaojin.github.io/picx-images-hosting/20240910/image.8ojnba6u85.jpg" alt="image"></p><ul><li>默认头部</li></ul><table><thead><tr><th>字段</th><th>长度（位）</th><th>说明</th></tr></thead><tbody><tr><td>版本（Version）</td><td>4</td><td>固定值 6，表示 IPv6 协议</td></tr><tr><td>流量类别（Traffic Class）</td><td>8</td><td>类似于 IPv4 中的服务类型（TOS）字段，用于区分不同的流量类型和优先级</td></tr><tr><td>流标签（Flow Label）</td><td>20</td><td>用于标识特定的数据流，为实现 QoS 提供支持</td></tr><tr><td>有效载荷长度（Payload Length）</td><td>16</td><td>表示 IPv6 报文除头部以外的数据部分的长度</td></tr><tr><td>下一个头部（Next Header）</td><td>8</td><td>标识紧跟在 IPv6 头部后面的扩展头部或上层协议的类型</td></tr><tr><td>跳限制（Hop Limit）</td><td>8</td><td>类似于 IPv4 中的 TTL（生存时间）字段，每经过一个路由器减 1，防止数据包在网络中无限循环</td></tr><tr><td>源地址（Source Address）</td><td>128</td><td>发送方的 IPv6 地址</td></tr><tr><td>目的地址（Destination Address）</td><td>128</td><td>接收方的 IPv6 地址</td></tr></tbody></table><ul><li>扩展头部</li></ul><table><thead><tr><th>下一头部编号</th><th>下一头部类型</th><th>解释</th></tr></thead><tbody><tr><td>0</td><td>Hop-by-Hop Options Header</td><td>逐跳选项：这些信息由沿途各个路由器处理</td></tr><tr><td>6</td><td>TCP (Upper Layer)</td><td>该IPv6报文的上层封装是TCP</td></tr><tr><td>17</td><td>UDP (Upper Layer)</td><td>该IPv6报文的上层封装是UDP</td></tr><tr><td>43</td><td>Routing Header</td><td>路由选择头：给出一个路由器地址列表，类似于IPv4的松散源路由和路由记录</td></tr><tr><td>44</td><td>Fragment Header</td><td>分段：处理数据报的分段问题</td></tr><tr><td>50</td><td>Encapsulating Security Payload</td><td>ESP：封装安全载荷，跟IPSec类似</td></tr><tr><td>51</td><td>Authentication Header</td><td>AH：认证头，跟IPSec类似</td></tr><tr><td>60</td><td>Destination Options</td><td>目标选项：选项中的信息由目标节点检查处理</td></tr></tbody></table><h3 id="IPV6地址"><a href="#IPV6地址" class="headerlink" title="IPV6地址"></a>IPV6地址</h3><p>IPv6 地址是 128 位长，通常采用冒号分隔的十六进制数表示，分为 8 组。</p><ul><li><strong>表示方法</strong><ul><li>标准表示：例如，<code>8000:0000:0000:0000:0123:4567:89AB:CDEF</code>。</li></ul></li><li><strong>简化规则</strong><ul><li>省略前导零：每个字段前的 0 可以省略，如 <code>0123</code>可以简写为 <code>123</code>。</li><li>压缩全零字段：一个或多个连续的全零字段可以用一对冒号 <code>::</code>来代替。</li><li>限制：双冒号 <code>::</code>在一个地址中只能使用一次，以避免歧义。</li></ul></li><li><strong>示例简化</strong><ul><li>地址 <code>8000:0000:0000:0000:0123:4567:89AB:CDEF</code>可以简写为 <code>8000::123:4567:89AB:CDEF</code>。</li></ul></li><li><strong>IPv4 兼容地址</strong><ul><li>IPv4 兼容地址的 IPv6 表示方法，例如 <code>::192.168.10.1</code>。</li><li>这种表示方法将 IPv4 地址直接嵌入到 IPv6 地址中。</li></ul></li><li><strong>注意事项</strong><ul><li>有效零位不可省略。</li><li>双冒号 <code>::</code>仅用于压缩连续的全零字段，且在一个 IPv6 地址中只能使用一次。</li></ul></li></ul><p>以下是为您优化后的 Markdown 格式：</p><h4 id="IPv6-地址分类"><a href="#IPv6-地址分类" class="headerlink" title="IPv6 地址分类"></a>IPv6 地址分类</h4><ul><li><p><strong>单播地址</strong></p><ul><li><strong>可聚合全球单播地址</strong><ul><li>全球有效：相当于 IPv4 的公用地址。</li><li>前缀：以 <code>001</code> 开头。</li></ul></li><li><strong>链路本地地址</strong><ul><li>用途：用于同一链路上相邻节点间的通信。</li><li>前缀：以 <code>1111 1110 10</code> 开头。</li><li>生成：结合 MAC 地址自动生成。</li></ul></li><li><strong>站点本地地址</strong><ul><li>用途：相当于 IPv4 中的私网地址。</li><li>前缀：以 <code>1111 1110 11</code> 开头。</li><li>助记：1 聚（全球单播）2 恋（链路本地）3 占（站点本地）。</li></ul></li></ul></li><li><p><strong>组播地址</strong></p><ul><li>广播替代：IPv6 中没有广播地址，广播功能由组播代替。</li><li>前缀：以 <code>1111 1111</code> 开头，即 FF00 开头。</li></ul></li><li><p><strong>任意播地址</strong></p><ul><li>标识：表示一组接口的标识符，通常路由到最近的接口。</li><li>使用限制：<ul><li>不能用作源地址，只能作为目标地址。</li><li>不能指定给 IPv6 主机，只能指定给 IPv6 路由器。</li></ul></li></ul></li></ul><h4 id="IPv4地址与IPv6特殊地址对比"><a href="#IPv4地址与IPv6特殊地址对比" class="headerlink" title="IPv4地址与IPv6特殊地址对比"></a>IPv4地址与IPv6特殊地址对比</h4><table><thead><tr><th>IPv4地址</th><th>IPv6地址</th></tr></thead><tbody><tr><td>点分十进制表示</td><td>带冒号的十六进制表示，0可以压缩</td></tr><tr><td>分为A、B、C、D、E 5类</td><td>不分类</td></tr><tr><td>组播地址 <code>224.0.0.0/4</code></td><td>组播地址 <code>FF00::/8</code></td></tr><tr><td>广播地址（主机部分全为1）</td><td>任意播（限于子网内部）</td></tr><tr><td>默认地址 <code>0.0.0.0</code></td><td>不确定地址 <code>::</code></td></tr><tr><td>回环地址 <code>127.0.0.1</code></td><td>回环地址 <code>::1</code></td></tr><tr><td>公共地址</td><td>可聚合全球单播地址 <code>FP=001</code></td></tr><tr><td>私有地址 <code>10.0.0.0/8</code> <code>127.16.0.0/12</code> <code>192.168.0.0/16</code></td><td>站点本地地址 <code>FEC0::/48</code></td></tr><tr><td>自动专用IP地址 <code>169.254.0.0/16</code></td><td>链路本地地址 <code>FE80::/48</code></td></tr><tr><td></td><td>6to4隧道地址 <code>2002::/16</code></td></tr></tbody></table><h4 id="IPv6路由协议"><a href="#IPv6路由协议" class="headerlink" title="IPv6路由协议"></a>IPv6路由协议</h4><ul><li><strong>主要路由协议</strong><ul><li><strong>RIPng</strong>：RIP 的 IPv6 版本，用于小型网络。</li><li><strong>OSPFv3</strong>：OSPF 的 IPv6 版本，支持链路状态路由。</li><li><strong>BGP4+</strong>：BGP 的 IPv6 扩展，支持 IPv6 路由。</li></ul></li><li><strong>DHCPv6 配置</strong><ul><li><strong>有状态自动配置</strong><ul><li>DHCPv6 直接分配前缀和接口 ID、网关和 DNS 等。</li><li>提供完整的网络配置信息。</li></ul></li><li><strong>无状态自动配置</strong><ul><li>路由器接口前缀 + 终端 EUI-64。</li><li>仅提供部分网络配置信息，如 IP 地址前缀。</li></ul></li></ul></li><li><strong>ICMPv6</strong><ul><li><strong>邻居发现</strong><ul><li>新增的邻居发现功能，代替了 IPv4 中的 ARP 协议。</li><li>用于地址解析、路由器发现和参数发现。</li></ul></li></ul></li><li><strong>功能概述</strong><ul><li><strong>RIPng</strong> 和 <strong>OSPFv3</strong> 提供内部网关协议支持，而 <strong>BGP4+</strong> 用于自治系统间的路由。</li><li><strong>DHCPv6</strong> 的两种配置模式允许灵活的 IP 地址和网络参数分配。</li><li><strong>ICMPv6</strong> 增强了网络诊断和自动配置能力，是 IPv6 网络中不可或缺的部分。</li></ul></li></ul><h2 id="第8章-网络安全"><a href="#第8章-网络安全" class="headerlink" title="第8章 网络安全"></a>第8章 网络安全</h2><h3 id="网络安全基础"><a href="#网络安全基础" class="headerlink" title="网络安全基础"></a>网络安全基础</h3><h4 id="网络安全威胁类型"><a href="#网络安全威胁类型" class="headerlink" title="网络安全威胁类型"></a>网络安全威胁类型</h4><ul><li>窃听：例如搭线窃听、安装通信监视器和读取网上的信息等。</li><li>假冒：当一个实体假扮成另一个实体进行网络活动时就发生了假冒。</li><li>重放：重复发送一份报文或报文的一部分，以便产生一个被授权效果。（随机数、时间戳）</li><li>流量分析：对网上信息流观察和分析推断出网上传输的有用信息。</li><li>数据完整性破坏：有意或无意地修改或破坏信息系统，或者在非授权和不能监测的方式下对数据进行修改。</li><li>拒绝服务 DoS：当一个授权实体不能获得应有的对网络资源的访问。SYN-Flooding</li><li>资源的非授权使用：即与所定义的安全策略不一致的使用。</li><li>陷门和特洛伊木马：通过替换系统合法程序，或者在合法程序里插入恶意代码。</li><li>病毒：随着人们对计算机系统和网络依赖程度的增加，计算机病毒已经构成了对计算机系统和网络的严重威胁。</li><li>诽谤：利用计算机信息系统的广泛互连性和匿名性散布错误的消息，以达到诋毁某个对象的形象和知名度的目的。</li></ul><p><strong>网络攻击分类</strong></p><ul><li>被动攻击：典型代表嗅探、监听和流量分析，最难被检测，重点是预防，主要手段是加密。</li><li>主动攻击：假冒、重放、欺骗、消息篡改和拒绝服务等，重点是检测而不是预防，手段有防火墙、IDS 等技术。</li><li>物理临近攻击：防止外人乱进机房。</li><li>内部人员攻击：内鬼渗透，如国共抗战中的内部瓦解。</li><li>分发攻击：软件开发出来未安装之前，被篡改。（类似疫苗运输恒温不合格）</li></ul><h4 id="安全目标与技术"><a href="#安全目标与技术" class="headerlink" title="安全目标与技术"></a>安全目标与技术</h4><p><strong>安全目标</strong></p><ul><li>访问控制</li><li>认证 ： 身份认证、消息认证</li><li>完整性 ： 确保接收到的信息与发送的信息一致</li><li>审计 ：不可抵赖</li><li>保密 ： 确保敏感信息不被泄露</li></ul><p><strong>基本安全技术</strong> ： 数据加密、数字签名、身份认证、防火墙、入侵检测、内容检查。</p><h3 id="现代加密技术"><a href="#现代加密技术" class="headerlink" title="现代加密技术"></a>现代加密技术</h3><h4 id="私钥密码-对称密钥"><a href="#私钥密码-对称密钥" class="headerlink" title="私钥密码&#x2F;对称密钥"></a>私钥密码&#x2F;对称密钥</h4><p>密码分为私钥、公钥密码两种，而介于私钥和公钥之间的密码称为混合密码。</p><p><strong>私钥密码（对称密码）</strong></p><p>该体制的特点是加密和解密使用相同的密钥。消息的收发双方必须事先通过安全渠道交换密钥。</p><ul><li>优点 ： 加解密速度快、密文紧凑、使用长密钥时难破解。</li><li>缺点 ： 密钥分配问题、密钥管理问题、无法认证源。</li></ul><table><thead><tr><th>算法</th><th>解释</th><th>特点</th><th>分组长度</th><th>密钥长度</th><th>备注</th></tr></thead><tbody><tr><td>DES</td><td>数据加密标准</td><td>分组加密算法，采用移位+替换</td><td>64位</td><td>64位（有效56位）</td><td>速度快，密钥易产生</td></tr><tr><td>3DES</td><td>三重DES</td><td>使用DES进行“加密-解密-加密”操作</td><td>-</td><td>112位</td><td>一般K1和K3相同</td></tr><tr><td>IDEA</td><td>国际数据加密算法</td><td>分组加密，混合使用不同代数群运算</td><td>64位</td><td>128位</td><td>用于PGP</td></tr><tr><td>AES</td><td>高级加密标准</td><td>可通过硬件实现，速度快</td><td>128位</td><td>128, 192, 256位</td><td>像3DES一样安全</td></tr><tr><td>RC4&#x2F;5</td><td>流加密算法</td><td>加密速度快，用于WIFI</td><td>可变</td><td>可变</td><td>可达到DES的10倍速度</td></tr></tbody></table><h4 id="公钥密码-非对称加密"><a href="#公钥密码-非对称加密" class="headerlink" title="公钥密码&#x2F;非对称加密"></a>公钥密码&#x2F;非对称加密</h4><p>公钥密码又称为非对称加密 ， 就是对数据加密和解密的密钥是不同的。</p><ul><li>优点 ： 密钥分发方便、密钥保管量少、支持数字签名。</li><li>缺点 ： 加密速度慢 ( 计算量大 ， 不适合加密大数据 ) 、数据膨胀率高。</li></ul><p>每个实体有两个密钥： 公钥公开， 私钥自己保存。</p><ul><li>公钥加密 ， 私钥解密 ， 可实现保密通信</li><li>私钥加密 ， 公钥解密 ， 可实现数字签名</li></ul><p><strong>常见的非对称加密算法</strong></p><ul><li>RSA ：512 位（或 1024 位）密钥，计算量极大，难破解。</li><li>Elgamal</li><li>ECC （椭圆曲线算法）</li><li>背包算法</li><li>Rabin</li><li>DH 等</li></ul><h4 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h4><ul><li>发送方用对称密钥加密需要发送的消息，再用接收方的公钥加密对称密钥，然后一起发送给接收方 ；</li><li>接收方先用自己的私钥解密得到对称密钥 ，然后用对称密钥解密得到明文。<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240911/image.4cku4q16xo.jpg" alt="image"></li></ul><h4 id="国产密码算法"><a href="#国产密码算法" class="headerlink" title="国产密码算法"></a>国产密码算法</h4><ul><li>《中华人民共和国密码法》<ul><li>密码分类<ul><li>核心密码</li><li>普通密码</li><li>商用密码</li></ul></li><li>管理<ul><li>核心密码和普通密码：用于保护国家秘密信息，由密码管理部门依法实行严格统一管理。</li><li>商用密码：用于保护不属于国家秘密的信息，公民、法人可用。</li></ul></li><li>国产密码算法<ul><li>定义：由国家密码研究相关机构自主研发，具有相关知识产权的商用密码算法。</li><li>已公布的算法：| 算法名称 | 算法特征描述                                                             |<br>| ——– | ———————————————————————— |<br>| SM1      | 对称加密，分组长度和密钥长度都为128比特                                  |<br>| SM2      | 非对称加密，用于公钥加密算法、密钥交换协议、数字签名算法（椭圆曲线问题） |<br>| SM3      | 杂凑算法（哈希），分组512位，输出杂凑值长度为256位                       |<br>| SM4      | 对称加密，分组长度和密钥长度都为128比特                                  |<br>| SM9      | 标识密码算法，支持公钥加密、密钥交换、数字签名等安全功能                 |</li></ul></li></ul></li></ul><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>认证分为实体认证和消息认证</p><ul><li>实体认证 ： 识别通信双方的身份 ， 防止假冒， 可以使用数字签名 RSA</li><li>消息认证 ： 验证消息在传送或存储过程中有没有被篡改， 通常使用报文摘要方法 MD5</li></ul><p><strong>基于共享密钥的认证</strong> ：通信双方有一个共享的密钥， 依赖双方都信任的密钥分发中心 KDC<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240911/image.77diaiot71.jpg" alt="image"><br><strong>基于公钥的认证</strong><br>通信双方都用对方的公钥加密， 用各自的私钥解密。<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240911/image.3uusg59ksl.jpg" alt="image"></p><h3 id="Hash哈希算法"><a href="#Hash哈希算法" class="headerlink" title="Hash哈希算法"></a>Hash哈希算法</h3><p>HASH 函数，又称为杂凑函数、散列函数，它能够将任意长度的信息转换成固定长度的哈希值（数字摘要），并且任意不同消息或文件所生成的哈希值是不一样的。</p><p>若用 h 表示 hash 函数 ，则 h 满足下列条件：</p><ul><li>h 的输入可以是任意长度的消息或文件 M。</li><li>h 的输出的长度是固定的。</li><li>给定 h 和 M ，计算 h(M) 是容易的。</li><li>给定 h 的描述，找两个不同的消息 M1 和 M2 ，使得 h(M1)&#x3D;h(M2) 是计算上不可行的。</li></ul><p>哈希函数特性 ： 不可逆性（单向）、无碰撞性 、雪崩效应。</p><p><strong>常见的 Hash 算法有</strong>：</p><ul><li>MD5 算法 ：以 512 位数据块为单位来处理输入，产生 128 位的信息摘要。常用于文件校验。</li><li>SHA 算法 ： 以 512 位数据块为单位来处理输入，产生 160 位的哈希值 ，具有比 MD5 更强的安全性。</li><li>SM3 国产算法 ： 消息分组长度为 512 比特，输出 256 位摘要。</li></ul><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>签名方用自己的私钥进行签名，对方收到后，用签名方的公钥进行验证。</p><p><strong>数字签名算法（公钥加密算法）</strong> ： RSA、Rabin、ELGamal 签名体制和 DSS 标准。</p><p><strong>数据签名是</strong>用于确认发送者身份和消息完整性的一个<strong>加密消息摘要</strong>，具有如下特点：</p><ul><li>数字签名是可信的。</li><li>数字签名不可伪造。</li><li>数字签名不能重新使用。</li><li>签名文件是不能改变的。</li><li>数字签名不能抵赖。</li><li>接收者能够核实发送者身份。<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240911/image.969p0v8fka.jpg" alt="image"></li></ul><h3 id="数字证书与CA"><a href="#数字证书与CA" class="headerlink" title="数字证书与CA"></a>数字证书与CA</h3><p><strong>数字证书</strong></p><p>数字证书是一种权威性的电子文档，如同网络世界的身份证，用于证明某一实体（如个人、服务器、组织等）的身份以及其拥有的公钥的合法性。</p><p>数字证书包含了证书持有者的身份信息、公钥、证书的有效期、颁发机构的数字签名等重要信息。</p><p><strong>CA（证书颁发机构）</strong></p><p>CA 是数字证书的颁发和管理机构，具有权威性和公正性。</p><p>CA 负责对证书申请者进行身份验证和审核，确认其身份合法后，颁发数字证书，并对证书进行管理和维护，包括证书的更新、吊销等操作。</p><p>CA 的存在确保了数字证书的可信度和安全性，使得网络通信中的双方能够通过验证对方的数字证书来确认身份，从而建立安全的通信连接。</p><h4 id="A-发送内容给-B"><a href="#A-发送内容给-B" class="headerlink" title="A 发送内容给 B"></a>A 发送内容给 B</h4><ol><li>A 向 CA 申请数字证书，CA 对 A 的身份进行审核和验证。</li><li>审核通过后，CA 为 A 颁发包含 A 身份信息和公钥的数字证书。</li><li>A 对要发送的内容进行哈希运算，生成消息摘要。</li><li>A 使用自己的私钥对消息摘要进行加密，生成数字签名。</li><li>A 将原始内容、数字签名以及自己的数字证书一起发送给 B 。</li><li>B 接收到来自 A 的原始内容、数字签名和数字证书。</li><li>B 首先验证 A 的数字证书的合法性，通过获取 CA 的公钥来验证证书的数字签名，确认证书未被篡改且 A 的身份合法。</li><li>验证成功后，B 接收到的信息包括 A 发送的原始内容和数字签名。此时，若原始内容在传输过程中被加密了，B 需要使用从 A 的数字证书中获取的 A 的公钥对其进行解密，得到明文的原始内容。</li><li>B 对解密后的原始内容（若有加密则先解密）进行相同的哈希运算，生成新的消息摘要。</li><li>B 使用从 A 的数字证书中获取的 A 的公钥对数字签名进行解密，得到原始的消息摘要。</li><li>B 对比自己生成的消息摘要和从数字签名中解密得到的消息摘要，如果两者一致，则说明内容未被篡改，数字签名验证通过。</li><li>B 对获取的内容进行后续处理，如存储、使用等。</li></ol><p>在上述流程中，如果原始内容在发送时被加密了，B 就需要解密；如果未加密，B 则可直接进行哈希运算。</p><h4 id="证书链"><a href="#证书链" class="headerlink" title="证书链"></a>证书链</h4><p>如果有两个 CA ， X1 和 X2 ， 假设用户 A 从 CA 机构 X1 获得了证书， 用户 B 从 X2 获得证书，如果两个证书发放机构 X1 和 X2 彼此间安全交换了公钥， 彼此信任， 那么他们的证书可以形成证书链。</p><p>A 通过一个证书链来获取 B 的公钥， 证书链表示为：X1《X2》X2《B》</p><p>B 也能通过相反的证书链来获取 A 的公开密钥：X2《X1》X1《A》</p><h3 id="IPSec原理"><a href="#IPSec原理" class="headerlink" title="IPSec原理"></a>IPSec原理</h3><ul><li><p>虚拟专用网基础</p><ul><li>定义：虚拟专用网（Virtual Private Network）<ul><li>一种建立在公网上的，由某一组织或某一群用户专用的通信网络。</li></ul></li><li>层次协议：<ul><li>二层：L2TP和PPTP（基于PPP）<ul><li><p>PPTP 只支持 TCP&#x2F;IP 网络体系 ，网络层必须是 IP 协议。</p></li><li><p>L2TP 可以运行在 IP 协议上，也可以在 X.25、帧中继或 ATM 网络上使用。</p></li><li><p><strong>PPP 协议</strong></p><ul><li>PPP 协议包含链路控制协议 LCP 和网络控制协议 NCP 。</li><li>PPP协议可以在点对点链路上传输多种上层协议的数据包， 有校验位</li><li>PPP认证方式<ul><li>PAP：两次握手验证协议，口令明文传送，被验证放首先发起请求</li><li>CHAP：三次握手，不传送认证口令，传送HMAC散列值<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240911/image.7w6runamrq.jpg" alt="image"></li></ul></li></ul></li></ul></li><li>三层：IPSec和GRE</li><li>四层：SSL&#x2F;TLS</li></ul></li><li>关键技术：<ul><li>隧道技术（Tunneling）</li><li>加解密技术（Encryption &amp; Decryption）</li><li>密钥管理技术（Key Management）</li><li>身份认证技术（Authentication）</li></ul></li></ul></li><li><p>实现总分机构互联，常用IPSec</p></li><li><p>Access&#x2F; Rmote VPN:实现用户远程接入比如，出差拨号访问内网，常用SSL</p></li><li><p><strong>IPSec原理</strong></p><ul><li>IPSec功能分类<ul><li>认证头（AH）<ul><li>提供数据完整性和数据源认证</li><li>不提供数据保密服务</li><li>实现算法：MD5、SHA</li></ul></li><li>封装安全负荷（ESP）<ul><li>提供数据加密功能</li><li>加密算法：DES、3DES、AES等</li></ul></li><li>Internet密钥交换协议（IKE）<ul><li>用于生成和分发在ESP和AH中使用的密钥</li></ul></li></ul></li><li>IPSec协议功能表| IPSec协议 | 功能               | 代表协议       |<br>| ——— | —————— | ————– |<br>| AH        | 数据完整性和源认证 | MD5、SHA       |<br>| ESP       | 数据加密           | DES、3DES、AES |<br>| IKE       | 密钥生成和分发     | DH             |</li></ul></li><li><p><strong>IPSec两种封装模式</strong><br><img src="https://xinhaojin.github.io/picx-images-hosting/20240911/image.839zq31mld.jpg" alt="image"></p></li></ul><h3 id="SSL与HTTPS"><a href="#SSL与HTTPS" class="headerlink" title="SSL与HTTPS"></a>SSL与HTTPS</h3><ul><li><p>安全套接层（SSL）</p><ul><li>开发背景<ul><li>由Netscape于1994年开发</li><li>用于实现Web安全通信的传输层安全协议</li></ul></li><li>演进<ul><li>1999年，IETF基于SSL 3.0版本，制定了传输层安全标准TLS（Transport Layer Security）</li></ul></li><li>与TLS的关系<ul><li>SSL与TLS本质上是同一个协议</li><li>区别在于制定标准的机构不同</li></ul></li><li>应用<ul><li>在Web安全通信中，SSL&#x2F;TLS被称为HTTPS&#x3D;HTTP+SSL</li></ul></li><li>组成部分<ul><li>记录协议</li><li>警告协议</li><li>握手协议<ul><li>用于协商参数</li></ul></li></ul></li></ul></li><li><p>HTTPS与S-HTTP概述</p><ul><li>HTTPS<ul><li>定义：HTTPS &#x3D; HTTP + SSL&#x2F;TLS</li><li>端口：TCP 443</li></ul></li><li>S-HTTP<ul><li>定义：安全的超文本传输协议（Security HTTP）</li><li>端口：TCP 80</li><li>特点：语法与HTTP相同，但报文头进行了加密</li></ul></li></ul></li><li><p>HTTPS协议栈</p><ul><li>协议组成| 层级   | 协议           |<br>| —— | ————– |<br>| 应用层 | SSL&#x2F;TLS        |<br>| 传输层 | TCP（端口443） |<br>| 网络层 | IP（协议号6）  |</li></ul></li><li><p>S-HTTP协议栈</p><ul><li>协议组成| 层级   | 协议          |<br>| —— | ————- |<br>| 应用层 | S-HTTP        |<br>| 传输层 | TCP（端口80） |<br>| 网络层 | IP（协议号6） |</li></ul></li></ul><h3 id="PGP"><a href="#PGP" class="headerlink" title="PGP"></a>PGP</h3><ul><li><p>PGP（Pretty Good Privacy）概述</p><ul><li>定义：一个完整的电子邮件安全软件包</li><li>服务：<ul><li>数据加密</li><li>数字签名</li></ul></li><li>技术细节：<ul><li>身份验证：采用RSA公钥证书</li><li>数据加密：使用IDEA算法</li><li>数据完整性验证：使用MD5算法</li></ul></li></ul></li><li><p>PGP应用广泛的原因</p><ul><li>多平台支持：在Windows、Linux、MacOS上免费使用</li><li>厂商支持：得到许多厂商的支持</li><li>安全算法：基于比较安全的算法（RSA, IDEA, MD5）</li><li>应用范围：<ul><li>可以加密文件和电子邮件</li><li>适用于个人通信</li><li>可以集成到应用中使用PGP</li></ul></li></ul></li></ul><h3 id="其他应用层安全协议"><a href="#其他应用层安全协议" class="headerlink" title="其他应用层安全协议"></a>其他应用层安全协议</h3><ul><li><strong>S&#x2F;MIME (Security&#x2F; Multipurpose Internet Mail Extensions)</strong><ul><li>提供电子邮件安全服务。</li></ul></li><li>注意：S&#x2F;MIME不等于MIME，S&#x2F;MIME是一种电子邮件安全协议，而MIME是一种多用途网际邮件扩展协议，与安全无关。</li><li><strong>SET (Secure Electronic Transation)</strong><ul><li>安全的电子交易，用于保障电子商务安全。</li></ul></li></ul><h3 id="防火墙与入侵检测"><a href="#防火墙与入侵检测" class="headerlink" title="防火墙与入侵检测"></a>防火墙与入侵检测</h3><p><strong>定义</strong></p><p>防火墙是位于计算机与所连接网络之间的软件或硬件，用于保护网络免受未经授权的访问和恶意攻击。</p><p><strong>分类</strong></p><ul><li><strong>按形态</strong><ul><li>软件防火墙：运行于通用操作系统。</li><li>硬件防火墙：有专用硬件和操作系统。</li></ul></li><li><strong>按技术</strong><ul><li>包过滤防火墙：依数据包信息过滤。</li><li>状态检测防火墙：增加连接状态检测。</li><li>应用层防火墙：深度检测应用层协议。</li></ul></li></ul><p><strong>工作模式</strong></p><ul><li>路由模式：充当路由器，进行数据包路由转发。</li><li>透明模式：对网络设备“透明”，不改变拓扑和 IP 地址。</li><li>混合模式：支持路由和透明模式，按需切换。</li></ul><h4 id="防火墙区域划分"><a href="#防火墙区域划分" class="headerlink" title="防火墙区域划分"></a>防火墙区域划分</h4><table><thead><tr><th>安全区域</th><th>安全级别</th><th>说明</th></tr></thead><tbody><tr><td>本地区域Local</td><td>100</td><td>设备本身，包括设备的各接口本身。</td></tr><tr><td>信任区域Trust</td><td>85</td><td>通常用于定义内网终端用户所在区域。</td></tr><tr><td>军事缓冲区域DMZ</td><td>50</td><td>通常用于定义内网服务器所在区域。</td></tr><tr><td>非信任区域Untrust</td><td>5</td><td>通常用于定义Internet等不安全的网络。</td></tr></tbody></table><h4 id="入侵检测IDS和入侵防御IPS"><a href="#入侵检测IDS和入侵防御IPS" class="headerlink" title="入侵检测IDS和入侵防御IPS"></a>入侵检测IDS和入侵防御IPS</h4><p>入侵检测系统（Intrusion Detection System，IDS）是一种网络安全设备，它能够监视网络流量，检测异常行为，并向管理员报告。</p><ul><li>入侵检测分类<ul><li>按信息来源分<ul><li>HIDS（主机入侵检测系统）</li><li>NIDS（网络入侵检测系统）</li><li>DIDS（分布式入侵检测系统）</li></ul></li><li>按响应方式分<ul><li>实时检测</li><li>非实时检测</li></ul></li><li>按数据分析技术和处理方式分<ul><li>异常检测<ul><li>建立并不断更新和维护系统正常行为的轮廓</li><li>定义报警阈值，超过阈值则报警</li><li>能够检测从未出现的攻击，但误报率高</li></ul></li><li>误用检测<ul><li>对已知的入侵行为特征进行提取，形成入侵模式库</li><li>匹配则进行报警</li><li>已知入侵检测准确率高，对于未知入侵检测准确率低，高度依赖特征库</li><li>检测技术：专家系统和模式匹配</li></ul></li></ul></li></ul></li><li>入侵检测三种常用分析方法<ul><li>模式匹配</li><li>统计分析</li><li>数据完整性分析</li></ul></li><li>入侵防御系统（Intrusion Prevention System，IPS）<ul><li>定义：一种先进的网络安全检测和防御系统</li><li>功能：<ul><li>能够检测出攻击并积极响应</li><li>具有入侵检测系统（IDS）检测攻击行为的能力</li><li>具有拦截攻击并阻断攻击的功能</li></ul></li><li>特点：<ul><li>不仅仅是IDS和防火墙功能的简单组合</li><li>在攻击响应上采取主动的、全面的、深层次的防御措施<br><strong>IPS和IDS</strong>| 特性         | IPS（入侵防御系统）      | IDS（入侵检测系统）        |<br>| ———— | ———————— | ————————– |<br>| 部署位置     | 一般串行部署             | 一般旁路部署               |<br>| 入侵响应能力 | 能检测入侵，并能主动防御 | 只能检测记录日志，发出警报 |</li></ul></li></ul></li></ul><h3 id="计算机病毒与防护"><a href="#计算机病毒与防护" class="headerlink" title="计算机病毒与防护"></a>计算机病毒与防护</h3><ul><li><p>计算机病毒</p><ul><li>定义：一段可执行的程序代码，通过其他可执行程序启动和感染传播。</li><li>特性：<ul><li>可自我复制。</li><li>难以清除。</li><li>破坏性强。</li></ul></li></ul></li><li><p>木马</p><ul><li>定义：一种潜伏在计算机里并且秘密开放一个甚至多个数据传输通道的远程控制程序。</li><li>结构：C&#x2F;S结构，客户端也称为控制端。</li><li>功能：偷偷盗取账号、密码等信息（间谍）。</li></ul></li><li><p>恶意代码</p><ul><li>定义：恶意软件，没有作用却带来危险（恶搞）。</li></ul></li><li><p>文件宏病毒</p><ul><li>类型：感染Office文件。</li><li>特征：前缀Macro或者word&#x2F;excel等。</li></ul></li><li><p>常见病毒类型</p><ul><li>蠕虫病毒：前缀Worm，通过系统漏洞传播。</li><li>木马病毒：前缀Trojan，黑客病毒前缀Hack，往往成对出现。</li><li>系统病毒：前缀Win32、PE、Win95等。</li><li>脚本病毒：前缀Script，脚本语言编写的，通过网页传播。</li></ul></li></ul><table><thead><tr><th>病毒类型</th><th>关键字</th><th>特征</th><th>代表</th></tr></thead><tbody><tr><td>系统病毒</td><td>前缀为win32, win95, PE, W32, W95等</td><td>感染Windows系统的exe或dll文件，并通过这些文件进行传播</td><td>CIH病毒</td></tr><tr><td>蠕虫病毒</td><td>前缀为worm</td><td>通过网络或系统漏洞进行传播，可以向外发送带毒邮件或阻塞网络</td><td>冲击波（阻塞网络）、小邮差病毒（发送带毒邮件）</td></tr><tr><td>木马病毒和黑客病毒</td><td>木马前缀为Trojan, 黑客病毒前缀为Hack</td><td>通过网络或漏洞进入系统并隐藏起来，木马负责入侵用户计算机，黑客通过木马进行远程控制</td><td>游戏木马Trojan.Lmir.PSW60</td></tr><tr><td>脚本病毒</td><td>前缀是Script</td><td>使用脚本语言编写，通过网页进行传播</td><td>欢乐时光病毒VBS.Happtime、红色代码Script.Redlof</td></tr><tr><td>宏病毒</td><td>前缀是Macro</td><td>特殊脚本病毒，感染Word和Excel</td><td>Macro.Word97</td></tr><tr><td>后门病毒</td><td>前缀为Backdoor</td><td>通过网络传播，给系统开后门，给用户计算机带来安全隐患</td><td>入侵后添加隐藏账号</td></tr><tr><td>破坏性程序病毒</td><td>前缀为Harm</td><td>本身具有好看的图标来诱惑用户点击，当用户点击，对计算机产生破坏</td><td>熊猫烧香</td></tr><tr><td>捆绑机病毒</td><td>前缀为Binder</td><td>将特定程序捆绑下载</td><td>下载大礼包或某些软件捆绑病毒</td></tr></tbody></table><h2 id="第9章-网络操作系统与应用服务器"><a href="#第9章-网络操作系统与应用服务器" class="headerlink" title="第9章 网络操作系统与应用服务器"></a>第9章 网络操作系统与应用服务器</h2><h3 id="indows五种身份认证"><a href="#indows五种身份认证" class="headerlink" title="indows五种身份认证"></a>indows五种身份认证</h3><ul><li>匿名认证：不需要提供经过身份认证的用户凭证</li><li>基本身份认证：用户必须输入ID,访问是基本用户ID的，但该方式的用户ID和密码以明文形式在网络上传输</li><li>集成windows身份验证：使用了KerberosV5，<strong>能够提供较高的安全级别</strong></li><li>摘要身份验证：该方式需要用户ID和密码，可提供中等安全级别，与基本身份验证相同，但克服可基本身份验证的缺点</li></ul><h3 id="本地用户与组"><a href="#本地用户与组" class="headerlink" title="本地用户与组"></a>本地用户与组</h3><p><strong>用户</strong>：</p><ul><li>包含用户名、密码、权限以及说明。</li></ul><p><strong>用户组</strong>：</p><ul><li>具有相同性质的用户归结在一起 ，统一授权，组成用户组。</li></ul><p><strong>创建用户和组</strong>：</p><ul><li><p>我的电脑 - 右键 - 管理 - 计算机管理 - 本地用户和组 （本地用户信息存储在本地 SAM 数据库）</p></li><li><p>常见用户组与权限</p><ul><li>Administrators<ul><li>具有完全控制权限，并且可以向其他用户分配用户权利额访问控制权限</li></ul></li><li>Backup Operators<ul><li>加入该组的成员可以备份和还原服务器上的所有文件</li></ul></li><li>Users<ul><li>普通用户，可以执行一些常见任务，例如运行文件，使用打印机等</li><li>用户不能共享文件夹或创建本地打印机</li><li>具有创建用户账户和组账户的权利，但不能管理Administrators组成员</li></ul></li><li>Power Users<ul><li>可以创建和管理共享资源</li></ul></li><li>Remote Desktop Users<ul><li>此组中的成员被授予远程登录的权限</li></ul></li><li>Guests<ul><li>拥有一个登录时创建的临时配置文件，在注销时该配置文件将被删除</li></ul></li><li>Network Configuration Operators<ul><li>可以更改TCP&#x2F;IP设置并更新和发布TCP&#x2F;IP地址</li></ul></li><li>Print Operators<ul><li>可以管理打印机</li></ul></li><li>权限顺序由高到低：Administrator &gt; Power users &gt; Users &gt; Everyone</li></ul></li></ul><h3 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h3><ul><li><p>网络中计算机逻辑组织的两种模式</p><ul><li><strong>工作组模式</strong>自由民主<ul><li>每台计算机都拥有自己的 <strong>本地安全账户管理数据库（SAM）</strong>。</li></ul></li><li><strong>域模式</strong>集权专制<ul><li><strong>用户信息</strong> 存储在 <strong>域控制器</strong>。</li><li>用户可以在 <strong>域中漫游</strong>，即在域内的任何一台计算机上使用相同的用户凭证登录。</li><li>用户可以 <strong>访问域中任意一台服务器上的资源</strong>。</li></ul></li></ul></li><li><p><strong>活动目录</strong>：对域中的账户和资源对象进行存放并集中管理。</p></li><li><p><strong>动态分布式文件系统</strong>：包含存储网络信息的目录结构和相关目录服务。</p></li><li><p><strong>域控制器 (Domain Controller, DC)</strong>：域中安装了活动目录的计算机。使用 <code>dcpromo</code> 命令进行安装。</p></li><li><p><strong>AD存储的用户信息</strong>：</p><ul><li>分散在多个DC。</li><li>操作系统对信息进行备份和选择性复制。</li><li>维护信息一致性。</li><li>提供容错能力。</li></ul></li><li><p><strong>活动目录中对象的名字</strong>：</p><ul><li>采用DNS域名结构。</li><li>安装AD必须先安装DNS组件。</li><li>必须安装在NTFS分区。</li></ul></li><li><p><strong>全局组(G)</strong>: 来自本地域，可授权访问域林中的任何信任域。</p></li><li><p><strong>域本地组(DL)</strong>: 来自任何域，只能访问本地域中的资源。</p></li><li><p><strong>通用组(U)</strong>: 可来自域林中的任何域，访问权限可以达到域林中的任何域。</p></li><li><p><strong>组策略</strong>: 要记住</p><ul><li><strong>A-G-DL-P策略</strong></li><li><strong>A-G-G-DL-P策略</strong></li><li><strong>A-G-DL-P策略</strong>: 将用户账号添加到全局组中，将全局组添加到域本地组中，然后为域本地组分配资源权限。</li><li><strong>A</strong> 表示用户账号</li><li><strong>G</strong> 表示全局组</li><li><strong>U</strong> 表示通用组</li><li><strong>DL</strong> 表示域本地组</li><li><strong>P</strong> 表示资源权限</li></ul></li></ul><h3 id="远程桌面与Samba服务"><a href="#远程桌面与Samba服务" class="headerlink" title="远程桌面与Samba服务"></a>远程桌面与Samba服务</h3><p><strong>远程桌面协议RDP</strong>（Remote Desktop Protocol），基于TCP，端口3389，命令快捷键mstsc<br><strong>Samba</strong>向Windows和Linux提供共享文件和打印机服务，可以实现linux和windows之间的文件共享。</p><h3 id="IIS服务器-web与FTP服务器"><a href="#IIS服务器-web与FTP服务器" class="headerlink" title="IIS服务器(web与FTP服务器)"></a>IIS服务器(web与FTP服务器)</h3><ul><li>IIS（Internet Information Services，互联网信息服务）是微软开发的Web服务器软件，可以为网络提供HTTP、FTP、SMTP等服务。没有<strong>IMAP</strong>、<strong>POP3</strong>。</li><li>Apache，默认web站点根目录是&#x2F;var&#x2F;www&#x2F;html或&#x2F;home&#x2F;httpd,web服务器的配置文件是&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf<ul><li>虚拟主机：基于IP、基于端口、基于名字</li></ul></li><li>FTP服务器：控制端口：21，端口数据20<ul><li>get 下载文件</li><li>put 上传文件</li><li>bye 退出</li></ul></li></ul><h3 id="DNS-域名系统"><a href="#DNS-域名系统" class="headerlink" title="DNS (域名系统)"></a>DNS (域名系统)</h3><ul><li><p>DNS（Domain Name System，域名系统）是因特网的一项服务，它用于将域名转换为IP地址，并提供其他相关服务。</p></li><li><p>DNS&#x2F;DHCP服务器必须为静态IP地址 ， 而Web&#x2F;FTP均可为动态IP(域名)。</p></li><li><p>查看DNS服务器地址：Nslookup <a href="http://www.baidu.com/">www.baidu.com</a></p></li><li><p>linux中，用Bind来搭建DNS服务器，配置文件在&#x2F;etc&#x2F;named.conf</p></li><li><p><strong>主域名服务器</strong>：</p><ul><li>具有域名数据库</li><li>一个域有且只有一个主域名服务器</li><li>维护本区域所有域名信息</li></ul></li><li><p><strong>辅助域名服务器</strong>：</p><ul><li>具有域名数据库</li><li>主域名服务器的备份</li></ul></li><li><p><strong>缓存域名服务器</strong>：</p><ul><li>获取解析结果耗时最短</li><li>没有域名数据库</li></ul></li><li><p><strong>转发域名服务器</strong>：</p><ul><li>具有域名数据库</li><li>负责非本地和缓存中无法查到的域名</li></ul></li></ul><h4 id="6种记录"><a href="#6种记录" class="headerlink" title="6种记录"></a>6种记录</h4><table><thead><tr><th>记录类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><strong>SOA</strong></td><td>SOA叫起始授权机构记录，SOA记录用于表示在众多 NS记录中哪一台是主服务器</td><td>SOA记录还设置一些数据版本和更新以及过期时间的信息</td></tr><tr><td><strong>A</strong></td><td>把主机名解析为IP地址</td><td><a href="http://www.test.com/">www.test.com</a> → 1.1.1.1</td></tr><tr><td><strong>指针 PTR</strong></td><td>反向查询，把IP地址解析为主机名</td><td>1.1.1.1 → <a href="http://www.test.com/">www.test.com</a></td></tr><tr><td><strong>名字服务器 NS</strong></td><td>为一个域指定授权域名服务器，该域的所有子域也被委派给这个服务器</td><td>比如某个区域由 ns1.domain.com 进行解析</td></tr><tr><td><strong>邮件服务器 MX</strong></td><td>指明区域的邮件服务器及优先级</td><td>建立电子邮箱服务，需要MX记录将指向邮件服务器地址</td></tr><tr><td><strong>别名 CNAME</strong></td><td>指定主机名的别名，把主机名解析为另一个主机名</td><td><a href="http://www.test.com/">www.test.com</a> 别名为 webserver12.test.com</td></tr></tbody></table><h4 id="DNS查询方式"><a href="#DNS查询方式" class="headerlink" title="DNS查询方式"></a>DNS查询方式</h4><ul><li>递归查询：域名服务器帮助用户进行解析（老好人）</li><li>迭代查询：域名服务器反复多次查询，直到找到最后结果（踢皮球）<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240919/image.92q3ew8y3v.png" alt="image"></li></ul><h4 id="DNS配置文件"><a href="#DNS配置文件" class="headerlink" title="DNS配置文件"></a>DNS配置文件</h4><ol><li><p><strong>&#x2F;etc&#x2F;resolv.conf</strong>: DNS服务器配置文件</p><ul><li>包含了<strong>主机的域名搜索顺序和DNS服务器地址</strong>。</li><li>命令查看内容：<code>cat /etc/resolv.conf</code></li><li>示例内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Generated by Network Manager</span><br><span class="line">nameserver 8.8.8.8    # Google主DNS服务器</span><br><span class="line">nameserver 8.8.4.4    # Google备用DNS服务器</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>&#x2F;etc&#x2F;named.conf</strong>: <strong>DNS主配置文件</strong></p><ul><li>存放各类DNS记录，比如A记录、PTR记录。</li></ul></li><li><p><strong>&#x2F;etc&#x2F;hosts</strong>: 本地DNS解析缓存</p><ul><li>包含IP地址、主机名。</li><li>Windows系统中位于：<code>C:\Windows\System32\drivers\etc\hosts</code></li><li>示例内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 102.54.94.97 rhino.acme.com</span><br><span class="line"># 38.25.63.10 x.acme.com</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>&#x2F;etc&#x2F;host.conf</strong>: 解析器查询顺序配置文件</p><ul><li>命令查看内容：<code>vi /etc/host.conf</code></li><li>示例配置：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">order hosts, bind</span><br><span class="line"># 表示先查询本地hosts文件,如果没有结果,再尝试查找BIND DNS服务器。</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="DHCP服务器"><a href="#DHCP服务器" class="headerlink" title="DHCP服务器"></a>DHCP服务器</h3><ul><li>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一项局域网技术，它允许一台计算机或网络设备自动获取IP地址、子网掩码、默认网关等网络配置参数。</li></ul><h4 id="Linux系统DHCP服务配置文件"><a href="#Linux系统DHCP服务配置文件" class="headerlink" title="Linux系统DHCP服务配置文件"></a>Linux系统DHCP服务配置文件</h4><ul><li><strong>配置文件位置</strong>：<code>/etc/dhcpd.conf</code></li></ul><h4 id="DHCP服务流程"><a href="#DHCP服务流程" class="headerlink" title="DHCP服务流程"></a>DHCP服务流程</h4><ol><li><strong>DHCP Discover</strong>：主机发送广播，寻找DHCP服务器。</li><li><strong>DHCP Offer</strong>：DHCP服务器收到请求后，回复单播，提供IP地址等信息。</li><li><strong>DHCP Request</strong>：主机收到DHCP服务器的回复后，发送广播，告知是否接受分配的IP。</li><li><strong>DHCP ACK</strong>：服务器收到主机的DHCP Request后，回复单播，确认IP分配。</li></ol><h4 id="DHCP租约和续约"><a href="#DHCP租约和续约" class="headerlink" title="DHCP租约和续约"></a>DHCP租约和续约</h4><ul><li><strong>默认租期</strong>：8天</li><li><strong>续约时间</strong>：租期超过一半（4天）时进行续约，续约后租期仍为8天。</li><li><strong>重新绑定</strong>：租期超过87.5%时，重新绑定IP。</li></ul><h4 id="客户端操作命令"><a href="#客户端操作命令" class="headerlink" title="客户端操作命令"></a>客户端操作命令</h4><ul><li><strong>发送DHCP Discover</strong>：<code>dhcpdiscover</code></li><li><strong>电脑重启发送DHCP Request</strong>：电脑重启时自动发送。</li><li><strong>重新获取地址</strong>：<code>ipconfig /renew</code></li><li><strong>释放IP地址</strong>：<code>ipconfig /release</code></li></ul><h4 id="DHCP中继"><a href="#DHCP中继" class="headerlink" title="DHCP中继"></a>DHCP中继</h4><p>企业内不同的用户可能分布在不同的网段，一台DHCP服务器在正常情况下无法满足多个网段的地址分配需求。如果还需要通过DHCP服务器分配IP地址，则需要跨网段发送DHCP报文。DHCP Relay即DHCP中继，它是为解决DHCP服务器和DHCP客户端不在同一个广播域而提出的，提供了对DHCP广播报文的中继转发功能，能够把DHCP客户端的广播报文“透明地”传送到其它广播域的DHCP服务器上，同样也能够把DHCP服务器端的应答报文“透明地”传送到其它广播域的DHCP客户端。</p><h4 id="option43"><a href="#option43" class="headerlink" title="option43"></a>option43</h4><p>Option 43是一个DHCP选项，用于在DHCP报文中传递额外的信息。当AP通过DHCP获取IP地址时，它可以在DHCP请求中包含Option 43，这个选项字段可以包含AC的IP地址或其他相关信息。这样，DHCP服务器就可以根据这些信息为AP分配适当的IP地址，并确保AP能够正确地连接到AC进行网络管理。</p><h3 id="linux网络配置"><a href="#linux网络配置" class="headerlink" title="linux网络配置"></a>linux网络配置</h3><p>网络相关配置文件大多数位于&#x2F; etc目录下， 这些文件可以在系统运行时修改 ， 不用重启或停止任何守护程序， 更改立刻生效。<br>“#”开头的为注释内容。</p><ul><li>网络配置文件：<code>/etc/sysconfig/network-script/ifcfg-enoxxx</code></li><li><code>/etc/hostname</code>：系统主机名文件。</li><li><code>/etc/hosts</code>：包含 IP 地址和主机名之间的映射 ，还包含主机别名。</li><li><code>/etc/host.conf</code>：指定客户机域名解析顺序，下面为该文件内容：<code>hosts, bind</code></li><li><code>/etc/resolv.conf</code>：指定客户机域名搜索顺序和 DNS 服务器地址。</li></ul><h3 id="iptables防火墙"><a href="#iptables防火墙" class="headerlink" title="iptables防火墙"></a>iptables防火墙</h3><table><thead><tr><th>规则表</th><th>定义</th><th>包含的规则链</th></tr></thead><tbody><tr><td><strong>raw</strong></td><td>确定是否对该数据包进行状态跟踪。</td><td>OUTPUT、PREROUTING</td></tr><tr><td><strong>mangle</strong></td><td>修改数据包内容，用来做流量整形的，给数据包设置标记。</td><td>INPUT、OUTPUT、FORWARD、PREROUTING、POSTROUTING</td></tr><tr><td><strong>nat</strong></td><td>负责网络地址转换，用来修改数据包中的源目标IP地址或端口。</td><td>OUTPUT、PREROUTING、POSTROUTING</td></tr><tr><td><strong>filter</strong></td><td>负责过滤数据包，确定是否放行该数据包（过滤）。</td><td>INPUT、FORWARD、OUTPUT</td></tr></tbody></table><h3 id="linux用户和组管理"><a href="#linux用户和组管理" class="headerlink" title="linux用户和组管理"></a>linux用户和组管理</h3><ul><li>查看当前用户：<code>whoami</code></li><li>查看当前用户组：<code>groups</code></li><li>添加用户：<code>useradd username</code></li><li>删除用户：<code>userdel username</code></li><li>修改用户密码：<code>passwd username</code></li><li>&#x2F;etc&#x2F;passwd 每个用户在该文件中都有一行对应记录，该文件对所有用户都是可读的</li><li>&#x2F;etc&#x2F;shadow 只有超级用户root 能读的文件&#x2F;etc&#x2F;shadow, 该文件包含了系统中的所有用户及其<strong>加密后的口令</strong>等</li></ul><h2 id="第10章-组网技术"><a href="#第10章-组网技术" class="headerlink" title="第10章 组网技术"></a>第10章 组网技术</h2><h3 id="交换机基础"><a href="#交换机基础" class="headerlink" title="交换机基础"></a>交换机基础</h3><p>交换机能隔离冲突域，一个端口就是一个冲突域</p><h4 id="交换机分类"><a href="#交换机分类" class="headerlink" title="交换机分类"></a>交换机分类</h4><ul><li><p><strong>交换方式</strong>：</p><ul><li><strong>存储转发</strong>：延时较大，但可以提供差错校验，支持不同速度的输入、输出端口间交换（非对称交换）。</li><li><strong>直通式</strong>：在输入端口扫描到目的地址后立即开始转发，延迟小、交换速度快，但没有检错能力，不能实现非对称交换。</li><li><strong>碎片过滤式</strong>：交换机开始转发之前先检查数据包的长度是否够64个字节，小于64B说明是冲突碎片，丢弃。大于或等于64B转发，这种转发方式介于前两者之间。</li></ul></li><li><p><strong>交换协议层次</strong>：</p><ul><li><strong>二层交换机</strong>：根据MAC地址进行交换。</li><li><strong>三层交换机</strong>：根据IP地址进行交换。</li><li><strong>多层交换机</strong>：根据端口号和应用协议进行交换。</li></ul></li><li><p><strong>交换机结构</strong>：</p><ul><li><strong>固定端口交换机</strong>：提供有限数量的固定类型端口。</li><li><strong>模块化交换机</strong>：机箱中预留插槽，可以根据需要安装不同数量及类型的模块。</li></ul></li><li><p><strong>配置方式</strong>：</p><ul><li><strong>堆叠型交换机</strong>：用堆叠电缆把一台交换机的UP口连接到另一台交换机的DOWN口，一般交换机能堆叠4~9层，堆叠后的交换机可以当作一台交换机来统一管理。</li><li><strong>非堆叠型交换机</strong>：通过级联方式扩充，级联使用以太网端口进行层次间互联，层数不超过4层。</li></ul></li><li><p><strong>管理类型</strong>：</p><ul><li><strong>网管型交换机</strong>：支持简单网络管理协议SNMP和管理信息库MIB。</li><li><strong>非网管型交换机</strong>：只能根据MAC进行。</li><li><strong>智能型交换机</strong>：支持基于WEB的图形化管理。</li></ul></li><li><p><strong>层次结构型划分</strong>：</p><ul><li><strong>接入层交换机</strong>：是工作站连接网络的入口，提供高密度接入端口。</li><li><strong>汇聚层交换机</strong>：将网络划分为多个广播&#x2F;组播域，实现VLAN间路由，ACL，提供三层交换功能。</li><li><strong>核心层交换机</strong>：采用高可扩展的高性能交换机，提供冗余、负载。</li></ul></li></ul><h4 id="性能参数"><a href="#性能参数" class="headerlink" title="性能参数"></a>性能参数</h4><ul><li><p><strong>传输模式</strong>：</p><ul><li><strong>半双工</strong>：通信双方可以发送和接收信号，但不能同时进行。</li><li><strong>全双工</strong>：通信双方可以同时发送和接收信号。</li><li><strong>全双工&#x2F;半双工自适应</strong>：设备可以根据条件自动选择传输模式，但不同速率和传输模式的光纤端口间可能无法进行通信。</li></ul></li><li><p><strong>包转发率</strong>：</p><ul><li>也称为吞吐率，是交换机进行数据包转发的能力。</li><li>单位为pps（包&#x2F;秒）。</li><li>计算标准：单位时间内发送64B数据包的个数。</li><li>计算公式：[ \text{包转发率} &#x3D; \text{千兆端口数} \times 1.488 \text{Mpps} + \text{百兆端口数} \times 0.1488 \text{Mpps} + \text{其余端口数} \times \text{相应包转发数} ]</li></ul></li><li><p><strong>背板带宽</strong>：</p><ul><li>标志交换机总的交换能力。</li><li>单位为Gbps（千兆比特&#x2F;秒）。</li><li>计算公式：[ \text{总带宽} &#x3D; \text{端口数} \times \text{端口速率} \times 2 \text{(全双工模式)} ]</li></ul></li></ul><h4 id="级联和堆叠"><a href="#级联和堆叠" class="headerlink" title="级联和堆叠"></a>级联和堆叠</h4><ul><li><strong>级联交换机</strong>：扩展端口数量</li><li><strong>堆叠交换机</strong>：端口聚合，提高带宽<ul><li>优势：逻辑上多台设备虚拟成一台设备，方便管理，避免了单点故障</li><li>劣势：私有协议，不同厂商的设备不能互通存在一定资源浪费</li></ul></li></ul><h3 id="路由器基础"><a href="#路由器基础" class="headerlink" title="路由器基础"></a>路由器基础</h3><p>三层网络设备，具有局域网和广域网接口</p><p>能隔离广播域，一个端口就是一个广播域</p><h4 id="路由器分类"><a href="#路由器分类" class="headerlink" title="路由器分类"></a>路由器分类</h4><ol><li><p><strong>骨干路由器</strong>：</p><ul><li>描述：实现主干网络互连的关键设备。</li><li>特点：采用模块化设计，通过热备份、双电源和双数据通道等冗余技术提高可靠性。</li></ul></li><li><p><strong>企业级路由器（也称边缘路由器）</strong>：</p><ul><li>应用：用于企业出入口。</li><li>功能：提供多种功能，实现数据、语音、视频、网络管理等应用。</li></ul></li><li><p><strong>接入级路由器</strong>：</p><ul><li>应用：用于连接小型企业的客户群。</li><li>功能：实现简单信息传输功能。</li></ul></li></ol><h4 id="路由器接口类型"><a href="#路由器接口类型" class="headerlink" title="路由器接口类型"></a>路由器接口类型</h4><ul><li><strong>广域网WAN端口</strong>：用于连接到广域网，如互联网或其他远程网络。</li><li><strong>局域网LAN端口</strong>：用于连接到局域网内的设备，如计算机、打印机等。</li><li><strong>RJ45端口</strong>：常规以太网电口，使用RJ45连接器，常用于连接以太网设备。</li><li><strong>以太网光口</strong>：使用光纤连接，包括多种接口类型：<ul><li><strong>SC</strong>：一种标准的光纤连接器。</li><li><strong>GBIC</strong>：Gigabit Interface Converter，千兆位接口转换器。</li><li><strong>SFP</strong>：Small Form-factor Pluggable，小型可插拔模块。</li><li><strong>SFP+</strong>：增强型小型可插拔模块，提供更高的数据传输速率。</li><li><strong>SFP28</strong>：支持28Gbps数据传输速率的小型可插拔模块。</li></ul></li><li><strong>AUI端口</strong>：Attachment Unit Interface，用于令牌环或总线型以太网接口，使用AUI连接器。</li><li><strong>Serial串口</strong>：用于连接数字数据通信网络，如DDN（数字数据网）、帧中继、X.25、PSTN（公共交换电话网络）等。</li><li><strong>ISDN BRI&#x2F;PRI端口</strong>：ISDN（综合业务数字网）线路互联，BRI（Basic Rate Interface）提供两个B信道和一个D信道，PRI（Primary Rate Interface）提供多个B信道和一个D信道。</li><li><strong>SDH POS接口</strong>：Synchronous Digital Hierarchy Packet Over SONET&#x2F;SDH，提供不同速率的数据传输，如155M、622M、2.5G、10G等。</li></ul><h4 id="路由器管理方式"><a href="#路由器管理方式" class="headerlink" title="路由器管理方式"></a>路由器管理方式</h4><ol><li><p><strong>Console接口</strong>：</p><ul><li>最基础且最常用的管理方式。</li><li>通常通过一个RJ45或者DB9接口直接连接到设备的控制台端口。</li><li>用于初始配置、故障诊断和恢复操作。</li></ul></li><li><p><strong>AUX端口</strong>：</p><ul><li>用于连接调制解调器（Modem）。</li><li>可以远程通过电话线连接到设备进行配置和故障排除。</li></ul></li><li><p><strong>Telnet&#x2F;SSH</strong>：</p><ul><li>通过网络远程登录设备进行管理。</li><li>Telnet是早期的远程管理协议，但安全性较低。</li><li>SSH（Secure Shell）提供加密的远程登录，安全性更高。</li></ul></li><li><p><strong>浏览器</strong>：</p><ul><li>通过Web浏览器访问设备的管理界面。</li><li>通常用于图形界面（GUI）管理，简化配置过程。</li></ul></li><li><p><strong>网管软件</strong>：</p><ul><li>使用专门的网络管理软件进行设备管理。</li><li>可以集中管理多个设备，提供更高级的监控和配置功能。</li></ul></li></ol><h2 id="第11章-网络管理"><a href="#第11章-网络管理" class="headerlink" title="第11章 网络管理"></a>第11章 网络管理</h2><h3 id="网络管理概念"><a href="#网络管理概念" class="headerlink" title="网络管理概念"></a>网络管理概念</h3><p>网络管理五大功能域：故障管理、配置管理、计费管理、性能管理和安全管理。</p><p>故障管理：尽快发现故障，找出故障原因，以便采取补救措施。</p><h3 id="SNMP"><a href="#SNMP" class="headerlink" title="SNMP"></a>SNMP</h3><p>简单网络管理协议（Simple Network Management Protocol）</p><ul><li><strong>网络管理协议五大标准</strong><ul><li><strong>ISO制定</strong><ul><li><strong>CMIS&#x2F;CMIP</strong>：公共管理信息服务规范</li></ul></li><li><strong>基于TCP&#x2F;IP</strong><ul><li><strong>SNMPv1</strong></li><li><strong>SNMPv2</strong></li><li><strong>SNMPv3</strong></li></ul></li><li><strong>基于局域网</strong><ul><li><strong>RMON-1</strong>：远程监控网络第一版</li><li><strong>RMON-2</strong>：远程监控网络第二版</li></ul></li><li><strong>IEEE制定</strong><ul><li><strong>CMOL</strong>：基于物理层和数据链路层</li></ul></li><li><strong>ITU-T</strong><ul><li><strong>TMN</strong>：电信网络管理标准</li></ul></li></ul></li><li>SNMP为应用层协议，基于UDP协议，使用端口161和162</li><li>不可靠，但效率高，不会过多增加网络负载<br><strong>SNMP报文</strong><br>客户端用161端口来接受get&#x2F;set命令，服务端（网管）用162端口来接收trap<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240920/image.lvowapllj.jpg" alt="image"></li></ul><h4 id="SNMPv1"><a href="#SNMPv1" class="headerlink" title="SNMPv1"></a>SNMPv1</h4><ul><li>可以一对多，多对一</li><li>通过团体名(community)验证身份,明文传输，不安全</li></ul><h4 id="SNMPv2"><a href="#SNMPv2" class="headerlink" title="SNMPv2"></a>SNMPv2</h4><ul><li>新增GetBulk和Inform两个新协议操作<ul><li>GetBulk:获取大块数据</li><li>Inform:允许管理站像管理站发送Trap信息&#x2F;接收响应</li></ul></li></ul><h4 id="SNMPv3"><a href="#SNMPv3" class="headerlink" title="SNMPv3"></a>SNMPv3</h4><ul><li><strong>重新定义网络管理框架</strong><ul><li><strong>SNMP实体</strong>：将管理站和代理统一称为 SNMP 实体（<strong>entity</strong>）</li></ul></li><li><strong>安全机制</strong><ul><li><strong>认证和加密传输</strong></li><li><strong>时间序列模块</strong><ul><li><strong>重放攻击防护</strong></li></ul></li><li><strong>认证模块</strong><ul><li><strong>完整性和数据源认证</strong></li><li><strong>算法</strong>：使用 SHA 或 MD5</li></ul></li><li><strong>加密模块</strong><ul><li><strong>防止内容泄露</strong></li><li><strong>算法</strong>：使用 DES</li></ul></li></ul></li><li><strong>未防护的威胁</strong><ul><li><strong>拒绝服务</strong></li><li><strong>通信分析</strong></li></ul></li></ul><h3 id="RMON"><a href="#RMON" class="headerlink" title="RMON"></a>RMON</h3><ul><li>远程监控网络（Remote Monitoring Network）</li><li>用于监视网络通信情况的设备叫网络监视器( Monitor) 或网络分析器 ( Analyzer )、探测器( Probe ) 等</li><li>RMON定义了管理信息库RMON MIB-II ( 流量信息 ) 与SNMP MIB ( 设备信息 ) 。</li><li>RMON目标：监视子网范围内通信，从而减少管理站和被管理系统之间的通信负载。</li></ul><h3 id="网络管理命令"><a href="#网络管理命令" class="headerlink" title="网络管理命令"></a>网络管理命令</h3><table><thead><tr><th>命令</th><th>选项</th><th>用途</th></tr></thead><tbody><tr><td><strong>ipconfig</strong></td><td>无</td><td>显示IP、掩码、网关等基础信息</td></tr><tr><td><strong>ipconfig</strong></td><td>&#x2F;all</td><td>显示IP、掩码、网关、DHCP和MAC等详细信息</td></tr><tr><td><strong>ipconfig</strong></td><td>&#x2F;renew</td><td>更新DHCP配置,重新获IP</td></tr><tr><td><strong>ipconfig</strong></td><td>&#x2F;release</td><td>释放DHCP获得的IP地址</td></tr><tr><td><strong>ipconfig</strong></td><td>&#x2F;flushdns</td><td>清除DNS缓存信息</td></tr><tr><td><strong>ipconfig</strong></td><td>&#x2F;displaydns</td><td>显示DNS缓存信息</td></tr><tr><td><strong>ping</strong></td><td>-t IP</td><td>持续ping,直到Ctrl+C中断</td></tr><tr><td><strong>ping</strong></td><td>-a IP</td><td>将IP解析为主机名</td></tr><tr><td><strong>ping</strong></td><td>-n Count IP</td><td>设置ping包的个数</td></tr><tr><td><strong>tracert</strong></td><td>IP</td><td>跟踪网络传输路径 原理:递增TTL字段的ICMP回送错误报文</td></tr><tr><td><strong>pathping</strong></td><td>IP</td><td>结合了ping和tracert功能,可以显示通信线路上每个子网的延时和丢包率</td></tr><tr><td><strong>arp</strong></td><td>-a</td><td>显示当前ARP缓存表</td></tr><tr><td><strong>arp</strong></td><td>-s IP MAC</td><td>静态绑定ARP</td></tr><tr><td><strong>arp</strong></td><td>-d IP</td><td>删除某条ARP缓存</td></tr><tr><td><strong>netstat</strong></td><td>无</td><td>显示TCP连接,侦听的端口及统计信息</td></tr><tr><td><strong>netstat</strong></td><td>-n</td><td>显示活动的TCP连接</td></tr><tr><td><strong>netstat</strong></td><td>-r</td><td>显示IP路由表,效果与route print一样</td></tr><tr><td><strong>route</strong></td><td>print</td><td>显示路由表</td></tr><tr><td><strong>route</strong></td><td>add</td><td>添加静态路由,重启不在：route add [目的网络] mask [子网掩码] [网关地址] -p</td></tr><tr><td><strong>nslookup</strong></td><td>host&#x2F;IP</td><td>解析域名，反向解析IP地址</td></tr></tbody></table><h2 id="第12章-网络规划设计"><a href="#第12章-网络规划设计" class="headerlink" title="第12章 网络规划设计"></a>第12章 网络规划设计</h2><h3 id="综合布线"><a href="#综合布线" class="headerlink" title="综合布线"></a>综合布线</h3><p>结构化布线系统包含6个子系统： 工作区子系统、水平子系统、干线子系统、设备间子系统、管理子系统和建筑群子系统。<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240920/image.2yybdjwovk.jpg" alt="image"></p><h3 id="网络分析与设计"><a href="#网络分析与设计" class="headerlink" title="网络分析与设计"></a>网络分析与设计</h3><p><strong>五阶段网络规划（瀑布模型）</strong><br>需求分析-通信规范设计-逻辑网络设计-物理网络设计-实施<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240920/image.51e41mhplc.jpg" alt="image"><br><strong>网络安全技术措施表</strong><br><img src="https://xinhaojin.github.io/picx-images-hosting/20240920/image.7ax4l47q19.jpg" alt="image"><br><strong>技术评价</strong></p><ul><li>考虑 ：通信带宽、技术成熟性、连接服务类型、可扩展性、高投资产</li><li>要用成熟技术</li></ul><h3 id="网络结构与功能"><a href="#网络结构与功能" class="headerlink" title="网络结构与功能"></a>网络结构与功能</h3><p><strong>单核心局域网</strong><br><strong>双核心局域网</strong><br><strong>层级局域网结构</strong><br><img src="https://xinhaojin.github.io/picx-images-hosting/20240920/image.4jo2d1sv5t.jpg" alt="image"></p><h3 id="广域网接入技术"><a href="#广域网接入技术" class="headerlink" title="广域网接入技术"></a>广域网接入技术</h3><ol><li><p><strong>PSTN公用电话网络</strong></p><ul><li>速率：56kb&#x2F;s</li></ul></li><li><p><strong>ISDN</strong></p><ul><li><strong>BRI</strong>：2B+D&#x3D;144K</li><li><strong>PRI</strong>：30B+D&#x3D;2.048M</li></ul></li><li><p><strong>线缆调制解调器接入</strong></p><ul><li>架构：HFC主干光纤, 光纤到小区, 同轴电缆接入</li><li>HFC网络中用户是通过同轴电缆接入 , 需要 <strong>Cable Modem</strong> , 局端终结设备是<strong>CMTS</strong> , ADSL网络局端终结设备是IDSLAM,PON网络局端终结设备是OLT ， 运营商网络用户认证一般都采用PPPOE, 负责的设备是BRAS。<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240920/image.6t72wjvqck.jpg" alt="image"></li></ul></li><li><p><strong>数字用户线路远程接入xDSL</strong></p><ul><li>计算机通过ASDL Modem接入<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240920/image.1vym2ph4qj.jpg" alt="image"></li></ul></li><li><p><strong>PON无源光网络</strong></p><ul><li>上行链路（从ONU到OLT）使用TDMA技术，允许多个ONUs在不同的时间间隔内发送数据到OLT，从而实现高效的带宽利用和冲突避免。</li><li>下行链路（从OLT到ONU）则通常使用广播技术</li></ul></li></ol><h3 id="网络故障诊断与-排查"><a href="#网络故障诊断与-排查" class="headerlink" title="网络故障诊断与 排查"></a>网络故障诊断与 排查</h3><ol><li><p><strong>光时域反射计（OTDR）</strong>：</p><ul><li>用于检测光缆的光衰减情况，通过测量光信号在光纤中的反射和散射，可以发现光缆中的故障点，如断裂、弯曲或连接不良等问题。OTDR能够提供光缆的损耗图，帮助网络管理员快速定位故障位置。</li></ul></li><li><p><strong>光功率计</strong>：</p><ul><li>用于测量光缆中光信号的功率。光功率计可以检测光缆的输入和输出功率，帮助判断光缆的损耗是否在正常范围内。当光缆损耗超出正常范围时，可以使用光功率计进行进一步的检测。</li></ul></li><li><p><strong>光纤熔接机</strong>：</p><ul><li>当发现光缆断裂等物理损伤时，光纤熔接机可以用来修复光缆。通过将断裂的光纤端面精确对准并熔接，可以恢复光缆的传输功能。光纤熔接机是处理光缆物理断裂的常用设备。</li></ul></li><li><p><strong>网络寻线仪</strong>：</p><ul><li>用于在复杂的网络布线环境中找到特定的电缆或光纤。网络寻线仪通过发送特定的信号并检测返回信号，帮助定位特定的线路。</li></ul></li><li><p><strong>可见光检测笔</strong>：</p><ul><li>用于检测光纤是否正确连接以及光信号的存在。可见光检测笔可以发射可见光，当光纤正确连接并且有光信号通过时，可以在光纤的另一端看到光。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DNS修改器(linux+win)</title>
    <link href="/2024/09/19/DNS%E4%BF%AE%E6%94%B9%E5%99%A8(linux+win)/"/>
    <url>/2024/09/19/DNS%E4%BF%AE%E6%94%B9%E5%99%A8(linux+win)/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有需求：修改DNS服务器，主备两个，要求无脑配置</p><h2 id="linux下修改DNS-无需root权限"><a href="#linux下修改DNS-无需root权限" class="headerlink" title="linux下修改DNS(无需root权限)"></a>linux下修改DNS(无需root权限)</h2><p>常规shell命令方法都需要linux的root权限才能执行，但我发现普通用户在图形界面改DNS也能生效，也就是说通常普通用户也是拥有修改网络配置的权限的，只是不能通过修改系统配置文件来实现，但是有其他方法，如nmcli命令</p><p>查看活动的网络连接名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli -t -f NAME con show --active</span><br></pre></td></tr></table></figure><p>修改DNS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli con mod &lt;connection_name&gt; ipv4.dns &lt;dns_primary&gt;,&lt;dns_secondary&gt;</span><br></pre></td></tr></table></figure><p>刷新DNS缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemd-resolve --flush-caches</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import subprocess</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def set_dns(dns_primary, dns_secondary):</span><br><span class="line">    try:</span><br><span class="line">        connection_name = subprocess.check_output([&#x27;nmcli&#x27;, &#x27;-t&#x27;, &#x27;-f&#x27;, &#x27;NAME&#x27;, &#x27;con&#x27;, &#x27;show&#x27;,&#x27;--active&#x27;]).decode().strip()</span><br><span class="line">        subprocess.run([&#x27;nmcli&#x27;, &#x27;con&#x27;, &#x27;mod&#x27;, connection_name, &#x27;ipv4.dns&#x27;, f&#x27;&#123;dns_primary&#125;,&#123;dns_secondary&#125;&#x27;])</span><br><span class="line">        subprocess.run([&#x27;nmcli&#x27;, &#x27;con&#x27;, &#x27;down&#x27;, connection_name])</span><br><span class="line">        subprocess.run([&#x27;nmcli&#x27;, &#x27;con&#x27;, &#x27;up&#x27;, connection_name])</span><br><span class="line">        subprocess.run([&#x27;systemd-resolve&#x27;, &#x27;--flush&#x27;, &#x27;caches&#x27;])</span><br><span class="line">        time.sleep(10)</span><br><span class="line">        try:</span><br><span class="line">            dns_info = subprocess.check_output([&#x27;nmcli&#x27;], text=True)</span><br><span class="line">            if dns_primary in dns_info and dns_secondary in dns_info:</span><br><span class="line">                print(&quot;设置DNS配置成功&quot;)</span><br><span class="line">        except subprocess.CalledProcessError as e:</span><br><span class="line">            print(f&quot;设置DNS配置失败: &#123;e&#125;&quot;)</span><br><span class="line">            return False</span><br><span class="line">    except subprocess.CalledProcessError as e:</span><br><span class="line">        print(f&quot;设置DNS配置失败: &#123;e&#125;&quot;)</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    dns_primary = &quot;114.114.114.114&quot;</span><br><span class="line">    dns_secondary = &quot;8.8.8.8&quot;</span><br><span class="line">    set_dns(dns_primary, dns_secondary)</span><br><span class="line">    input(&quot;按任意键退出...&quot;)</span><br><span class="line">    # pyinstaller --onefile -c --uac-admin --noconfirm setDNS.py</span><br></pre></td></tr></table></figure><p>可以用pyinstaller直接打包成linux下的可执行文件</p><h2 id="windows下修改DNS-默认使用管理员权限打开"><a href="#windows下修改DNS-默认使用管理员权限打开" class="headerlink" title="windows下修改DNS(默认使用管理员权限打开)"></a>windows下修改DNS(默认使用管理员权限打开)</h2><p>遍历所有网卡，如果IP是以192开头的，则修改其DNS配置</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wmi</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_dns_configuration</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wmiService = wmi.WMI()</span><br><span class="line">        colNicConfigs = wmiService.Win32_NetworkAdapterConfiguration(IPEnabled=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> colNicConfig <span class="keyword">in</span> colNicConfigs:</span><br><span class="line">            <span class="keyword">for</span> ip <span class="keyword">in</span> colNicConfig.ipaddress:</span><br><span class="line">                <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;192\.&#x27;</span>, ip) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    arrDNSServers = [<span class="string">&#x27;114.114.114.114&#x27;</span>, <span class="string">&#x27;8.8.8.8&#x27;</span>]</span><br><span class="line">                    returnValue = colNicConfig.SetDNSServerSearchOrder(DNSServerSearchOrder=arrDNSServers)</span><br><span class="line">                    <span class="keyword">if</span> returnValue[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;DNS修改成功&quot;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;DNS修改失败&quot;</span>)</span><br><span class="line">        flushDNS = <span class="string">&quot;ipconfig /flushdns&quot;</span></span><br><span class="line">        os.system(flushDNS)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DNS配置成功&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;程序运行错误，原因：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    set_dns_configuration()</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&#x27;按下任意键退出&#x27;</span>)</span><br><span class="line">    <span class="comment"># pyinstaller --onefile -c --uac-admin --noconfirm set_DNS_win.py</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller --onefile -c --uac-admin --noconfirm set_DNS_win.py</span><br></pre></td></tr></table></figure><p><code>--uac-admin</code>参数表示默认以管理员权限运行</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>linux</tag>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware虚拟机和主机共享文件夹</title>
    <link href="/2024/09/19/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%B8%BB%E6%9C%BA%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <url>/2024/09/19/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%B8%BB%E6%9C%BA%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>VMware装了个银河麒麟系统的虚拟机，需要和主机互传文件</p><h2 id="虚拟机设置"><a href="#虚拟机设置" class="headerlink" title="虚拟机设置"></a>虚拟机设置</h2><p>在虚拟机关机状态下，虚拟机设置-选项-共享文件夹-添加<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240919/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240919103106.3k7yyi4n1m.jpg" alt="微信截图_20240919103106"></p><h2 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h2><p>虚拟机开机后，挂载目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t fuse.vmhgfs-fuse .host:/ /mnt/hgfs -o allow_other</span><br></pre></td></tr></table></figure><p>如果没有 <code>/mnt/hgfs</code>这个文件夹就手动新建一个</p><p>如果命令行看不到就在图像界面打开看看<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240919/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240919103319.969pcd61vc.jpg" alt="微信截图_20240919103319"></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pyinstaller打包32位exe文件</title>
    <link href="/2024/09/19/pyinstaller%E6%89%93%E5%8C%8532%E4%BD%8Dexe%E6%96%87%E4%BB%B6/"/>
    <url>/2024/09/19/pyinstaller%E6%89%93%E5%8C%8532%E4%BD%8Dexe%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有些程序需要在win7 32位系统上运行，pyinstaller默认打包的是64位exe文件，无法运行在32位系统上。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>前置环境：conda</p><h3 id="切换conda至32位开发环境"><a href="#切换conda至32位开发环境" class="headerlink" title="切换conda至32位开发环境"></a>切换conda至32位开发环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --env --set subdir win-32</span><br><span class="line">conda info</span><br></pre></td></tr></table></figure><p>这意味着在进行包的安装、更新等操作时，conda 会优先考虑为 win-32 平台设计的包（注意，这里是全局conda配置，在新建完新的conda环境，装好依赖后，需要改为win-64）</p><p>可以看到输出信息中显示 platform : win-32</p><h3 id="新建-conda-环境"><a href="#新建-conda-环境" class="headerlink" title="新建 conda 环境"></a>新建 conda 环境</h3><p>win7 32位系统最多支持到python 3.8.10,因此装低版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py32 python=3.7.13</span><br></pre></td></tr></table></figure><p>到此，32位开发环境已经准备好了，以后再要用到32位python环境，只需要激活这个环境即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate py32</span><br></pre></td></tr></table></figure><h3 id="安装-pyinstaller"><a href="#安装-pyinstaller" class="headerlink" title="安装 pyinstaller"></a>安装 pyinstaller</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><h3 id="打包32位exe文件"><a href="#打包32位exe文件" class="headerlink" title="打包32位exe文件"></a>打包32位exe文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller --onefile -c --uac-admin --noconfirm main.py</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>pyinstaller</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pip导出依赖离线安装</title>
    <link href="/2024/09/10/pip%E5%AF%BC%E5%87%BA%E4%BE%9D%E8%B5%96%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/"/>
    <url>/2024/09/10/pip%E5%AF%BC%E5%87%BA%E4%BE%9D%E8%B5%96%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为了方便离线机器环境部署，可以在有网的机器上导出requirements.txt文件，然后下载依赖文件，这样就可以在没有网络的机器上安装依赖</p><h3 id="安装pipreqs"><a href="#安装pipreqs" class="headerlink" title="安装pipreqs"></a>安装pipreqs</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipreqs</span><br></pre></td></tr></table></figure><h3 id="生成requirements-txt文件"><a href="#生成requirements-txt文件" class="headerlink" title="生成requirements.txt文件"></a>生成requirements.txt文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在项目根目录下执行</span><br><span class="line">```shell</span><br><span class="line">pipreqs . </span><br></pre></td></tr></table></figure><p>会导出requirements.txt文件，里面包含了项目所需要的依赖，可能某些依赖没有涵盖，需要手动添加</p><h3 id="下载依赖文件"><a href="#下载依赖文件" class="headerlink" title="下载依赖文件"></a>下载依赖文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir packages</span><br><span class="line">pip download -r requirements.txt -d packages</span><br></pre></td></tr></table></figure><p>会在当前目录下生成packages文件夹，里面包含了所有依赖文件，可以把这个文件夹拷贝到没有网络的机器上，然后在没有网络的机器上执行</p><h3 id="离线安装依赖"><a href="#离线安装依赖" class="headerlink" title="离线安装依赖"></a>离线安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt -f /path/to/packages</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">pip install -r requirements.txt --no-index --find-links=file:///path/to/packages</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPsec概念及工作原理</title>
    <link href="/2024/09/03/IPsec%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <url>/2024/09/03/IPsec%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是IPsec？"><a href="#什么是IPsec？" class="headerlink" title="什么是IPsec？"></a>什么是IPsec？</h2><p>IPsec（Internet Protocol Security）是一种网络层安全协议，用于保护网络通信的完整性、机密性和真实性。它是一套由多个协议和算法组成的框架，可以在IP层上对数据包进行加密和认证，是构建VPN的一种核心技术。</p><p><img src="https://xinhaojin.github.io/picx-images-hosting/1725329131814.2yyapdsvbc.jpg" alt="1725329131814"></p><h2 id="IPsec工作模式"><a href="#IPsec工作模式" class="headerlink" title="IPsec工作模式"></a>IPsec工作模式</h2><h3 id="传输模式（Transport-Mode）"><a href="#传输模式（Transport-Mode）" class="headerlink" title="传输模式（Transport Mode）"></a>传输模式（Transport Mode）</h3><ul><li><strong>加密范围</strong>：只加密数据包的有效载荷部分。</li><li><strong>IP头</strong>：保留原始的IP头，不加密。</li><li><strong>适用场景</strong>：端到端通信，如两台主机之间的直接通信。</li><li><strong>配置</strong>：相对简单，性能开销较小。</li><li><strong>IP地址</strong>：不隐藏通信双方的IP地址。</li></ul><h3 id="隧道模式（Tunnel-Mode）"><a href="#隧道模式（Tunnel-Mode）" class="headerlink" title="隧道模式（Tunnel Mode）"></a>隧道模式（Tunnel Mode）</h3><ul><li><strong>加密范围</strong>：加密整个数据包，包括有效载荷和IP头。</li><li><strong>IP头</strong>：创建一个新的IP头，隐藏原始的IP头。</li><li><strong>适用场景</strong>：网络到网络的通信，如VPN。</li><li><strong>配置</strong>：相对复杂，性能开销较大。</li><li><strong>IP地址</strong>：可以隐藏通信双方的IP地址，提供更高级别的隐私。</li></ul><h2 id="通信保护协议"><a href="#通信保护协议" class="headerlink" title="通信保护协议"></a>通信保护协议</h2><h3 id="AH（Authentication-Header）"><a href="#AH（Authentication-Header）" class="headerlink" title="AH（Authentication Header）"></a>AH（Authentication Header）</h3><ul><li><strong>功能</strong>：提供数据完整性和认证。</li><li><strong>加密</strong>：不提供数据加密。</li><li><strong>NAT支持</strong>：不支持网络地址转换（NAT），因为 AH 保护整个 IP 数据包，包括 IP 头，而 NAT 需要修改 IP 头中的地址信息。<br><img src="https://xinhaojin.github.io/picx-images-hosting/1725329435149.6t728cbzmm.jpg" alt="1725329435149"></li></ul><h3 id="ESP（Encapsulating-Security-Payload）"><a href="#ESP（Encapsulating-Security-Payload）" class="headerlink" title="ESP（Encapsulating Security Payload）"></a>ESP（Encapsulating Security Payload）</h3><ul><li><strong>功能</strong>：提供数据完整性、认证和加密。</li><li><strong>加密</strong>：保护数据不被未授权访问和篡改。</li><li><strong>NAT支持</strong>：支持网络地址转换（NAT），因为 ESP 只加密数据部分，不包括 IP 头，允许 NAT 设备修改地址信息。<br><img src="https://xinhaojin.github.io/picx-images-hosting/1725329442282.1lbrlcjn7k.jpg" alt="1725329442282"></li></ul><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="SA-Security-Association"><a href="#SA-Security-Association" class="headerlink" title="SA(Security Association)"></a>SA(Security Association)</h3><p><strong>定义</strong><br>SA 是 IPsec 中用于定义两个通信实体间安全通信规则的参数集合。</p><p><strong>组成</strong></p><ul><li><strong>加密和认证算法</strong>：确定用于保护数据的加密和认证方法。</li><li><strong>密钥</strong>：用于数据加密和验证的密钥。</li><li><strong>生存周期</strong>：定义 SA 的有效期限和数据包数量限制。</li></ul><p><strong>作用</strong><br>SAs 确保 IPsec 隧道内的数据传输是安全和受保护的。</p><h3 id="IKE（Internet-Key-Exchange）"><a href="#IKE（Internet-Key-Exchange）" class="headerlink" title="IKE（Internet Key Exchange）"></a>IKE（Internet Key Exchange）</h3><p><strong>定义</strong><br>IKE 是一种协议，用于在两个通信实体间自动协商、建立和维护 SAs。</p><p><strong>功能</strong></p><ul><li><strong>密钥交换</strong>：IKE 负责生成和交换加密密钥。</li><li><strong>参数协商</strong>：IKE 协商加密、认证和其它安全参数。</li><li><strong>安全通道</strong>：IKE 确保密钥交换过程的安全性。<br><img src="https://xinhaojin.github.io/picx-images-hosting/1725332232301.54xpb5mrdk.jpg" alt="1725332232301"></li></ul><h3 id="两种SA"><a href="#两种SA" class="headerlink" title="两种SA"></a>两种SA</h3><ul><li>IKE SA 主要用于建立安全的通信信道，进行密钥交换以及协商 IPsec SA 的各种参数等。</li><li>IPsec SA 则基于 IKE SA 协商的结果，具体定义对实际 IP 数据包进行加密、认证和封装等操作的安全规则和参数，以实现数据的安全传输。</li></ul><h2 id="IPsec-VPN-的建立"><a href="#IPsec-VPN-的建立" class="headerlink" title="IPsec VPN 的建立"></a>IPsec VPN 的建立</h2><p>IPsec VPN 通过在网络间建立加密的通信隧道来确保数据传输的安全性。</p><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><p>IPsec VPN建立的第一阶段主要是为了建立一个安全的通道，用于后续的协商和数据传输。</p><h4 id="主动模式"><a href="#主动模式" class="headerlink" title="主动模式"></a>主动模式</h4><ul><li>特点：在主动模式下，通信双方会进行多次消息交换，以协商安全参数。这个过程相对较慢，但更加安全。</li><li>步骤：<ul><li>发起方发送一个包含安全策略提议的消息给响应方。</li><li>响应方收到消息后，选择一个合适的安全策略，并发送回应消息。</li><li>双方进行密钥交换，以生成用于加密和认证的共享密钥。</li><li>最后，双方进行身份验证，确保通信的双方是合法的。<br><img src="https://xinhaojin.github.io/picx-images-hosting/1725332902352.7w6rj89cup.jpg" alt="1725332902352"></li></ul></li></ul><h4 id="野蛮模式"><a href="#野蛮模式" class="headerlink" title="野蛮模式"></a>野蛮模式</h4><ul><li>特点：野蛮模式的协商过程相对简单快速，但安全性相对较低。</li><li>步骤：<ul><li>发起方直接发送一个包含所有安全策略提议和身份信息的消息给响应方。</li><li>响应方收到消息后，选择一个合适的安全策略，并发送回应消息，其中包含身份验证信息。</li><li>发起方收到回应消息后，进行身份验证，如果验证通过，则建立安全通道。<br><img src="https://xinhaojin.github.io/picx-images-hosting/1725332909549.99tan9ku0w.jpg" alt="1725332909549"></li></ul></li></ul><h4 id="密钥的产生"><a href="#密钥的产生" class="headerlink" title="密钥的产生"></a>密钥的产生</h4><p>Diffie-Hellman（DH）算法是一种密钥交换算法，用于在不安全的通信信道上安全地生成共享密钥。以下是 DH 算法的具体流程：</p><ol><li><p>初始化参数</p><ul><li>首先确定两个大素数 <code>p</code>和 <code>g</code>，其中 <code>p</code>是一个非常大的素数，<code>g</code>是一个小于 <code>p</code>的整数，且 <code>g</code>是 <code>p</code>的一个原根。这些参数可以公开。</li></ul></li><li><p>双方生成私钥</p><ul><li>通信双方（通常称为 Alice 和 Bob）各自独立地生成一个随机整数作为私钥。</li><li>Alice 生成私钥 <code>a</code>，<code>a</code>是一个随机整数且满足 <code>1 &lt; a &lt; p - 1</code>。</li><li>Bob 生成私钥 <code>b</code>，同样 <code>1 &lt; b &lt; p - 1</code>。</li></ul></li><li><p>计算公钥</p><ul><li>Alice 和 Bob 分别使用自己的私钥和公开的参数计算公钥。</li><li>Alice 计算公钥 <code>A = g^a mod p</code>。</li><li>Bob 计算公钥 <code>B = g^b mod p</code>。</li></ul></li><li><p>交换公钥</p><ul><li>Alice 将自己的公钥 <code>A</code>发送给 Bob。</li><li>Bob 将自己的公钥 <code>B</code>发送给 Alice。</li></ul></li><li><p>计算共享密钥</p><ul><li>Alice 收到 Bob 的公钥 <code>B</code>后，计算共享密钥 <code>K = B^a mod p</code>。</li><li>Bob 收到 Alice 的公钥 <code>A</code>后，计算共享密钥 <code>K = A^b mod p</code>。</li></ul></li></ol><p>由于指数运算的性质，双方计算得到的共享密钥是相同的，即 <code>K = (g^b mod p)^a mod p = (g^a mod p)^b mod p</code>。</p><p>这个共享密钥可以用于后续的加密通信，只有通信双方知道这个密钥，攻击者即使截获了公开参数和公钥，也很难计算出共享密钥，因为计算离散对数是一个非常困难的问题。</p><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><p>IPsec VPN建立的第二阶段是在第一阶段建立的安全通道基础上，进一步协商具体的数据加密和认证参数，以确保实际数据传输的安全性。</p><ul><li>加密算法选择：双方协商选择一种合适的加密算法，如 AES、DES 等。</li><li>认证算法选择：确定一种认证算法，如 HMAC-SHA1、HMAC-SHA256 等。</li><li>封装协议：选择 IPsec 的封装协议，如 ESP（Encapsulating Security Payload）或 AH（Authentication Header）。</li><li>安全关联（SA）建立：根据协商的参数，建立安全关联，用于实际的数据加密和认证。</li></ul><p>通过以上两个阶段的协商和建立，IPsec VPN 可以在网络间建立起安全的通信隧道，确保数据传输的机密性、完整性和真实性。</p><h2 id="IPsec-的-NAT（Network-Address-Translation）-穿透方法"><a href="#IPsec-的-NAT（Network-Address-Translation）-穿透方法" class="headerlink" title="IPsec 的 NAT（Network Address Translation） 穿透方法"></a>IPsec 的 NAT（Network Address Translation） 穿透方法</h2><h3 id="（AH、ESP）与NAT的兼容性分析"><a href="#（AH、ESP）与NAT的兼容性分析" class="headerlink" title="（AH、ESP）与NAT的兼容性分析"></a>（AH、ESP）与NAT的兼容性分析</h3><p>AH（Authentication Header，认证头）协议不兼容 NAT。</p><p>AH 协议对整个 IP 数据包（包括 IP 报头）进行完整性校验和身份认证。当数据包经过 NAT 设备时，NAT 会修改 IP 报头中的源地址和端口号等信息，这将导致 AH 计算的完整性校验失败，因为 AH 验证的数据包括了原始的、未被 NAT 修改过的 IP 报头。</p><p>ESP（Encapsulating Security Payload，封装安全载荷）协议在一定程度上兼容 NAT，但也存在一些限制。</p><p>ESP 协议主要对 IP 数据包的载荷部分进行加密和可选的完整性校验。当 NAT 只修改 IP 报头中的地址和端口信息而不触及 ESP 封装的载荷部分时，ESP 可以在经过 NAT 后继续工作。然而，如果 NAT 设备对 ESP 数据包进行深度包检测或修改了 ESP 载荷部分，那么 ESP 的安全性将受到破坏。</p><h3 id="NAT-T（NAT-Traversal）"><a href="#NAT-T（NAT-Traversal）" class="headerlink" title="NAT-T（NAT Traversal）"></a>NAT-T（NAT Traversal）</h3><p>由于 AH 协议不兼容 NAT，而 ESP 协议与 NAT 的兼容性有限，为了解决 IPsec 在 NAT 环境下的通信问题，引入了 NAT-T（NAT Traversal）技术。</p><p>NAT-T 主要通过在 IPsec 数据包外再封装一个 UDP 包头的方式来实现 NAT 穿透。这样，当 IPsec 数据包经过 NAT 设备时，NAT 设备将把这个 UDP 数据包当作普通的 UDP 流量进行处理，只修改 UDP 报头和 IP 报头中的地址信息，而不会影响到内部的 IPsec 数据包。从而使得 IPsec 可以在 NAT 环境下正常通信。</p><h2 id="IPsec-与-NAT-T-的工作流程"><a href="#IPsec-与-NAT-T-的工作流程" class="headerlink" title="IPsec 与 NAT-T 的工作流程"></a>IPsec 与 NAT-T 的工作流程</h2><p>从通信两端支持 NAT-T 的设备角度来看，IPsec 和 NAT-T 的具体工作流程如下：</p><h3 id="一、初始化阶段"><a href="#一、初始化阶段" class="headerlink" title="一、初始化阶段"></a>一、初始化阶段</h3><ol><li>通信双方的设备确定需要建立 IPsec 连接，并检测到它们处于 NAT 环境中。此时，设备会启用 NAT-T 功能。</li></ol><h3 id="二、IKE-协商阶段"><a href="#二、IKE-协商阶段" class="headerlink" title="二、IKE 协商阶段"></a>二、IKE 协商阶段</h3><ol><li>发起方设备向响应方设备发送 IKE（Internet Key Exchange）请求，该请求中包含了支持 NAT-T 的标识。</li><li>响应方设备收到请求后，如果也支持 NAT-T，则回应一个包含支持 NAT-T 标识的 IKE 响应。</li><li>双方设备开始进行 IKE 协商，确定加密算法、认证方法、Diffie-Hellman 组等安全参数。在这个过程中，由于双方都知道要使用 NAT-T，所以会对协商的消息进行特殊处理，以适应 NAT-T 的封装格式。</li></ol><h3 id="三、NAT-T-封装阶段"><a href="#三、NAT-T-封装阶段" class="headerlink" title="三、NAT-T 封装阶段"></a>三、NAT-T 封装阶段</h3><ol><li>一旦 IKE 协商成功，双方设备开始建立 IPsec SA（Security Association）。在这个阶段，IPsec 数据包会被封装在一个 UDP 数据包中，这个 UDP 数据包的目的端口通常是 4500。</li><li>封装后的数据包可以在经过 NAT 设备时被正确处理，因为 NAT 设备会把这个 UDP 数据包当作普通的 UDP 流量，只修改 IP 报头和 UDP 报头中的地址和端口信息，而不会影响到内部的 IPsec 数据包。</li></ol><h3 id="四、数据传输阶段"><a href="#四、数据传输阶段" class="headerlink" title="四、数据传输阶段"></a>四、数据传输阶段</h3><ol><li>通信双方可以开始通过 IPsec 隧道传输数据。发送方设备将数据进行 IPsec 加密和封装后，再用 UDP 进行封装，然后发送出去。</li><li>数据包经过 NAT 设备时，NAT 设备进行地址和端口转换。</li><li>接收方设备收到数据包后，先去除 UDP 封装，然后进行 IPsec 解密和验证，得到原始数据。</li></ol><h3 id="五、连接维护阶段"><a href="#五、连接维护阶段" class="headerlink" title="五、连接维护阶段"></a>五、连接维护阶段</h3><ol><li>通信双方的设备会定期发送 IKE 保活消息，以确保 IPsec 连接的有效性。如果在一定时间内没有收到对方的回应，设备会尝试重新建立连接。</li><li>如果 NAT 设备的地址或端口发生变化，双方设备会通过 IKE 协商来更新 IPsec 连接的参数，以适应 NAT 的变化。</li></ol><p>总之，当通信两端的设备支持 NAT-T 时，它们可以通过特殊的封装和协商过程，在 NAT 环境下建立安全的 IPsec 连接，实现数据的加密传输。</p>]]></content>
    
    
    <categories>
      
      <category>网工</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IPsec</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加网卡第二IP</title>
    <link href="/2024/08/28/%E6%B7%BB%E5%8A%A0%E7%BD%91%E5%8D%A1%E7%AC%AC%E4%BA%8CIP/"/>
    <url>/2024/08/28/%E6%B7%BB%E5%8A%A0%E7%BD%91%E5%8D%A1%E7%AC%AC%E4%BA%8CIP/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>当需要同时ping通两个网段的IP时，如果没有第二张可用网卡，那么也可以添加网卡的第二个IP地址。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>添加第二个IP的命令是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ip add address &quot;&#123;interface_name&#125;&quot; &#123;ip_address&#125;</span><br><span class="line"> &#123;subnet_mask&#125;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ip add address &quot;以太网&quot; 192.168.1.100 255.255.255.0</span><br></pre></td></tr></table></figure><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> ipaddress</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EthernetManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.interface_name = <span class="variable language_">self</span>.get_adapter_names()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_adapter_names</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取主要的以太网适配器名称&quot;&quot;&quot;</span></span><br><span class="line">        result = os.popen(<span class="string">&#x27;ipconfig&#x27;</span>)</span><br><span class="line">        res = result.read().strip()</span><br><span class="line">        adapter_list = re.findall(</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;(?&lt;=以太网适配器 ).*?(?=:)|(?&lt;=无线局域网适配器 ).*?(?=:)&#x27;&#x27;&#x27;</span>, res)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">sort_key</span>(<span class="params">adapter_name</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;以太网&#x27;</span> <span class="keyword">in</span> adapter_name:</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">0</span>, adapter_name)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;Ethernet&#x27;</span> <span class="keyword">in</span> adapter_name:</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">1</span>, adapter_name)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;eht&#x27;</span> <span class="keyword">in</span> adapter_name:</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">2</span>, adapter_name)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;本地连接&#x27;</span> <span class="keyword">in</span> adapter_name:</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">3</span>, adapter_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">4</span>, adapter_name)</span><br><span class="line"></span><br><span class="line">        sorted_adapters = <span class="built_in">sorted</span>(adapter_list, key=sort_key)</span><br><span class="line">        <span class="keyword">return</span> sorted_adapters</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_ips</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取当前适配器的所有IP地址&quot;&quot;&quot;</span></span><br><span class="line">        command = <span class="string">&#x27;ipconfig&#x27;</span></span><br><span class="line">        result = subprocess.run(command, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        output = result.stdout.strip()</span><br><span class="line">        start = output.find(<span class="string">f&quot;<span class="subst">&#123;self.interface_name&#125;</span>:&quot;</span>)</span><br><span class="line">        end = output.find(<span class="string">&quot;默认网关&quot;</span>, start)</span><br><span class="line">        end = output.find(<span class="string">&quot;\n&quot;</span>, end)</span><br><span class="line">        start = output.find(<span class="string">&quot;IPv4 地址&quot;</span>)</span><br><span class="line">        result = output[start:end].strip()</span><br><span class="line">        pattern = <span class="string">r&#x27;IPv4.*?((?:\d+\.\d+\.\d+\.\d+))&#x27;</span></span><br><span class="line">        ips = re.findall(pattern, result, re.DOTALL)</span><br><span class="line"></span><br><span class="line">        gateway = result.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">1</span>].strip()</span><br><span class="line">        subnet_mask = result.split(<span class="string">&#x27;默认网关&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">1</span>].strip()</span><br><span class="line">        <span class="comment"># 判断ip地址是否和网关在同一网段</span></span><br><span class="line">        <span class="comment"># 使用子网掩码创建IPv4Network对象</span></span><br><span class="line">        network = ipaddress.ip_network(<span class="string">f&#x27;0.0.0.0/<span class="subst">&#123;subnet_mask&#125;</span>&#x27;</span>, strict=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 获取前缀长度</span></span><br><span class="line">        prefix_length = network.prefixlen</span><br><span class="line">        network = ipaddress.ip_network(<span class="string">f&#x27;<span class="subst">&#123;gateway&#125;</span>/<span class="subst">&#123;prefix_length&#125;</span>&#x27;</span>, strict=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否在同一网段,排序,在网关网段的IP地址,挪到最后</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">ip_sort</span>(<span class="params">ip</span>):</span><br><span class="line">            <span class="keyword">if</span> ipaddress.ip_address(ip) <span class="keyword">in</span> network:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        ips.sort(key=ip_sort)</span><br><span class="line">        <span class="keyword">return</span> ips</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_ip</span>(<span class="params">self, ip_address</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;移除指定的IP地址&quot;&quot;&quot;</span></span><br><span class="line">        command = <span class="string">f&#x27;netsh interface ip delete address &quot;<span class="subst">&#123;self.interface_name&#125;</span>&quot; <span class="subst">&#123;ip_address&#125;</span>&#x27;</span></span><br><span class="line">        subprocess.run(command, shell=<span class="literal">True</span>, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_ip</span>(<span class="params">self, ip_address, subnet_mask</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加新的IP地址&quot;&quot;&quot;</span></span><br><span class="line">        command = <span class="string">f&#x27;netsh interface ip add address &quot;<span class="subst">&#123;self.interface_name&#125;</span>&quot; <span class="subst">&#123;ip_address&#125;</span> <span class="subst">&#123;subnet_mask&#125;</span>&#x27;</span></span><br><span class="line">        subprocess.run(command, shell=<span class="literal">True</span>, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_extra_ips</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;移除多余的IP地址,只保留最后一个&quot;&quot;&quot;</span></span><br><span class="line">        ips = <span class="variable language_">self</span>.get_ips()</span><br><span class="line">        <span class="keyword">for</span> ip <span class="keyword">in</span> ips[:-<span class="number">1</span>]:  <span class="comment"># 保留最后一个IP</span></span><br><span class="line">            <span class="variable language_">self</span>.remove_ip(ip)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_second_ip</span>(<span class="params">self, new_ip, subnet_mask</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加第二个IP地址:删除多余IP,然后添加新IP&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.remove_extra_ips()</span><br><span class="line">        <span class="variable language_">self</span>.add_ip(new_ip, subnet_mask)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_adapter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;选择以太网适配器&quot;&quot;&quot;</span></span><br><span class="line">        adapter_list = <span class="variable language_">self</span>.get_adapter_names()</span><br><span class="line">        <span class="comment"># 打印适配器列表供用户选择</span></span><br><span class="line">        <span class="keyword">for</span> i, adapter <span class="keyword">in</span> <span class="built_in">enumerate</span>(adapter_list, <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>. <span class="subst">&#123;adapter&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 请求用户输入并验证输入</span></span><br><span class="line">        choice = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> choice <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(adapter_list) + <span class="number">1</span>):</span><br><span class="line">            choice = <span class="built_in">input</span>(<span class="string">&quot;请输入选择的网卡编号 (直接按回车默认选择第一个): &quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="string">&#x27;&#x27;</span>:  <span class="comment"># 用户直接按回车</span></span><br><span class="line">                choice = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> choice.isdigit() <span class="keyword">and</span> <span class="number">1</span> &lt;= <span class="built_in">int</span>(choice) &lt;= <span class="built_in">len</span>(adapter_list):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入错误,请确保输入的是1到&quot;</span>, <span class="built_in">len</span>(adapter_list), <span class="string">&quot;之间的数字&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置em的interface_name属性</span></span><br><span class="line">        <span class="variable language_">self</span>.interface_name = adapter_list[<span class="built_in">int</span>(choice) - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;您选择的网卡为: <span class="subst">&#123;self.interface_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    em = EthernetManager()</span><br><span class="line">    em.select_adapter()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ip=<span class="built_in">input</span>(<span class="string">&quot;请输入要添加的IP地址: &quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ipaddress.ip_address(ip)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入的IP地址不合法,请重新输入&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        subnet_mask=<span class="built_in">input</span>(<span class="string">&quot;请输入子网掩码,回车默认255.255.255.0:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> subnet_mask==<span class="string">&quot;&quot;</span>:</span><br><span class="line">            subnet_mask=<span class="string">&quot;255.255.255.0&quot;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ipaddress.IPv4Network(<span class="string">f&quot;0.0.0.0/<span class="subst">&#123;subnet_mask&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入的子网掩码不合法,请重新输入&quot;</span>)</span><br><span class="line">    em.add_second_ip(ip, subnet_mask)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> ip <span class="keyword">in</span> em.get_ips():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;添加成功&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;添加失败,请以管理员身份运行&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>当需要频繁更换第二IP地址时，可以用此脚本来实现。</p><ul><li>首先列出所有的网卡，供用户选择</li><li>选择网卡后，如果该网卡已经有多个IP，那么只保留一个与默认网关同网段的IP，其余IP地址全部删除</li><li>然后输入并添加第二个IP地址</li><li>验证是否成功，不成功的原因基本上是因为没有以管理员权限运行</li></ul>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IP地址修改器</title>
    <link href="/2024/08/27/IP%E5%9C%B0%E5%9D%80%E4%BF%AE%E6%94%B9%E5%99%A8/"/>
    <url>/2024/08/27/IP%E5%9C%B0%E5%9D%80%E4%BF%AE%E6%94%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在需要频繁换IP地址的情况下，打开网络设置去修改比较慢，因此设计一个IP地址修改器，可以快速修改IP</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IpManage</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.ip_list = <span class="variable language_">self</span>.get_ip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_ip</span>(<span class="params">self, name, ip, mask, gateway</span>):</span><br><span class="line">        <span class="comment"># 设置静态IP地址</span></span><br><span class="line">        os.system(<span class="string">f&quot;netsh interface ip set address name=\&quot;<span class="subst">&#123;name&#125;</span>\&quot; static <span class="subst">&#123;ip&#125;</span> <span class="subst">&#123;mask&#125;</span> <span class="subst">&#123;gateway&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_dns</span>(<span class="params">self, name, dns_primary, dns_secondary</span>):</span><br><span class="line">        <span class="comment"># 设置DNS服务器地址</span></span><br><span class="line">        os.system(<span class="string">f&quot;netsh interface ip set dnsservers name=\&quot;<span class="subst">&#123;name&#125;</span>\&quot; static addr=<span class="subst">&#123;dns_primary&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> dns_secondary:</span><br><span class="line">            os.system(<span class="string">f&quot;netsh interface ip add dnsservers name=\&quot;<span class="subst">&#123;name&#125;</span>\&quot; addr=<span class="subst">&#123;dns_secondary&#125;</span> index=2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_ip</span>(<span class="params">self</span>):</span><br><span class="line">        result = os.popen(<span class="string">&#x27;ipconfig&#x27;</span>)</span><br><span class="line">        res = result.read().strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用正则表达式查找适配器名称</span></span><br><span class="line">        resultlist = re.findall(<span class="string">&#x27;&#x27;&#x27;(?&lt;=以太网适配器 ).*?(?=:)|(?&lt;=无线局域网适配器 ).*?(?=:)&#x27;&#x27;&#x27;</span>, res)  </span><br><span class="line">        <span class="comment"># print(&quot;可用的网络适配器：&quot;, resultlist)</span></span><br><span class="line">        <span class="keyword">return</span> resultlist</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_adapter_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 让用户选择适配器</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请选择要配置的网络适配器（例如: 以太网）:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i, adapter <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.ip_list, <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>. <span class="subst">&#123;adapter&#125;</span>&quot;</span>)</span><br><span class="line">        choice = <span class="built_in">input</span>(<span class="string">&quot;请输入选择的适配器编号: &quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.ip_list[<span class="built_in">int</span>(choice) - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    im = IpManage()</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 获取用户选择的适配器名称</span></span><br><span class="line">    adapter_name = im.get_adapter_name()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户输入IP配置信息</span></span><br><span class="line">    ip_addr = <span class="built_in">input</span>(<span class="string">&quot;请输入IP地址 (默认: 192.168.31.108): &quot;</span>) <span class="keyword">or</span> <span class="string">&quot;192.168.31.108&quot;</span></span><br><span class="line">    subnet_mask = <span class="built_in">input</span>(<span class="string">&quot;请输入子网掩码 (默认: 255.255.255.0): &quot;</span>) <span class="keyword">or</span> <span class="string">&quot;255.255.255.0&quot;</span></span><br><span class="line">    gateway = <span class="built_in">input</span>(<span class="string">&quot;请输入网关地址 (默认: 192.168.31.1): &quot;</span>) <span class="keyword">or</span> <span class="string">&quot;192.168.31.1&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 用户输入DNS配置信息</span></span><br><span class="line">    dns_primary = <span class="built_in">input</span>(<span class="string">&quot;请输入首选DNS服务器地址 (默认: 192.168.31.1): &quot;</span>) <span class="keyword">or</span> <span class="string">&quot;192.168.31.1&quot;</span></span><br><span class="line">    dns_secondary = <span class="built_in">input</span>(<span class="string">&quot;请输入备用DNS服务器地址 (默认: 留空可不设置): &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置IP和DNS</span></span><br><span class="line">    im.set_ip(adapter_name, ip_addr, subnet_mask, gateway)</span><br><span class="line">    im.set_dns(adapter_name, dns_primary, dns_secondary)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;IP和DNS设置成功&quot;</span>)</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;按任意键退出...&quot;</span>)</span><br><span class="line">    <span class="comment"># pyinstaller --onefile ip.py</span></span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://xinhaojin.github.io/imgs-host/20240827/1724732053037.jpg"><br>也可以使用pyinstaller将代码打包成exe文件，方便使用。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller --onefile ip.py</span><br></pre></td></tr></table></figure><p>生成的exe文件在dist目录下。</p><p>如果有几个固定的IP需要修改，可以分别写成几个exe文件，这样只要用管理员权限运行exe文件即可快速修改！</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>必须以管理员权限运行才能修改IP地址，否则即使没有提示权限不足也无法真正修改IP地址。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>处理非标准http响应</title>
    <link href="/2024/08/01/%E5%A4%84%E7%90%86%E9%9D%9E%E6%A0%87%E5%87%86http%E5%93%8D%E5%BA%94/"/>
    <url>/2024/08/01/%E5%A4%84%E7%90%86%E9%9D%9E%E6%A0%87%E5%87%86http%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>手上有一台温湿度传感器，网线连接，内部有http服务，浏览器直接访问完全没问题，但是使用python的http，request库都报错，使用apipost发现也是错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 发送GET请求</span></span><br><span class="line">response = requests.get(<span class="string">&#x27;http://192.168.31.188&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印原始响应内容</span></span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConnectionError: (<span class="string">&#x27;Connection aborted.&#x27;</span>, BadStatusLine(<span class="string">&#x27;HTTP/1.1 0 -\r\n&#x27;</span>,))</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>刚开始以为是请求头之类的问题，但一个小传感器搞复杂的安全策略完全没必要啊，后来通过wireshark抓包发现他的http响应是这样的，里面已经包含了我需要的数据，但是没有办法被正确处理：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>TH<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&quot;width: 960px;&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;2&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-family: Verdana; font-weight: bold; font-style: italic; background-color: rgb(51, 255, 255); text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-style: italic;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>Air Conditioning Controller<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span> <span class="attr">style</span>=<span class="string">&quot;font-family: Verdana;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: rgb(51, 51, 255);&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>Ethernet IP Type<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;menu.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sysconfig&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&quot;width: 960px; &quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;2&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-family: Verdana; font-weight: bold; font-style: italic; background-color: rgb(51, 255, 255); text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Temprature: 26.7 ℃<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Humidity: 42.9 %<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lastcmd: 0<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Device ID: 1482184792<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bus Addr: 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;checkinSubmit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Click to enter the configuration menu list&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span> <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">class</span>=<span class="string">&quot;footmsg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: silver;&quot;</span>&gt;</span>All Rights Reserved@2023<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是其他网站的http响应，经过对比之后发现规范的http响应应该以HTTP&#x2F;1.1 200 OK开头，这时候再看错误似乎就知道什么意思了，badstatusline不就是状态行错误嘛</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Thu, 01 Aug <span class="number">2024</span> 08:<span class="number">58</span>:<span class="number">32</span> GMT</span><br><span class="line">Content-<span class="type">Type</span>: text/plain; charset=utf-<span class="number">8</span></span><br><span class="line">Content-Length: <span class="number">2417</span></span><br><span class="line">Connection: keep-alive</span><br><span class="line"><span class="type">Set</span>-Cookie: tgw_l7_route=a699e39024d0403234b82455ae41cef1; Expires=Thu, 01-Aug-<span class="number">2024</span> 09:<span class="number">28</span>:<span class="number">32</span> GMT; Path=/</span><br><span class="line"></span><br><span class="line">&lt;sg <span class="built_in">type</span>=<span class="string">&quot;0&quot;</span> au=<span class="string">&quot;https://www.sogou.com/web?bddn=9027558936136805&amp;brnd=6014570413749830&amp;&quot;</span> eu=<span class="string">&quot;&amp;lxoq=baidu&quot;</span>&gt;</span><br><span class="line">    &lt;e&gt;</span><br><span class="line">        &lt;l h=<span class="string">&quot;1&quot;</span> d=<span class="string">&quot;0&quot;</span> vr=<span class="string">&quot;0&quot;</span> r=<span class="string">&quot;0&quot;</span> s=<span class="string">&quot;1&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">            &lt;t t=<span class="string">&quot;0&quot;</span> u=<span class="string">&quot;query=&quot;</span> sw=<span class="string">&quot;m.baidu.com&quot;</span> r=<span class="string">&quot;0-11&quot;</span> tp=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;w s=<span class="string">&quot;;1;;;;;;&quot;</span>&gt;&lt;![CDATA[m.baidu.com]]&gt;&lt;/w&gt;</span><br><span class="line">            &lt;/t&gt;</span><br><span class="line">        &lt;/l&gt;</span><br><span class="line">    &lt;/e&gt;</span><br><span class="line">    &lt;e&gt;</span><br><span class="line">        &lt;l h=<span class="string">&quot;1&quot;</span> d=<span class="string">&quot;0&quot;</span> vr=<span class="string">&quot;0&quot;</span> r=<span class="string">&quot;0&quot;</span> s=<span class="string">&quot;1&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">            &lt;t t=<span class="string">&quot;0&quot;</span> u=<span class="string">&quot;query=&quot;</span> sw=<span class="string">&quot;baidu.com&quot;</span> r=<span class="string">&quot;0-9&quot;</span> tp=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;w s=<span class="string">&quot;;1;;;;;;&quot;</span>&gt;&lt;![CDATA[baidu.com]]&gt;&lt;/w&gt;</span><br><span class="line">            &lt;/t&gt;</span><br><span class="line">        &lt;/l&gt;</span><br><span class="line">    &lt;/e&gt;</span><br><span class="line">    &lt;e&gt;</span><br><span class="line">        &lt;l h=<span class="string">&quot;1&quot;</span> d=<span class="string">&quot;0&quot;</span> vr=<span class="string">&quot;0&quot;</span> r=<span class="string">&quot;0&quot;</span> s=<span class="string">&quot;1&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">            &lt;t t=<span class="string">&quot;0&quot;</span> u=<span class="string">&quot;query=&quot;</span> sw=<span class="string">&quot;%B0%D9%B6%C8&quot;</span> r=<span class="string">&quot;0-2&quot;</span> tp=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;w s=<span class="string">&quot;;1;;;;;;&quot;</span>&gt;&lt;![CDATA[....]]&gt;&lt;/w&gt;</span><br><span class="line">            &lt;/t&gt;</span><br><span class="line">        &lt;/l&gt;</span><br><span class="line">    &lt;/e&gt;</span><br><span class="line">    &lt;e&gt;</span><br><span class="line">        &lt;l h=<span class="string">&quot;1&quot;</span> d=<span class="string">&quot;0&quot;</span> vr=<span class="string">&quot;0&quot;</span> r=<span class="string">&quot;0&quot;</span> s=<span class="string">&quot;1&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">            &lt;t t=<span class="string">&quot;0&quot;</span> u=<span class="string">&quot;query=&quot;</span> sw=<span class="string">&quot;%B0%D9%B6%C8%D2%BB%CF%C2&quot;</span> r=<span class="string">&quot;0-4&quot;</span> tp=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;w s=<span class="string">&quot;;1;;;;;;&quot;</span>&gt;&lt;![CDATA[........]]&gt;&lt;/w&gt;</span><br><span class="line">            &lt;/t&gt;</span><br><span class="line">        &lt;/l&gt;</span><br><span class="line">    &lt;/e&gt;</span><br><span class="line">    &lt;e&gt;</span><br><span class="line">        &lt;l h=<span class="string">&quot;1&quot;</span> d=<span class="string">&quot;0&quot;</span> vr=<span class="string">&quot;0&quot;</span> r=<span class="string">&quot;0&quot;</span> s=<span class="string">&quot;1&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">            &lt;t t=<span class="string">&quot;0&quot;</span> u=<span class="string">&quot;query=&quot;</span> sw=<span class="string">&quot;baidu%B0%D9%B6%C8%CA%D7%D2%B3&quot;</span> r=<span class="string">&quot;0-9&quot;</span> tp=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;w s=<span class="string">&quot;;1;;;;;;&quot;</span>&gt;&lt;![CDATA[baidu........]]&gt;&lt;/w&gt;</span><br><span class="line">            &lt;/t&gt;</span><br><span class="line">        &lt;/l&gt;</span><br><span class="line">    &lt;/e&gt;</span><br><span class="line">    &lt;e&gt;</span><br><span class="line">        &lt;l h=<span class="string">&quot;1&quot;</span> d=<span class="string">&quot;0&quot;</span> vr=<span class="string">&quot;0&quot;</span> r=<span class="string">&quot;0&quot;</span> s=<span class="string">&quot;1&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">            &lt;t t=<span class="string">&quot;0&quot;</span> u=<span class="string">&quot;query=&quot;</span> sw=<span class="string">&quot;%B0%D9%B6%C8%B7%AD%D2%EB&quot;</span> r=<span class="string">&quot;0-4&quot;</span> tp=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;w s=<span class="string">&quot;;1;;;;;;&quot;</span>&gt;&lt;![CDATA[........]]&gt;&lt;/w&gt;</span><br><span class="line">            &lt;/t&gt;</span><br><span class="line">        &lt;/l&gt;</span><br><span class="line">    &lt;/e&gt;</span><br><span class="line">    &lt;e&gt;</span><br><span class="line">        &lt;l h=<span class="string">&quot;1&quot;</span> d=<span class="string">&quot;0&quot;</span> vr=<span class="string">&quot;0&quot;</span> r=<span class="string">&quot;0&quot;</span> s=<span class="string">&quot;1&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">            &lt;t t=<span class="string">&quot;0&quot;</span> u=<span class="string">&quot;query=&quot;</span> sw=<span class="string">&quot;188baidu&quot;</span> r=<span class="string">&quot;0-8&quot;</span> tp=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;w s=<span class="string">&quot;;1;;;;;;&quot;</span>&gt;&lt;![CDATA[188baidu]]&gt;&lt;/w&gt;</span><br><span class="line">            &lt;/t&gt;</span><br><span class="line">        &lt;/l&gt;</span><br><span class="line">    &lt;/e&gt;</span><br><span class="line">    &lt;e&gt;</span><br><span class="line">        &lt;l h=<span class="string">&quot;1&quot;</span> d=<span class="string">&quot;0&quot;</span> vr=<span class="string">&quot;0&quot;</span> r=<span class="string">&quot;0&quot;</span> s=<span class="string">&quot;1&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">            &lt;t t=<span class="string">&quot;0&quot;</span> u=<span class="string">&quot;query=&quot;</span> sw=<span class="string">&quot;%B0%D9%B6%C8%B5%D8%CD%BC&quot;</span> r=<span class="string">&quot;0-4&quot;</span> tp=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;w s=<span class="string">&quot;;1;;;;;;&quot;</span>&gt;&lt;![CDATA[........]]&gt;&lt;/w&gt;</span><br><span class="line">            &lt;/t&gt;</span><br><span class="line">        &lt;/l&gt;</span><br><span class="line">    &lt;/e&gt;</span><br><span class="line">    &lt;e&gt;</span><br><span class="line">        &lt;l h=<span class="string">&quot;1&quot;</span> d=<span class="string">&quot;0&quot;</span> vr=<span class="string">&quot;0&quot;</span> r=<span class="string">&quot;0&quot;</span> s=<span class="string">&quot;1&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">            &lt;t t=<span class="string">&quot;0&quot;</span> u=<span class="string">&quot;query=&quot;</span> sw=<span class="string">&quot;baidu%B0%D9%B6%C8%D2%BB%CF%C2%B9%D9%CD%F8&quot;</span> r=<span class="string">&quot;0-11&quot;</span> tp=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;w s=<span class="string">&quot;;1;;;;;;&quot;</span>&gt;&lt;![CDATA[baidu............]]&gt;&lt;/w&gt;</span><br><span class="line">            &lt;/t&gt;</span><br><span class="line">        &lt;/l&gt;</span><br><span class="line">    &lt;/e&gt;</span><br><span class="line">    &lt;e&gt;</span><br><span class="line">        &lt;l h=<span class="string">&quot;1&quot;</span> d=<span class="string">&quot;0&quot;</span> vr=<span class="string">&quot;0&quot;</span> r=<span class="string">&quot;0&quot;</span> s=<span class="string">&quot;1&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">            &lt;t t=<span class="string">&quot;0&quot;</span> u=<span class="string">&quot;query=&quot;</span> sw=<span class="string">&quot;%B0%D9%B6%C8%CE%C4%BF%E2&quot;</span> r=<span class="string">&quot;0-4&quot;</span> tp=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;w s=<span class="string">&quot;;1;;;;;;&quot;</span>&gt;&lt;![CDATA[........]]&gt;&lt;/w&gt;</span><br><span class="line">            &lt;/t&gt;</span><br><span class="line">        &lt;/l&gt;</span><br><span class="line">    &lt;/e&gt;</span><br><span class="line">&lt;/sg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>http响应不规范，这就导致经过高级封装的一些操作http的库没有办法正确解析响应的内容，这时候就需要采用更原始的方法了，也就是不考虑http是否规范，直接在tcp层面获取原始tcp报文，再进行解析:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标服务器的IP地址和端口</span></span><br><span class="line">host = <span class="string">&#x27;192.168.31.188&#x27;</span></span><br><span class="line">port = <span class="number">80</span>  <span class="comment"># HTTP默认端口是80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个socket对象</span></span><br><span class="line">client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到服务器</span></span><br><span class="line">client_socket.connect((host, port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建HTTP GET请求</span></span><br><span class="line">request = <span class="string">f&quot;GET / HTTP/1.1\r\nHost: <span class="subst">&#123;host&#125;</span>\r\nConnection: close\r\n\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">client_socket.sendall(request.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收响应数据</span></span><br><span class="line">response = <span class="string">b&quot;&quot;</span></span><br><span class="line">buffer_size = <span class="number">1024</span>  <span class="comment"># 缓冲区大小</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    buffer = client_socket.recv(buffer_size)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> buffer:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 如果没有更多数据，退出循环</span></span><br><span class="line">    response += buffer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印接收到的原始响应数据</span></span><br><span class="line"><span class="built_in">print</span>(response.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>))  <span class="comment"># 假设响应内容是UTF-8编码的，忽略解码错误</span></span><br></pre></td></tr></table></figure><p>这样就能正确获取到想要的http响应内容了。</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B站视频合集下载</title>
    <link href="/2024/06/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E5%90%88%E9%9B%86%E4%B8%8B%E8%BD%BD/"/>
    <url>/2024/06/14/B%E7%AB%99%E8%A7%86%E9%A2%91%E5%90%88%E9%9B%86%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在拥有视频链接的情况下，可以使用you-get直接下载视频，如 <code>you-get https://www.bilibili.com/xxxxxxxx</code>非常方便。因此只要获取到视频合集中的所有视频链接即可</p><h2 id="分析网页源代码"><a href="#分析网页源代码" class="headerlink" title="分析网页源代码"></a>分析网页源代码</h2><p>观察发现B站的视频唯一ID是这一串字符串，后面的可以删去，猜测可能是用户相关的信息，分享视频时用于标记分享用户之类的（所以分享B站视频时建议删去后面一长串，不然应该可以跟踪到分享者的账号信息），合集视频ID之间没有明显规律<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240613/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240613234826.ibz20r8fm.jpg"><br>查看网页源代码，搜索这一段ID，可以获知视频ID这个属性被命名为 <code>bvid</code><br><img src="https://xinhaojin.github.io/picx-images-hosting/20240613/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240613234816.2yy7gxxy57.jpg"><br>搜索 <code>bvid</code>，发现有180个，我的这个合集视频有46个，合理猜测46个链接应该在这180里面，搜索往下跳转翻到合集第一个视频的 <code>bvid</code>，再往下翻发现确实合集所有链接都有<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240613/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240613235054.esd4b1ky3.jpg"><br>观察前后代码发现这些信息存在一个名为 <code>window.__INITIAL_STATE__</code>的JSON中，只要把这个JSON从HTML源代码中提取出来，再分析结构即可</p><h2 id="获取bvid所在JSON"><a href="#获取bvid所在JSON" class="headerlink" title="获取bvid所在JSON"></a>获取bvid所在JSON</h2><p>问一下GPT怎么写这个对应的正则表达式，把JSON从HTML中提取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://www.bilibili.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url=<span class="string">&#x27;https://www.bilibili.com/video/BV1QG411z7gZ&#x27;</span><span class="comment">#合集中任意一集的地址</span></span><br><span class="line">response=requests.get(url,headers=headers)</span><br><span class="line">response.encoding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">html=response.text</span><br><span class="line"><span class="comment"># with open(B.html&#x27;,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as f:# 有时候会触发风控策略HTML获取失败，手动保存网页源代码再读取即可</span></span><br><span class="line"><span class="comment">#     html=f.read()</span></span><br><span class="line"><span class="comment"># 正则表达式匹配 window.__INITIAL_STATE__=到;(function的内容</span></span><br><span class="line">json_str =re.findall(<span class="string">r&quot;window\.__INITIAL_STATE__=(.*?);\(function\(&quot;</span>,html)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># json.loads将json字符串转换为字典</span></span><br><span class="line">json_data=json.loads(json_str)</span><br></pre></td></tr></table></figure><h2 id="解析JSON获取视频链接"><a href="#解析JSON获取视频链接" class="headerlink" title="解析JSON获取视频链接"></a>解析JSON获取视频链接</h2><p><code>bvid</code>在JSON中的结构如下<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240613/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240613223912.lxdfga0l.jpg"><br>代码如下,其中 <code>big_title</code>是合集标题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">big_title=videos=json_data[<span class="string">&quot;videoData&quot;</span>][<span class="string">&quot;ugc_season&quot;</span>][<span class="string">&quot;title&quot;</span>].replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">videos=json_data[<span class="string">&quot;videoData&quot;</span>][<span class="string">&quot;ugc_season&quot;</span>][<span class="string">&quot;sections&quot;</span>][<span class="number">0</span>][<span class="string">&quot;episodes&quot;</span>]</span><br><span class="line">titles=[video[<span class="string">&#x27;title&#x27;</span>].replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> video <span class="keyword">in</span> videos]</span><br><span class="line">urls=[<span class="string">&#x27;https://www.bilibili.com/video/&#x27;</span>+video[<span class="string">&#x27;bvid&#x27;</span>] <span class="keyword">for</span> video <span class="keyword">in</span> videos]</span><br><span class="line"><span class="built_in">print</span>(big_title)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(titles)):</span><br><span class="line">    <span class="built_in">print</span>(titles[i]+<span class="string">&#x27; &#x27;</span>+urls[i])</span><br></pre></td></tr></table></figure><h2 id="利用you-get自动批量下载"><a href="#利用you-get自动批量下载" class="headerlink" title="利用you-get自动批量下载"></a>利用you-get自动批量下载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install you-get</span><br></pre></td></tr></table></figure><p>you-get支持下载B站视频（非会员视频），(之前尝试过西瓜视频不支持…)，默认似乎会下载480p视频，如果需要更高清的视频，需要指定cookie，默认会下载能够支持的最高清晰度。</p><p>主要参数：</p><ul><li>-o 保存文件夹</li><li>-O 文件名(不加后缀)</li><li>-c cookies.txt的地址(Netscape格式(不是JSON格式)，可以从浏览器插件EditCookies中导出复制到txt中)</li></ul><p>代码如下，注意：不指定文件名，默认文件名是视频在网页中的大标题，与合集中的标题名称可能不同，这里代码中的title是合集列表中的标题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">basedir=<span class="string">&#x27;G:/&#x27;</span><span class="comment">#保存目录</span></span><br><span class="line"><span class="comment"># 使用you-get下载视频</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(os.path.join(basedir,big_title)):</span><br><span class="line">    os.makedirs(os.path.join(basedir,big_title))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件夹&#x27;</span>+big_title+<span class="string">&#x27;创建成功&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(titles)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;准备下载 &quot;</span>+os.path.join(basedir,big_title,titles[i]+<span class="string">&#x27;.mp4&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span>(os.path.exists(os.path.join(basedir,big_title,titles[i]+<span class="string">&#x27;.mp4&#x27;</span>))):</span><br><span class="line">        <span class="built_in">print</span>(titles[i]+<span class="string">&#x27;已存在&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    os.system(<span class="string">&#x27;you-get -c cookies.txt -o &#x27;</span>+os.path.join(basedir,big_title)+<span class="string">&#x27; -O &#x27;</span>+titles[i]+<span class="string">&#x27; &#x27;</span>+urls[i])</span><br><span class="line">    <span class="built_in">print</span>(titles[i]+<span class="string">&#x27; 下载完成&#x27;</span>)</span><br></pre></td></tr></table></figure><p>另外，最新版的you-get会默认下载弹幕文件xml，没仔细看这是什么参数怎么取消下载，也无所谓吧，我手动删了一下</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视频下载</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>私有化部署局域网文件传输工具Snapdrop</title>
    <link href="/2024/06/04/%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B1%80%E5%9F%9F%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7Snapdrop/"/>
    <url>/2024/06/04/%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B1%80%E5%9F%9F%E7%BD%91%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7Snapdrop/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前想过很多次做一个局域网文件传输工具，但是始终停留在需求阶段哈哈哈哈哈，毕竟啥也不会。</p><p>网上有很多软件可以用，但基本都是要安装各平台的软件才行，作为偶尔用一下的工具，必不可能有被安装在设备上的资格。</p><p>之前用过一个很好用的工具Snapdrop，以网页形式存在，<a href="https://snapdrop.net/">https://Snapdrop.net/</a> ，完全满足了我的需求，但后面有段时间无法访问，我以为他凉了。</p><p>因此我又重新想做一个类似的东西，结果发现这个网页现在又可以用了，关于页指向GitHub <a href="https://github.com/RobinLinus/snapdrop">https://github.com/RobinLinus/snapdrop</a> ，竟然是开源的，大喜过望，于是有了本篇。</p><h2 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h2><p>docker，nginx，域名</p><h2 id="docker配置"><a href="#docker配置" class="headerlink" title="docker配置"></a>docker配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull linuxserver/snapdrop</span><br><span class="line">docker run -d --restart=always --name snapdrop -p 8088:80 linuxserver/snapdrop #8088是自定义端口</span><br></pre></td></tr></table></figure><p>然后就可以在客户端双方访问<a href="http://ip:8088/">http://ip:8088</a> 来使用，若要绑定域名，进行nginx设置</p><h2 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h2><p>先解析一个二级域名如file.xinhaojin.top到主机上,然后申请证书</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install certbot python3-certbot-nginx</span><br><span class="line">sudo certbot --nginx -d file.xinhaojin.top</span><br></pre></td></tr></table></figure><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>在http标签中添加两个server</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> server <span class="punctuation">&#123;</span></span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name file.xinhaojin.top;</span><br><span class="line">    return <span class="number">301</span> https<span class="punctuation">:</span><span class="comment">//$host$request_uri;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">server <span class="punctuation">&#123;</span></span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name file.xinhaojin.top;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/file.xinhaojin.top/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/file.xinhaojin.top/privkey.pem;</span><br><span class="line">    ssl_protocols TLSv1<span class="number">.2</span> TLSv1<span class="number">.3</span>;</span><br><span class="line">    ssl_prefer_server_ciphers off;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256<span class="punctuation">:</span>ECDHE-RSA-AES256-GCM-SHA384;</span><br><span class="line"></span><br><span class="line">    location / <span class="punctuation">&#123;</span></span><br><span class="line">        proxy_pass http<span class="punctuation">:</span><span class="comment">//127.0.0.1:8088;  # Change to your Spring Boot app&#x27;s IP and port</span></span><br><span class="line">        proxy_connect_timeout <span class="number">300</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header X-Forwarded-for $remote_addr;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">location ~ /.well-known <span class="punctuation">&#123;</span></span><br><span class="line">    allow all;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2><p>现在就拥有了一个私有化的局域网文件传输工具，<a href="https://file.xinhaojin.top/">https://file.xinhaojin.top</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>局域网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>非华为电脑制作NFC贴片实现一碰传多屏协同</title>
    <link href="/2024/05/25/%E9%9D%9E%E5%8D%8E%E4%B8%BA%E7%94%B5%E8%84%91%E5%88%B6%E4%BD%9CNFC%E8%B4%B4%E7%89%87%E5%AE%9E%E7%8E%B0%E4%B8%80%E7%A2%B0%E4%BC%A0%E5%A4%9A%E5%B1%8F%E5%8D%8F%E5%90%8C/"/>
    <url>/2024/05/25/%E9%9D%9E%E5%8D%8E%E4%B8%BA%E7%94%B5%E8%84%91%E5%88%B6%E4%BD%9CNFC%E8%B4%B4%E7%89%87%E5%AE%9E%E7%8E%B0%E4%B8%80%E7%A2%B0%E4%BC%A0%E5%A4%9A%E5%B1%8F%E5%8D%8F%E5%90%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="安装华为电脑管家"><a href="#安装华为电脑管家" class="headerlink" title="安装华为电脑管家"></a>安装华为电脑管家</h2><p>网卡要求：英特尔AX200系列确认没问题，其余网卡可能无法安装华为电脑管家。</p><p>手机必须是华为手机，鸿蒙2.0以上，处理器在麒麟990以上。</p><p>具体可参考B站博主空降猫咪的教程安装：<a href="https://www.bilibili.com/video/BV19H4y1G7Dg">https://www.bilibili.com/video/BV19H4y1G7Dg</a></p><p>相关文件在作者视频简介中有网盘链接</p><p>需要注意的一点是SN码设置(后续会用到)，SN码选择自定义，设置为16位长的字母数字组合，然后再选择安装包安装。</p><p><img src="https://xinhaojin.github.io/picx-images-hosting/20240525/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240525220224.5c0t6wg2x3.jpg"></p><h2 id="给NFC贴纸写入数据，并激活"><a href="#给NFC贴纸写入数据，并激活" class="headerlink" title="给NFC贴纸写入数据，并激活"></a>给NFC贴纸写入数据，并激活</h2><h3 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h3><p>使用PCManagerInstaller生成二维码。(就是上一步骤中的安装器):<a href="https://xinhaojin.lanzouj.com/iYXPD1zqz68h">https://xinhaojin.lanzouj.com/iYXPD1zqz68h</a><br><img src="https://xinhaojin.github.io/picx-images-hosting/20240525/image.7ljtqefn2j.jpg"><br>然后使用微信或者浏览器先扫描二维码内容，查看数据格式是否形如“SN&#x3D;HUAWEILAPTOP2020|MAC&#x3D;BC8385DC117F|MODELID&#x3D;00000506”其中SN是上一步自己设置的。</p><h3 id="使用一碰传助手扫码激活"><a href="#使用一碰传助手扫码激活" class="headerlink" title="使用一碰传助手扫码激活"></a>使用一碰传助手扫码激活</h3><p>安装华为一碰传助手：<a href="https://xinhaojin.lanzouj.com/iHSYu1zqz6dc%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%89%93%E5%BC%80%E5%90%8E%E4%B8%8D%E8%83%BD%E7%94%A8%E8%AF%B7%E5%9C%A8%E8%AE%BE%E7%BD%AE%E9%87%8C%E6%8E%88%E4%BA%88%E7%9B%B8%E6%9C%BA%E6%9D%83%E9%99%90%EF%BC%8C%E6%89%AB%E8%BF%99%E4%B8%AA%E7%94%9F%E6%88%90%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81">https://xinhaojin.lanzouj.com/iHSYu1zqz6dc，如果打开后不能用请在设置里授予相机权限，扫这个生成的二维码</a><br><img src="https://xinhaojin.github.io/picx-images-hosting/20240525/9bd0d3780c47789217054243dbd5bc9.9gwej12key.jpg"><br>然后把NFC贴纸放在感应区两秒，提示激活成功即可。<br><img src="https://xinhaojin.github.io/picx-images-hosting/20240525/dc35512f61d64ca61f7c60932cee80e.7p4hn63a1.jpg"><br>NFC tools(用于NFC写卡错误时删除标签数据，华为手机似乎无法直接使用，其他安卓机可用):<a href="https://xinhaojin.lanzouj.com/itbaa1zqz6ih">https://xinhaojin.lanzouj.com/itbaa1zqz6ih</a></p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NFC</tag>
      
      <tag>多屏协同</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用PandoraNext项目Docker部署ChatGPT官网镜像站(支持Token登录)，同时为Chatgpt-web项目提供稳定代理服务</title>
    <link href="/2024/01/17/%E4%BD%BF%E7%94%A8PandoraNext%E9%A1%B9%E7%9B%AEDocker%E9%83%A8%E7%BD%B2ChatGPT%E5%AE%98%E7%BD%91%E9%95%9C%E5%83%8F%E7%AB%99(%E6%94%AF%E6%8C%81Token%E7%99%BB%E5%BD%95)%EF%BC%8C%E5%90%8C%E6%97%B6%E4%B8%BAChatgpt-web%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BE%9B%E7%A8%B3%E5%AE%9A%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/"/>
    <url>/2024/01/17/%E4%BD%BF%E7%94%A8PandoraNext%E9%A1%B9%E7%9B%AEDocker%E9%83%A8%E7%BD%B2ChatGPT%E5%AE%98%E7%BD%91%E9%95%9C%E5%83%8F%E7%AB%99(%E6%94%AF%E6%8C%81Token%E7%99%BB%E5%BD%95)%EF%BC%8C%E5%90%8C%E6%97%B6%E4%B8%BAChatgpt-web%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BE%9B%E7%A8%B3%E5%AE%9A%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>chatgpt-web项目<a href="https://github.com/Chanzhaoyu/chatgpt-web">https://github.com/Chanzhaoyu/chatgpt-web</a>稳定性太差，经常出现代理失效的问题，在issues中看到pandoranext项目<a href="https://github.com/pandora-next/deploy">https://github.com/pandora-next/deploy</a>可以自建代理为chatgpt-web提供服务，同时本身可作为chatgpt官网镜像站，支持accesstoken登录，无需付费apikey，相当于官网网页对话使用。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>一台境外服务器(可直连OpenAI官网，有Docker、Nginx)，一个半年以上的github账号，一个域名</p><h2 id="部署镜像站"><a href="#部署镜像站" class="headerlink" title="部署镜像站"></a>部署镜像站</h2><h3 id="创建根目录"><a href="#创建根目录" class="headerlink" title="创建根目录"></a>创建根目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir pandora-next</span><br><span class="line">cd pandora-next</span><br></pre></td></tr></table></figure><h3 id="获取License"><a href="#获取License" class="headerlink" title="获取License"></a>获取License</h3><p>访问<a href="https://dash.pandoranext.com/">https://dash.pandoranext.com</a>登录github账号获取授权<img src="https://xinhaojin.github.io/imgs-host/20240117/1705471881491.jpg" alt="1705471881491"></p><h3 id="复制网页上的curl命令并执行"><a href="#复制网页上的curl命令并执行" class="headerlink" title="复制网页上的curl命令并执行"></a>复制网页上的curl命令并执行</h3><p>项目根目录下出现一个jwt文件</p><h3 id="创建docker-compose-yml"><a href="#创建docker-compose-yml" class="headerlink" title="创建docker-compose.yml"></a>创建docker-compose.yml</h3><p>把PANDORA_NEXT_LICENSE后的xxx改成刚刚获取的jwt文件中的值</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">pandora-next:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">pengzhile/pandora-next</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">PandoraNext</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8181:8181&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PANDORA_NEXT_LICENSE=xxx</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br></pre></td></tr></table></figure><h3 id="创建其他文件（夹）"><a href="#创建其他文件（夹）" class="headerlink" title="创建其他文件（夹）"></a>创建其他文件（夹）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">cd data</span><br><span class="line">vi config.json</span><br><span class="line">vi tokens.json</span><br></pre></td></tr></table></figure><p>config.json<br>修改license_id，授权网页上有</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;bind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0:8181&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tls&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cert_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;key_file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="number">600</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-L1xxxxxxxi9w&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;proxy_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;public_share&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;site_password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;setup_password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;server_tokens&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;proxy_api_prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isolated_conv_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;captcha&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site_secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;site_login&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;setup_login&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;oai_username&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;oai_password&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;whitelist&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>tokens.json<br>可以修改预设登录方式，默认即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test-1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;access token / session token / refresh token&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;shared&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;show_user_info&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;test-2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;access token / session token / refresh token&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;shared&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;show_user_info&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;test2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;access token / session token / refresh token / share token&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12345&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="在项目根目录下（docker-compose-yml所在文件夹）执行docker命令"><a href="#在项目根目录下（docker-compose-yml所在文件夹）执行docker命令" class="headerlink" title="在项目根目录下（docker-compose.yml所在文件夹）执行docker命令"></a>在项目根目录下（docker-compose.yml所在文件夹）执行docker命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">docker-compose ps #查看运行状态</span><br></pre></td></tr></table></figure><h3 id="放开8181端口，访问http-IP-8181"><a href="#放开8181端口，访问http-IP-8181" class="headerlink" title="放开8181端口，访问http://IP:8181"></a>放开8181端口，访问<a href="http://ip:8181/">http://IP:8181</a></h3><p>如果顺利的话，可以看到chatgpt镜像站登录页面，可以使用注册邮箱登录，或者使用accesstoken登录（accesstoken可以在<a href="https://chat.openai.com/api/auth/session%E8%8E%B7%E5%8F%96%EF%BC%89%E3%80%82">https://chat.openai.com/api/auth/session获取）。</a><br><img src="https://xinhaojin.github.io/imgs-host/20240117/1705473448886.jpg" alt="1705473448886"><br>如果确认端口放开但仍旧不能访问，使用docker logs命令查看日志信息，会有错误提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs PandoraNext</span><br></pre></td></tr></table></figure><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><h3 id="解析一个二级域名到服务器IP"><a href="#解析一个二级域名到服务器IP" class="headerlink" title="解析一个二级域名到服务器IP"></a>解析一个二级域名到服务器IP</h3><p>如pass.xinhaojin.top</p><h3 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h3><p>sudo apt install certbot python3-certbot-nginx<br>sudo certbot –nginx -d pass.xinhaojin.top</p><h3 id="添加nginx配置"><a href="#添加nginx配置" class="headerlink" title="添加nginx配置"></a>添加nginx配置</h3><p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf<br>添加两个server，对应修改ssl证书位置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server <span class="punctuation">&#123;</span></span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  pass.xinhaojin.top; </span><br><span class="line">        return <span class="number">301</span> https<span class="punctuation">:</span><span class="comment">//$host$request_uri;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  </span><br><span class="line">server <span class="punctuation">&#123;</span></span><br><span class="line">        listen       <span class="number">443</span> ssl; </span><br><span class="line">        server_name   pass.xinhaojin.top;  </span><br><span class="line">      </span><br><span class="line">        ssl_certificate /etc/letsencrypt/live/pass.xinhaojin.top/fullchain.pem;</span><br><span class="line">        ssl_certificate_key /etc/letsencrypt/live/pass.xinhaojin.top/privkey.pem;</span><br><span class="line">  </span><br><span class="line">        ssl_protocols TLSv1<span class="number">.2</span>;  </span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256;  </span><br><span class="line"></span><br><span class="line">        location / <span class="punctuation">&#123;</span></span><br><span class="line">           proxy_pass http<span class="punctuation">:</span><span class="comment">//0.0.0.0:8181;</span></span><br><span class="line">           proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">           proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">           proxy_set_header Connection &#x27;upgrade&#x27;;</span><br><span class="line">        <span class="punctuation">&#125;</span>   </span><br><span class="line">    <span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><p>到此为止已经可以使用域名访问chatgpt镜像站了。</p><h2 id="为chatgpt-web项目提供代理服务"><a href="#为chatgpt-web项目提供代理服务" class="headerlink" title="为chatgpt-web项目提供代理服务"></a>为chatgpt-web项目提供代理服务</h2><h3 id="修改pandora-next-data-config-json"><a href="#修改pandora-next-data-config-json" class="headerlink" title="修改pandora-next&#x2F;data&#x2F;config.json"></a>修改pandora-next&#x2F;data&#x2F;config.json</h3><p>添加代理前缀，注意英文数字都要有，长度&gt;&#x3D;8,这也是看了logs才发现的规则</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;proxy_api_prefix&quot;:</span> <span class="string">&quot;proxy2openai&quot;</span><span class="string">,</span></span><br></pre></td></tr></table></figure><h3 id="重启docker容器"><a href="#重启docker容器" class="headerlink" title="重启docker容器"></a>重启docker容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart PandoraNext</span><br></pre></td></tr></table></figure><p>代理接口为https:&#x2F;&#x2F;域名&#x2F;前缀&#x2F;backend-api&#x2F;conversation,如<a href="https://pass.xinhaojin.top/proxy2openai/backend-api/conversation">https://pass.xinhaojin.top/proxy2openai/backend-api/conversation</a>，访问正常会返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Method Not Allowed&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>chatgpt-web部署参考之前的文章<br><a href="https://xinhaojin.github.io/2023/04/03/centos7%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2chatgpt/">https://xinhaojin.github.io/2023/04/03/centos7%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2chatgpt/</a>，只需在docker-compose.yml中修改API_REVERSE_PROXY即可</p><h2 id="注意定期更新accesstoken"><a href="#注意定期更新accesstoken" class="headerlink" title="注意定期更新accesstoken"></a>注意定期更新accesstoken</h2>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>chatgpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh免密登录</title>
    <link href="/2023/12/14/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <url>/2023/12/14/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="本地生成公钥私钥"><a href="#本地生成公钥私钥" class="headerlink" title="本地生成公钥私钥"></a>本地生成公钥私钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><h3 id="把本地的-ssh-id-rsa-pub内文本内容粘贴到远程主机的-ssh-authorized-keys中新建一行"><a href="#把本地的-ssh-id-rsa-pub内文本内容粘贴到远程主机的-ssh-authorized-keys中新建一行" class="headerlink" title="把本地的.ssh&#x2F;id_rsa.pub内文本内容粘贴到远程主机的.ssh&#x2F;authorized_keys中新建一行"></a>把本地的.ssh&#x2F;id_rsa.pub内文本内容粘贴到远程主机的.ssh&#x2F;authorized_keys中新建一行</h3>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot+Redis长链接转短链接+Docker部署</title>
    <link href="/2023/08/21/SpringBoot+Redis%E9%95%BF%E9%93%BE%E6%8E%A5%E8%BD%AC%E7%9F%AD%E9%93%BE%E6%8E%A5+Docker%E9%83%A8%E7%BD%B2%20/"/>
    <url>/2023/08/21/SpringBoot+Redis%E9%95%BF%E9%93%BE%E6%8E%A5%E8%BD%AC%E7%9F%AD%E9%93%BE%E6%8E%A5+Docker%E9%83%A8%E7%BD%B2%20/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这是一个长链接转短链接的SpringBoot项目，利用Redis存储长短链接的键值关系</p><p><strong>github地址：<a href="https://github.com/xinhaojin/short-url">https://github.com/xinhaojin/short-url</a></strong></p><p><strong>演示站点：<a href="https://s.xinhaojin.top/">https://s.xinhaojin.top</a></strong></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>用Spring Initializr创建一个空项目，使用Java8、SpringBoot2版本，勾选spring web</p><h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><p>在resource&#x2F;static下创建index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>短链接生成器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://xinhaojin.github.io/imgs-host/20230821/tutu.7cfpopzisy40.webp&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;16*16&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">10%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#0056b3</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#shortUrl</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#007bff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.copy-message</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#28a745</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: opacity <span class="number">0.5s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>短链接生成器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;longUrl&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入原始长链接&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;shortenURL()&quot;</span>&gt;</span>生成短链接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>短链接: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;shortUrl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;copyToClipboard()&quot;</span>&gt;</span>复制到剪贴板<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;copy-message&quot;</span> <span class="attr">id</span>=<span class="string">&quot;copyMessage&quot;</span>&gt;</span>复制成功！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">shortenURL</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> longUrl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;longUrl&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">`/api/shorten?url=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(longUrl)&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function"><span class="params">shortUrl</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> fullShortUrl = <span class="string">`https://s.xinhaojin.top/s/<span class="subst">$&#123;shortUrl&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> shortUrlElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;shortUrl&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                shortUrlElement.<span class="property">innerHTML</span> = <span class="string">`&lt;a href=&quot;<span class="subst">$&#123;fullShortUrl&#125;</span>&quot; target=&quot;_blank&quot;&gt;<span class="subst">$&#123;fullShortUrl&#125;</span>&lt;/a&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">copyToClipboard</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> shortUrl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;shortUrl&#x27;</span>).<span class="property">textContent</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> tempInput = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        tempInput.<span class="property">value</span> = shortUrl;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(tempInput);</span></span><br><span class="line"><span class="language-javascript">        tempInput.<span class="title function_">select</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(tempInput);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> copyMessage = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;copyMessage&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        copyMessage.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            copyMessage.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;1&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            copyMessage.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1500</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p>MyController.java，给前端提供生成短链接和恢复长链接的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.xinhaojin.shorturl.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> top.xinhaojin.shorturl.service.MyService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造函数注入 MyService</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyController</span><span class="params">(MyService myService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myService = myService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理生成短链接的请求</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/api/shorten&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">shortenURL</span><span class="params">(<span class="meta">@RequestParam</span> String url)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用 MyService 中的方法，生成短链接并返回</span></span><br><span class="line">        <span class="keyword">return</span> myService.shortenURL(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理还原长链接的请求</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/api/restore&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">restoreURL</span><span class="params">(<span class="meta">@RequestParam</span> String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用 MyService 中的方法，还原短链接为长链接并返回</span></span><br><span class="line">        <span class="keyword">return</span> myService.restoreURL(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RedirectController.java,处理用户访问短链接时的重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.xinhaojin.shorturl.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> top.xinhaojin.shorturl.service.MyService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/s&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedirectController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedirectController</span><span class="params">(MyService myService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myService = myService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;shortKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redirect</span><span class="params">(<span class="meta">@PathVariable</span> String shortKey, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalUrl</span> <span class="operator">=</span> myService.restoreURL(shortKey);</span><br><span class="line">        <span class="keyword">if</span> (originalUrl != <span class="literal">null</span>) &#123;</span><br><span class="line">            response.sendRedirect(originalUrl);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Handle not found case</span></span><br><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>MyService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.xinhaojin.shorturl.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">(StringRedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">shortenURL</span><span class="params">(String longURL)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 自动添加 http:// 前缀</span></span><br><span class="line">            <span class="keyword">if</span> (!longURL.startsWith(<span class="string">&quot;http://&quot;</span>) &amp;&amp; !longURL.startsWith(<span class="string">&quot;https://&quot;</span>)) &#123;</span><br><span class="line">                longURL = <span class="string">&quot;http://&quot;</span> + longURL;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isValidURL(longURL)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;invalid&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">shortKey</span> <span class="operator">=</span> generateShortKey(longURL);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查是否已存在相同的短链接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">existingLongURL</span> <span class="operator">=</span> redisTemplate.opsForValue().get(shortKey);</span><br><span class="line">            <span class="keyword">if</span> (existingLongURL != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> shortKey;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将短链接与长链接映射关系存储到 Redis 中</span></span><br><span class="line">            redisTemplate.opsForValue().set(shortKey, longURL);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> shortKey;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">restoreURL</span><span class="params">(String shortKey)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从 Redis 中获取短链接对应的长链接</span></span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForValue().get(shortKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DataAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">generateShortKey</span><span class="params">(String longURL)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 MD5 哈希函数实例</span></span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md.update(longURL.getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取生成的哈希字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] hashBytes = md.digest();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 转换为固定长度的十六进制字符串</span></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">byte</span> b : hashBytes) &#123;</span><br><span class="line">                sb.append(String.format(<span class="string">&quot;%02x&quot;</span>, b &amp; <span class="number">0xff</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 截取前 8 个字符作为短链接</span></span><br><span class="line">            <span class="keyword">return</span> sb.substring(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 在实际应用中，可以返回默认的短链接或其他处理方式</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;default123&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValidURL</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用简单的正则表达式验证是否为合法网址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;^(http|https)://[a-zA-Z0-9.-]+\\.[a-zA-Z]&#123;2,6&#125;(/.*)?$&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> Pattern.matches(regex, url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host=1.15.xx.xxx</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"></span><br><span class="line">server.port=7777</span><br></pre></td></tr></table></figure><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.xinhaojin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>short-url<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>short-url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>short-url<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h2><h3 id="在项目根目录终端下执行以下maven命令，会在target下生成jar文件"><a href="#在项目根目录终端下执行以下maven命令，会在target下生成jar文件" class="headerlink" title="在项目根目录终端下执行以下maven命令，会在target下生成jar文件"></a>在项目根目录终端下执行以下maven命令，会在target下生成jar文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><h3 id="新建一个名为Dockerfile的文件，内容如下"><a href="#新建一个名为Dockerfile的文件，内容如下" class="headerlink" title="新建一个名为Dockerfile的文件，内容如下"></a>新建一个名为Dockerfile的文件，内容如下</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用一个基础的 Java 镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝 JAR 文件到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> your-application-name-version.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露应用程序运行的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">7777</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 Spring Boot 应用程序</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="在有docker环境的地方如安装了docker的Ubuntu服务器上，创建docker镜像"><a href="#在有docker环境的地方如安装了docker的Ubuntu服务器上，创建docker镜像" class="headerlink" title="在有docker环境的地方如安装了docker的Ubuntu服务器上，创建docker镜像"></a>在有docker环境的地方如安装了docker的Ubuntu服务器上，创建docker镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -t your-image-name:your-tag .</span></span><br><span class="line">docker build -t short-url:v1.0 .</span><br></pre></td></tr></table></figure><h3 id="运行docker镜像"><a href="#运行docker镜像" class="headerlink" title="运行docker镜像"></a>运行docker镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 7777:7777 your-image-name:tag</span></span><br><span class="line">docker run --restart=always --name shorturl -d -p 7777:7777 short-url:v1.0</span><br></pre></td></tr></table></figure><h3 id="检查运行情况"><a href="#检查运行情况" class="headerlink" title="检查运行情况"></a>检查运行情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="绑定域名-用nginx做好反向代理"><a href="#绑定域名-用nginx做好反向代理" class="headerlink" title="绑定域名,用nginx做好反向代理"></a>绑定域名,用nginx做好反向代理</h2><p>解析一个二级域名到目标服务器，如s.xinhaojin.top</p><h3 id="查看nginx版本，如果没有，就安装"><a href="#查看nginx版本，如果没有，就安装" class="headerlink" title="查看nginx版本，如果没有，就安装"></a>查看nginx版本，如果没有，就安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install nginx</span><br></pre></td></tr></table></figure><h3 id="修改-etc-nginx-nginx-conf"><a href="#修改-etc-nginx-nginx-conf" class="headerlink" title="修改&#x2F;etc&#x2F;nginx&#x2F;nginx.conf"></a>修改&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</h3><p>在http标签里添加一个server</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> s.xinhaojin.top;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://1.15.xx.xxx:7777;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检查-Nginx-服务是否已经存在于-systemd-中："><a href="#检查-Nginx-服务是否已经存在于-systemd-中：" class="headerlink" title="检查 Nginx 服务是否已经存在于 systemd 中："></a>检查 Nginx 服务是否已经存在于 systemd 中：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl is-enabled nginx</span><br></pre></td></tr></table></figure><p>如果返回 disabled，则表示 Nginx 目前不会开机自启。<br>如果 Nginx 尚未开机自启，可以使用以下命令启用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h3 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h3><p>安装certbot</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install certbot</span><br></pre></td></tr></table></figure><p>临时关闭nginx以释放80端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop nginx</span><br><span class="line"><span class="built_in">sudo</span> certbot certonly --standalone -d s.xinhaojin.top</span><br></pre></td></tr></table></figure><h3 id="修改nginx配置-etc-nginx-nginx-conf"><a href="#修改nginx配置-etc-nginx-nginx-conf" class="headerlink" title="修改nginx配置&#x2F;etc&#x2F;nginx&#x2F;nginx.conf"></a>修改nginx配置&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</h3><p>把上一个server删去，替换以下代码</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> s.xinhaojin.top;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> s.xinhaojin.top;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/s.xinhaojin.top/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/s.xinhaojin.top/privkey.pem;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:7777;  <span class="comment"># Change to your Spring Boot app&#x27;s IP and port</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /.well-known</span> &#123;</span><br><span class="line">        <span class="attribute">allow</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start nginx</span><br><span class="line"><span class="built_in">sudo</span> systemctl reload nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
      <tag>redis</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客迁移</title>
    <link href="/2023/07/04/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <url>/2023/07/04/hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo博客迁移"><a href="#hexo博客迁移" class="headerlink" title="hexo博客迁移"></a>hexo博客迁移</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最开始使用wordpress写博客，方便是方便，但感觉不够干净、不够优雅，所以后来开始写markdown格式的博客，使用hexo部署在github上，但是平时使用的电脑有很多台，GitHub上公开的又只有public文件夹的静态页面，没有把markwodn文件一并提交，因此也不能通过github来同步，所以就想干脆把hexo项目放在云服务器上，要写新文章就写好markdown上传到云服务器去提交，也省的在各个电脑上配置。本文简要介绍把hexo项目迁移到云服务器上的步骤。</p><ul><li>2024.10.2第二次修改，不再部署到云服务器，以下是在本地新机器上的部署步骤</li></ul><h3 id="安装nodejs、Hexo和其他依赖"><a href="#安装nodejs、Hexo和其他依赖" class="headerlink" title="安装nodejs、Hexo和其他依赖"></a>安装nodejs、Hexo和其他依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">mkdir blog</span><br><span class="line">cd blog</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主题</span></span><br><span class="line">npm install --save hexo-theme-fluid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">评论插件</span></span><br><span class="line">npm i --save gitalk</span><br></pre></td></tr></table></figure><h3 id="建立git连接"><a href="#建立git连接" class="headerlink" title="建立git连接"></a>建立git连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xinhaojin&quot;</span><br><span class="line">git config --global user.email &quot;xinhaojin@qq.com&quot;</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;xinhaojin@qq.com&quot;</span><br></pre></td></tr></table></figure><p>把公钥&#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub中的内容添加到github-setting-ssh key</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>修改_config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">title: xinhaojin&#x27;s blog</span><br><span class="line">keywords:</span><br><span class="line">author: xinhaojin</span><br><span class="line">language: zh-CN</span><br><span class="line"></span><br><span class="line">theme: fulid</span><br><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repository:  git@github.com:xinhaojin/xinhaojin.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h3 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h3><p>上传markdown到blog&#x2F;source&#x2F;_posts文件夹<br>然后就可以发布新文章了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>markdown模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">tags: []</span><br><span class="line">categories:</span><br><span class="line">  - - 软件安装配置</span><br><span class="line">date: 2023-05-20 13:30:00</span><br><span class="line">---</span><br><span class="line">## xxx</span><br><span class="line">### xxx</span><br><span class="line">![](url)</span><br><span class="line">&lt;url&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>万能反向代理接口(vercel+cloudflare)</title>
    <link href="/2023/07/04/%E4%B8%87%E8%83%BD%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86(vercel+cloudflare)/"/>
    <url>/2023/07/04/%E4%B8%87%E8%83%BD%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86(vercel+cloudflare)/</url>
    
    <content type="html"><![CDATA[<h2 id="万能反向代理接口-vercel-cloudflare"><a href="#万能反向代理接口-vercel-cloudflare" class="headerlink" title="万能反向代理接口(vercel+cloudflare)"></a>万能反向代理接口(vercel+cloudflare)</h2><h3 id="vercel"><a href="#vercel" class="headerlink" title="vercel"></a>vercel</h3><p><a href="https://github.com/gaboolic/vercel-reverse-proxy">gaboolic&#x2F;vercel-reverse-proxy: vercel反向代理|OpenAI&#x2F;ChatGPT 免翻墙代理|github免翻墙代理|github下载加速|google代理|vercel万能代理</a></p><p>点击一键部署</p><p><img src="https://xinhaojin.github.io/imgs-host/20230704/image.6a2gkpr6v3g0.webp"></p><p>然后在项目设置中设置自定义域名</p><p><img src="https://xinhaojin.github.io/imgs-host/20230704/image.3td9tigs2o80.webp"></p><p>按提示给域名添加CNAME记录即可</p><p><img src="https://xinhaojin.github.io/imgs-host/20230704/image.61thfdz2zjo.webp"></p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>eg1. <a href="https://proxy.xinhaojin.top/proxy/www.google.com/search?q=xinhaojin.top">https://proxy.xinhaojin.top/proxy/www.google.com/search?q=xinhaojin.top</a></p><p>等同于<a href="https://www.google.com/search?q=xinhaojin.top">https://www.google.com/search?q=xinhaojin.top</a></p><p><img src="https://xinhaojin.github.io/imgs-host/20230704/image.oh65m4nasu8.png"></p><h3 id="cloudflare"><a href="#cloudflare" class="headerlink" title="cloudflare"></a>cloudflare</h3><p><a href="https://github.com/gaboolic/cloudflare-reverse-proxy">gaboolic&#x2F;cloudflare-reverse-proxy: cloudflare反向代理|OpenAI&#x2F;ChatGPT 免翻墙代理|github免翻墙代理|github下载加速|google代理|cloudflare万能代理</a></p><p>在cloudflare创建一个新的worker</p><p><img src="https://xinhaojin.github.io/imgs-host/20230704/image.2urpb8qa4xe0.webp">编辑代码，把<a href="https://github.com/gaboolic/cloudflare-reverse-proxy/blob/main/_worker.js">https://github.com/gaboolic/cloudflare-reverse-proxy/blob/main/_worker.js</a>中的内容写进worker.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    event.<span class="title function_">respondWith</span>(<span class="title function_">handleRequest</span>(event.<span class="property">request</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">    <span class="keyword">const</span> actualUrlStr = url.<span class="property">pathname</span>.<span class="title function_">replace</span>(<span class="string">&quot;/proxy/&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(actualUrlStr)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">const</span> actualUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(actualUrlStr)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">const</span> modifiedRequest = <span class="keyword">new</span> <span class="title class_">Request</span>(actualUrl, &#123;</span><br><span class="line">      <span class="attr">headers</span>: request.<span class="property">headers</span>,</span><br><span class="line">      <span class="attr">method</span>: request.<span class="property">method</span>,</span><br><span class="line">      <span class="attr">body</span>: request.<span class="property">body</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(modifiedRequest);</span><br><span class="line">    <span class="keyword">const</span> modifiedResponse = <span class="keyword">new</span> <span class="title class_">Response</span>(response.<span class="property">body</span>, response);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 添加允许跨域访问的响应头</span></span><br><span class="line">    modifiedResponse.<span class="property">headers</span>.<span class="title function_">set</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> modifiedResponse;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>保存并部署</p><p>添加自定义域名（A记录，地址223.5.5.5 or 8.8.8.8   …）或者使用原始域名，与vercel的域名同等看待即可。</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
      <tag>cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给指定端口的网页应用绑定域名并强制SSL（申请证书+nginx配置）</title>
    <link href="/2023/07/04/%E7%BB%99%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%9A%84%E7%BD%91%E9%A1%B5%E5%BA%94%E7%94%A8%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%B9%B6%E5%BC%BA%E5%88%B6SSL%EF%BC%88%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6+nginx%E9%85%8D%E7%BD%AE%EF%BC%89/"/>
    <url>/2023/07/04/%E7%BB%99%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%9A%84%E7%BD%91%E9%A1%B5%E5%BA%94%E7%94%A8%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%B9%B6%E5%BC%BA%E5%88%B6SSL%EF%BC%88%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6+nginx%E9%85%8D%E7%BD%AE%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="给指定端口的网页应用绑定域名并强制SSL（申请证书-nginx配置）"><a href="#给指定端口的网页应用绑定域名并强制SSL（申请证书-nginx配置）" class="headerlink" title="给指定端口的网页应用绑定域名并强制SSL（申请证书+nginx配置）"></a>给指定端口的网页应用绑定域名并强制SSL（申请证书+nginx配置）</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>刚刚注册了一个新的chatgpt账号，有5美金余额，又可以用API了，在甲骨文云的Ubuntu22服务器上使用docker部署了一下，之前也写过一篇相关的文章<a href="https://xinhaojin.github.io/2023/04/03/centos7%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2chatgpt/">centos7使用docker部署chatgpt - xinhaojin&#39;s blog</a>，默认部署在3002端口，只能使用http访问。</p><p>使用的是<a href="https://github.com/Chanzhaoyu/chatgpt-web">Chanzhaoyu&#x2F;chatgpt-web: 用 Express 和 Vue3 搭建的 ChatGPT 演示网页 (github.com)</a>这个项目，可以使用railway一键部署，绑定域名、使用HTTPS都很方便，但是不清楚railway使用会不会超过免费额度，还是决定用自己的服务器小小折腾一下，因为经常搞这套流程，所以还是记录一下。</p><h3 id="解析域名到服务器"><a href="#解析域名到服务器" class="headerlink" title="解析域名到服务器"></a>解析域名到服务器</h3><p>给域名添加A记录绑定服务器公网IP</p><h3 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install certbot python3-certbot-nginx</span><br><span class="line">sudo certbot --nginx -d chat.xinhaojin.top</span><br></pre></td></tr></table></figure><p>输出：证书申请成功，但没法自动安装，因为没有在nginx配置中找到域名相关配置</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Successfully received certificate.</span><br><span class="line">Certificate is saved at: /etc/letsencrypt/live/chat.xinhaojin.top/fullchain.pem</span><br><span class="line">Key is saved at:         /etc/letsencrypt/live/chat.xinhaojin.top/privkey.pem</span><br><span class="line">This certificate expires on 2023-10-02.</span><br><span class="line">These files will be updated when the certificate renews.</span><br><span class="line">Certbot has set up a scheduled task to automatically renew this certificate in the background.</span><br><span class="line"></span><br><span class="line">Deploying certificate</span><br><span class="line">Could not install certificate</span><br><span class="line"></span><br><span class="line">NEXT STEPS:</span><br><span class="line">- The certificate was saved, but could not be installed (installer: nginx). After fixing the error shown below, try installing it again by running:</span><br><span class="line">  certbot install --cert-name chat.xinhaojin.top</span><br><span class="line"></span><br><span class="line">Could not automatically find a matching server block for chat.xinhaojin.top. Set the `server_name` directive to use the Nginx installer.</span><br><span class="line">Ask for help or search for solutions at https://community.letsencrypt.org. See the logfile /var/log/letsencrypt/letsencrypt.log or re-run Certbot with -v for more details.</span><br></pre></td></tr></table></figure><h3 id="修改nginx配置"><a href="#修改nginx配置" class="headerlink" title="修改nginx配置"></a>修改nginx配置</h3><p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf原配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/<span class="literal">error</span>.log <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-重定向80端口的HTTP请求到443端口HTTPS"><a href="#1-重定向80端口的HTTP请求到443端口HTTPS" class="headerlink" title="1.重定向80端口的HTTP请求到443端口HTTPS"></a>1.重定向80端口的HTTP请求到443端口HTTPS</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  chat.xinhaojin.top; </span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-配置443端口使用SSL证书，配置SSL参数"><a href="#2-配置443端口使用SSL证书，配置SSL参数" class="headerlink" title="2.配置443端口使用SSL证书，配置SSL参数"></a>2.配置443端口使用SSL证书，配置SSL参数</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl; </span><br><span class="line">    <span class="attribute">server_name</span> chat.xinhaojin.top;</span><br><span class="line">  </span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/chat.xinhaojin.top/fullchain.pem;   </span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/chat.xinhaojin.top/privkey.pem; </span><br><span class="line">  </span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span>;  </span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-在location中配置代理至应用"><a href="#3-在location中配置代理至应用" class="headerlink" title="3.在location中配置代理至应用"></a>3.在location中配置代理至应用</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">           <span class="attribute">proxy_pass</span> http://0.0.0.0:3002;</span><br><span class="line">           <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">           <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">           <span class="attribute">proxy_set_header</span> Connection <span class="string">&#x27;upgrade&#x27;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>修改后配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/<span class="literal">error</span>.log <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  chat.xinhaojin.top; </span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">443</span> ssl; </span><br><span class="line">        <span class="attribute">server_name</span>   chat.xinhaojin.top;  </span><br><span class="line">      </span><br><span class="line">        <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/chat.xinhaojin.top/fullchain.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/chat.xinhaojin.top/privkey.pem;</span><br><span class="line">  </span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span>;  </span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256;  </span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">           <span class="attribute">proxy_pass</span> http://0.0.0.0:3002;</span><br><span class="line">           <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">           <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">           <span class="attribute">proxy_set_header</span> Connection <span class="string">&#x27;upgrade&#x27;</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">     &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载nginx配置"><a href="#重载nginx配置" class="headerlink" title="重载nginx配置"></a>重载nginx配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>ssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu22宝塔面板安装docker</title>
    <link href="/2023/07/04/Ubuntu22%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E5%AE%89%E8%A3%85docker/"/>
    <url>/2023/07/04/Ubuntu22%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E5%AE%89%E8%A3%85docker/</url>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu22宝塔面板安装docker"><a href="#Ubuntu22宝塔面板安装docker" class="headerlink" title="Ubuntu22宝塔面板安装docker"></a>Ubuntu22宝塔面板安装docker</h2><p>官网<a href="https://www.bt.cn/new/download.html">宝塔面板下载，免费全能的服务器运维软件 (bt.cn)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh ed8484bec</span><br></pre></td></tr></table></figure><p>复制保存初始化用户密码</p><p><img src="https://xinhaojin.github.io/imgs-host/20230704/image.5xjeaa9urio0.webp"></p><p>放行端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 23252/tcp</span><br><span class="line">sudo ufw allow 23252/udp</span><br><span class="line">sudo ufw enable</span><br></pre></td></tr></table></figure><p>有可能还是无法访问，需要重启宝塔面板，或重启服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status bt</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart bt</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/20230704/image.7jei1ok5yo40.webp"></p><p>使用初始化用户密码登录进去之后，在面板设置中修改用户名和密码</p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>在面板软件商店中搜索docker安装</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用方法整理</title>
    <link href="/2023/05/20/Java%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2023/05/20/Java%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Java常用方法整理"><a href="#Java常用方法整理" class="headerlink" title="Java常用方法整理"></a>Java常用方法整理</h1><h2 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>equals(Object obj)</td><td>判断对象是否相等。</td></tr><tr><td>hashCode()</td><td>获取对象的哈希码。</td></tr><tr><td>toString()</td><td>获取对象的字符串表示。</td></tr><tr><td>getClass()</td><td>获取对象的类。</td></tr><tr><td>wait()</td><td>等待其他线程通知。</td></tr><tr><td>notify()</td><td>唤醒等待中的线程。</td></tr><tr><td>notifyAll()</td><td>唤醒所有等待中的线程。</td></tr></tbody></table><h2 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>max(a, b)</td><td>返回a和b中较大的值。</td></tr><tr><td>min(a, b)</td><td>返回a和b中较小的值。</td></tr><tr><td>abs(x)</td><td>返回x的绝对值。</td></tr><tr><td>pow(x, y)</td><td>返回x的y次幂。</td></tr><tr><td>sqrt(x)</td><td>返回x的平方根。</td></tr><tr><td>random()</td><td>返回一个0到1之间的随机浮点数。</td></tr><tr><td>round(x)</td><td>对浮点数进行四舍五入。</td></tr><tr><td>floor(x)</td><td>返回不大于x的最大整数。</td></tr><tr><td>ceil(x)</td><td>返回不小于x的最小整数。</td></tr></tbody></table><h2 id="Random-类"><a href="#Random-类" class="headerlink" title="Random 类"></a>Random 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>nextInt(bound)</td><td>返回一个0到bound之间的随机整数。</td></tr><tr><td>nextDouble()</td><td>返回一个0到1之间的随机浮点数。</td></tr><tr><td>nextBoolean()</td><td>返回一个随机的布尔值。</td></tr><tr><td>nextBytes(byte[])</td><td>将随机字节填充到字节数组。</td></tr></tbody></table><h2 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>length()</td><td>返回字符串的长度。</td></tr><tr><td>charAt(index)</td><td>返回指定索引处的字符。</td></tr><tr><td>substring(begin, end)</td><td>截取子字符串。</td></tr><tr><td>indexOf(str)</td><td>查找子字符串第一次出现的位置。</td></tr><tr><td>equals(str)</td><td>判断字符串是否相等。</td></tr><tr><td>compareTo(str)</td><td>比较字符串的大小关系。</td></tr><tr><td>startsWith(prefix)</td><td>判断字符串是否以指定前缀开头。</td></tr><tr><td>endsWith(suffix)</td><td>判断字符串是否以指定后缀结尾。</td></tr><tr><td>toUpperCase()</td><td>将字符串转换为大写。</td></tr><tr><td>toLowerCase()</td><td>将字符串转换为小写。</td></tr><tr><td>trim()</td><td>去除字符串两端的空格。</td></tr></tbody></table><h2 id="StringBuilder-StringBuffer-类"><a href="#StringBuilder-StringBuffer-类" class="headerlink" title="StringBuilder&#x2F;StringBuffer 类"></a>StringBuilder&#x2F;StringBuffer 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>append(str)</td><td>追加字符串。</td></tr><tr><td>insert(offset, str)</td><td>插入字符串。</td></tr><tr><td>delete(start, end)</td><td>删除指定范围的字符。</td></tr><tr><td>reverse()</td><td>反转字符串。</td></tr><tr><td>toString()</td><td>将 StringBuilder&#x2F;StringBuffer 转换为 String。</td></tr><tr><td>capacity()</td><td>获取容量。</td></tr><tr><td>ensureCapacity(min)</td><td>确保容量至少为指定值。</td></tr><tr><td>length()</td><td>返回长度。</td></tr><tr><td>setLength(length)</td><td>设置长度。</td></tr></tbody></table><h2 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>sort(arr)</td><td>对数组进行排序。</td></tr><tr><td>binarySearch(arr, key)</td><td>在排序数组中查找指定元素的索引。</td></tr><tr><td>copyOf(arr, length)</td><td>复制数组的一部分。</td></tr><tr><td>fill(arr, value)</td><td>将数组中的元素都设置为指定值。</td></tr><tr><td>equals(arr1, arr2)</td><td>比较两个数组是否相等。</td></tr></tbody></table><h2 id="Collections-类"><a href="#Collections-类" class="headerlink" title="Collections 类"></a>Collections 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>sort(list)</td><td>对列表进行排序。</td></tr><tr><td>binarySearch(list, key)</td><td>在排序列表中查找指定元素的索引。</td></tr><tr><td>reverse(list)</td><td>反转列表。</td></tr><tr><td>shuffle(list)</td><td>随机打乱列表中的元素。</td></tr><tr><td>max(collection)</td><td>返回集合中的最大元素。</td></tr><tr><td>min(collection)</td><td>返回集合中的最小元素。</td></tr><tr><td>frequency(collection, obj)</td><td>返回集合中指定元素的出现次数。</td></tr><tr><td>indexOfSubList(list, subList)</td><td>返回子列表第一次出现在列表中的位置。</td></tr></tbody></table><h2 id="List-接口"><a href="#List-接口" class="headerlink" title="List 接口"></a>List 接口</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add(element)</td><td>向列表末尾添加元素。</td></tr><tr><td>add(index, element)</td><td>在指定位置插入元素。</td></tr><tr><td>remove(index)</td><td>移除指定位置的元素。</td></tr><tr><td>get(index)</td><td>获取指定位置的元素。</td></tr><tr><td>set(index, element)</td><td>设置指定位置的元素。</td></tr><tr><td>size()</td><td>返回列表的大小。</td></tr><tr><td>indexOf(element)</td><td>返回元素第一次出现在列表中的位置。</td></tr><tr><td>subList(from, to)</td><td>返回子列表。</td></tr></tbody></table><h2 id="Set-接口"><a href="#Set-接口" class="headerlink" title="Set 接口"></a>Set 接口</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add(element)</td><td>向集合中添加元素。</td></tr><tr><td>remove(element)</td><td>从集合中移除元素。</td></tr><tr><td>contains(element)</td><td>判断集合是否包含指定元素。</td></tr><tr><td>size()</td><td>返回集合的大小。</td></tr><tr><td>isEmpty()</td><td>判断集合是否为空。</td></tr><tr><td>iterator()</td><td>返回迭代器，用于遍历集合中的元素。</td></tr></tbody></table><h2 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map 接口"></a>Map 接口</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>put(key, value)</td><td>将键值对添加到映射中。</td></tr><tr><td>get(key)</td><td>根据键获取值。</td></tr><tr><td>remove(key)</td><td>移除指定键的键值对。</td></tr><tr><td>containsKey(key)</td><td>判断映射中是否包含指定键。</td></tr><tr><td>keySet()</td><td>返回所有键组成的集合。</td></tr><tr><td>values()</td><td>返回所有值组成的集合。</td></tr><tr><td>entrySet()</td><td>返回所有键值对组成的集合。</td></tr></tbody></table><h2 id="Queue-LinkedList-类"><a href="#Queue-LinkedList-类" class="headerlink" title="Queue&#x2F;LinkedList 类"></a>Queue&#x2F;LinkedList 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>offer(element)</td><td>将元素添加到队列中。</td></tr><tr><td>poll()</td><td>移除并返回队列头部的元素。</td></tr><tr><td>peek()</td><td>返回队列头部的元素，但不移除。</td></tr><tr><td>size()</td><td>返回队列中的元素个数。</td></tr><tr><td>isEmpty()</td><td>判断队列是否为空。</td></tr></tbody></table><h2 id="Scanner-类"><a href="#Scanner-类" class="headerlink" title="Scanner 类"></a>Scanner 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>next()</td><td>读取下一个输入项（字符串）。</td></tr><tr><td>nextInt()</td><td>读取下一个输入项作为整数。</td></tr><tr><td>nextDouble()</td><td>读取下一个输入项作为双精度浮点数。</td></tr><tr><td>nextLine()</td><td>读取当前行剩余部分并返回。</td></tr><tr><td>hasNext()</td><td>判断是否还有输入项。</td></tr><tr><td>close()</td><td>关闭 Scanner 对象。</td></tr></tbody></table><h2 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>exists()</td><td>判断文件是否存在。</td></tr><tr><td>isDirectory()</td><td>判断是否是目录。</td></tr><tr><td>isFile()</td><td>判断是否是文件。</td></tr><tr><td>getName()</td><td>返回文件名。</td></tr><tr><td>getPath()</td><td>返回文件路径。</td></tr><tr><td>createNewFile()</td><td>创建新文件。</td></tr><tr><td>delete()</td><td>删除文件。</td></tr><tr><td>list()</td><td>返回目录中的文件和子目录。</td></tr></tbody></table><h2 id="Thread-类"><a href="#Thread-类" class="headerlink" title="Thread 类"></a>Thread 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>start()</td><td>启动线程。</td></tr><tr><td>run()</td><td>线程执行的主体。</td></tr><tr><td>join()</td><td>等待线程执行完成。</td></tr><tr><td>sleep()</td><td>使当前线程睡眠指定时间。</td></tr><tr><td>isAlive()</td><td>判断线程是否存活。</td></tr><tr><td>interrupt()</td><td>中断线程。</td></tr></tbody></table><h2 id="Runnable-接口"><a href="#Runnable-接口" class="headerlink" title="Runnable 接口"></a>Runnable 接口</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>run()</td><td>线程执行的主体。</td></tr></tbody></table><h2 id="InputStream-OutputStream-类"><a href="#InputStream-OutputStream-类" class="headerlink" title="InputStream&#x2F;OutputStream 类"></a>InputStream&#x2F;OutputStream 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>read()</td><td>读取一个字节的数据。</td></tr><tr><td>read(byte[] buffer)</td><td>读取多个字节的数据。</td></tr><tr><td>close()</td><td>关闭流。</td></tr><tr><td>write()</td><td>写入一个字节的数据。</td></tr><tr><td>write(byte[] buffer)</td><td>写入多个字节的数据。</td></tr></tbody></table><h2 id="Reader-Writer-类"><a href="#Reader-Writer-类" class="headerlink" title="Reader&#x2F;Writer 类"></a>Reader&#x2F;Writer 类</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>read()</td><td>读取一个字符的数据。</td></tr><tr><td>read(char[] buffer)</td><td>读取多个字符的数据。</td></tr><tr><td>close()</td><td>关闭流。</td></tr><tr><td>write()</td><td>写入一个字符的数据。</td></tr><tr><td>write(char[] buffer)</td><td>写入多个字符的数据。</td></tr></tbody></table><h2 id="格式转换的常用方法"><a href="#格式转换的常用方法" class="headerlink" title="格式转换的常用方法"></a>格式转换的常用方法</h2><table><thead><tr><th>类型转换</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>字符串到整数</td><td>Integer.parseInt(String str)</td><td>将字符串转换为整数。</td></tr><tr><td>字符串到浮点数</td><td>Double.parseDouble(String str)</td><td>将字符串转换为双精度浮点数。</td></tr><tr><td>整数到字符串</td><td>String.valueOf(int value)</td><td>将整数转换为字符串。</td></tr><tr><td>浮点数到字符串</td><td>String.valueOf(double value)</td><td>将双精度浮点数转换为字符串。</td></tr><tr><td>字符串到布尔值</td><td>Boolean.parseBoolean(String str)</td><td>将字符串转换为布尔值。</td></tr><tr><td>布尔值到字符串</td><td>String.valueOf(boolean value)</td><td>将布尔值转换为字符串。</td></tr><tr><td>字符串到日期</td><td>SimpleDateFormat.parse(String str)</td><td>将字符串转换为日期。</td></tr><tr><td>日期到字符串</td><td>SimpleDateFormat.format(Date date)</td><td>将日期转换为字符串。</td></tr><tr><td>字符串到字节数组</td><td>str.getBytes()</td><td>将字符串转换为字节数组。</td></tr><tr><td>字节数组到字符串</td><td>new String(byte[] bytes)</td><td>将字节数组转换为字符串。</td></tr><tr><td>字符串到枚举</td><td>Enum.valueOf(Class enumType, String name)</td><td>将字符串转换为枚举类型。</td></tr><tr><td>枚举到字符串</td><td>enumValue.name()</td><td>将枚举类型转换为字符串。</td></tr></tbody></table><h2 id="数组和集合类型的转换"><a href="#数组和集合类型的转换" class="headerlink" title="数组和集合类型的转换"></a>数组和集合类型的转换</h2><table><thead><tr><th>类型转换</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Array 转 List</td><td>Arrays.asList(T… array)</td><td>将数组转换为 List。</td></tr><tr><td>List 转 Array</td><td>list.toArray(new T[list.size()])</td><td>将 List 转换为数组。</td></tr><tr><td>Set 转 List</td><td>new ArrayList&lt;&gt;(set)</td><td>将 Set 转换为 List。</td></tr><tr><td>List 转 Set</td><td>new HashSet&lt;&gt;(list)</td><td>将 List 转换为 Set。</td></tr><tr><td>Map 转 List</td><td>new ArrayList&lt;&gt;(map.entrySet())</td><td>将 Map 转换为 List，每个元素为 Map 的 Entry。</td></tr><tr><td>List 转 Map</td><td>list.stream().collect(Collectors.toMap(keyMapper, valueMapper))</td><td>将 List 转换为 Map，指定 key 和 value 转换方法。</td></tr><tr><td>Array 转 String</td><td>Arrays.toString(array)</td><td>将数组转换为字符串。</td></tr><tr><td>String 转 Array</td><td>str.split(regex)</td><td>将字符串分割为数组。</td></tr><tr><td>List 转 String</td><td>String.join(delimiter, list)</td><td>将 List 中的元素用指定分隔符连接为字符串。</td></tr><tr><td>String 转 List</td><td>Arrays.asList(str.split(delimiter))</td><td>将字符串分割后转换为 List。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode刷题：栈和队列</title>
    <link href="/2023/05/20/LeetCode%E5%88%B7%E9%A2%98%EF%BC%9A%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <url>/2023/05/20/LeetCode%E5%88%B7%E9%A2%98%EF%BC%9A%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p><p>实现 MyQueue 类：</p><p>void push(int x) 将元素 x 推到队列的末尾<br>int pop() 从队列的开头移除并返回元素<br>int peek() 返回队列开头的元素<br>boolean empty() 如果队列为空，返回 true ；否则，返回 false<br>说明：</p><p>你 只能 使用标准的栈操作 —— 也就是只有 push to top, peek&#x2F;pop from top, size, 和 is empty 操作是合法的。<br>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</p><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks">https://leetcode.cn/problems/implement-queue-using-stacks</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.使用了两个栈 stk1 和 stk2，其中 stk1 用于存储队列中的元素，stk2 用于辅助实现队列的 pop() 和 peek() 操作</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stk1, stk2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化两个栈</span></span><br><span class="line">        stk1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stk2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">// 将元素压入 stk1 栈中</span></span><br><span class="line">        stk1.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 stk2 栈为空，则将 stk1 中的元素依次弹出并压入 stk2 栈中</span></span><br><span class="line">        <span class="keyword">if</span> (stk2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stk1.isEmpty())&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> stk1.pop();</span><br><span class="line">                stk2.push(top);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从 stk2 栈中弹出队首元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> stk2.pop();</span><br><span class="line">        <span class="comment">// 将 stk2 中的元素再次依次弹出并压入 stk1 栈中，以保持栈的状态不变</span></span><br><span class="line">        <span class="keyword">while</span>(!stk2.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> stk2.pop();</span><br><span class="line">            stk1.push(top);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回队首元素</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 stk2 栈为空，则将 stk1 中的元素依次弹出并压入 stk2 栈中</span></span><br><span class="line">        <span class="keyword">if</span> (stk2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stk1.isEmpty())&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> stk1.pop();</span><br><span class="line">                stk2.push(top);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取 stk2 栈的栈顶元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> stk2.peek();</span><br><span class="line">        <span class="comment">// 将 stk2 中的元素再次依次弹出并压入 stk1 栈中，以保持栈的状态不变</span></span><br><span class="line">        <span class="keyword">while</span>(!stk2.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> stk2.pop();</span><br><span class="line">            stk1.push(top);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回队首元素</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 判断 stk1 是否为空即可</span></span><br><span class="line">        <span class="keyword">return</span> stk1.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h2><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。</p><p>实现 MyStack 类：</p><p>void push(int x) 将元素 x 压入栈顶。<br>int pop() 移除并返回栈顶元素。<br>int top() 返回栈顶元素。<br>boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。 </p><p>注意：</p><p>你只能使用队列的基本操作 —— 也就是 push to back、peek&#x2F;pop from front、size 和 is empty 这些操作。<br>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</p><p><a href="https://leetcode.cn/problems/implement-stack-using-queues">https://leetcode.cn/problems/implement-stack-using-queues</a></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.使用了两个队列 que1 和 que2 来实现栈。在每一次执行 push() 操作时，我们先将新元素 x 添加到 que2 队列中，然后将 que1 中的所有元素依次添加到 que2 队列中，这样可以保证 que2 队列中的元素是按照后进先出的顺序排列的。接着，我们再将 que2 中的所有元素依次添加回到 que1 队列中，这样就实现了栈的状态</span><br></pre></td></tr></table></figure><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    <span class="comment">// 定义两个队列</span></span><br><span class="line">    Queue&lt;Integer&gt; que1, que2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化队列</span></span><br><span class="line">        que1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">// 将元素添加到 que2 队列中</span></span><br><span class="line">        que2.add(x);</span><br><span class="line">        <span class="comment">// 将 que1 中的元素依次添加到 que2 队列中</span></span><br><span class="line">        <span class="keyword">while</span> (!que1.isEmpty()) &#123;</span><br><span class="line">            que2.add(que1.remove());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 que2 中的元素依次添加到 que1 队列中，从而维持栈的状态</span></span><br><span class="line">        <span class="keyword">while</span> (!que2.isEmpty()) &#123;</span><br><span class="line">            que1.add(que2.remove());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 直接从 que1 队列中删除并返回队首元素即可</span></span><br><span class="line">        <span class="keyword">return</span> que1.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 返回 que1 队列的队首元素即可</span></span><br><span class="line">        <span class="keyword">return</span> que1.peek();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 判断 que1 是否为空即可</span></span><br><span class="line">        <span class="keyword">return</span> que1.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p><p><a href="https://leetcode.cn/problems/valid-parentheses">https://leetcode.cn/problems/valid-parentheses</a></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.遍历字符串，遇到左括号入栈，遇到右括号查看与栈顶元素是否匹配</span><br><span class="line">2.字符串长度为奇数肯定false,处理右括号时栈空肯定false,最后栈不空肯定false</span><br></pre></td></tr></table></figure><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果字符串长度为奇数，一定不是有效的括号序列</span></span><br><span class="line">    <span class="keyword">if</span>(s.length()%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 创建一个栈来保存左括号</span></span><br><span class="line">    Stack&lt;Character&gt; stk=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">    <span class="comment">// 遍历字符串中的每一个字符</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c : arr)&#123;</span><br><span class="line">        <span class="comment">// 如果遇到左括号，将其入栈</span></span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || c==<span class="string">&#x27;&#123;&#x27;</span> || c==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">            stk.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果遇到右括号</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 如果栈为空，说明没有与之匹配的左括号，返回 false</span></span><br><span class="line">            <span class="keyword">if</span>(stk.isEmpty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 取出栈顶元素</span></span><br><span class="line">            <span class="type">char</span> top=stk.peek();</span><br><span class="line">            <span class="comment">// 如果右括号与栈顶元素匹配，将栈顶元素弹出</span></span><br><span class="line">            <span class="keyword">if</span>(top==<span class="string">&#x27;(&#x27;</span> &amp;&amp; c==<span class="string">&#x27;)&#x27;</span> || top==<span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; c==<span class="string">&#x27;&#125;&#x27;</span> || top==<span class="string">&#x27;[&#x27;</span> &amp;&amp; c==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                stk.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果右括号与栈顶元素不匹配，返回 false</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果栈为空，说明所有的左括号都有与之匹配的右括号，是一个有效的括号序列，返回 true，否则返回 false</span></span><br><span class="line">    <span class="keyword">if</span>(stk.isEmpty()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除字符串中的所有相邻重复项"><a href="#删除字符串中的所有相邻重复项" class="headerlink" title="删除字符串中的所有相邻重复项"></a>删除字符串中的所有相邻重复项</h2><p>给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。</p><p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p><p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。<br><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;abbaca&quot;</span><br><span class="line">输出：&quot;ca&quot;</span><br><span class="line">解释：</span><br><span class="line">例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string">https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string</a></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.遍历字符串，如果当前字符与站定元素相同，pop</span><br><span class="line">2.new一个栈size大小的char[]，循环pop栈顶元素，从数组末尾开始放</span><br><span class="line">3.把字符数组转为String，使用构造函数new String(arr)</span><br></pre></td></tr></table></figure><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个栈来保存字符</span></span><br><span class="line">    Stack&lt;Character&gt; stk=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">    <span class="comment">// 遍历字符串中的每一个字符</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c : arr)&#123;</span><br><span class="line">        <span class="comment">// 如果栈不为空，且当前字符与栈顶元素相同，将栈顶元素弹出</span></span><br><span class="line">        <span class="keyword">if</span>(!stk.isEmpty() &amp;&amp; stk.peek()==c)&#123;</span><br><span class="line">            stk.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则，将当前字符入栈</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            stk.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将栈中的元素依次弹出，放入一个字符数组中</span></span><br><span class="line">    <span class="type">char</span>[] result=<span class="keyword">new</span> <span class="title class_">char</span>[stk.size()];</span><br><span class="line">    <span class="type">int</span> index=stk.size()-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!stk.isEmpty())&#123;</span><br><span class="line">        result[index--]=stk.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将字符数组转换为字符串并返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逆波兰表达式求值-后缀转中缀"><a href="#逆波兰表达式求值-后缀转中缀" class="headerlink" title="逆波兰表达式求值(后缀转中缀)"></a>逆波兰表达式求值(后缀转中缀)</h2><p>给你一个字符串数组 tokens ，表示一个根据 逆波兰表示法 表示的算术表达式。</p><p>请你计算该表达式。返回一个表示表达式值的整数。</p><p>注意：</p><p>有效的算符为 ‘+’、’-‘、’*’ 和 ‘&#x2F;‘ 。<br>每个操作数（运算对象）都可以是一个整数或者另一个表达式。<br>两个整数之间的除法总是 向零截断 。<br>表达式中不含除零运算。<br>输入是一个根据逆波兰表示法表示的算术表达式。<br>答案及所有中间计算结果可以用 32 位 整数表示。<br><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]</span><br><span class="line">输出：9</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation">https://leetcode.cn/problems/evaluate-reverse-polish-notation</a></p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.遍历字符串数组，遇到数字入栈，遇到操作符弹出两个操作数处理后入栈。</span><br></pre></td></tr></table></figure><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个栈来保存操作数和中间计算结果</span></span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 遍历字符串数组中的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">        <span class="comment">// 如果当前元素是操作符，则从栈中弹出两个操作数进行计算，并将结果压入栈中</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;+-*/&quot;</span>.contains(token)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">switch</span> (token) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                    stack.push(a + b);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                    stack.push(a - b);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                    stack.push(a * b);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                    stack.push(a / b);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果当前元素不是操作符，则将其作为操作数压入栈中</span></span><br><span class="line">            stack.push(Integer.parseInt(token));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 栈中最后剩下的元素就是计算结果，将其返回</span></span><br><span class="line">    <span class="keyword">return</span> stack.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h2><p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p><p>返回 滑动窗口中的最大值 。<br><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,-1,-3,5,3,6,7], k = 3</span><br><span class="line">输出：[3,3,5,5,6,7]</span><br><span class="line">解释：</span><br><span class="line">滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/sliding-window-maximum">https://leetcode.cn/problems/sliding-window-maximum</a></p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.创建了一个双端队列 deque，用于维护滑动窗口中的元素。同时，我们创建了一个长度为 n - k + 1 的数组 result，用于存储每个滑动窗口中的最大值</span><br><span class="line">2.将队列中比当前元素小的元素都删除，并将当前元素加入队列中。</span><br><span class="line">3.判断队列头部的元素是否已经不在滑动窗口中，如果是，就将其从队列中删除。这样，队列头部的元素就始终是当前滑动窗口中的最大值。</span><br><span class="line">4.判断当前滑动窗口的大小是否为 k。如果是，就将队列头部的元素加入结果数组中。</span><br></pre></td></tr></table></figure><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[n - k + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 将队列中比当前元素小的元素都删除</span></span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty() &amp;&amp; deque.peekLast() &lt; nums[i]) &#123;</span><br><span class="line">            deque.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">        deque.addLast(nums[i]);</span><br><span class="line">        <span class="comment">// 如果队列头部的元素已经不在滑动窗口中，将其删除</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k &amp;&amp; deque.peekFirst() == nums[i - k]) &#123;</span><br><span class="line">            deque.removeFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果当前滑动窗口的大小为 k，将队列头部的元素加入结果数组中</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">            result[idx++] = deque.peekFirst();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前-K-个高频元素"><a href="#前-K-个高频元素" class="headerlink" title="前 K 个高频元素"></a>前 K 个高频元素</h2><p>给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。</p><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/">https://leetcode.cn/problems/top-k-frequent-elements/</a></p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.使用 HashMap 统计每个元素出现的次数，元素为键，出现次数为值。</span><br><span class="line">2.创建一个 PriorityQueue（优先队列），用于存储出现频率前 k 高的元素。在 PriorityQueue 中，元素按照出现次数从大到小排序，因此它是一个大顶堆。遍历 HashMap，将每个键值对转化为 Map.Entry，并将其加入 PriorityQueue 中。如果 PriorityQueue 的大小超过了 k，就将其中出现次数最小的元素移除。</span><br><span class="line">3.将 PriorityQueue 中前 k 个元素取出并存入结果数组中。由于 PriorityQueue 是一个大顶堆，取出的元素是按照出现次数从大到小排序的，因此结果数组中的元素是按照出现频率从高到低排序的。</span><br></pre></td></tr></table></figure><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="comment">// 创建一个长度为 k 的数组，用于存储出现频率前 k 高的元素</span></span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="comment">// 创建一个 HashMap，用于统计每个元素出现的次数</span></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="comment">// 统计每个元素出现的次数</span></span><br><span class="line">        map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 map 中的元素转化为 set，便于遍历</span></span><br><span class="line">    Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">    <span class="comment">// 创建一个 PriorityQueue（优先队列），用于存储出现频率前 k 高的元素</span></span><br><span class="line">    <span class="comment">// PriorityQueue 是一个优先队列，可以自动将元素按照一定规则进行排序</span></span><br><span class="line">    <span class="comment">// 在这里，我们将 PriorityQueue 中的元素按照出现次数从大到小排序，因此它是一个大顶堆</span></span><br><span class="line">    PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o2.getValue() - o1.getValue());</span><br><span class="line">    <span class="comment">// 遍历 entries，将每个元素加入 PriorityQueue 中</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entries) &#123;</span><br><span class="line">        queue.offer(entry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将 PriorityQueue 中前 k 个元素取出并存入 result 数组中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        result[i] = queue.poll().getKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回出现频率前 k 高的元素</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode刷题：二叉树</title>
    <link href="/2023/05/20/LeetCode%E5%88%B7%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/05/20/LeetCode%E5%88%B7%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="二叉树定义"><a href="#二叉树定义" class="headerlink" title="二叉树定义"></a>二叉树定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode() &#123;&#125;</span><br><span class="line">        TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">        TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三种递归遍历方法"><a href="#三种递归遍历方法" class="headerlink" title="三种递归遍历方法"></a>三种递归遍历方法</h2><p>递归三部曲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.确定递归函数的参数和返回值</span><br><span class="line">2.确定终止条件</span><br><span class="line">3.确定单层递归的逻辑</span><br></pre></td></tr></table></figure><p>三种遍历方法的左中右顺序：左右保持不变</p><p>“前&#x2F;中&#x2F;后”序遍历表示的是<strong>根(中)节点在三者中的位置</strong></p><p>前序遍历：<strong>中</strong>-&gt;左-&gt;右</p><p>中序遍历：左-&gt;<strong>中</strong>-&gt;右</p><p>后序遍历：左-&gt;右-&gt;<strong>中</strong></p><h3 id="二叉树的前序遍历"><a href="#二叉树的前序遍历" class="headerlink" title="二叉树的前序遍历"></a>二叉树的前序遍历</h3><p>给你二叉树的根节点 root ，返回它节点值的 前序 遍历。</p><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">https://leetcode.cn/problems/binary-tree-preorder-traversal/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        order(root,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">order</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        order(root.left,list);</span><br><span class="line">        order(root.right,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h3><p>给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。</p><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">https://leetcode.cn/problems/binary-tree-inorder-traversal/</a></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        order(root,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">order</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        order(root.left,list);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        order(root.right,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h3><p>给你一棵二叉树的根节点 root ，返回其节点值的 后序遍历 。</p><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">https://leetcode.cn/problems/binary-tree-postorder-traversal/</a></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        order(root,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">order</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        order(root.left,list);</span><br><span class="line">        order(root.right,list);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代遍历方法"><a href="#迭代遍历方法" class="headerlink" title="迭代遍历方法"></a>迭代遍历方法</h2><h3 id="前序遍历代码"><a href="#前序遍历代码" class="headerlink" title="前序遍历代码"></a>前序遍历代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">前序遍历顺序：中-左-右，入栈顺序：中-右-左 出栈顺序：中-左-右</span><br><span class="line">对每一个根节点：</span><br><span class="line">    1.打印值</span><br><span class="line">    2.向左下方遍历，遍历节点入栈，找到它的左子树最下边</span><br><span class="line">    3.弹出栈顶</span><br><span class="line">    4.其右子树为新的根节点</span><br><span class="line">    重复上述步骤直到栈空</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 List，用于存储遍历结果</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 如果根节点为空，直接返回空的 List</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建一个 Stack，用于存储遍历过程中的节点</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 将根节点入栈</span></span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="comment">// 当栈不为空时，执行以下循环</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            <span class="comment">// 取出栈顶元素</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="comment">// 将栈顶元素的值加入结果列表中</span></span><br><span class="line">            result.add(node.val);</span><br><span class="line">            <span class="comment">// 如果栈顶元素的右子节点不为空，将其入栈</span></span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果栈顶元素的左子节点不为空，将其入栈</span></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回遍历结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历代码"><a href="#中序遍历代码" class="headerlink" title="中序遍历代码"></a>中序遍历代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">中序遍历顺序: 左-中-右 入栈顺序： 左-右</span><br><span class="line"> 对每一个根节点：</span><br><span class="line">    1.向左下方遍历，遍历节点入栈，找到它的左子树最下边</span><br><span class="line">    2.弹出栈顶并打印</span><br><span class="line">    3.其右子树为新的根节点</span><br><span class="line">    重复上述步骤直到栈空</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 List，用于存储遍历结果</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 如果根节点为空，直接返回空的 List</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建一个 Stack，用于存储遍历过程中的节点</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 定义一个指针 cur，初始值为根节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="comment">// 当 cur 不为空或者栈不为空时，执行以下循环</span></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">        <span class="comment">// 如果 cur 不为空，将其入栈，并将 cur 指向其左子节点</span></span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 如果 cur 为空，取出栈顶元素，将其值加入结果列表中，并将 cur 指向其右子节点</span></span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            result.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回遍历结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历代码"><a href="#后序遍历代码" class="headerlink" title="后序遍历代码"></a>后序遍历代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">后序遍历顺序 左-右-中 入栈顺序：中-左-右 出栈顺序：中-右-左， 最后翻转结果</span><br><span class="line">对每一个根节点：</span><br><span class="line">    1.向左下方遍历，遍历节点入栈，找到它的左子树最下边</span><br><span class="line">    2.如果无右子树或者右子树刚被访问，直接打印根节点</span><br><span class="line">      否则根节点再次入栈，先处理右子树</span><br><span class="line">    3.其右子树为新的根节点</span><br><span class="line">    重复上述步骤直到栈空</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 List，用于存储遍历结果</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 如果根节点为空，直接返回空的 List</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建一个 Stack，用于存储遍历过程中的节点</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 将根节点入栈</span></span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="comment">// 当栈不为空时，执行以下循环</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            <span class="comment">// 取出栈顶元素</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="comment">// 将栈顶元素的值加入结果列表中</span></span><br><span class="line">            result.add(node.val);</span><br><span class="line">            <span class="comment">// 如果栈顶元素的左子节点不为空，将其入栈</span></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果栈顶元素的右子节点不为空，将其入栈</span></span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将结果列表翻转，得到后序遍历结果</span></span><br><span class="line">        Collections.reverse(result);</span><br><span class="line">        <span class="comment">// 返回遍历结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一风格迭代方法"><a href="#统一风格迭代方法" class="headerlink" title="统一风格迭代方法"></a>统一风格迭代方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只需要修改right、left、node的顺序</span><br></pre></td></tr></table></figure><p><strong>前序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">                st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">                st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">            List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">                st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">                st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后序遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">                st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）       </span></span><br><span class="line">                              </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h2><p>给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。</p><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">https://leetcode.cn/problems/binary-tree-level-order-traversal/</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.创建一个空的 List，用于存储层序遍历的结果。</span><br><span class="line">2.如果根节点为空，直接返回空的 List（因为树为空，不存在遍历结果）。</span><br><span class="line">3.创建一个队列，用于存储遍历过程中的节点。首先将根节点入队。</span><br><span class="line">4.当队列不为空时，记录当前层的节点个数 size，初始值为队列中的节点个数。</span><br><span class="line">5.在处理队列中的节点时，每取出一个节点，就将 size 变量减 1。</span><br><span class="line">6.将取出的节点的值加入当前层的遍历结果列表中。</span><br><span class="line">7.如果取出的节点的左子节点不为空，将其左子节点入队。</span><br><span class="line">8.如果取出的节点的右子节点不为空，将其右子节点入队。</span><br><span class="line">9.当 size 变量的值为 0 时，说明当前层的所有节点都已经处理完毕，可以进入下一层的遍历了。</span><br><span class="line">10.将当前层的遍历结果列表加入到总的遍历结果列表中。</span><br><span class="line">11.进入下一层的遍历，重复步骤 4-10，直到遍历完整棵树。</span><br><span class="line">12.返回遍历结果列表。</span><br></pre></td></tr></table></figure><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 List，用于存储遍历结果</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 如果根节点为空，直接返回空的 List</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建一个 Queue，用于存储遍历过程中的节点</span></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 将根节点入队</span></span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="comment">// 当队列不为空时，执行以下循环</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 获取当前层的节点个数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="comment">// 创建一个 List，用于存储当前层的遍历结果</span></span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">            <span class="comment">// 对当前层的每个节点依次进行处理</span></span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 取出队首节点</span></span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="comment">// 将队首节点的值加入当前层的遍历结果列表中</span></span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="comment">// 如果队首节点的左子节点不为空，将其入队</span></span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果队首节点的右子节点不为空，将其入队</span></span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将当前层的遍历结果列表加入到总的遍历结果列表中</span></span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回遍历结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的层序遍历-II"><a href="#二叉树的层序遍历-II" class="headerlink" title="二叉树的层序遍历 II"></a>二叉树的层序遍历 II</h2><p>给你二叉树的根节点 root ，返回其节点值 自底向上的层序遍历 。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">https://leetcode.cn/problems/binary-tree-level-order-traversal/</a></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.上一题的list反转</span><br></pre></td></tr></table></figure><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrderBottom</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">        Queue&lt;TreeNode&gt; que=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=que.size();</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=que.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) que.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) que.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的右视图"><a href="#二叉树的右视图" class="headerlink" title="二叉树的右视图"></a>二叉树的右视图</h2><p>给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><p><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">https://leetcode.cn/problems/binary-tree-right-side-view/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,null,5,null,4]</span><br><span class="line">输出: [1,3,4]</span><br></pre></td></tr></table></figure><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.同上</span><br></pre></td></tr></table></figure><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">        Queue&lt;TreeNode&gt; que=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=que.size();</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=que.poll();</span><br><span class="line">                <span class="comment">// 如果 size 变量的值为 0，说明当前节点是当前层的最后一个节点，将其值加入到 result 中</span></span><br><span class="line">                <span class="keyword">if</span>(size==<span class="number">0</span>) result.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) que.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) que.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的层平均值"><a href="#二叉树的层平均值" class="headerlink" title="二叉树的层平均值"></a>二叉树的层平均值</h2><p>给定一个非空二叉树的根节点 root , 以数组的形式返回每一层节点的平均值。与实际答案相差 10-5 以内的答案可以被接受。</p><p><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/">https://leetcode.cn/problems/average-of-levels-in-binary-tree/</a></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.同上</span><br></pre></td></tr></table></figure><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Double&gt; <span class="title function_">averageOfLevels</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Double&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//返回值类型修改为double</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">        Queue&lt;TreeNode&gt; que=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=que.size();</span><br><span class="line">            <span class="type">int</span> tmp=size;</span><br><span class="line">            <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(tmp--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=que.poll();</span><br><span class="line">                sum+=node.val;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) que.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) que.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(sum/size);<span class="comment">//计算平均值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="N-叉树的层序遍历"><a href="#N-叉树的层序遍历" class="headerlink" title="N 叉树的层序遍历"></a>N 叉树的层序遍历</h2><p>给定一个 N 叉树，返回其节点值的层序遍历。（即从左到右，逐层遍历）。</p><p>树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。</p><p><a href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/">https://leetcode.cn/problems/n-ary-tree-level-order-traversal/</a><br><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,null,3,2,4,null,5,6]</span><br><span class="line">输出：[[1],[3,2,4],[5,6]]</span><br></pre></td></tr></table></figure><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.同上</span><br></pre></td></tr></table></figure><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">        Queue&lt;Node&gt; que=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=que.size();</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                Node node=que.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">for</span>(Node child : node.children)&#123;</span><br><span class="line">                    que.add(child);<span class="comment">//</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在每个树行中找最大值"><a href="#在每个树行中找最大值" class="headerlink" title="在每个树行中找最大值"></a>在每个树行中找最大值</h2><p>给定一棵二叉树的根节点 root ，请找出该二叉树中每一层的最大值。</p><p><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/">https://leetcode.cn/problems/find-largest-value-in-each-tree-row/</a></p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.同上</span><br></pre></td></tr></table></figure><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">largestValues</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">        Queue&lt;TreeNode&gt; que=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=que.size();</span><br><span class="line">            <span class="type">int</span> max=Integer.MIN_VALUE;<span class="comment">//初始化为最小值</span></span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=que.poll();</span><br><span class="line">                max=node.val&gt;max?node.val:max;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) que.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) que.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="填充每个节点的下一个右侧节点指针"><a href="#填充每个节点的下一个右侧节点指针" class="headerlink" title="填充每个节点的下一个右侧节点指针"></a>填充每个节点的下一个右侧节点指针</h2><p>给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。</p><p>初始状态下，所有 next 指针都被设置为 NULL。</p><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node">https://leetcode.cn/problems/populating-next-right-pointers-in-each-node</a></p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.同上</span><br></pre></td></tr></table></figure><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        Queue&lt;Node&gt; que=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=que.size();</span><br><span class="line">            Node prev=<span class="literal">null</span>;<span class="comment">//标记prev节点</span></span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                Node node=que.poll();</span><br><span class="line">                <span class="keyword">if</span>(prev!=<span class="literal">null</span>) prev.next=node;</span><br><span class="line">                prev=node;<span class="comment">//指向当前节点</span></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) que.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) que.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="填充每个节点的下一个右侧节点指针-II"><a href="#填充每个节点的下一个右侧节点指针-II" class="headerlink" title="填充每个节点的下一个右侧节点指针 II"></a>填充每个节点的下一个右侧节点指针 II</h2><p>给定一个二叉树：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL 。</p><p>初始状态下，所有 next 指针都被设置为 NULL 。</p><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii">https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii</a></p><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.同上</span><br></pre></td></tr></table></figure><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><p>同上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        Queue&lt;Node&gt; que=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=que.size();</span><br><span class="line">            Node prev=<span class="literal">null</span>;<span class="comment">//标记prev节点</span></span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                Node node=que.poll();</span><br><span class="line">                <span class="keyword">if</span>(prev!=<span class="literal">null</span>) prev.next=node;</span><br><span class="line">                prev=node;<span class="comment">//指向当前节点</span></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) que.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) que.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h2><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给定二叉树 [3,9,20,null,null,15,7]</span><br><span class="line">返回它的最大深度 3 </span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree">https://leetcode.cn/problems/maximum-depth-of-binary-tree</a></p><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.同上</span><br></pre></td></tr></table></figure><h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> depth=<span class="number">0</span>;<span class="comment">//初始化深度为0</span></span><br><span class="line">        Queue&lt;TreeNode&gt; que=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=que.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node= que.poll();</span><br><span class="line">                <span class="keyword">if</span>(size==<span class="number">0</span>) depth++;<span class="comment">//每遍历完一层，深度+1</span></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) que.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) que.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的最小深度"><a href="#二叉树的最小深度" class="headerlink" title="二叉树的最小深度"></a>二叉树的最小深度</h2><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>说明：叶子节点是指没有子节点的节点。</p><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">https://leetcode.cn/problems/minimum-depth-of-binary-tree/</a></p><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.同上</span><br></pre></td></tr></table></figure><h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> depth=<span class="number">0</span>;<span class="comment">//初始化最短路径上的节点数量为0</span></span><br><span class="line">        Queue&lt;TreeNode&gt; que=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=que.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node= que.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>) <span class="keyword">return</span> depth+<span class="number">1</span>;<span class="comment">//是叶子结点，直接返回</span></span><br><span class="line">                <span class="keyword">if</span>(size==<span class="number">0</span>) depth++;<span class="comment">//遍历完一层，没有叶子结点，深度+1</span></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) que.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) que.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h2><p>给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。</p><p><a href="https://leetcode.cn/problems/invert-binary-tree/">https://leetcode.cn/problems/invert-binary-tree/</a></p><h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.递归遍历，交换左右节点</span><br></pre></td></tr></table></figure><h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        invertNode(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invertNode</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        TreeNode tmp=node.left;</span><br><span class="line">        node.left=node.right;</span><br><span class="line">        node.right=tmp;</span><br><span class="line">        invertNode(node.left);</span><br><span class="line">        invertNode(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h2><p>给你一个二叉树的根节点 root ， 检查它是否轴对称。</p><p><a href="https://leetcode.cn/problems/symmetric-tree/">https://leetcode.cn/problems/symmetric-tree/</a></p><h3 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.写一个函数比较两个节点是否对称</span><br><span class="line">2.递归遍历</span><br></pre></td></tr></table></figure><h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> check(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>) &#123;<span class="comment">//空节点对称</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span> || q == <span class="literal">null</span> || p.val != q.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//有一边空或者值不相同</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> check(p.left, q.right) &amp;&amp; check(p.right, q.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a>相同的树</h2><p>给你两棵二叉树的根节点 p 和 q ，编写一个函数来检验这两棵树是否相同。</p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><p><a href="https://leetcode.cn/problems/same-tree/">https://leetcode.cn/problems/same-tree/</a></p><h3 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.写一个函数比较两个节点是否对称</span><br><span class="line">2.递归遍历</span><br></pre></td></tr></table></figure><h3 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//都空，true</span></span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">null</span> || q==<span class="literal">null</span> || p.val!=q.val) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//一个空或值不同，false</span></span><br><span class="line">        <span class="keyword">return</span> isSameTree(p.left,q.left) &amp;&amp; isSameTree(p.right,q.right);<span class="comment">//不空且值相同，进一步比较子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="另一棵树的子树"><a href="#另一棵树的子树" class="headerlink" title="另一棵树的子树"></a>另一棵树的子树</h2><p>给你两棵二叉树 root 和 subRoot 。检验 root 中是否包含和 subRoot 具有相同结构和节点值的子树。如果存在，返回 true ；否则，返回 false 。</p><p>二叉树 tree 的一棵子树包括 tree 的某个节点和这个节点的所有后代节点。tree 也可以看做它自身的一棵子树。</p><p><a href="https://leetcode.cn/problems/subtree-of-another-tree">https://leetcode.cn/problems/subtree-of-another-tree</a></p><h3 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.dfs函数用于递归遍历s的子树</span><br><span class="line">2.check函数用于检查s和t在当前节点是否相等</span><br></pre></td></tr></table></figure><h3 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(s, t); <span class="comment">// 调用dfs函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(TreeNode s, TreeNode t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span>) &#123; <span class="comment">// 如果s为null，表示已经遍历完了s的子树，返回false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> check(s, t) || dfs(s.left, t) || dfs(s.right, t); <span class="comment">// 如果s和t相等，或者s的左子树包含t，或者s的右子树包含t，返回true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(TreeNode s, TreeNode t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> &amp;&amp; t == <span class="literal">null</span>) &#123; <span class="comment">// 如果s和t都为null，表示已经遍历完了两个树，返回true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || t == <span class="literal">null</span> || s.val != t.val) &#123; <span class="comment">// 如果s和t有一个为null，或者s的节点值不等于t的节点值，返回false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> check(s.left, t.left) &amp;&amp; check(s.right, t.right); <span class="comment">// 如果s的左子树和t的左子树相等，且s的右子树和t的右子树相等，返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全二叉树的节点个数"><a href="#完全二叉树的节点个数" class="headerlink" title="完全二叉树的节点个数"></a>完全二叉树的节点个数</h2><p>给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。</p><p>完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2h 个节点。</p><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes">https://leetcode.cn/problems/count-complete-tree-nodes</a></p><h3 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.维护一个size</span><br><span class="line">2.递归遍历</span><br></pre></td></tr></table></figure><h3 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> size=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> count(root,size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(TreeNode node,<span class="type">int</span> size)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>) <span class="keyword">return</span> size;</span><br><span class="line">        <span class="keyword">else</span> size++;</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) size=count(node.left,size);</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) size=count(node.right,size);</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。</p><p><a href="https://leetcode.cn/problems/balanced-binary-tree/">https://leetcode.cn/problems/balanced-binary-tree/</a></p><h3 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.isBalanced() 方法通过递归判断左右子树的高度差是否不超过 1，并且左右子树也都是高度平衡的，来判断当前二叉树是否为高度平衡的二叉树</span><br><span class="line">2.height() 方法用于计算二叉树的高度。该方法通过递归计算左右子树的高度，并取其中的最大值加 1，来计算当前节点的高度。</span><br></pre></td></tr></table></figure><h3 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果二叉树为空，则认为是高度平衡的二叉树</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断当前二叉树的左右子树的高度差是否不超过 1，并且左右子树也都是高度平衡的</span></span><br><span class="line">        <span class="keyword">return</span> Math.abs(height(root.left) - height(root.right)) &lt;= <span class="number">1</span> &amp;&amp; isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算二叉树的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果二叉树为空，则高度为 0</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归计算左右子树的高度，并取其中的最大值加 1，来计算当前节点的高度</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(height(root.left), height(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的所有路径"><a href="#二叉树的所有路径" class="headerlink" title="二叉树的所有路径"></a>二叉树的所有路径</h2><p>给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。</p><p>叶子节点 是指没有子节点的节点。<br><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,3,null,5]</span><br><span class="line">输出：[&quot;1-&gt;2-&gt;5&quot;,&quot;1-&gt;3&quot;]</span><br><span class="line">输入：root = [1]</span><br><span class="line">输出：[&quot;1&quot;]</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-paths/">https://leetcode.cn/problems/binary-tree-paths/</a></p><h3 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.dfs() 方法中，首先判断当前节点是否为叶子节点，如果是，则将访问过的路径添加到 res 列表中，并返回。</span><br><span class="line"></span><br><span class="line">否则，对当前节点的左右子节点进行递归搜索，并在搜索过程中，将访问过的路径拼接起来</span><br></pre></td></tr></table></figure><h3 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root, <span class="string">&quot;&quot;</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node, String path, List&lt;String&gt; res)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 当前节点是叶子节点</span></span><br><span class="line">            res.add(path + node.val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 递归遍历左子树</span></span><br><span class="line">            dfs(node.left, path + node.val + <span class="string">&quot;-&gt;&quot;</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 递归遍历右子树</span></span><br><span class="line">            dfs(node.right, path + node.val + <span class="string">&quot;-&gt;&quot;</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="左叶子之和"><a href="#左叶子之和" class="headerlink" title="左叶子之和"></a>左叶子之和</h2><p>给定二叉树的根节点 root ，返回所有左叶子之和。</p><p><a href="https://leetcode.cn/problems/sum-of-left-leaves/">https://leetcode.cn/problems/sum-of-left-leaves/</a></p><h3 id="思路-17"><a href="#思路-17" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.首先判断当前节点的左子节点是否为左叶子节点，如果是，则将该节点的值累加到 sum 中。否则，对当前节点的左右子节点进行递归搜索，并在搜索过程中，累加所有左叶子节点的值。最终返回左右子树的累加和。</span><br></pre></td></tr></table></figure><h3 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(root,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode node,<span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="literal">null</span> &amp;&amp; node.left.left==<span class="literal">null</span> &amp;&amp; node.left.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果当前节点的左子节点是叶子节点，则将该节点的值累加到 sum 中</span></span><br><span class="line">            sum+=node.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) sum=dfs(node.left,sum); <span class="comment">// 递归遍历左子树</span></span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) sum=dfs(node.right,sum); <span class="comment">// 递归遍历右子树</span></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="找树左下角的值"><a href="#找树左下角的值" class="headerlink" title="找树左下角的值"></a>找树左下角的值</h2><p>给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。</p><p>假设二叉树中至少有一个节点。</p><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">https://leetcode.cn/problems/find-bottom-left-tree-value/</a></p><h3 id="思路-18"><a href="#思路-18" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.层序遍历，找最后一层的第一个节点</span><br></pre></td></tr></table></figure><h3 id="代码-21"><a href="#代码-21" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; que=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=que.size();</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=que.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) que.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) que.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.get(result.size()-<span class="number">1</span>).get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路径总和"><a href="#路径总和" class="headerlink" title="路径总和"></a>路径总和</h2><p>给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。</p><p>叶子节点 是指没有子节点的节点。<br><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22</span><br><span class="line">输出：true</span><br><span class="line">解释：等于目标和的根节点到叶节点路径如上图所示。</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/path-sum">https://leetcode.cn/problems/path-sum</a></p><h3 id="思路-19"><a href="#思路-19" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.假定从根节点到当前节点的值之和为 val，我们可以将这个大问题转化为一个小问题：是否存在从当前节点的子节点到叶子的路径，满足其路径和为 sum - val。</span><br></pre></td></tr></table></figure><h3 id="代码-22"><a href="#代码-22" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果根节点为空，返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果根节点是叶子节点，并且节点值等于目标和，返回 true</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sum == root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果根节点不是叶子节点，递归判断左右子树是否存在符合条件的路径</span></span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从中序与后序遍历序列构造二叉树"><a href="#从中序与后序遍历序列构造二叉树" class="headerlink" title="从中序与后序遍历序列构造二叉树"></a>从中序与后序遍历序列构造二叉树</h2><p>给定两个整数数组 inorder 和 postorder ，其中 inorder 是二叉树的中序遍历， postorder 是同一棵树的后序遍历，请你构造并返回这颗 二叉树 。<br><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]</span><br><span class="line">输出：[3,9,20,null,null,15,7]</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal">https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal</a></p><h3 id="思路-20"><a href="#思路-20" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定一棵二叉树的中序遍历数组和后序遍历数组，构造出这棵二叉树。</span><br><span class="line"></span><br><span class="line">1.确定根节点</span><br><span class="line">由于后序遍历的顺序是左子树 -&gt; 右子树 -&gt; 根节点，因此后序遍历数组的最后一个元素一定是根节点。在中序遍历数组中找到根节点的位置，可以将整个数组分成左子树和右子树两部分。</span><br><span class="line"></span><br><span class="line">2.递归构造左子树和右子树</span><br><span class="line">通过根节点在中序遍历数组中的位置，可以确定左子树和右子树的中序遍历数组。在后序遍历数组中，左子树和右子树的位置也可以根据左子树的长度确定。然后可以递归构造左子树和右子树，直到叶子节点为止。</span><br><span class="line"></span><br><span class="line">3.返回根节点</span><br><span class="line">将左子树和右子树递归构造出来后，就可以将根节点和左右子树连接起来，构造出整棵二叉树。最后返回根节点即可。</span><br></pre></td></tr></table></figure><h3 id="代码-23"><a href="#代码-23" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个哈希表，用于存储中序遍历数组中每个元素的值和下标</span></span><br><span class="line">    HashMap&lt;Integer,Integer&gt; inorderArrayMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 定义后序遍历数组</span></span><br><span class="line">    <span class="type">int</span>[] post;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line">        <span class="comment">// 将中序遍历数组中每个元素的值和下标存储到哈希表中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; inorder.length; i++) &#123;</span><br><span class="line">            inorderArrayMap.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将后序遍历数组存储到成员变量 post 中</span></span><br><span class="line">        post = postorder;</span><br><span class="line">        <span class="comment">// 调用递归方法构造二叉树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> buildTree(<span class="number">0</span>, inorder.length - <span class="number">1</span>, <span class="number">0</span>, post.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归构造二叉树的方法，接受四个参数分别表示中序遍历数组的左右边界和后序遍历数组的左右边界</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span> inorderStart, <span class="type">int</span> inorderEnd, <span class="type">int</span> postorderStart, <span class="type">int</span> postorderEnd)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果中序遍历数组或后序遍历数组为空，返回空节点</span></span><br><span class="line">        <span class="keyword">if</span>(inorderEnd &lt; inorderStart || postorderEnd &lt; postorderStart) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取得后序遍历数组中的最后一个元素作为根节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">root</span> <span class="operator">=</span> post[postorderEnd];</span><br><span class="line">        <span class="comment">// 在哈希表中查找根节点对应的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rootIndexInInorderArray</span> <span class="operator">=</span> inorderArrayMap.get(root);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新的根节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(root);</span><br><span class="line">        <span class="comment">// 递归构造左子树，中序遍历数组的左边界为 inorderStart，右边界为 rootIndexInInorderArray - 1，后序遍历数组的左边界为 postorderStart，右边界为 postorderStart + rootIndexInInorderArray - inorderStart - 1</span></span><br><span class="line">        node.left = buildTree(inorderStart, rootIndexInInorderArray - <span class="number">1</span>, postorderStart, postorderStart + rootIndexInInorderArray - inorderStart - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 递归构造右子树，中序遍历数组的左边界为 rootIndexInInorderArray + 1，右边界为 inorderEnd，后序遍历数组的左边界为 postorderStart + rootIndexInInorderArray - inorderStart，右边界为 postorderEnd - 1</span></span><br><span class="line">        node.right = buildTree(rootIndexInInorderArray + <span class="number">1</span>, inorderEnd, postorderStart + rootIndexInInorderArray - inorderStart, postorderEnd - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> node; <span class="comment">// 返回新建的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大二叉树"><a href="#最大二叉树" class="headerlink" title="最大二叉树"></a>最大二叉树</h2><p>给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建:</p><p>创建一个根节点，其值为 nums 中的最大值。<br>递归地在最大值 左边 的 子数组前缀上 构建左子树。<br>递归地在最大值 右边 的 子数组后缀上 构建右子树。<br>返回 nums 构建的 最大二叉树 。<br><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,1,6,0,5]</span><br><span class="line">输出：[6,3,5,null,2,0,null,null,1]</span><br><span class="line">解释：递归调用如下所示：</span><br><span class="line">- [3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。</span><br><span class="line">    - [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。</span><br><span class="line">        - 空数组，无子节点。</span><br><span class="line">        - [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。</span><br><span class="line">            - 空数组，无子节点。</span><br><span class="line">            - 只有一个元素，所以子节点是一个值为 1 的节点。</span><br><span class="line">    - [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。</span><br><span class="line">        - 只有一个元素，所以子节点是一个值为 0 的节点。</span><br><span class="line">        - 空数组，无子节点。</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-binary-tree">https://leetcode.cn/problems/maximum-binary-tree</a></p><h3 id="思路-21"><a href="#思路-21" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.定义递归函数</span><br><span class="line">定义一个递归函数 constructMaximumBinaryTree(int[] nums, int start, int end)，其中 nums 表示给定的数组，start 和 end 表示当前递归的数组的起始位置和终止位置。</span><br><span class="line"></span><br><span class="line">2.找到最大值及其索引</span><br><span class="line">在数组 nums 的范围 [start, end] 中找到最大值及其索引。</span><br><span class="line"></span><br><span class="line">3.构造根节点</span><br><span class="line">用最大值创建一个根节点 root。</span><br><span class="line"></span><br><span class="line">4.递归构造左子树</span><br><span class="line">将数组 nums 中范围 [start, maxIndex-1] 的部分作为一个新的子数组，递归调用 constructMaximumBinaryTree(nums, start, maxIndex-1) 方法，返回值作为当前节点的左子节点。</span><br><span class="line"></span><br><span class="line">5.递归构造右子树</span><br><span class="line">将数组 nums 中范围 [maxIndex+1, end] 的部分作为一个新的子数组，递归调用 constructMaximumBinaryTree(nums, maxIndex+1, end) 方法，返回值作为当前节点的右子节点。</span><br><span class="line"></span><br><span class="line">6.返回根节点</span><br></pre></td></tr></table></figure><h3 id="代码-24"><a href="#代码-24" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用重载的方法，传入数组、左边界 0 和右边界 nums.length - 1</span></span><br><span class="line">        <span class="keyword">return</span> constructMaximumBinaryTree(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义重载的方法，传入数组、左右边界</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果左边界大于右边界，返回 null</span></span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到数组中的最大值及其索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start + <span class="number">1</span>; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[maxIndex]) &#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建根节点，以最大值为节点的值</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[maxIndex]);</span><br><span class="line">        <span class="comment">// 递归构造左子树，左子树的范围是[start, maxIndex - 1]</span></span><br><span class="line">        root.left = constructMaximumBinaryTree(nums, start, maxIndex - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 递归构造右子树，右子树的范围是[maxIndex + 1, end]</span></span><br><span class="line">        root.right = constructMaximumBinaryTree(nums, maxIndex + <span class="number">1</span>, end);</span><br><span class="line">        <span class="comment">// 返回根节点</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并二叉树"><a href="#合并二叉树" class="headerlink" title="合并二叉树"></a>合并二叉树</h2><p>给你两棵二叉树： root1 和 root2 。</p><p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。</p><p>返回合并后的二叉树。</p><p>注意: 合并过程必须从两个树的根节点开始。</p><p><a href="https://leetcode.cn/problems/merge-two-binary-trees">https://leetcode.cn/problems/merge-two-binary-trees</a></p><h3 id="思路-22"><a href="#思路-22" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.定义递归函数</span><br><span class="line">定义一个递归函数 mergeTrees(TreeNode root1, TreeNode root2)，其中 root1 和 root2 分别表示两棵给定的二叉树。</span><br><span class="line"></span><br><span class="line">2.处理特殊情况</span><br><span class="line">如果其中一个节点为 null，则返回另一个节点。</span><br><span class="line"></span><br><span class="line">3.合并节点值</span><br><span class="line">如果两个节点都不为 null，则将它们的值相加，然后继续递归合并它们的左右子树。</span><br><span class="line"></span><br><span class="line">4.返回合并后的根节点</span><br><span class="line">递归结束后，返回合并后的根节点即可。</span><br><span class="line"></span><br><span class="line">这个解题思路主要采用了递归的方式来合并两棵二叉树。每次递归都将原始的两个节点进行合并，并且递归合并它们的左右子树。由于每次递归都会比较左右节点的情况，因此递归深度最大为两棵树中节点数较大的一棵，时间复杂度为 $O(n)$。</span><br></pre></td></tr></table></figure><h3 id="代码-25"><a href="#代码-25" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">mergeTrees</span><span class="params">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class="line">        <span class="comment">// 当其中一个节点为 null 时，返回另一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (root1 == <span class="literal">null</span> || root2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root1 == <span class="literal">null</span> ? root2 : root1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归合并两个树</span></span><br><span class="line">        <span class="keyword">return</span> dfs(root1, root2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义递归函数，合并两个树</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">dfs</span><span class="params">(TreeNode node1, TreeNode node2)</span> &#123;</span><br><span class="line">        <span class="comment">// 当其中一个节点为 null 时，返回另一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (node1 == <span class="literal">null</span> || node2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node1 == <span class="literal">null</span> ? node2 : node1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 值相加</span></span><br><span class="line">        node1.val += node2.val;</span><br><span class="line">        <span class="comment">// 递归合并左子树</span></span><br><span class="line">        node1.left = dfs(node1.left, node2.left);</span><br><span class="line">        <span class="comment">// 递归合并右子树</span></span><br><span class="line">        node1.right = dfs(node1.right, node2.right);</span><br><span class="line">        <span class="comment">// 返回合并后的根节点</span></span><br><span class="line">        <span class="keyword">return</span> node1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树中的搜索"><a href="#二叉搜索树中的搜索" class="headerlink" title="二叉搜索树中的搜索"></a>二叉搜索树中的搜索</h2><p>给定二叉搜索树（BST）的根节点 root 和一个整数值 val。</p><p>你需要在 BST 中找到节点值等于 val 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 null 。</p><p><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree">https://leetcode.cn/problems/search-in-a-binary-search-tree</a></p><h3 id="思路-23"><a href="#思路-23" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.递归遍历搜索</span><br><span class="line">2.如果target更大，在右子树中找，否则在左子树中找</span><br></pre></td></tr></table></figure><h3 id="代码-26"><a href="#代码-26" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val == val) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; val) &#123;</span><br><span class="line">            <span class="keyword">return</span> searchBST(root.left, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> searchBST(root.right, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证二叉搜索树"><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h2><p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p><p>有效 二叉搜索树定义如下：</p><p>节点的左子树只包含 小于 当前节点的数。<br>节点的右子树只包含 大于 当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。</p><p><a href="https://leetcode.cn/problems/validate-binary-search-tree">https://leetcode.cn/problems/validate-binary-search-tree</a></p><h3 id="思路-24"><a href="#思路-24" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.中序遍历结果是增序，递归遍历生成list，判断list是否增序即可</span><br><span class="line">2.可以用全局变量保存prev节点值，中序遍历时一旦小于等于prev，判别为false</span><br></pre></td></tr></table></figure><h3 id="代码-27"><a href="#代码-27" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        order(root);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">this</span>.result.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">long</span>)<span class="built_in">this</span>.result.get(i)-<span class="built_in">this</span>.result.get(i-<span class="number">1</span>)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">order</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) order(root.left);</span><br><span class="line">        result.add(root.val);</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) order(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isValidBST(root.left)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="literal">null</span> &amp;&amp; prev &gt;= root.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prev = root.val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> isValidBST(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树的最小绝对差"><a href="#二叉搜索树的最小绝对差" class="headerlink" title="二叉搜索树的最小绝对差"></a>二叉搜索树的最小绝对差</h2><p>给你一个二叉搜索树的根节点 root ，返回 树中任意两不同节点值之间的最小差值 。</p><p>差值是一个正数，其数值等于两值之差的绝对值。</p><p><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/">https://leetcode.cn/problems/minimum-absolute-difference-in-bst/</a></p><h3 id="思路-25"><a href="#思路-25" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.维护一个prev和min值，中序遍历即可</span><br></pre></td></tr></table></figure><h3 id="代码-28"><a href="#代码-28" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer prev=<span class="literal">null</span>;<span class="comment">//要初始化为null，要用Integer</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        order(root);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">order</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) order(root.left);</span><br><span class="line">        <span class="keyword">if</span>(prev!=<span class="literal">null</span> &amp;&amp; root.val-prev&lt;min) min=root.val-prev;</span><br><span class="line">        prev=root.val;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) order(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树中的众数"><a href="#二叉搜索树中的众数" class="headerlink" title="二叉搜索树中的众数"></a>二叉搜索树中的众数</h2><p>给你一个含重复值的二叉搜索树（BST）的根节点 root ，找出并返回 BST 中的所有 众数（即，出现频率最高的元素）。</p><p>如果树中有不止一个众数，可以按 任意顺序 返回。</p><p>假定 BST 满足如下定义：</p><p>结点左子树中所含节点的值 小于等于 当前节点的值<br>结点右子树中所含节点的值 大于等于 当前节点的值<br>左子树和右子树都是二叉搜索树</p><p><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree">https://leetcode.cn/problems/find-mode-in-binary-search-tree</a></p><h3 id="思路-26"><a href="#思路-26" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.使用中序遍历的方式遍历二叉搜索树；</span><br><span class="line">2.维护四个变量：prevVal，count，maxCount 和 modes。</span><br><span class="line">* prevVal 表示上一个访问的节点的值；</span><br><span class="line">* count 表示当前节点值出现的次数；</span><br><span class="line">* maxCount 表示出现次数最多的节点值的出现次数；</span><br><span class="line">* modes 表示出现次数最多的节点值组成的 List。</span><br><span class="line">3.在遍历过程中，如果当前节点的值等于上一个访问的节点的值，则将 count 加 1；否则，将 count 设为 1，prevVal 设为当前节点的值。</span><br><span class="line">4.如果 count 大于 maxCount，则将 maxCount 更新为 count，将 modes 清空，并将当前节点的值添加到 modes 中；如果 count 等于 maxCount，则将当前节点的值添加到 modes 中。</span><br><span class="line">5.维护了所有出现次数最多的节点值，最后将这些节点值转换为数组返回即可。</span><br></pre></td></tr></table></figure><h3 id="代码-29"><a href="#代码-29" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">prevVal</span> <span class="operator">=</span> -<span class="number">1</span>;    <span class="comment">// 上一个访问的节点的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;       <span class="comment">// 当前节点值出现的次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// 出现次数最多的节点值的出现次数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; modes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();    <span class="comment">// 出现次数最多的节点值组成的 List</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">        inorder(root);    <span class="comment">// 中序遍历二叉搜索树</span></span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[modes.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; modes.size(); i++) &#123;</span><br><span class="line">            result[i] = modes.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;    <span class="comment">// 将出现次数最多的节点值转换为数组返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        inorder(node.left);    <span class="comment">// 中序遍历左子树</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.val == prevVal) &#123;    <span class="comment">// 如果当前节点的值等于上一个访问的节点的值</span></span><br><span class="line">            count++;    <span class="comment">// 将 count 加 1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count = <span class="number">1</span>;    <span class="comment">// 将 count 设为 1</span></span><br><span class="line">            prevVal = node.val;    <span class="comment">// 将 prevVal 设为当前节点的值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count &gt; maxCount) &#123;    <span class="comment">// 如果 count 大于 maxCount</span></span><br><span class="line">            maxCount = count;    <span class="comment">// 将 maxCount 更新为 count</span></span><br><span class="line">            modes.clear();    <span class="comment">// 将 modes 清空</span></span><br><span class="line">            modes.add(node.val);    <span class="comment">// 将当前节点的值添加到 modes 中</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == maxCount) &#123;    <span class="comment">// 如果 count 等于 maxCount</span></span><br><span class="line">            modes.add(node.val);    <span class="comment">// 将当前节点的值添加到 modes 中</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        inorder(node.right);    <span class="comment">// 中序遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的最近公共祖先"><a href="#二叉树的最近公共祖先" class="headerlink" title="二叉树的最近公共祖先"></a>二叉树的最近公共祖先</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”<br><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</span><br><span class="line">输出：3</span><br><span class="line">解释：节点 5 和节点 1 的最近公共祖先是节点 3 。</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree">https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree</a></p><h3 id="思路-27"><a href="#思路-27" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.如果p,q为根节点，则公共祖先为根节点</span><br><span class="line">2.如果p,q在左子树，则公共祖先在左子树查找</span><br><span class="line">3.如果p,q在右子树，则公共祖先在右子树查找</span><br><span class="line">4.如果p,q分属两侧，则公共祖先为根节点</span><br></pre></td></tr></table></figure><h3 id="代码-30"><a href="#代码-30" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 如果p,q为根节点，则公共祖先为根节点</span></span><br><span class="line">        <span class="keyword">if</span> (root.val == p.val || root.val == q.val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// 如果p,q在左子树，则公共祖先在左子树查找</span></span><br><span class="line">        <span class="keyword">if</span> (find(root.left, p) &amp;&amp; find(root.left, q)) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果p,q在右子树，则公共祖先在右子树查找</span></span><br><span class="line">        <span class="keyword">if</span> (find(root.right, p) &amp;&amp; find(root.right, q)) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果p,q分属两侧，则公共祖先为根节点</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(TreeNode root, TreeNode c)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.val == c.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> find(root.left, c) || find(root.right, c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树的最近公共祖先"><a href="#二叉搜索树的最近公共祖先" class="headerlink" title="二叉搜索树的最近公共祖先"></a>二叉搜索树的最近公共祖先</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉搜索树:  root &#x3D; [6,2,8,0,4,7,9,null,null,3,5]</p><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree">https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree</a></p><h3 id="思路-28"><a href="#思路-28" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.与上一题相比，树是有序的</span><br><span class="line">2.替换find方法为val的比较</span><br></pre></td></tr></table></figure><h3 id="代码-31"><a href="#代码-31" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 如果p,q为根节点，则公共祖先为根节点</span></span><br><span class="line">        <span class="keyword">if</span> (root.val == p.val || root.val == q.val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">// 如果p,q在左子树，则公共祖先在左子树查找</span></span><br><span class="line">        <span class="keyword">if</span> (p.val&lt;root.val &amp;&amp; q.val&lt;root.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果p,q在右子树，则公共祖先在右子树查找</span></span><br><span class="line">        <span class="keyword">if</span> (p.val&gt;root.val &amp;&amp; q.val&gt;root.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果p,q分属两侧，则公共祖先为根节点</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树中的插入操作"><a href="#二叉搜索树中的插入操作" class="headerlink" title="二叉搜索树中的插入操作"></a>二叉搜索树中的插入操作</h2><p>给定二叉搜索树（BST）的根节点 root 和要插入树中的值 value ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。</p><p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。</p><p><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree">https://leetcode.cn/problems/insert-into-a-binary-search-tree</a></p><h3 id="思路-29"><a href="#思路-29" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.从根节点开始遍历树。</span><br><span class="line">2.如果插入值大于当前节点的值，则往右子树遍历；否则，往左子树遍历。</span><br><span class="line">3.如果遍历到一个空节点，则插入新节点并跳出循环。</span><br><span class="line">4.返回根节点。</span><br></pre></td></tr></table></figure><h3 id="代码-32"><a href="#代码-32" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果根节点为空，则新建一个节点并返回</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 否则，从根节点开始遍历树</span></span><br><span class="line">        TreeNode p=root;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果插入值大于当前节点的值，则往右子树遍历</span></span><br><span class="line">            <span class="keyword">if</span>(val&gt;p.val)&#123;</span><br><span class="line">                <span class="comment">// 如果右子树为空，则插入新节点并跳出循环</span></span><br><span class="line">                <span class="keyword">if</span>(p.right==<span class="literal">null</span>) &#123;</span><br><span class="line">                    p.right=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 否则，继续往右子树遍历</span></span><br><span class="line">                <span class="keyword">else</span> p=p.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果插入值小于等于当前节点的值，则往左子树遍历</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 如果左子树为空，则插入新节点并跳出循环</span></span><br><span class="line">                <span class="keyword">if</span>(p.left==<span class="literal">null</span>)&#123;</span><br><span class="line">                    p.left=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 否则，继续往左子树遍历</span></span><br><span class="line">                <span class="keyword">else</span> p=p.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回根节点</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除二叉搜索树中的节点"><a href="#删除二叉搜索树中的节点" class="headerlink" title="删除二叉搜索树中的节点"></a>删除二叉搜索树中的节点</h2><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><p>首先找到需要删除的节点；<br>如果找到了，删除它。</p><p><a href="https://leetcode.cn/problems/delete-node-in-a-bst">https://leetcode.cn/problems/delete-node-in-a-bst</a></p><h3 id="思路-30"><a href="#思路-30" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.如果根节点为空，则返回 null。</span><br><span class="line">2.如果待删除节点的值小于当前节点的值，则从左子树中删除；如果待删除节点的值大于当前节点的值，则从右子树中删除。</span><br><span class="line">if(key &lt; root.val) root.left = deleteNode(root.left, key);</span><br><span class="line">3.如果找到了待删除节点，则：</span><br><span class="line">    如果该节点的左子树为空，则返回右子树。</span><br><span class="line">    如果该节点的右子树为空，则返回左子树。</span><br><span class="line">    如果该节点的左右子树均不为空，则：</span><br><span class="line">        找到右子树的最左节点。</span><br><span class="line">        将左子树接到右子树的最左节点的左子树上。</span><br><span class="line">        返回右子树。</span><br><span class="line">4.返回根节点。</span><br></pre></td></tr></table></figure><h3 id="代码-33"><a href="#代码-33" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(key &lt; root.val) root.left = deleteNode(root.left, key);<span class="comment">//从左子树中删除</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; root.val) root.right = deleteNode(root.right, key);<span class="comment">//从右子树中删除</span></span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">//找到待删除节点</span></span><br><span class="line">            <span class="keyword">if</span>(root.left == <span class="literal">null</span>) <span class="keyword">return</span> root.right;<span class="comment">//左子树为空，返回右子树</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.right == <span class="literal">null</span>) <span class="keyword">return</span> root.left;<span class="comment">//右子树为空，返回左子树</span></span><br><span class="line">            <span class="comment">//左右子树均不为空</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">p</span> <span class="operator">=</span> root.right;</span><br><span class="line">            <span class="keyword">while</span>(p.left != <span class="literal">null</span>) p = p.left;<span class="comment">//找到右子树的最左节点</span></span><br><span class="line">            p.left = root.left;<span class="comment">//将左子树接到右子树的最左节点的左子树上</span></span><br><span class="line">            <span class="keyword">return</span> root.right;<span class="comment">//返回右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修剪二叉搜索树"><a href="#修剪二叉搜索树" class="headerlink" title="修剪二叉搜索树"></a>修剪二叉搜索树</h2><p>给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在[low, high]中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 唯一的答案 。</p><p>所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。</p><p><a href="https://leetcode.cn/problems/trim-a-binary-search-tree">https://leetcode.cn/problems/trim-a-binary-search-tree</a></p><h3 id="思路-31"><a href="#思路-31" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.如果根节点为空，则返回 null。</span><br><span class="line">2.如果根节点的值大于 high，则修剪左子树。</span><br><span class="line">3.如果根节点的值小于 low，则修剪右子树。</span><br><span class="line">4.否则，修剪左右子树。</span><br><span class="line">5.回根节点。</span><br></pre></td></tr></table></figure><h3 id="代码-34"><a href="#代码-34" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">trimBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果根节点为空，则返回 null。</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 如果根节点的值大于 high，则修剪左子树。</span></span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;high) <span class="keyword">return</span> trimBST(root.left,low,high);<span class="comment">//这一步即是修剪过程</span></span><br><span class="line">        <span class="comment">// 如果根节点的值小于 low，则修剪右子树。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;low) <span class="keyword">return</span> trimBST(root.right,low,high);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 否则，修剪左右子树。</span></span><br><span class="line">            root.left=trimBST(root.left,low,high);</span><br><span class="line">            root.right=trimBST(root.right,low,high);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将有序数组转换为二叉搜索树"><a href="#将有序数组转换为二叉搜索树" class="headerlink" title="将有序数组转换为二叉搜索树"></a>将有序数组转换为二叉搜索树</h2><p>给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。</p><p>高度平衡 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p><p><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree">https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree</a></p><h3 id="思路-32"><a href="#思路-32" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.在类中定义一个成员变量 int[] nums，用于存储输入的有序数组。</span><br><span class="line">2.在 sortedArrayToBST 方法中，将 nums 赋值为输入的有序数组，调用 build 方法构建平衡二叉搜索树并返回根节点。</span><br><span class="line">3.在 build 方法中，如果起始下标大于结束下标，则返回 null。</span><br><span class="line">4.找到中间位置的下标，将该位置的值作为当前节点的值。</span><br><span class="line">5.递归构建左子树，起始下标为 start，结束下标为 (start+end)/2-1。</span><br><span class="line">6.递归构建右子树，起始下标为 (start+end)/2+1，结束下标为 end。</span><br><span class="line">7.返回当前节点。</span><br></pre></td></tr></table></figure><h3 id="代码-35"><a href="#代码-35" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums=nums;</span><br><span class="line">        <span class="comment">// 调用 build 方法构建平衡二叉搜索树并返回根节点</span></span><br><span class="line">        <span class="keyword">return</span> build(<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="comment">// 如果起始下标大于结束下标，则返回 null</span></span><br><span class="line">        <span class="keyword">if</span>(start&gt;end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 找到中间位置的下标，将该位置的值作为当前节点的值</span></span><br><span class="line">        TreeNode node= <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[(start+end)/<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">// 递归构建左子树，起始下标为 start，结束下标为 (start+end)/2-1</span></span><br><span class="line">        node.left=build(start,(start+end)/<span class="number">2</span>-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 递归构建右子树，起始下标为 (start+end)/2+1，结束下标为 end</span></span><br><span class="line">        node.right=build((start+end)/<span class="number">2</span>+<span class="number">1</span>,end);</span><br><span class="line">        <span class="comment">// 返回当前节点</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="把二叉搜索树转换为累加树"><a href="#把二叉搜索树转换为累加树" class="headerlink" title="把二叉搜索树转换为累加树"></a>把二叉搜索树转换为累加树</h2><p>给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。</p><p>提醒一下，二叉搜索树满足下列约束条件：</p><p>节点的左子树仅包含键 小于 节点键的节点。<br>节点的右子树仅包含键 大于 节点键的节点。<br>左右子树也必须是二叉搜索树。</p><p><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">https://leetcode.cn/problems/convert-bst-to-greater-tree/</a></p><h3 id="思路-33"><a href="#思路-33" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.从大到小遍历，大的节点累加即可，使用递归，右中左</span><br></pre></td></tr></table></figure><h3 id="代码-36"><a href="#代码-36" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        convertBST(root.right);</span><br><span class="line">        sum+=root.val;</span><br><span class="line">        root.val=sum;</span><br><span class="line">        convertBST(root.left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode刷题：数组、链表、哈希表、字符串、双指针</title>
    <link href="/2023/05/20/LeetCode%E5%88%B7%E9%A2%98%EF%BC%9A%E6%95%B0%E7%BB%84%E3%80%81%E9%93%BE%E8%A1%A8%E3%80%81%E5%93%88%E5%B8%8C%E8%A1%A8%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <url>/2023/05/20/LeetCode%E5%88%B7%E9%A2%98%EF%BC%9A%E6%95%B0%E7%BB%84%E3%80%81%E9%93%BE%E8%A1%A8%E3%80%81%E5%93%88%E5%B8%8C%E8%A1%A8%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p><a href="https://leetcode.cn/problems/binary-search">https://leetcode.cn/problems/binary-search</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.区间定义</span><br><span class="line">定义target在[left, right]区间:</span><br><span class="line">    right=nums.length-1</span><br><span class="line">    while(left&lt;=right)</span><br><span class="line"></span><br><span class="line">定义target在[left, right)区间:</span><br><span class="line">    right=nums.length</span><br><span class="line">    while(left&lt;right)</span><br><span class="line"></span><br><span class="line">2.用middle和target比较</span><br><span class="line">3.调整left or right,</span><br><span class="line">4.重新计算middle</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> middle=right/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[middle]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[middle]&gt;target)&#123;</span><br><span class="line">                right=middle-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="搜索插入位置"><a href="#搜索插入位置" class="headerlink" title="搜索插入位置"></a>搜索插入位置</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><p><a href="https://leetcode.cn/problems/search-insert-position">https://leetcode.cn/problems/search-insert-position</a></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.区间定义</span><br><span class="line">定义target在[left, right]区间:</span><br><span class="line">    right=nums.length-1</span><br><span class="line">    while(left&lt;=right)</span><br><span class="line">2.结束条件</span><br><span class="line">left&gt;right，即left=right+1</span><br><span class="line">此时left左边的值全部小于target,因此target应该在left所在位置</span><br></pre></td></tr></table></figure><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> middle=right/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[middle]&lt;target)&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;<span class="comment">//nums[middle]&gt;=target</span></span><br><span class="line">                right=middle-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一次循环开始前left=right=middle</span></span><br><span class="line">        <span class="comment">//left最终都等于right+1</span></span><br><span class="line">        <span class="comment">//left左边的值全部小于target,因此target应该在left所在位置</span></span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="在排序数组中查找元素的第一个和最后一个位置"><a href="#在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="在排序数组中查找元素的第一个和最后一个位置"></a>在排序数组中查找元素的第一个和最后一个位置</h2><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array">https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array</a></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二分查找元素，然后向前向后查找相同值的元素</span><br></pre></td></tr></table></figure><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> result=-<span class="number">1</span>;<span class="comment">//记录二分查找结果</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[middle]==target)&#123;</span><br><span class="line">                result=middle;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[middle]&lt;target)&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">                middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                right=middle-<span class="number">1</span>;</span><br><span class="line">                middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(result==-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//往右找</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=result;i&lt;nums.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]==nums[result])&#123;</span><br><span class="line">                    right=i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//往左找</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=result;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]==nums[result])&#123;</span><br><span class="line">                    left=i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;left,right&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="x-的平方根"><a href="#x-的平方根" class="headerlink" title="x 的平方根"></a>x 的平方根</h2><p>给你一个非负整数 x ，计算并返回 x 的 算术平方根 。</p><p>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</p><p>注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p><p><a href="https://leetcode.cn/problems/sqrtx">https://leetcode.cn/problems/sqrtx</a></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.在0-x/2之间二分查找</span><br><span class="line">2.x=1时,right=0是错误的一种情况</span><br><span class="line">3.(long)middle*middle&lt;x比较时需要做类型转换，int是不够的</span><br></pre></td></tr></table></figure><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=x/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(right==<span class="number">0</span>)&#123;</span><br><span class="line">            right=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> middle=right/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">long</span>)middle*middle==x)&#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((<span class="type">long</span>)middle*middle&lt;x)&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">                middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                right=middle-<span class="number">1</span>;</span><br><span class="line">                middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时left=right+1</span></span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="有效的完全平方数"><a href="#有效的完全平方数" class="headerlink" title="有效的完全平方数"></a>有效的完全平方数</h2><p>给你一个正整数 num 。如果 num 是一个完全平方数，则返回 true ，否则返回 false 。</p><p>完全平方数 是一个可以写成某个整数的平方的整数。换句话说，它可以写成某个整数和自身的乘积。</p><p>不能使用任何内置的库函数，如  sqrt 。</p><p><a href="https://leetcode.cn/problems/valid-perfect-square">https://leetcode.cn/problems/valid-perfect-square</a></p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.二分查找1-num/2</span><br></pre></td></tr></table></figure><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=num/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(right==<span class="number">0</span>)&#123;</span><br><span class="line">            right=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">long</span>)middle*middle==num)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((<span class="type">long</span>)middle*middle&lt;num)&#123;</span><br><span class="line">                left=middle+<span class="number">1</span>;</span><br><span class="line">                middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                right=middle-<span class="number">1</span>;</span><br><span class="line">                middle=(left+right)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><a href="https://leetcode.cn/problems/remove-element">https://leetcode.cn/problems/remove-element</a></p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.遍历一遍数组，把需要保留的值重新写入数组</span><br></pre></td></tr></table></figure><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=val)&#123;</span><br><span class="line">                nums[left++]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h2><p>给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。</p><p>考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：</p><p>更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。<br>返回 k 。</p><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array">https://leetcode.cn/problems/remove-duplicates-from-sorted-array</a></p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.遍历一遍数组，把需要保留的值重新写入数组</span><br></pre></td></tr></table></figure><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=nums[left])&#123;</span><br><span class="line">                nums[++left]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h2><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p>请注意 ，必须在不复制数组的情况下原地对数组进行操作。<br><a href="https://leetcode.cn/problems/move-zeroes/">https://leetcode.cn/problems/move-zeroes/</a></p><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.遍历一遍数组，把需要保留的值重新写入数组</span><br><span class="line">2.剩余部分填0</span><br></pre></td></tr></table></figure><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                nums[left++]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=left;i&lt;nums.length;i++)&#123;</span><br><span class="line">            nums[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="比较含退格的字符串"><a href="#比较含退格的字符串" class="headerlink" title="比较含退格的字符串"></a>比较含退格的字符串</h2><p>给定 s 和 t 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 true 。# 代表退格字符。</p><p>注意：如果对空文本输入退格字符，文本继续为空。<br><a href="https://leetcode.cn/problems/backspace-string-compare">https://leetcode.cn/problems/backspace-string-compare</a></p><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.写一个convert转换函数，从后往前遍历</span><br><span class="line">2.使用toCharArray()把字符串转为字符数组</span><br><span class="line">3.使用StringBuilder可变字符串接收最终转换的字符串结果</span><br><span class="line">4.把需要保留的字符重新写进StringBuilder</span><br></pre></td></tr></table></figure><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="comment">// 将 s 和 t 转换为最终形式，比较它们是否相等</span></span><br><span class="line">        <span class="keyword">return</span> convert(s).equals(convert(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将字符串转换为最终形式</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">convert</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();<span class="comment">//可变字符串</span></span><br><span class="line">        <span class="type">char</span>[] cs = s.toCharArray();<span class="comment">//字符串转为字符数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 记录当前需要删除的字符数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cs.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cs[i] == <span class="string">&#x27;#&#x27;</span>) &#123; <span class="comment">// 如果是退格符，则需要删除一个字符</span></span><br><span class="line">                size++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size == <span class="number">0</span>) &#123; <span class="comment">// 如果不是退格符，并且没有需要删除的字符，则将该字符加入最终字符串中</span></span><br><span class="line">                sb.append(cs[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果不是退格符，但有需要删除的字符，则跳过该字符</span></span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString(); <span class="comment">// 返回最终字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h2><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。<br><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">https://leetcode.cn/problems/squares-of-a-sorted-array/</a></p><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.最大的在两边，两个指针指两边</span><br><span class="line">2.循环比较两个指针，哪边绝对值大就选哪边</span><br><span class="line">3.创建等长新数组，从末尾开始添加</span><br></pre></td></tr></table></figure><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//开一个等长新数组</span></span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> k=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Math.abs(nums[left])&lt;=Math.abs(nums[right]))&#123;</span><br><span class="line">                result[k--]=nums[right]*nums[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                result[k--]=nums[left]*nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h2><p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p><p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。<br><a href="https://leetcode.cn/problems/minimum-size-subarray-sum">https://leetcode.cn/problems/minimum-size-subarray-sum</a><br>示例1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.滑动窗口,双指针</span><br><span class="line">2.两个指针指向开头,right向右移动直到子数组和&gt;=target,然后left向右移动，直到子数组和&lt;target,期间不断更新最小子数组和</span><br><span class="line">3.两层while，第一层控制窗口右扩，第二层控制左缩</span><br><span class="line">4.int最大值Integer.MAX_VALUE</span><br></pre></td></tr></table></figure><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> result=Integer.MAX_VALUE;<span class="comment">//最小子数组长度</span></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;<span class="comment">//子数组元素和</span></span><br><span class="line">        <span class="keyword">while</span>(right&lt;nums.length)&#123;</span><br><span class="line">            sum+=nums[right++];<span class="comment">//窗口右扩</span></span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target)&#123;<span class="comment">//窗口左缩</span></span><br><span class="line">                <span class="comment">//达到target条件，比较子数组长度</span></span><br><span class="line">                <span class="keyword">if</span>(right-left&lt;result)&#123;</span><br><span class="line">                    result=right-left;<span class="comment">//right自增了，相减正好是长度</span></span><br><span class="line">                &#125;</span><br><span class="line">                sum-=nums[left++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(result==Integer.MAX_VALUE)&#123;<span class="comment">//target太大，整个数组都没法满足</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵-II"><a href="#螺旋矩阵-II" class="headerlink" title="螺旋矩阵 II"></a>螺旋矩阵 II</h2><p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。<br><a href="https://leetcode.cn/problems/spiral-matrix-ii/">https://leetcode.cn/problems/spiral-matrix-ii/</a></p><h3 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.模拟过程</span><br><span class="line">2.建立上下左右边界</span><br><span class="line">3.while填充次数，始终按照右下左上的顺序填写，填完一边就更新边界</span><br></pre></td></tr></table></figure><h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>, t = <span class="number">0</span>, b = n - <span class="number">1</span>; <span class="comment">// l、r、t、b分别表示当前螺旋矩阵的左边界、右边界、上边界和下边界</span></span><br><span class="line">    <span class="type">int</span>[][] mat = <span class="keyword">new</span> <span class="title class_">int</span>[n][n]; <span class="comment">// 创建一个n * n的二维数组</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>, tar = n * n; <span class="comment">// num表示当前要填充的数字，tar表示要填充的数字的总个数</span></span><br><span class="line">    <span class="keyword">while</span>(num &lt;= tar)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l; i &lt;= r; i++) mat[t][i] = num++; <span class="comment">// 从左向右填充数字</span></span><br><span class="line">        t++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> t; i &lt;= b; i++) mat[i][r] = num++; <span class="comment">// 从上向下填充数字</span></span><br><span class="line">        r--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> r; i &gt;= l; i--) mat[b][i] = num++; <span class="comment">// 从右向左填充数字</span></span><br><span class="line">        b--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> b; i &gt;= t; i--) mat[i][l] = num++; <span class="comment">// 从下向上填充数字</span></span><br><span class="line">        l++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mat; <span class="comment">// 返回填充完数字的二维数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h2><p>给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。<br><a href="https://leetcode.cn/problems/spiral-matrix/">https://leetcode.cn/problems/spiral-matrix/</a></p><h3 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.使用一个列表result来存储螺旋访问的元素</span><br><span class="line">2.按照从左到右、从上到下、从右到左、从下到上的顺序，依次访问矩阵中的元素，并将其添加到result列表中</span><br><span class="line">3.每次访问完一行或一列，就需要更新对应的边界值</span><br><span class="line">4.每访问完一行或一列，就需要判断当前是否越界。如果越界了，就直接退出循环</span><br></pre></td></tr></table></figure><h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 用于存储螺旋访问的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result; <span class="comment">// 处理特殊情况，矩阵为空或者行数或列数为0时，直接返回空列表</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length; <span class="comment">// 获取矩阵的行数和列数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>, t = <span class="number">0</span>, b = m - <span class="number">1</span>; <span class="comment">// 初始化上下左右四个边界</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 从左到右访问上边</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l; i &lt;= r; i++) &#123;</span><br><span class="line">            result.add(matrix[t][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (++t &gt; b) <span class="keyword">break</span>; <span class="comment">// 如果上边界越过下边界，直接退出循环</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从上到下访问右边</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> t; i &lt;= b; i++) &#123;</span><br><span class="line">            result.add(matrix[i][r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (--r &lt; l) <span class="keyword">break</span>; <span class="comment">// 如果右边界越过左边界，直接退出循环</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从右到左访问下边</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> r; i &gt;= l; i--) &#123;</span><br><span class="line">            result.add(matrix[b][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (--b &lt; t) <span class="keyword">break</span>; <span class="comment">// 如果下边界越过上边界，直接退出循环</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从下到上访问左边</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> b; i &gt;= t; i--) &#123;</span><br><span class="line">            result.add(matrix[i][l]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (++l &gt; r) <span class="keyword">break</span>; <span class="comment">// 如果左边界越过右边界，直接退出循环</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 返回螺旋访问的元素列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h2><h3 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.使用一个列表result来存储螺旋访问的元素</span><br><span class="line">2.按照从左到右、从上到下、从右到左、从下到上的顺序，依次访问矩阵中的元素，并将其添加到result列表中</span><br><span class="line">3.每次访问完一行或一列，就需要更新对应的边界值</span><br><span class="line">4.每访问完一行或一列，就需要判断当前是否越界。如果越界了，就直接退出循环</span><br><span class="line">5.考虑空数组情况</span><br></pre></td></tr></table></figure><h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] spiralOrder(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.length==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> m=matrix.length;</span><br><span class="line">        <span class="type">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[m*n];</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> b=m-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> r=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(num&lt;m*n)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)result[num++]=matrix[t][i];</span><br><span class="line">            <span class="keyword">if</span>(++t&gt;b)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=t;i&lt;=b;i++)result[num++]=matrix[i][r];</span><br><span class="line">            <span class="keyword">if</span>(--r&lt;l)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;=l;i--)result[num++]=matrix[b][i];</span><br><span class="line">            <span class="keyword">if</span>(--b&lt;t)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=b;i&gt;=t;i--)result[num++]=matrix[i][l];</span><br><span class="line">            <span class="keyword">if</span>(++l&gt;r)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h2><p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val &#x3D;&#x3D; val 的节点，并返回 新的头节点 。<br>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><h3 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.节点定义:val、next、三个构造函数(空、val、val&amp;next) </span><br><span class="line">public class ListNode &#123;</span><br><span class="line">    int val;   </span><br><span class="line">    ListNode next;   </span><br><span class="line">    ListNode() &#123;&#125;   </span><br><span class="line">    ListNode(int val) &#123; this.val = val; &#125;   </span><br><span class="line">    ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="line">&#125;</span><br><span class="line">2.头节点单独处理</span><br><span class="line">3.修改next</span><br></pre></td></tr></table></figure><h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">// 处理头节点中值为val的情况</span></span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; head.val == val) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用指针p遍历链表</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> &amp;&amp; p.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果下一个节点的值为val，将p的next指向下一个节点的next，即删除下一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (p.next.val == val) &#123;</span><br><span class="line">            p.next = p.next.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则将p指向下一个节点</span></span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回头节点</span></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a>设计链表</h2><p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p><p>单链表中的节点应该具备两个属性：val 和 next 。val 是当前节点的值，next 是指向下一个节点的指针&#x2F;引用。</p><p>如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。</p><p>实现 MyLinkedList 类：</p><p>MyLinkedList() 初始化 MyLinkedList 对象。<br>int get(int index) 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。<br>void addAtHead(int val) 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。<br>void addAtTail(int val) 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。<br>void addAtIndex(int index, int val) 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index 比长度更大，该节点将 不会插入 到链表中。<br>void deleteAtIndex(int index) 如果下标有效，则删除链表中下标为 index 的节点。<br><a href="https://leetcode.cn/problems/design-linked-list">https://leetcode.cn/problems/design-linked-list</a></p><h3 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.增加一个多余的头节点</span><br><span class="line">2.注意空链表</span><br><span class="line">3.使用size记录链表长度</span><br><span class="line">4.着重写好addAtIndex(int index, int val)，其他方法可复用</span><br></pre></td></tr></table></figure><h3 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="type">int</span> size; <span class="comment">// 链表的长度</span></span><br><span class="line">    ListNode head; <span class="comment">// 链表的头节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123; <span class="comment">// 构造函数，初始化链表</span></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="comment">// 获取链表中下标为 index 的节点的值</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123; <span class="comment">// 下标无效，返回 -1</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++) &#123; <span class="comment">// 遍历找到第 index 个节点</span></span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123; <span class="comment">// 在链表头插入一个值为 val 的节点</span></span><br><span class="line">        addAtIndex(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123; <span class="comment">// 在链表尾追加一个值为 val 的节点</span></span><br><span class="line">        addAtIndex(size, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123; <span class="comment">// 在链表中下标为 index 的节点之前插入一个值为 val 的节点</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; size) &#123; <span class="comment">// 如果 index 比长度更大，该节点将不会插入到链表中</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index = Math.max(<span class="number">0</span>, index); <span class="comment">// 如果 index 小于 0，就插入到头节点之前</span></span><br><span class="line">        size++; <span class="comment">// 插入节点后，链表长度加 1</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123; <span class="comment">// 遍历找到第 index 个节点的前驱节点</span></span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val); <span class="comment">// 创建要插入的节点</span></span><br><span class="line">        toAdd.next = pred.next; <span class="comment">// 将要插入的节点的 next 指针指向第 index 个节点</span></span><br><span class="line">        pred.next = toAdd; <span class="comment">// 将第 index-1 个节点的 next 指针指向要插入的节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="comment">// 删除链表中下标为 index 的节点</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123; <span class="comment">// 如果下标无效，直接返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--; <span class="comment">// 删除节点后，链表长度减 1</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123; <span class="comment">// 遍历找到第 index 个节点的前驱节点</span></span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next = pred.next.next; <span class="comment">// 将第 index-1 个节点的 next 指针指向第 index+1 个节点，即跳过要删除的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123; <span class="comment">// 定义链表节点</span></span><br><span class="line">    <span class="type">int</span> val; <span class="comment">// 节点的值</span></span><br><span class="line">    ListNode next; <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123; <span class="comment">// 构造函数，初始化节点</span></span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。<br><a href="https://leetcode.cn/problems/reverse-linked-list/">https://leetcode.cn/problems/reverse-linked-list/</a></p><h3 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.使用三个指针，prev、cur和tmp,tmp用于指向cur的next节点，防止断连</span><br><span class="line">2.循环条件是cur!=null</span><br><span class="line">3.先移动tmp，然后调整cur.next，再移动prev和cur</span><br></pre></td></tr></table></figure><h3 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"><span class="comment">//申请节点，pre和 cur，pre指向null</span></span><br><span class="line"><span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span>(cur!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//记录当前节点的下一个节点</span></span><br><span class="line">tmp = cur.next;</span><br><span class="line"><span class="comment">//然后将当前节点指向pre</span></span><br><span class="line">cur.next = pre;</span><br><span class="line"><span class="comment">//pre和cur节点都前进一位</span></span><br><span class="line">pre = cur;</span><br><span class="line">cur = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> reverseList(head.next);<span class="comment">//先反转最后两个节点才能得到真正的newHaed</span></span><br><span class="line">    head.next.next = head;<span class="comment">//后一节点的next指向当前节点</span></span><br><span class="line">    head.next = <span class="literal">null</span>;<span class="comment">//断开原来的连接</span></span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两两交换链表中的节点"><a href="#两两交换链表中的节点" class="headerlink" title="两两交换链表中的节点"></a>两两交换链表中的节点</h2><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。<br><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">https://leetcode.cn/problems/swap-nodes-in-pairs/</a></p><h3 id="思路-17"><a href="#思路-17" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.if node1==null or node.next==null return head</span><br><span class="line">2.节点node1-&gt;node2-&gt;node3</span><br><span class="line">node2.next=node1</span><br><span class="line">node1.next=fun(node3)</span><br></pre></td></tr></table></figure><h3 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果链表为空或只有一个节点，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)  </span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    <span class="comment">// 保存剩余的节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">rest</span> <span class="operator">=</span> head.next.next;</span><br><span class="line">    <span class="comment">// 交换相邻的两个节点，并将新的头节点保存在 newHead 中</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> head.next;</span><br><span class="line">    newHead.next = head;</span><br><span class="line">    <span class="comment">// 递归调用 swapPairs() 处理剩余的节点</span></span><br><span class="line">    head.next = swapPairs(rest);</span><br><span class="line">    <span class="comment">// 返回新的头节点</span></span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除链表的导数第N个节点"><a href="#删除链表的导数第N个节点" class="headerlink" title="删除链表的导数第N个节点"></a>删除链表的导数第N个节点</h2><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。<br><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">https://leetcode.cn/problems/remove-nth-node-from-end-of-list/</a></p><h3 id="思路-18"><a href="#思路-18" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.最重要的是找到要删除的节点的前一个节点</span><br><span class="line">2.如果要删除的是头结点，他没有前一节点，特殊处理</span><br><span class="line">3.先遍历一遍计算链表长度size，如果N等于size，返回第二个节点</span><br><span class="line">4.找到prev，修改next</span><br></pre></td></tr></table></figure><h3 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果链表只有一个节点，直接删除并返回 null</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="comment">// 计算链表的长度</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果要删除的是头节点，直接返回头节点的下一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (n == size) &#123;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 找到要删除的节点的前一个节点 prev</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - n; i++) &#123;</span><br><span class="line">        prev = p;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除节点 p</span></span><br><span class="line">    prev.next = p.next;</span><br><span class="line">    <span class="comment">// 返回头节点</span></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h2><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。<br><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/</a></p><h3 id="思路-19"><a href="#思路-19" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.创建哈希表Set&lt;ListNode&gt; visited = new HashSet&lt;ListNode&gt;();</span><br><span class="line">2.加入链表A的所有元素</span><br><span class="line">3.遍历链表B，查看元素是否在哈希表中</span><br></pre></td></tr></table></figure><h3 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个哈希集合 visited 用于存放链表 A 中的节点，初始为空</span></span><br><span class="line">    Set&lt;ListNode&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;ListNode&gt;();</span><br><span class="line">    <span class="comment">// 遍历链表 A，将其中所有节点都加入哈希集合 visited 中</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> headA;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">        visited.add(temp);</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历链表 B，找到第一个出现在哈希集合 visited 中的节点，即为相交节点</span></span><br><span class="line">    temp = headB;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited.contains(temp)) &#123;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有相交节点，返回 null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环形链表II"><a href="#环形链表II" class="headerlink" title="环形链表II"></a>环形链表II</h2><p>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>不允许修改 链表。<br><a href="https://leetcode.cn/problems/linked-list-cycle-ii/submissions/">https://leetcode.cn/problems/linked-list-cycle-ii/submissions/</a></p><h3 id="思路-20"><a href="#思路-20" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.遍历节点写入HashSet，如果已经包含该节点，则返回该节点</span><br></pre></td></tr></table></figure><h3 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    Set&lt;ListNode&gt; visited=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;ListNode&gt;();</span><br><span class="line">    ListNode p=head;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">null</span> &amp;&amp; !visited.contains(p))&#123;</span><br><span class="line">        visited.add(p);</span><br><span class="line">        p=p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h2><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。<br><a href="https://leetcode.cn/problems/valid-anagram">https://leetcode.cn/problems/valid-anagram</a></p><h3 id="思路-21"><a href="#思路-21" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.排序后比较</span><br><span class="line">2.维护一个长度26的数组，写入s中每个字母出现的次数，减去t中字母出现的次数，有数字小于0的话返回false</span><br></pre></td></tr></table></figure><h3 id="代码-21"><a href="#代码-21" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() != t.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>[] str1 = s.toCharArray();</span><br><span class="line">    <span class="type">char</span>[] str2 = t.toCharArray();</span><br><span class="line">    Arrays.sort(str1);</span><br><span class="line">    Arrays.sort(str2);</span><br><span class="line">    <span class="keyword">return</span> Arrays.equals(str1, str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() != t.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] table = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        table[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">        table[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        <span class="keyword">if</span> (table[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h2><p>给定两个数组 nums1 和 nums2 ，返回 它们的交集 。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。<br><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">https://leetcode.cn/problems/intersection-of-two-arrays/</a></p><h3 id="思路-22"><a href="#思路-22" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.判断某个元素是否在集合中</span><br><span class="line">2.两层循环遍历的时间复杂度是O(mn),使用哈希集合存储的话，时间复杂度降到O(m+n)</span><br></pre></td></tr></table></figure><h3 id="代码-22"><a href="#代码-22" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">    <span class="comment">// 定义两个哈希集合 set1 和 set2 分别用于存放数组 nums1 和 nums2 中的元素</span></span><br><span class="line">    Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">    Set&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="comment">// 遍历数组 nums1，将其中所有元素都加入哈希集合 set1 中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums1) &#123;</span><br><span class="line">        set1.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历数组 nums2，将其中所有元素都加入哈希集合 set2 中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums2) &#123;</span><br><span class="line">        set2.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个新的哈希集合 result_set 用于存放 set1 和 set2 的交集</span></span><br><span class="line">    Set&lt;Integer&gt; result_set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="comment">// 找出 set1 和 set2 中大小较小的那个集合 min 和较大的那个集合 max</span></span><br><span class="line">    Set&lt;Integer&gt; min = (set1.size() &gt; set2.size()) ? set2 : set1;</span><br><span class="line">    Set&lt;Integer&gt; max = (set1.size() &gt; set2.size()) ? set1 : set2;</span><br><span class="line">    <span class="comment">// 遍历集合 min，如果集合 max 中也包含当前元素，则将其加入交集集合 result_set 中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : min) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max.contains(num)) &#123;</span><br><span class="line">            result_set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将交集集合转化为数组 result 返回</span></span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[result_set.size()];</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : result_set) &#123;</span><br><span class="line">        result[index++] = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h2><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」 定义为：</p><p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>如果这个过程 结果为 1，那么这个数就是快乐数。<br>如果 n 是 快乐数 就返回 true ；不是，则返回 false 。<br><a href="https://leetcode.cn/problems/happy-number">https://leetcode.cn/problems/happy-number</a></p><h3 id="思路-23"><a href="#思路-23" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.有无线循环，说明sum会重复出现</span><br><span class="line">2.循环计算sum，写入HashSet中，如果有重复，返回false,如果结果为1，返回true</span><br></pre></td></tr></table></figure><h3 id="代码-23"><a href="#代码-23" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">while</span>(!set.contains(getSum(n)))&#123;</span><br><span class="line">        n=getSum(n);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        set.add(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">9</span>)&#123;</span><br><span class="line">        sum+=(n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">        n=n/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=n*n;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。<br><a href="https://leetcode.cn/problems/two-sum/">https://leetcode.cn/problems/two-sum/</a></p><h3 id="思路-24"><a href="#思路-24" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.两层循环枚举</span><br><span class="line">2.第二层循环目的是寻找target-x，可用HashMap替代</span><br></pre></td></tr></table></figure><h3 id="代码-24"><a href="#代码-24" class="headerlink" title="代码"></a>代码</h3><p><strong>暴力枚举</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>哈希Map</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashtable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashtable.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;hashtable.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashtable.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四数相加-II"><a href="#四数相加-II" class="headerlink" title="四数相加 II"></a>四数相加 II</h2><p>给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：</p><p>0 &lt;&#x3D; i, j, k, l &lt; n<br>nums1[i] + nums2[j] + nums3[k] + nums4[l] &#x3D;&#x3D; 0</p><p><a href="https://leetcode.cn/problems/4sum-ii">https://leetcode.cn/problems/4sum-ii</a></p><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">两个元组如下：</span><br><span class="line">1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</span><br><span class="line">2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</span><br></pre></td></tr></table></figure><h3 id="思路-25"><a href="#思路-25" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.和拆分为两组，一组使用HashMap存放，另一组和HashMap比较</span><br><span class="line">2.两两相加分为两组的时间复杂度最小:O(n^2),暴力法O(n^4),三一分O(n^3)</span><br></pre></td></tr></table></figure><h3 id="代码-25"><a href="#代码-25" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num1 : nums1)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num2 : nums2)&#123;</span><br><span class="line">            <span class="type">int</span> sum12=num1+num2;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sum12))&#123;<span class="comment">//两数和为key,组合数为value</span></span><br><span class="line">                map.put(sum12,map.get(sum12)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(sum12,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num3 : nums3)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num4 : nums4)&#123;</span><br><span class="line">            <span class="type">int</span> sum34=-(num3+num4);</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sum34))&#123;</span><br><span class="line">                result+=map.get(sum34);<span class="comment">//34中的每一种组合，可对应AB中的多种组合</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赎金信"><a href="#赎金信" class="headerlink" title="赎金信"></a>赎金信</h2><p>给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。</p><p>如果可以，返回 true ；否则返回 false 。</p><p>magazine 中的每个字符只能在 ransomNote 中使用一次。<br>全是小写英文字母<br><a href="https://leetcode.cn/problems/ransom-note">https://leetcode.cn/problems/ransom-note</a></p><h3 id="思路-26"><a href="#思路-26" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.使用长度为26的数组存放magazine每个字母的出现次数</span><br><span class="line">2.遍历ransomNote，减去对应字母的出现次数，模拟使用字母，如果减到&lt;0；则false</span><br></pre></td></tr></table></figure><h3 id="代码-26"><a href="#代码-26" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] table=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;magazine.length();i++)&#123;</span><br><span class="line">        table[magazine.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ransomNote.length();i++)&#123;</span><br><span class="line">        table[ransomNote.charAt(i)-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        <span class="keyword">if</span>(table[ransomNote.charAt(i)-<span class="string">&#x27;a&#x27;</span>]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i !&#x3D; j、i !&#x3D; k 且 j !&#x3D; k ，同时还满足 nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0 。请你返回所有和为 0 且不重复的三元组。</p><p><a href="https://leetcode.cn/problems/3sum">https://leetcode.cn/problems/3sum</a></p><h3 id="思路-27"><a href="#思路-27" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.排序：首先，将给定的数组进行排序，这样可以方便后面的操作。</span><br><span class="line">2.遍历：然后，遍历数组中的每个数，将其作为三元组中的第一个数，然后在其右侧的数字中寻找符合条件的两个数，使得三个数的和为 0。</span><br><span class="line">3.双指针：对于每个三元组，使用双指针技术来查找符合条件的另外两个数。左指针指向当前数的下一个位置，右指针指向数组末尾。如果当前三个数的和大于 0，则将右指针左移；如果当前三个数的和小于 0，则将左指针右移；如果当前三个数的和等于 0，则将该三元组添加到答案集合中。</span><br><span class="line">4.去重：为避免重复，需要在添加三元组之前，判断该三元组的字符串形式是否已经出现过。如果已经出现过，则不添加。</span><br></pre></td></tr></table></figure><h3 id="代码-27"><a href="#代码-27" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums); <span class="comment">// 先将数组排序</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 存放答案三元组的列表</span></span><br><span class="line">    Set&lt;String&gt; strs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); <span class="comment">// 存放已经出现过的三元组的字符串形式的集合</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len - <span class="number">2</span>; i++) &#123; <span class="comment">// i 遍历数组中的每个数，最后两个数作为 left 和 right</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123; <span class="comment">// 如果当前数与前一个数相等，就跳过当前循环</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>; <span class="comment">// left 初始值为 i+1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> len - <span class="number">1</span>; <span class="comment">// right 初始值为数组最后一个数</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 在 left 小于 right 的情况下循环</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right]; <span class="comment">// 计算当前三个数的和</span></span><br><span class="line">            <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123; <span class="comment">// 如果和大于 0，就将 right 左移</span></span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123; <span class="comment">// 如果和小于 0，就将 left 右移</span></span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果和等于 0，就找到了一个符合条件的三元组</span></span><br><span class="line">                List&lt;Integer&gt; tmp = Arrays.asList(nums[i], nums[left], nums[right]); <span class="comment">// 将三个数放入列表中</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Integer.toString(nums[i]) + Integer.toString(nums[left]) + Integer.toString(nums[right]); <span class="comment">// 将三个数的字符串形式拼接成一个字符串</span></span><br><span class="line">                <span class="keyword">if</span> (!strs.contains(str)) &#123; <span class="comment">// 如果该三元组字符串形式没有出现过</span></span><br><span class="line">                    ans.add(tmp); <span class="comment">// 将该三元组添加到答案列表中</span></span><br><span class="line">                    strs.add(str); <span class="comment">// 将该三元组的字符串形式添加到已出现过的集合中</span></span><br><span class="line">                &#125;</span><br><span class="line">                left++; <span class="comment">// 将 left 右移</span></span><br><span class="line">                right--; <span class="comment">// 将 right 左移</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans; <span class="comment">// 返回答案列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h2><p>给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：</p><p>0 &lt;&#x3D; a, b, c, d &lt; n<br>a、b、c 和 d 互不相同<br>nums[a] + nums[b] + nums[c] + nums[d] &#x3D;&#x3D; target<br>你可以按 任意顺序 返回答案 。</p><p><a href="https://leetcode.cn/problems/4sum">https://leetcode.cn/problems/4sum</a></p><h3 id="思路-28"><a href="#思路-28" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.在上一题三数之和的基础上又增加了一层循环，时间复杂度为O(n^3)</span><br><span class="line">2.不同之处在于target不再为0，不能用nums[i]&gt;0就跳过遍历</span><br><span class="line">3.计算四数之和时一定要用long类型</span><br></pre></td></tr></table></figure><h3 id="代码-28"><a href="#代码-28" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    Arrays.sort(nums); <span class="comment">// 对数组进行排序</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    Set&lt;String&gt; strs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); <span class="comment">// 用于存储已经出现过的四元组</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 用于存储符合条件的四元组</span></span><br><span class="line">    <span class="type">int</span> left, right;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">3</span>; i++) &#123; <span class="comment">// 枚举第一个数</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i]) &#123; <span class="comment">// 如果第一个数与前一个数相同，则跳过</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n - <span class="number">2</span>; j++) &#123; <span class="comment">// 枚举第二个数</span></span><br><span class="line">            <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j - <span class="number">1</span>] == nums[j]) &#123; <span class="comment">// 如果第二个数与前一个数相同，则跳过</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left = j + <span class="number">1</span>; <span class="comment">// 左指针指向第三个数</span></span><br><span class="line">            right = n - <span class="number">1</span>; <span class="comment">// 右指针指向最后一个数</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 双指针遍历</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">long</span>) nums[i] + nums[j] + nums[left] + nums[right]; <span class="comment">// 计算四个数的和</span></span><br><span class="line">                <span class="keyword">if</span> (sum &gt; target) &#123; <span class="comment">// 如果和大于目标值，则将右指针左移</span></span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123; <span class="comment">// 如果和小于目标值，则将左指针右移</span></span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果和等于目标值，则将四元组加入答案集合中</span></span><br><span class="line">                    List&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    tmp.add(nums[i]);</span><br><span class="line">                    tmp.add(nums[j]);</span><br><span class="line">                    tmp.add(nums[left]);</span><br><span class="line">                    tmp.add(nums[right]);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Integer.toString(nums[i]) + Integer.toString(nums[j])</span><br><span class="line">                            + Integer.toString(nums[left]) + Integer.toString(nums[right]); <span class="comment">// 将四元组转换为字符串形式</span></span><br><span class="line">                    <span class="keyword">if</span> (!strs.contains(str)) &#123; <span class="comment">// 如果该四元组没有出现过，则将其加入答案集合中</span></span><br><span class="line">                        ans.add(tmp);</span><br><span class="line">                        strs.add(str);</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--; <span class="comment">// 将右指针左移</span></span><br><span class="line">                    left++; <span class="comment">// 将左指针右移</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p><a href="https://leetcode.cn/problems/reverse-string">https://leetcode.cn/problems/reverse-string</a></p><h3 id="思路-29"><a href="#思路-29" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.双指针反转</span><br></pre></td></tr></table></figure><h3 id="代码-29"><a href="#代码-29" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=s.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="type">char</span> temp=s[left];</span><br><span class="line">        s[left]=s[right];</span><br><span class="line">        s[right]=temp;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反转字符串II"><a href="#反转字符串II" class="headerlink" title="反转字符串II"></a>反转字符串II</h2><p>给定一个字符串 s 和一个整数 k，从字符串开头算起，每计数至 2k 个字符，就反转这 2k 字符中的前 k 个字符。</p><p>如果剩余字符少于 k 个，则将剩余字符全部反转。<br>如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。</p><p><a href="https://leetcode.cn/problems/reverse-string-ii">https://leetcode.cn/problems/reverse-string-ii</a></p><h3 id="思路-30"><a href="#思路-30" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.String转char数组：char[] arr = s.toCharArray()</span><br><span class="line">2.循环遍历，调用reverse方法</span><br></pre></td></tr></table></figure><h3 id="代码-30"><a href="#代码-30" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length(); <span class="comment">// 字符串 s 的长度</span></span><br><span class="line">    <span class="type">char</span>[] arr = s.toCharArray(); <span class="comment">// 将字符串 s 转换成字符数组 arr</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) &#123; <span class="comment">// 每次处理 2k 个字符</span></span><br><span class="line">        reverse(arr, i, Math.min(i + k, n) - <span class="number">1</span>); <span class="comment">// 反转每个 2k 个字符中的前 k 个字符</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr); <span class="comment">// 将反转后的字符数组转换成字符串并返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 双指针遍历</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> arr[left]; <span class="comment">// 交换左右指针所指向的字符</span></span><br><span class="line">        arr[left] = arr[right];</span><br><span class="line">        arr[right] = temp;</span><br><span class="line">        left++; <span class="comment">// 左指针右移</span></span><br><span class="line">        right--; <span class="comment">// 右指针左移</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h2><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><h3 id="思路-31"><a href="#思路-31" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.StringBuilder res = new StringBuilder();</span><br><span class="line">2.</span><br><span class="line">if(c == &#x27; &#x27;) res.append(&quot;%20&quot;);</span><br><span class="line">else res.append(c);</span><br></pre></td></tr></table></figure><h3 id="代码-31"><a href="#代码-31" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(Character c : s.toCharArray())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27; &#x27;</span>) res.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> res.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="反转字符串中的单词"><a href="#反转字符串中的单词" class="headerlink" title="反转字符串中的单词"></a>反转字符串中的单词</h2><p>给你一个字符串 s ，请你反转字符串中 单词 的顺序。</p><p>单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。</p><p>返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。</p><p>注意：输入字符串 s中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string">https://leetcode.cn/problems/reverse-words-in-a-string</a></p><h3 id="思路-32"><a href="#思路-32" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.内置split,reverse,join等方法</span><br><span class="line">String.trim()</span><br><span class="line">String.split(&quot;\\s+&quot;)//\\s+表示匹配任意空白字符（包括空格、制表符、换行符等）并且出现一次或多次。因此，这个方法可以在分割字符串时忽略连续的空格、制表符或换行符等空白字符。</span><br><span class="line">Array.asList(arr)</span><br><span class="line">Collections.reverse(list)</span><br><span class="line">String.join(str1,list)//给list添加分隔符</span><br></pre></td></tr></table></figure><h3 id="代码-32"><a href="#代码-32" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">// 除去开头和末尾的空白字符</span></span><br><span class="line">    s = s.trim();</span><br><span class="line">    <span class="comment">// 正则匹配连续的空白字符作为分隔符分割</span></span><br><span class="line">    List&lt;String&gt; wordList = Arrays.asList(s.split(<span class="string">&quot;\\s+&quot;</span>));</span><br><span class="line">    Collections.reverse(wordList);</span><br><span class="line">    <span class="keyword">return</span> String.join(<span class="string">&quot; &quot;</span>, wordList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="左旋转字符串"><a href="#左旋转字符串" class="headerlink" title="左旋转字符串"></a>左旋转字符串</h2><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof">https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof</a></p><h3 id="思路-33"><a href="#思路-33" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.切片</span><br><span class="line">2.相加</span><br></pre></td></tr></table></figure><h3 id="代码-33"><a href="#代码-33" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.substring(n, s.length()) + s.substring(<span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="找出字符串中第一个匹配项的下标"><a href="#找出字符串中第一个匹配项的下标" class="headerlink" title="找出字符串中第一个匹配项的下标"></a>找出字符串中第一个匹配项的下标</h2><p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回  -1 。</p><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string">https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string</a><br><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：&quot;sad&quot; 在下标 0 和 6 处匹配。</span><br><span class="line">第一个匹配项的下标是 0 ，所以返回 0 。</span><br></pre></td></tr></table></figure><h3 id="思路-34"><a href="#思路-34" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.haystack.indexOf(needle);</span><br><span class="line">2.基于窗口滑动</span><br><span class="line">首先判断子串是否为空，如果为空则直接返回 0。</span><br><span class="line">通过遍历目标字符串，找到第一个与子串的首字符相等的位置。</span><br><span class="line">如果找到了，则从该位置开始向后遍历目标字符串和子串，逐个字符进行比较，如果字符不匹配，则从下一个位置开始重新匹配，直到找到子串在目标字符串中的起始位置或者找完了整个目标字符串都没有找到子串，则返回 -1。</span><br></pre></td></tr></table></figure><h3 id="代码-34"><a href="#代码-34" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> needle.length(); <span class="comment">// 子串的长度</span></span><br><span class="line">    <span class="comment">// 当 needle 是空字符串时我们应当返回 0</span></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> haystack.length(); <span class="comment">// 目标字符串的长度</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; m) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 目标字符串中当前要匹配的字符的位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 子串中当前要匹配的字符的位置</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n - m + <span class="number">1</span>) &#123; <span class="comment">// 窗口的右端点不能超过目标字符串的末尾</span></span><br><span class="line">        <span class="comment">// 找到目标字符串中与子串第一个字符相等的位置</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; haystack.charAt(i) != needle.charAt(j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123; <span class="comment">// 如果目标字符串中没有与子串第一个字符相等的位置，则匹配失败</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从第二个字符开始比较，如果匹配成功，则一起向后移动</span></span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; m &amp;&amp; i &lt; n &amp;&amp; haystack.charAt(i) == needle.charAt(j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == m) &#123; <span class="comment">// 如果匹配成功，则返回子串在目标字符串中的起始位置</span></span><br><span class="line">            <span class="keyword">return</span> i - m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则回溯到下一个位置重新开始匹配</span></span><br><span class="line">            i -= j - <span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 没有匹配成功，则返回-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重复的子字符串"><a href="#重复的子字符串" class="headerlink" title="重复的子字符串"></a>重复的子字符串</h2><p>给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。</p><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/">https://leetcode.cn/problems/repeated-substring-pattern/</a></p><h3 id="思路-35"><a href="#思路-35" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.如果字符串 S 包含一个重复的子字符串，那么这意味着可以多次 “移位和换行”`字符串，并使其与原始字符串匹配。基于这个思想，可以每次移动k个字符，直到匹配移动 length - 1 次。但是这样对于重复字符串很长的字符串，效率会非常低。在 LeetCode 中执行时间超时了。</span><br><span class="line">2.为了避免这种无用的环绕，可以创建一个新的字符串 str，它等于原来的字符串 S 再加上 S 自身，这样其实就包含了所有移动的字符串。</span><br><span class="line">比如字符串：S = acd，那么 str = S + S = acdacd</span><br><span class="line">acd 移动的可能：dac、cda。其实都包含在了 str 中了。就像一个滑动窗口</span><br><span class="line">一开始 acd (acd) ，移动一次 ac(dac)d，移动两次 a(cda)cd。循环结束</span><br><span class="line">所以可以直接判断 str 中去除首尾元素之后，是否包含自身元素。如果包含。则表明存在重复子串。</span><br></pre></td></tr></table></figure><h3 id="代码-35"><a href="#代码-35" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s + s;</span><br><span class="line">    <span class="keyword">return</span> str.substring(<span class="number">1</span>, str.length() - <span class="number">1</span>).contains(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>数据结构</tag>
      
      <tag>数组</tag>
      
      <tag>链表</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>甲骨文云永久免费服务器允许root远程ssh登录</title>
    <link href="/2023/05/20/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E6%B0%B8%E4%B9%85%E5%85%8D%E8%B4%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%81%E8%AE%B8root%E8%BF%9C%E7%A8%8Bssh%E7%99%BB%E5%BD%95/"/>
    <url>/2023/05/20/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%E6%B0%B8%E4%B9%85%E5%85%8D%E8%B4%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%81%E8%AE%B8root%E8%BF%9C%E7%A8%8Bssh%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="甲骨文云永久免费服务器允许root远程ssh登录"><a href="#甲骨文云永久免费服务器允许root远程ssh登录" class="headerlink" title="甲骨文云永久免费服务器允许root远程ssh登录"></a>甲骨文云永久免费服务器允许root远程ssh登录</h2><p>虽然操作过好多次，但还是会忘记，每次都要去查，还是自己记录一遍吧</p><h3 id="创建新的服务器"><a href="#创建新的服务器" class="headerlink" title="创建新的服务器"></a>创建新的服务器</h3><p>甲骨文云在不同地区的登录地址是不一样的，我的登录地址是<a href="https://www.oracle.com/cloud/sign-in.html?redirect_uri=https://cloud.oracle.com/compute/instances?region=ap-seoul-1">Cloud Sign In (oracle.com)</a></p><p>还需要先填名字，这是外国人很奇怪的一点，记不住设置的什么名字就登不上了</p><p><img src="https://xinhaojin.github.io/imgs-host/20230704/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230704142856.1tmnrvwfijwg.webp"></p><p>在计算-实例页面选择创建实例</p><p><img src="https://xinhaojin.github.io/imgs-host/20230704/image.7is8xyw41fw0.webp"></p><p>映像和配置选择免费的就好</p><p><img src="https://xinhaojin.github.io/imgs-host/20230704/image.3dlmlm2nlqm0.webp"></p><p>保存密钥对到本地</p><p><img src="https://xinhaojin.github.io/imgs-host/20230704/image.2s5dhhh68g60.webp"></p><p>创建成功后在 <a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a>  ping一下服务器公网IP 本机也ping一下检查是否畅通 本地网络ping畅通的服务器才有意义</p><p><img src="https://xinhaojin.github.io/imgs-host/20230704/image.3jbm4dedc500.webp"></p><h3 id="SSH连接"><a href="#SSH连接" class="headerlink" title="SSH连接"></a>SSH连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -i &lt;private_key&gt; user@remote_host<br></code></pre></td></tr></table></figure><p>默认用户名会在实例创建时显示，Ubuntu系统是ubuntu，Centos是opc</p><p>有时候本地即使ping通也很难建立ssh连接，因为ssh使用TCP协议，而ping使用的是ICMP，所以可以使用网络环境更好的其他云服务器来建立连接，私钥权限不能放开，要设置成400</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 400 &lt;private_key&gt;<br></code></pre></td></tr></table></figure><p>登录成功后修改root密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i<br>passwd<br></code></pre></td></tr></table></figure><p>设置允许root远程ssh登录,修改&#x2F;etc&#x2F;ssh&#x2F;sshd_config</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Port 22222<br>PermitRootLogin yes<br>PasswordAuthentication yes<br></code></pre></td></tr></table></figure><p>处理 systemd 的 ssh.socket（解决端口不生效问题）,Ubuntu 中 SSH 可能由 ssh.socket 管理，需禁用该 socket 让 SSH 服务自己监听端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl stop ssh.socket<br>sudo systemctl disable ssh.socket<br>sudo systemctl daemon-reload<br>sudo systemctl restart ssh<br>sudo systemctl status ssh<br></code></pre></td></tr></table></figure><p>关闭iptables服务以允许ssh端口，后续可以重新启用其他防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl stop iptables<br>sudo systemctl disable iptables<br></code></pre></td></tr></table></figure><p>如果还不生效，可以试试下面命令，有可能被地方配置覆盖了，像这里就还需要修改&#x2F;etc&#x2F;ssh&#x2F;sshd_config.d&#x2F;60-cloudimg-settings.conf,然后再重启ssh服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@cloud2:/etc/ssh# grep -R &quot;PasswordAuthentication&quot; /etc/ssh/sshd_config /etc/ssh/sshd_config.d/<br>/etc/ssh/sshd_config:PasswordAuthentication yes<br>/etc/ssh/sshd_config:# PasswordAuthentication.  Depending on your PAM configuration,<br>/etc/ssh/sshd_config:# PAM authentication, then enable this but set PasswordAuthentication<br>/etc/ssh/sshd_config.d/60-cloudimg-settings.conf:PasswordAuthentication no<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode SSH无法建立连接问题</title>
    <link href="/2023/04/14/vscode%20SSH%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/"/>
    <url>/2023/04/14/vscode%20SSH%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>其他SSH工具能连上，vscode的RemoteSSH插件显示无法建立连接</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在 <code>C:\Users\yourname\.ssh</code>下有一个known_hosts文件，使用记事本打开，删除你要连接的IP相关的所有内容即可<br><code>&lt;br&gt;</code><br><img src="https://xinhaojin.github.io/imgs-host/20230414/192903.6tmyxirogzs0.webp" alt="192903"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VOC格式数据集转YOLO格式</title>
    <link href="/2023/04/14/VOC%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACYOLO%E6%A0%BC%E5%BC%8F/"/>
    <url>/2023/04/14/VOC%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE%E9%9B%86%E8%BD%ACYOLO%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="VOC格式"><a href="#VOC格式" class="headerlink" title="VOC格式"></a>VOC格式</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">VOC</span><br><span class="line">--Annotations</span><br><span class="line">    00001.xml</span><br><span class="line">        &lt;annotation&gt;</span><br><span class="line">            &lt;size&gt;</span><br><span class="line">                &lt;width&gt;320&lt;/width&gt;</span><br><span class="line">                &lt;height&gt;160&lt;/height&gt;</span><br><span class="line">                &lt;depth&gt;3&lt;/depth&gt;</span><br><span class="line">            &lt;/size&gt;</span><br><span class="line">            &lt;segmented&gt;0&lt;/segmented&gt;</span><br><span class="line">            &lt;object&gt;</span><br><span class="line">                &lt;name&gt;word&lt;/name&gt;</span><br><span class="line">                &lt;pose&gt;Unspecified&lt;/pose&gt;</span><br><span class="line">                &lt;truncated&gt;0&lt;/truncated&gt;</span><br><span class="line">                &lt;difficult&gt;0&lt;/difficult&gt;</span><br><span class="line">                &lt;bndbox&gt;</span><br><span class="line">                    &lt;xmin&gt;234&lt;/xmin&gt;</span><br><span class="line">                    &lt;ymin&gt;27&lt;/ymin&gt;</span><br><span class="line">                    &lt;xmax&gt;267&lt;/xmax&gt;</span><br><span class="line">                    &lt;ymax&gt;63&lt;/ymax&gt;</span><br><span class="line">                &lt;/bndbox&gt;</span><br><span class="line">            &lt;/object&gt;</span><br><span class="line">        &lt;/annotation&gt;</span><br><span class="line">    00002.xml</span><br><span class="line">    00003.xml</span><br><span class="line">    00004.xml</span><br><span class="line">--JPEGImages</span><br><span class="line">    00001.png</span><br><span class="line">    00002.png</span><br><span class="line">    00003.png</span><br><span class="line">    00004.png</span><br><span class="line">--ImageSets</span><br><span class="line">    --Main</span><br><span class="line">        train.txt</span><br><span class="line">            00001</span><br><span class="line">            00004</span><br><span class="line">        val.txt</span><br><span class="line">            00002</span><br><span class="line">        test.txt</span><br><span class="line">            00003</span><br></pre></td></tr></table></figure><h2 id="YOLO格式"><a href="#YOLO格式" class="headerlink" title="YOLO格式"></a>YOLO格式</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">YOLO</span><br><span class="line">--images</span><br><span class="line">    --train</span><br><span class="line">        00001.jpg</span><br><span class="line">        00004.jpg</span><br><span class="line">    --val</span><br><span class="line">        00002.jpg</span><br><span class="line">    --test</span><br><span class="line">        00003.jpg</span><br><span class="line">--labels</span><br><span class="line">    --train</span><br><span class="line">        00001.txt</span><br><span class="line">            0 0.7828125 0.28125 0.10312500000000001 0.225</span><br><span class="line">            0 0.2328125 0.603125 0.109375 0.20625000000000002</span><br><span class="line">            0 0.5703125 0.596875 0.115625 0.21875</span><br><span class="line">            0 0.74375 0.7406250000000001 0.09375 0.19375</span><br><span class="line">        00004.txt</span><br><span class="line">    --val</span><br><span class="line">        00002.txt</span><br><span class="line">    --test</span><br><span class="line">        00003.txt</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class_names = [<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">voc_dir = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">yolo_dir = <span class="string">&#x27;.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建yolo格式的目录结构</span></span><br><span class="line">os.makedirs(os.path.join(yolo_dir, <span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;train&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(os.path.join(yolo_dir, <span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;val&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(os.path.join(yolo_dir, <span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;test&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(os.path.join(yolo_dir, <span class="string">&#x27;labels&#x27;</span>, <span class="string">&#x27;train&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(os.path.join(yolo_dir, <span class="string">&#x27;labels&#x27;</span>, <span class="string">&#x27;val&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(os.path.join(yolo_dir, <span class="string">&#x27;labels&#x27;</span>, <span class="string">&#x27;test&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取训练集、验证集和测试集的文件名</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(voc_dir, <span class="string">&#x27;ImageSets&#x27;</span>, <span class="string">&#x27;Main&#x27;</span>, <span class="string">&#x27;train.txt&#x27;</span>)) <span class="keyword">as</span> f:</span><br><span class="line">    train_list = f.read().splitlines()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(voc_dir, <span class="string">&#x27;ImageSets&#x27;</span>, <span class="string">&#x27;Main&#x27;</span>, <span class="string">&#x27;val.txt&#x27;</span>)) <span class="keyword">as</span> f:</span><br><span class="line">    val_list = f.read().splitlines()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(voc_dir, <span class="string">&#x27;ImageSets&#x27;</span>, <span class="string">&#x27;Main&#x27;</span>, <span class="string">&#x27;test.txt&#x27;</span>)) <span class="keyword">as</span> f:</span><br><span class="line">    test_list = f.read().splitlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换标注文件格式</span></span><br><span class="line"><span class="keyword">for</span> split_name, split_list <span class="keyword">in</span> [(<span class="string">&#x27;train&#x27;</span>, train_list), (<span class="string">&#x27;val&#x27;</span>, val_list), (<span class="string">&#x27;test&#x27;</span>, test_list)]:</span><br><span class="line">    <span class="keyword">for</span> image_name <span class="keyword">in</span> split_list:</span><br><span class="line">        <span class="comment"># 复制图片</span></span><br><span class="line">        src_image_path = os.path.join(voc_dir, <span class="string">&#x27;JPEGImages&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;image_name&#125;</span>.png&#x27;</span>)</span><br><span class="line">        dst_image_path = os.path.join(yolo_dir, <span class="string">&#x27;images&#x27;</span>, split_name, <span class="string">f&#x27;<span class="subst">&#123;image_name&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">        shutil.copy(src_image_path, dst_image_path)</span><br><span class="line">      </span><br><span class="line">        <span class="comment"># 解析XML标注文件</span></span><br><span class="line">        xml_path = os.path.join(voc_dir, <span class="string">&#x27;Annotations&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;image_name&#125;</span>.xml&#x27;</span>)</span><br><span class="line">        tree = ET.parse(xml_path)</span><br><span class="line">        root = tree.getroot()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取图片大小</span></span><br><span class="line">        size_elem = root.find(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">        width = <span class="built_in">int</span>(size_elem.find(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">        height = <span class="built_in">int</span>(size_elem.find(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换标注</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(yolo_dir, <span class="string">&#x27;labels&#x27;</span>, split_name, <span class="string">f&#x27;<span class="subst">&#123;image_name&#125;</span>.txt&#x27;</span>), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> obj_elem <span class="keyword">in</span> root.findall(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">                class_name = obj_elem.find(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">                <span class="keyword">if</span> class_name <span class="keyword">not</span> <span class="keyword">in</span> class_names:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                bbox_elem = obj_elem.find(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">                xmin = <span class="built_in">int</span>(<span class="built_in">float</span>(bbox_elem.find(<span class="string">&#x27;xmin&#x27;</span>).text))</span><br><span class="line">                ymin = <span class="built_in">int</span>(<span class="built_in">float</span>(bbox_elem.find(<span class="string">&#x27;ymin&#x27;</span>).text))</span><br><span class="line">                xmax = <span class="built_in">int</span>(<span class="built_in">float</span>(bbox_elem.find(<span class="string">&#x27;xmax&#x27;</span>).text))</span><br><span class="line">                ymax = <span class="built_in">int</span>(<span class="built_in">float</span>(bbox_elem.find(<span class="string">&#x27;ymax&#x27;</span>).text))</span><br><span class="line"></span><br><span class="line">                x_center = (xmin + xmax) / <span class="number">2</span> / width</span><br><span class="line">                y_center = (ymin + ymax) / <span class="number">2</span> / height</span><br><span class="line">                w = (xmax - xmin) / width</span><br><span class="line">                h = (ymax - ymin) / height</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 写入标注</span></span><br><span class="line">                f.write(<span class="string">f&quot;<span class="subst">&#123;class_names.index(class_name)&#125;</span> <span class="subst">&#123;x_center:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;y_center:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;w:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;h:<span class="number">.6</span>f&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7使用docker部署chatgpt</title>
    <link href="/2023/04/03/centos7%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2chatgpt/"/>
    <url>/2023/04/03/centos7%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2chatgpt/</url>
    
    <content type="html"><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><h3 id="查看安装版本"><a href="#查看安装版本" class="headerlink" title="查看安装版本"></a>查看安装版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">sudo yum remove docker #删除早期版本</span><br><span class="line">sudo rm -rf /var/lib/docker #删除Docker数据目录</span><br></pre></td></tr></table></figure><h3 id="使用docker"><a href="#使用docker" class="headerlink" title="使用docker"></a>使用docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker #启动docker服务</span><br><span class="line">systemctl stop docker #关闭docker服务</span><br><span class="line">sudo systemctl enable docker #开机启动</span><br><span class="line">docker ps -a #查看所有容器</span><br><span class="line">docker stop myname #停止容器名为&#x27;myname&#x27;的容器</span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><p>发布地址 <a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="授予执行权限"><a href="#授予执行权限" class="headerlink" title="授予执行权限"></a>授予执行权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="查看安装版本-1"><a href="#查看安装版本-1" class="headerlink" title="查看安装版本"></a>查看安装版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="部署chatgpt项目"><a href="#部署chatgpt项目" class="headerlink" title="部署chatgpt项目"></a>部署chatgpt项目</h2><p><a href="https://github.com/Chanzhaoyu/chatgpt-web">https://github.com/Chanzhaoyu/chatgpt-web</a></p><h3 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir chatgpt</span><br><span class="line">cd chatgpt</span><br></pre></td></tr></table></figure><h3 id="新建docker-compose-yml"><a href="#新建docker-compose-yml" class="headerlink" title="新建docker-compose.yml"></a>新建docker-compose.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">chenzhaoyu94/chatgpt-web</span> <span class="comment"># 总是使用 latest ,更新时重新 pull 该 tag 镜像即可</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3002</span><span class="string">:3002</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># 二选一</span></span><br><span class="line">      <span class="comment">#OPENAI_API_KEY: XXXXXX</span></span><br><span class="line">      <span class="attr">OPENAI_ACCESS_TOKEN:</span> <span class="string">XXXXXXX</span></span><br><span class="line">      <span class="attr">API_REVERSE_PROXY:</span> <span class="string">https://bypass.churchless.tech/api/conversation</span></span><br><span class="line">      <span class="comment"># 超时，单位毫秒，可选</span></span><br><span class="line">      <span class="attr">TIMEOUT_MS:</span> <span class="number">60000</span></span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">API</span> <span class="string">可用：</span></span><br><span class="line"></span><br><span class="line"><span class="string">OPENAI_API_KEY</span> <span class="string">和</span> <span class="string">OPENAI_ACCESS_TOKEN</span> <span class="string">二选一</span></span><br><span class="line"><span class="string">OPENAI_API_MODEL</span> <span class="string">设置模型，可选，默认：gpt-3.5-turbo</span></span><br><span class="line"><span class="string">OPENAI_API_BASE_URL</span> <span class="string">设置接口地址，可选，默认：https://api.openai.com</span></span><br><span class="line"><span class="string">OPENAI_API_DISABLE_DEBUG</span> <span class="string">设置接口关闭</span> <span class="string">debug</span> <span class="string">日志，可选，默认：empty</span> <span class="string">不关闭</span></span><br><span class="line"></span><br><span class="line"><span class="string">ACCESS_TOKEN</span> <span class="string">可用：</span></span><br><span class="line"></span><br><span class="line"><span class="string">OPENAI_ACCESS_TOKEN</span> <span class="string">和</span> <span class="string">OPENAI_API_KEY</span> <span class="string">二选一，同时存在时，OPENAI_API_KEY</span> <span class="string">优先</span></span><br><span class="line"><span class="string">API_REVERSE_PROXY</span> <span class="string">设置反向代理，可选</span> <span class="string">https://bypass.churchless.tech/api/conversation</span> <span class="string">或</span> <span class="string">https://api.pawan.krd/backend-api/conversation</span></span><br><span class="line"><span class="string">通用：</span></span><br><span class="line"></span><br><span class="line"><span class="string">AUTH_SECRET_KEY</span> <span class="string">访问权限密钥，可选</span></span><br><span class="line"><span class="string">MAX_REQUEST_PER_HOUR</span> <span class="string">每小时最大请求次数，可选，默认无限</span></span><br><span class="line"><span class="string">TIMEOUT_MS</span> <span class="string">超时，单位毫秒，可选</span></span><br><span class="line"><span class="string">SOCKS_PROXY_HOST</span> <span class="string">和</span> <span class="string">SOCKS_PROXY_PORT</span> <span class="string">一起时生效，可选</span></span><br><span class="line"><span class="string">SOCKS_PROXY_PORT</span> <span class="string">和</span> <span class="string">SOCKS_PROXY_HOST</span> <span class="string">一起时生效，可选</span></span><br><span class="line"><span class="string">HTTPS_PROXY</span> <span class="string">支持</span> <span class="string">http，https,</span> <span class="string">socks5，可选</span></span><br><span class="line"><span class="string">ALL_PROXY</span> <span class="string">支持</span> <span class="string">http，https,</span> <span class="string">socks5，可选</span></span><br></pre></td></tr></table></figure><p>OPENAI_API_KEY获取地址 <a href="https://platform.openai.com/overview">https://platform.openai.com/overview</a><br><code>&lt;br&gt;</code>ACCESS_TOKEN获取地址 <a href="https://chat.openai.com/api/auth/session">https://chat.openai.com/api/auth/session</a><br><code>&lt;br&gt;</code>免费账户选择ACCESS_TOKEN设置反向代理即可</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>在新建的目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>默认容器名为chatgpt-web-app-1</p><h3 id="放行端口"><a href="#放行端口" class="headerlink" title="放行端口"></a>放行端口</h3><p>检查系统是否安装了firewalld</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status firewalld</span><br></pre></td></tr></table></figure><p>如果该命令返回firewalld服务的状态，则说明firewalld已经安装。如果没有安装，请使用以下命令安装firewalld</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y firewalld</span><br></pre></td></tr></table></figure><p>打开需要放行的端口（例如3002）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=3002/tcp --permanent</span><br></pre></td></tr></table></figure><p>重新加载防火墙规则，以便它们在系统重启后仍然生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>云服务器额外在控制台放行端口</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
      <tag>chatgpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决录制音视频不同步问题</title>
    <link href="/2023/03/23/%E8%A7%A3%E5%86%B3%E5%BD%95%E5%88%B6%E9%9F%B3%E8%A7%86%E9%A2%91%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/"/>
    <url>/2023/03/23/%E8%A7%A3%E5%86%B3%E5%BD%95%E5%88%B6%E9%9F%B3%E8%A7%86%E9%A2%91%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>使用opencv录制视频，同时使用pyaudio录制音频，存在两个问题<code>&lt;br&gt;</code><br>1.视频录制和音频录制没有同时启动，开始时间对不上<code>&lt;br&gt;</code><br>2.视频录制时长和视频保存后的时长不一致，会出现视频变慢的现象</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1.使用event事件，使两个录制同步开始<code>&lt;br&gt;</code><br>2.读取音频视频时长，调整视频帧率，把视频时长调整成和音频一样长，再把音频合并到视频中。</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> pyaudio</span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> *</span><br><span class="line">  </span><br><span class="line"><span class="comment">#全局变量，控制录制停止</span></span><br><span class="line">allowRecord=<span class="literal">False</span></span><br><span class="line">cap=<span class="literal">None</span></span><br><span class="line"><span class="comment">#录像</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">record_video</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="keyword">global</span> cap</span><br><span class="line">    cap=cv2.VideoCapture(<span class="number">0</span>+ cv2.CAP_DSHOW)</span><br><span class="line">    writer=cv2.VideoWriter(<span class="string">&#x27;output.mp4&#x27;</span>,cv2.VideoWriter_fourcc(*<span class="string">&#x27;MJPG&#x27;</span>),<span class="number">25</span>,(<span class="number">640</span>,<span class="number">480</span>))</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">global</span> allowRecord</span><br><span class="line">    allowRecord=<span class="literal">True</span><span class="comment">#录制启动</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;录像开始时间：&#x27;</span>+datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>))</span><br><span class="line">    <span class="keyword">while</span> allowRecord==<span class="literal">True</span>:</span><br><span class="line">        ret,frame=cap.read()</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            writer.write(frame)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;录像结束时间：&#x27;</span>+datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>))</span><br><span class="line">    allowRecord=<span class="literal">False</span></span><br><span class="line">    cap.release()</span><br><span class="line">  </span><br><span class="line"><span class="comment">#录音</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">record_audio</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="keyword">global</span> allowRecord</span><br><span class="line">    <span class="comment">#等待event启动录制音频</span></span><br><span class="line">    p=pyaudio.PyAudio()</span><br><span class="line">    <span class="keyword">global</span> stream</span><br><span class="line">    stream=p.<span class="built_in">open</span>(<span class="built_in">format</span>=pyaudio.paInt16,channels=<span class="number">1</span>,rate=<span class="number">16000</span>,<span class="built_in">input</span>=<span class="literal">True</span>,frames_per_buffer=<span class="number">1024</span>)</span><br><span class="line">    wf = wave.<span class="built_in">open</span>(<span class="string">&#x27;output.wav&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    wf.setnchannels(<span class="number">1</span>)</span><br><span class="line">    wf.setsampwidth(p.get_sample_size(pyaudio.paInt16))</span><br><span class="line">    wf.setframerate(<span class="number">16000</span>)</span><br><span class="line">    event.wait()</span><br><span class="line">    <span class="comment">#输出时间戳,精确到毫秒</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;录音开始时间：&#x27;</span>+datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>))</span><br><span class="line">    <span class="keyword">while</span> allowRecord==<span class="literal">True</span>:</span><br><span class="line">        data=stream.read(<span class="number">1024</span>)</span><br><span class="line">        wf.writeframes(data)</span><br><span class="line">    wf.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;录音结束时间：&#x27;</span>+datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>))</span><br><span class="line">    stream.stop_stream()  <span class="comment"># 关闭流</span></span><br><span class="line">    stream.close()</span><br><span class="line">    p.terminate()</span><br><span class="line">  </span><br><span class="line"><span class="comment">#合并视频音频</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_video_audio</span>(<span class="params">video_path,audio_path</span>):</span><br><span class="line">    audioclip = AudioFileClip(audio_path)</span><br><span class="line">    videoclip = VideoFileClip(video_path)</span><br><span class="line">    videoclip2 = videoclip.set_audio(audioclip)</span><br><span class="line">    video = CompositeVideoClip([videoclip2])</span><br><span class="line">    filename=datetime.now().strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>)</span><br><span class="line">    video.write_videofile(filename+<span class="string">&#x27;.mp4&#x27;</span>, codec=<span class="string">&#x27;mpeg4&#x27;</span>, bitrate=<span class="string">&#x27;1000K&#x27;</span>) <span class="comment"># bitrate 设置比特率，比特率越高， 合并的视频越清晰，视频文件也越大</span></span><br><span class="line">    audioclip.close()</span><br><span class="line">    videoclip.close()</span><br><span class="line">    videoclip2.close()</span><br><span class="line">    video.close()</span><br><span class="line">    <span class="comment">#列出所有进程名,关闭所有包含&#x27;ffmpeg&#x27;的进程</span></span><br><span class="line">    process_names=os.popen(<span class="string">&#x27;tasklist&#x27;</span>).readlines()</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> process_names:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;ffmpeg&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">            os.system(<span class="string">&#x27;taskkill /f /im &#x27;</span>+name.split()[<span class="number">0</span>])</span><br><span class="line">    os.remove(video_path)</span><br><span class="line">    os.remove(<span class="string">&#x27;output.mp4&#x27;</span>)</span><br><span class="line">    os.rename(audio_path, filename+<span class="string">&#x27;.wav&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;音视频合并成功：&#x27;</span>+filename+<span class="string">&#x27;.mp4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止录制</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stop_record</span>():</span><br><span class="line">    <span class="keyword">global</span> allowRecord</span><br><span class="line">    allowRecord=<span class="literal">False</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">record_video_with_audio</span>():</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    event.clear()</span><br><span class="line">    t1=threading.Thread(target=record_video,args=(event,))</span><br><span class="line">    t2=threading.Thread(target=record_audio,args=(event,))</span><br><span class="line">    <span class="comment">#同步开启录制</span></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="keyword">while</span> allowRecord==<span class="literal">False</span>:<span class="comment">#等待录制启动</span></span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">    <span class="keyword">while</span> allowRecord:<span class="comment">#等待录制停止</span></span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">#结束线程</span></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    video_path=<span class="string">&#x27;output.mp4&#x27;</span></span><br><span class="line">    audio_path=<span class="string">&#x27;output.wav&#x27;</span></span><br><span class="line">    <span class="comment">#查看时长</span></span><br><span class="line">    video_time=VideoFileClip(video_path).duration</span><br><span class="line">    audio_time=AudioFileClip(audio_path).duration</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;视频时长：&#x27;</span>+<span class="built_in">str</span>(video_time)+<span class="string">&#x27; s&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;音频时长：&#x27;</span>+<span class="built_in">str</span>(audio_time)+<span class="string">&#x27; s&#x27;</span>)</span><br><span class="line">    <span class="comment">#把视频压缩的和音频一样长</span></span><br><span class="line">    <span class="comment"># Load the video</span></span><br><span class="line">    video = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="comment"># Get the frame rate</span></span><br><span class="line">    fps = video.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    new_fps=video_time/audio_time*fps</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;调整视频帧率为：&#x27;</span>+<span class="built_in">str</span>(new_fps))</span><br><span class="line">    <span class="comment"># Set the frame rate</span></span><br><span class="line">    video.<span class="built_in">set</span>(cv2.CAP_PROP_FPS, new_fps)</span><br><span class="line">    video_writer = cv2.VideoWriter(<span class="string">&#x27;output_new.mp4&#x27;</span>, cv2.VideoWriter_fourcc(*<span class="string">&#x27;MJPG&#x27;</span>), new_fps, (<span class="number">640</span>, <span class="number">480</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># Read the next frame</span></span><br><span class="line">        success, frame = video.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># Write the frame to the output video</span></span><br><span class="line">        video_writer.write(frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Release the video</span></span><br><span class="line">    video.release()</span><br><span class="line">    video_writer.release()</span><br><span class="line">    t=threading.Thread(target=merge_video_audio,args=(<span class="string">&#x27;output_new.mp4&#x27;</span>,<span class="string">&#x27;output.wav&#x27;</span>))</span><br><span class="line">    t.start()</span><br><span class="line">  </span><br><span class="line">t=threading.Thread(target=record_video_with_audio)</span><br><span class="line">t.start()</span><br><span class="line">time.sleep(<span class="number">10</span>)<span class="comment">#录制10s</span></span><br><span class="line">stop_record()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>音画同步</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人脸关键点检测及人脸分割</title>
    <link href="/2023/03/23/%E4%BA%BA%E8%84%B8%E5%85%B3%E9%94%AE%E7%82%B9%E6%A3%80%E6%B5%8B%E5%8F%8A%E4%BA%BA%E8%84%B8%E5%88%86%E5%89%B2/"/>
    <url>/2023/03/23/%E4%BA%BA%E8%84%B8%E5%85%B3%E9%94%AE%E7%82%B9%E6%A3%80%E6%B5%8B%E5%8F%8A%E4%BA%BA%E8%84%B8%E5%88%86%E5%89%B2/</url>
    
    <content type="html"><![CDATA[<p>人脸关键点检测，输入opencv格式的bgr通道图，默认在输入图上画关键点，也可以在空白图上画，如果要分割出人脸，可以使用矩形框框住关键点，然后在原图上裁剪，下面是一个成功案例。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mediapipe <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 输入bgr通道图，输出人脸网点图</span></span><br><span class="line"><span class="comment"># mode=1在原图上画，mode=2在空白图上画</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_face</span>(<span class="params">image,mode=<span class="number">1</span></span>):</span><br><span class="line">    mp_drawing = mp.solutions.drawing_utils</span><br><span class="line">    mp_face_mesh = mp.solutions.face_mesh</span><br><span class="line">    drawing_spec = mp_drawing.DrawingSpec(thickness=<span class="number">1</span>, circle_radius=<span class="number">1</span>, color=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))<span class="comment">#bgr</span></span><br><span class="line">    <span class="keyword">with</span> mp_face_mesh.FaceMesh(</span><br><span class="line">        max_num_faces=<span class="number">2</span>,</span><br><span class="line">        min_detection_confidence=<span class="number">0.5</span>,</span><br><span class="line">        min_tracking_confidence=<span class="number">0.5</span>) <span class="keyword">as</span> face_mesh:</span><br><span class="line">        image = cv2.cvtColor(cv2.flip(image, <span class="number">1</span>), cv2.COLOR_BGR2RGB)</span><br><span class="line">        <span class="comment"># To improve performance, optionally mark the image as not writeable to</span></span><br><span class="line">        <span class="comment"># pass by reference.</span></span><br><span class="line">        image.flags.writeable = <span class="literal">False</span></span><br><span class="line">        results = face_mesh.process(image)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Draw the face mesh annotations on the image.</span></span><br><span class="line">        <span class="comment"># and print landmarks&#x27; id, x, y, z </span></span><br><span class="line">        image.flags.writeable = <span class="literal">True</span></span><br><span class="line">        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)</span><br><span class="line">        <span class="keyword">if</span> mode==<span class="number">1</span>:</span><br><span class="line">            mask=image</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">elif</span> mode==<span class="number">2</span>:</span><br><span class="line">            <span class="comment">#新建空白图</span></span><br><span class="line">            mask=np.zeros(image.shape,dtype=np.uint8)</span><br><span class="line">        <span class="keyword">if</span> results.multi_face_landmarks:</span><br><span class="line">            <span class="keyword">for</span> face_landmarks <span class="keyword">in</span> results.multi_face_landmarks:</span><br><span class="line">                <span class="comment"># Draw landmarks on the image.</span></span><br><span class="line">                mp_drawing.draw_landmarks(</span><br><span class="line">                    image=mask,<span class="comment">#在空白图上画</span></span><br><span class="line">                    landmark_list=face_landmarks,</span><br><span class="line">                    connections=mp_face_mesh.FACEMESH_CONTOURS,</span><br><span class="line">                    landmark_drawing_spec=drawing_spec,</span><br><span class="line">                    connection_drawing_spec=drawing_spec)</span><br><span class="line">                <span class="comment"># print id, x, y, z</span></span><br><span class="line">                <span class="comment"># time cost </span></span><br><span class="line">                <span class="keyword">if</span> mode==<span class="number">2</span>:</span><br><span class="line">                    xs=[]</span><br><span class="line">                    ys=[]</span><br><span class="line">                    zs=[]</span><br><span class="line">                    <span class="keyword">for</span> <span class="built_in">id</span>,lm <span class="keyword">in</span> <span class="built_in">enumerate</span>(face_landmarks.landmark):</span><br><span class="line">                        ih, iw, ic = image.shape</span><br><span class="line">                        x,y = <span class="built_in">int</span>(lm.x*iw), <span class="built_in">int</span>(lm.y*ih)</span><br><span class="line">                        xs.append(x)</span><br><span class="line">                        ys.append(y)</span><br><span class="line">                        zs.append(lm.z)</span><br><span class="line">                        <span class="comment"># print(id, x,y,lm.z)</span></span><br><span class="line">                    <span class="comment">#用矩形框住这些点</span></span><br><span class="line">                    box=cv2.boundingRect(np.array([xs,ys]).T)</span><br><span class="line">                    <span class="comment">#裁剪原图</span></span><br><span class="line">                    face=mask[box[<span class="number">1</span>]:box[<span class="number">1</span>]+box[<span class="number">3</span>],box[<span class="number">0</span>]:box[<span class="number">0</span>]+box[<span class="number">2</span>]]</span><br><span class="line">                    <span class="comment">#保持比例缩放到128*128</span></span><br><span class="line">                    <span class="keyword">return</span> face</span><br><span class="line">                <span class="keyword">elif</span> mode==<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> mask</span><br><span class="line">    <span class="comment">#没有人脸              </span></span><br><span class="line">    <span class="keyword">if</span> mode==<span class="number">1</span>:  </span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    <span class="keyword">elif</span> mode==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> np.zeros(image.shape,dtype=np.uint8)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>目标检测</tag>
      
      <tag>人脸检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度短语音转文字API调用</title>
    <link href="/2023/03/23/%E7%99%BE%E5%BA%A6%E7%9F%AD%E8%AF%AD%E9%9F%B3%E8%BD%AC%E6%96%87%E5%AD%97API%E8%B0%83%E7%94%A8/"/>
    <url>/2023/03/23/%E7%99%BE%E5%BA%A6%E7%9F%AD%E8%AF%AD%E9%9F%B3%E8%BD%AC%E6%96%87%E5%AD%97API%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>百度的语音转文字API只支持最长60s的语音，如果要识别长语音，需要先切分，识别后再把结果合并。音频采样率和声道数好像也有影响，需要做修改，以下是一个成功案例。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipSpeech  <span class="comment"># baidu_aip</span></span><br><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#输入音频，输出文本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">audio_to_text</span>(<span class="params">audio_path</span>):</span><br><span class="line">    APP_ID = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    API_KEY = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    SECRET_KEY = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    client = AipSpeech(APP_ID, API_KEY, SECRET_KEY)</span><br><span class="line">    audio = AudioSegment.from_wav(audio_path)</span><br><span class="line">    <span class="comment">#获取时长</span></span><br><span class="line">    audio_length = audio.duration_seconds</span><br><span class="line">    <span class="comment">#采样率改成16000</span></span><br><span class="line">    audio=audio.set_frame_rate(<span class="number">16000</span>)</span><br><span class="line">    <span class="comment">#声道改成单声道</span></span><br><span class="line">    audio=audio.set_channels(<span class="number">1</span>)</span><br><span class="line">    max_len=<span class="number">60</span></span><br><span class="line">    audios=[]</span><br><span class="line">    <span class="keyword">if</span> audio_length&gt;max_len:</span><br><span class="line">    <span class="comment">#分片，每片60s</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(audio_length//max_len)):</span><br><span class="line">            audios.append(audio[i*max_len*<span class="number">1000</span>:(i+<span class="number">1</span>)*max_len*<span class="number">1000</span>])</span><br><span class="line">        audios.append(audio[<span class="built_in">int</span>(audio_length//max_len)*max_len*<span class="number">1000</span>:])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        audios.append(audio)</span><br><span class="line">    <span class="comment">#调用api</span></span><br><span class="line">    results=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(audios)):</span><br><span class="line">        audios[i].export(<span class="string">&#x27;temp.wav&#x27;</span>,<span class="built_in">format</span>=<span class="string">&#x27;wav&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;temp.wav&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            result = client.asr(fp.read(), <span class="string">&#x27;wav&#x27;</span>, <span class="number">16000</span>, &#123;<span class="string">&#x27;dev_pid&#x27;</span>: <span class="number">1537</span>,&#125;)</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;err_no&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(result[<span class="string">&#x27;result&#x27;</span>][<span class="number">0</span>])</span><br><span class="line">            results=results+result[<span class="string">&#x27;result&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(result[<span class="string">&#x27;err_msg&#x27;</span>])  </span><br><span class="line">    os.remove(<span class="string">&#x27;temp.wav&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>语音转文字</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm换源</title>
    <link href="/2023/03/21/npm%E6%8D%A2%E6%BA%90/"/>
    <url>/2023/03/21/npm%E6%8D%A2%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="npm换源"><a href="#npm换源" class="headerlink" title="npm换源"></a>npm换源</h1><h2 id="查看当前源"><a href="#查看当前源" class="headerlink" title="查看当前源"></a>查看当前源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>默认是指向 <a href="https://registry.npmjs.org/%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E5%AE%98%E6%96%B9%E6%BA%90%E3%80%82">https://registry.npmjs.org/，也就是官方源。</a></p><h2 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h2><p>新淘宝源，一些文章还是写着旧的淘宝 NPM 镜像 registry.npm.taobao.org，但它已于 2022 年 05 月 31 日 废弃，读者需要更换为新的 registry.npmmirror.com 源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><p>这个配置会持久化保存到 ~&#x2F;.npmrc 文件中，你也可以通过手动改该文件来修改配置。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>yolov5单目标检测简化改进</title>
    <link href="/2022/12/07/yolov5%E5%8D%95%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%AE%80%E5%8C%96%E6%94%B9%E8%BF%9B/"/>
    <url>/2022/12/07/yolov5%E5%8D%95%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%AE%80%E5%8C%96%E6%94%B9%E8%BF%9B/</url>
    
    <content type="html"><![CDATA[<p>backbone部分,去掉了7.8两层的conv和c3,只做到16倍下采样</p><p>head部分,去掉所有concat,3个检测层改为1个</p><p>Model size:3.63M-&gt;1.01M</p><p>Params:1.7M-&gt;0.45M</p><p>FLOPs:4.1G-&gt;2.8G</p><p>mAP:81.46-&gt;81.96</p><p>主要原因应该是对于我的检测任务，待检测目标的大小几乎不会有很大的变化，且和16倍下采样后每个cell的感受野大小一致。</p><h3 id="原yolov5n-yaml"><a href="#原yolov5n-yaml" class="headerlink" title="原yolov5n.yaml"></a>原yolov5n.yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YOLOv5 🚀 by Ultralytics, GPL-3.0 license</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameters</span></span><br><span class="line"><span class="attr">nc:</span> <span class="number">1</span>  <span class="comment"># number of classes</span></span><br><span class="line"><span class="attr">depth_multiple:</span> <span class="number">0.33</span>  <span class="comment"># model depth multiple</span></span><br><span class="line"><span class="attr">width_multiple:</span> <span class="number">0.25</span>  <span class="comment"># layer channel multiple</span></span><br><span class="line"><span class="attr">anchors:</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">10</span>,<span class="number">13</span>, <span class="number">16</span>,<span class="number">30</span>, <span class="number">33</span>,<span class="number">23</span>]  <span class="comment"># P3/8</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">30</span>,<span class="number">61</span>, <span class="number">62</span>,<span class="number">45</span>, <span class="number">59</span>,<span class="number">119</span>]  <span class="comment"># P4/16</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">116</span>,<span class="number">90</span>, <span class="number">156</span>,<span class="number">198</span>, <span class="number">373</span>,<span class="number">326</span>]  <span class="comment"># P5/32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YOLOv5 v6.0 backbone</span></span><br><span class="line"><span class="attr">backbone:</span></span><br><span class="line">  <span class="comment"># [from, number, module, args]</span></span><br><span class="line">  [[<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">64</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>]],  <span class="comment"># 0-P1/2</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">128</span>, <span class="number">3</span>, <span class="number">2</span>]],  <span class="comment"># 1-P2/4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="string">C3</span>, [<span class="number">128</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">256</span>, <span class="number">3</span>, <span class="number">2</span>]],  <span class="comment"># 3-P3/8</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">6</span>, <span class="string">C3</span>, [<span class="number">256</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">512</span>, <span class="number">3</span>, <span class="number">2</span>]],  <span class="comment"># 5-P4/16</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">9</span>, <span class="string">C3</span>, [<span class="number">512</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">1024</span>, <span class="number">3</span>, <span class="number">2</span>]],  <span class="comment"># 7-P5/32</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="string">C3</span>, [<span class="number">1024</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">SPPF</span>, [<span class="number">1024</span>, <span class="number">5</span>]],  <span class="comment"># 9</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># YOLOv5 v6.0 head</span></span><br><span class="line"><span class="attr">head:</span></span><br><span class="line">  [[<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">512</span>, <span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">nn.Upsample</span>, [<span class="string">None</span>, <span class="number">2</span>, <span class="string">&#x27;nearest&#x27;</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">6</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]],  <span class="comment"># cat backbone P4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="string">C3</span>, [<span class="number">512</span>, <span class="literal">False</span>]],  <span class="comment"># 13</span></span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">nn.Upsample</span>, [<span class="string">None</span>, <span class="number">2</span>, <span class="string">&#x27;nearest&#x27;</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">4</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]],  <span class="comment"># cat backbone P3</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="string">C3</span>, [<span class="number">256</span>, <span class="literal">False</span>]],  <span class="comment"># 17 (P3/8-small)</span></span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">256</span>, <span class="number">3</span>, <span class="number">2</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">14</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]],  <span class="comment"># cat head P4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="string">C3</span>, [<span class="number">512</span>, <span class="literal">False</span>]],  <span class="comment"># 20 (P4/16-medium)</span></span><br><span class="line"></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">512</span>, <span class="number">3</span>, <span class="number">2</span>]],</span><br><span class="line">   [[<span class="number">-1</span>, <span class="number">10</span>], <span class="number">1</span>, <span class="string">Concat</span>, [<span class="number">1</span>]],  <span class="comment"># cat head P5</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="string">C3</span>, [<span class="number">1024</span>, <span class="literal">False</span>]],  <span class="comment"># 23 (P5/32-large)</span></span><br><span class="line"></span><br><span class="line">   [[<span class="number">17</span>, <span class="number">20</span>, <span class="number">23</span>], <span class="number">1</span>, <span class="string">Detect</span>, [<span class="string">nc</span>, <span class="string">anchors</span>]],  <span class="comment"># Detect(P3, P4, P5)</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h3 id="yolov5-new-yaml"><a href="#yolov5-new-yaml" class="headerlink" title="yolov5_new.yaml"></a>yolov5_new.yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YOLOv5 🚀 by Ultralytics, GPL-3.0 license</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameters</span></span><br><span class="line"><span class="attr">nc:</span> <span class="number">1</span>  <span class="comment"># number of classes</span></span><br><span class="line"><span class="attr">depth_multiple:</span> <span class="number">1</span>  <span class="comment"># model depth multiple</span></span><br><span class="line"><span class="attr">width_multiple:</span> <span class="number">1</span>  <span class="comment"># layer channel multiple</span></span><br><span class="line"><span class="attr">anchors:</span></span><br><span class="line">  <span class="bullet">-</span> [<span class="number">71.741</span>,<span class="number">66.536</span>,<span class="number">69.588</span>,<span class="number">70.286</span>,<span class="number">73.263</span>,<span class="number">72.851</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># YOLOv5 v6.0 backbone</span></span><br><span class="line"><span class="attr">backbone:</span></span><br><span class="line">  <span class="comment"># [from, number, module, args]</span></span><br><span class="line">  [[<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">16</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>]],  <span class="comment"># 0-P1/2</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">32</span>, <span class="number">3</span>, <span class="number">2</span>]],  <span class="comment"># 1-P2/4</span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">C3</span>, [<span class="number">32</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">64</span>, <span class="number">3</span>, <span class="number">2</span>]],  <span class="comment"># 3-P3/8 </span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">2</span>, <span class="string">C3</span>, [<span class="number">64</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">128</span>, <span class="number">3</span>, <span class="number">2</span>]],  <span class="comment"># 5-P4/16 </span></span><br><span class="line">   [<span class="number">-1</span>, <span class="number">3</span>, <span class="string">C3</span>, [<span class="number">128</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">SPPF</span>, [<span class="number">256</span>, <span class="number">5</span>]],  <span class="comment"># 7</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># YOLOv5 v6.0 head</span></span><br><span class="line"><span class="attr">head:</span></span><br><span class="line">  [</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">Conv</span>, [<span class="number">128</span>, <span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line">   [<span class="number">-1</span>, <span class="number">1</span>, <span class="string">C3</span>, [<span class="number">128</span>, <span class="literal">False</span>]],  <span class="comment"># 9 (P4/16-medium)</span></span><br><span class="line"></span><br><span class="line">   [[<span class="number">9</span>], <span class="number">1</span>, <span class="string">Detect</span>, [<span class="string">nc</span>, <span class="string">anchors</span>]],  <span class="comment"># Detect(P4)</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yolox小目标检测改进（删除感受野大的特征图）</title>
    <link href="/2022/10/24/yolox%E5%B0%8F%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%94%B9%E8%BF%9B%EF%BC%88%E5%88%A0%E9%99%A4%E6%84%9F%E5%8F%97%E9%87%8E%E5%A4%A7%E7%9A%84%E7%89%B9%E5%BE%81%E5%9B%BE%EF%BC%89/"/>
    <url>/2022/10/24/yolox%E5%B0%8F%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%94%B9%E8%BF%9B%EF%BC%88%E5%88%A0%E9%99%A4%E6%84%9F%E5%8F%97%E9%87%8E%E5%A4%A7%E7%9A%84%E7%89%B9%E5%BE%81%E5%9B%BE%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>yolox中有3个检测分支，分别预测小、中、大的目标<br><img src="https://xinhaojin.github.io/imgs-host/20221010/41.png"><br>但在我的数据集上，并不需要预测大目标，甚至还要手动去掉错误的大预测框，因此有一个想法是去掉一个最深的检测分支，使网络预测大目标的能力下降，整体感受野变小，对小目标更加敏感。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>修改yolox&#x2F;models&#x2F;yolo_head.py</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">YOLOXHead</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        num_classes,</span></span><br><span class="line"><span class="params">        width=<span class="number">1.0</span>,</span></span><br><span class="line"><span class="params">        <span class="comment"># strides=[8, 16, 32],</span></span></span><br><span class="line"><span class="params">        <span class="comment"># in_channels=[256, 512, 1024],</span></span></span><br><span class="line"><span class="params">        strides=[<span class="number">8</span>, <span class="number">16</span>],</span></span><br><span class="line"><span class="params">        in_channels=[<span class="number">256</span>, <span class="number">512</span>],</span></span><br><span class="line"><span class="params">        act=<span class="string">&quot;silu&quot;</span>,</span></span><br><span class="line"><span class="params">        depthwise=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            act (str): activation type of conv. Defalut value: &quot;silu&quot;.</span></span><br><span class="line"><span class="string">            depthwise (bool): whether apply depthwise conv in conv branch. Defalut value: False.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br></pre></td></tr></table></figure><p><strong>修改yolox&#x2F;models&#x2F;darknet.py</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CSPDarknet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        dep_mul,</span></span><br><span class="line"><span class="params">        wid_mul,</span></span><br><span class="line"><span class="params">        out_features=(<span class="params"><span class="string">&quot;dark3&quot;</span>, <span class="string">&quot;dark4&quot;</span></span>),</span></span><br><span class="line"><span class="params">        <span class="comment"># out_features=(&quot;dark3&quot;, &quot;dark4&quot;, &quot;dark5&quot;),</span></span></span><br><span class="line"><span class="params">        depthwise=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">        act=<span class="string">&quot;silu&quot;</span>,</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">    <span class="comment">#......</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        outputs = &#123;&#125;</span><br><span class="line">        x = <span class="variable language_">self</span>.stem(x)</span><br><span class="line">        outputs[<span class="string">&quot;stem&quot;</span>] = x</span><br><span class="line">        x = <span class="variable language_">self</span>.dark2(x)</span><br><span class="line">        outputs[<span class="string">&quot;dark2&quot;</span>] = x</span><br><span class="line">        x = <span class="variable language_">self</span>.dark3(x)</span><br><span class="line">        outputs[<span class="string">&quot;dark3&quot;</span>] = x</span><br><span class="line">        x = <span class="variable language_">self</span>.dark4(x)</span><br><span class="line">        outputs[<span class="string">&quot;dark4&quot;</span>] = x</span><br><span class="line">        <span class="comment"># x = self.dark5(x)</span></span><br><span class="line">        <span class="comment"># outputs[&quot;dark5&quot;] = x</span></span><br><span class="line">        <span class="keyword">return</span> &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> outputs.items() <span class="keyword">if</span> k <span class="keyword">in</span> <span class="variable language_">self</span>.out_features&#125;</span><br></pre></td></tr></table></figure><p><strong>修改yolox&#x2F;models&#x2F;yolo_pafpn.py</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">YOLOPAFPN</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    YOLOv3 model. Darknet 53 is the default backbone of this model.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        depth=<span class="number">1.0</span>,</span></span><br><span class="line"><span class="params">        width=<span class="number">1.0</span>,</span></span><br><span class="line"><span class="params">        <span class="comment"># in_features=(&quot;dark3&quot;, &quot;dark4&quot;, &quot;dark5&quot;),</span></span></span><br><span class="line"><span class="params">        <span class="comment"># in_channels=[256, 512, 1024],</span></span></span><br><span class="line"><span class="params">        in_features=(<span class="params"><span class="string">&quot;dark3&quot;</span>, <span class="string">&quot;dark4&quot;</span></span>),</span></span><br><span class="line"><span class="params">        in_channels=[<span class="number">256</span>, <span class="number">512</span>],</span></span><br><span class="line"><span class="params">        depthwise=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">        act=<span class="string">&quot;silu&quot;</span>,</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.backbone = CSPDarknet(depth, width, depthwise=depthwise, act=act)</span><br><span class="line">        <span class="variable language_">self</span>.in_features = in_features</span><br><span class="line">        <span class="variable language_">self</span>.in_channels = in_channels</span><br><span class="line">        Conv = DWConv <span class="keyword">if</span> depthwise <span class="keyword">else</span> BaseConv</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.upsample = nn.Upsample(scale_factor=<span class="number">2</span>, mode=<span class="string">&quot;nearest&quot;</span>)</span><br><span class="line">        <span class="comment"># self.lateral_conv0 = BaseConv(</span></span><br><span class="line">        <span class="comment">#     int(in_channels[2] * width), int(in_channels[1] * width), 1, 1, act=act</span></span><br><span class="line">        <span class="comment"># )</span></span><br><span class="line">        <span class="comment"># self.C3_p4 = CSPLayer(</span></span><br><span class="line">        <span class="comment">#     int(2 * in_channels[1] * width),</span></span><br><span class="line">        <span class="comment">#     int(in_channels[1] * width),</span></span><br><span class="line">        <span class="comment">#     round(3 * depth),</span></span><br><span class="line">        <span class="comment">#     False,</span></span><br><span class="line">        <span class="comment">#     depthwise=depthwise,</span></span><br><span class="line">        <span class="comment">#     act=act,</span></span><br><span class="line">        <span class="comment"># )  # cat</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.reduce_conv1 = BaseConv(</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">1</span>] * width), <span class="built_in">int</span>(in_channels[<span class="number">0</span>] * width), <span class="number">1</span>, <span class="number">1</span>, act=act</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.C3_p3 = CSPLayer(</span><br><span class="line">            <span class="built_in">int</span>(<span class="number">2</span> * in_channels[<span class="number">0</span>] * width),</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">0</span>] * width),</span><br><span class="line">            <span class="built_in">round</span>(<span class="number">3</span> * depth),</span><br><span class="line">            <span class="literal">False</span>,</span><br><span class="line">            depthwise=depthwise,</span><br><span class="line">            act=act,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># bottom-up conv</span></span><br><span class="line">        <span class="variable language_">self</span>.bu_conv2 = Conv(</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">0</span>] * width), <span class="built_in">int</span>(in_channels[<span class="number">0</span>] * width), <span class="number">3</span>, <span class="number">2</span>, act=act</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.C3_n3 = CSPLayer(</span><br><span class="line">            <span class="built_in">int</span>(<span class="number">2</span> * in_channels[<span class="number">0</span>] * width),</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">1</span>] * width),</span><br><span class="line">            <span class="built_in">round</span>(<span class="number">3</span> * depth),</span><br><span class="line">            <span class="literal">False</span>,</span><br><span class="line">            depthwise=depthwise,</span><br><span class="line">            act=act,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># bottom-up conv</span></span><br><span class="line">        <span class="comment"># self.bu_conv1 = Conv(</span></span><br><span class="line">        <span class="comment">#     int(in_channels[1] * width), int(in_channels[1] * width), 3, 2, act=act</span></span><br><span class="line">        <span class="comment"># )</span></span><br><span class="line">        <span class="comment"># self.C3_n4 = CSPLayer(</span></span><br><span class="line">        <span class="comment">#     int(2 * in_channels[1] * width),</span></span><br><span class="line">        <span class="comment">#     int(in_channels[2] * width),</span></span><br><span class="line">        <span class="comment">#     round(3 * depth),</span></span><br><span class="line">        <span class="comment">#     False,</span></span><br><span class="line">        <span class="comment">#     depthwise=depthwise,</span></span><br><span class="line">        <span class="comment">#     act=act,</span></span><br><span class="line">        <span class="comment"># )</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            inputs: input images.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Tuple[Tensor]: FPN feature.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#  backbone</span></span><br><span class="line">        out_features = <span class="variable language_">self</span>.backbone(<span class="built_in">input</span>)</span><br><span class="line">        features = [out_features[f] <span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable language_">self</span>.in_features]</span><br><span class="line">        <span class="comment">#[x2, x1, x0] = features</span></span><br><span class="line">        [x2,x1] = features<span class="comment">#256,512</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># fpn_out0 = self.lateral_conv0(x0)  # 1024-&gt;512/32</span></span><br><span class="line">        <span class="comment"># f_out0 = self.upsample(fpn_out0)  # 512/16</span></span><br><span class="line">        <span class="comment"># f_out0 = torch.cat([f_out0, x1], 1)  # 512-&gt;1024/16</span></span><br><span class="line">        <span class="comment"># f_out0 = self.C3_p4(f_out0)  # 1024-&gt;512/16</span></span><br><span class="line"></span><br><span class="line">        fpn_out1 = <span class="variable language_">self</span>.reduce_conv1(x1)  <span class="comment"># 512-&gt;256/16</span></span><br><span class="line">        <span class="comment"># fpn_out1 = self.reduce_conv1(f_out0)  # 512-&gt;256/16</span></span><br><span class="line">        f_out1 = <span class="variable language_">self</span>.upsample(fpn_out1)  <span class="comment"># 256/8</span></span><br><span class="line">        f_out1 = torch.cat([f_out1, x2], <span class="number">1</span>)  <span class="comment"># 256-&gt;512/8</span></span><br><span class="line">        pan_out2 = <span class="variable language_">self</span>.C3_p3(f_out1)  <span class="comment"># 512-&gt;256/8</span></span><br><span class="line"></span><br><span class="line">        p_out1 = <span class="variable language_">self</span>.bu_conv2(pan_out2)  <span class="comment"># 256-&gt;256/16</span></span><br><span class="line">        p_out1 = torch.cat([p_out1, fpn_out1], <span class="number">1</span>)  <span class="comment"># 256-&gt;512/16</span></span><br><span class="line">        pan_out1 = <span class="variable language_">self</span>.C3_n3(p_out1)  <span class="comment"># 512-&gt;512/16</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># p_out0 = self.bu_conv1(pan_out1)  # 512-&gt;512/32</span></span><br><span class="line">        <span class="comment"># p_out0 = torch.cat([p_out0, fpn_out0], 1)  # 512-&gt;1024/32</span></span><br><span class="line">        <span class="comment"># pan_out0 = self.C3_n4(p_out0)  # 1024-&gt;1024/32</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># outputs = (pan_out2, pan_out1, pan_out0)</span></span><br><span class="line">        outputs = (pan_out2, pan_out1)</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure><p><strong>修改yolox&#x2F;exp&#x2F;yolox_base.py</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Exp</span>(<span class="title class_ inherited__">BaseExp</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ---------------- model config ---------------- #</span></span><br><span class="line">        <span class="comment">#......</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_model</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">from</span> yolox.models <span class="keyword">import</span> YOLOX, YOLOPAFPN, YOLOXHead</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">init_yolo</span>(<span class="params">M</span>):</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> M.modules():</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">                    m.eps = <span class="number">1e-3</span></span><br><span class="line">                    m.momentum = <span class="number">0.03</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">getattr</span>(<span class="variable language_">self</span>, <span class="string">&quot;model&quot;</span>, <span class="literal">None</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            in_channels = [<span class="number">256</span>, <span class="number">512</span>]</span><br><span class="line">            <span class="comment"># in_channels = [256, 512, 1024]</span></span><br><span class="line">            backbone = YOLOPAFPN(<span class="variable language_">self</span>.depth, <span class="variable language_">self</span>.width, in_channels=in_channels, act=<span class="variable language_">self</span>.act)</span><br><span class="line">            head = YOLOXHead(<span class="variable language_">self</span>.num_classes, <span class="variable language_">self</span>.width, in_channels=in_channels, act=<span class="variable language_">self</span>.act)</span><br><span class="line">            <span class="variable language_">self</span>.model = YOLOX(backbone, head)</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>使用tiny模型，没有AP提升，也没有明显下降，但模型减小了近一半，是有效的改进。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://blog.csdn.net/qq_45207837/article/details/124840732">https://blog.csdn.net/qq_45207837&#x2F;article&#x2F;details&#x2F;124840732</a></p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yolox添加注意力机制</title>
    <link href="/2022/10/24/yolox%E6%B7%BB%E5%8A%A0%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/10/24/yolox%E6%B7%BB%E5%8A%A0%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_43114108/article/details/126533757">原文链接</a></p><h2 id="Coordinate-Attention"><a href="#Coordinate-Attention" class="headerlink" title="Coordinate Attention"></a>Coordinate Attention</h2><p><a href="http://arxiv.org/abs/2103.02907">论文来源</a></p><p><a href="https://github.com/Andrew-Qibin/CoordAttention">官方代码</a></p><p>注意力机制广泛用于深度神经网络中来提高模型的性能。然而，因为其昂贵的计算代价，很难应用在一些轻量级网络，但不乏有一些注意力模块脱颖而出，具有代表性的有SE、CBAM等。SE模块通过2D全局池化来计算通道注意力，在非常低的计算成本下达到了提升网络性能的目的，遗憾的是，SE模块忽视了捕获位置信息的注意力；CBAM模块通过使用大尺寸卷积来获得位置信息的注意力，但只偏向于捕获局部的位置信息。<br>CAM模块来源于2021CVPR，该模块通过将位置信息嵌入到通道注意力中，因为其较少的计算代价，使轻量级网可以较大的区域中获得注意力。为了缓解位置信息丢失的问题，论文作者将2D全局池化替换成分别在特征的w和h并行提取特征的两个1D池化，可以有效捕获空间坐标信息；而后这两个并行的特征图通过两个卷积来生成两个独立方向的注意力图；通过将两个注意力图乘入到原始特征图中，以达到增强特征图的表征能力。<br><img src="https://xinhaojin.github.io/imgs-host/20221019/xxx.44vbajj18g40.png"></p><h2 id="在yolox-models-下添加attention-py"><a href="#在yolox-models-下添加attention-py" class="headerlink" title="在yolox&#x2F;models&#x2F;下添加attention.py"></a>在yolox&#x2F;models&#x2F;下添加attention.py</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAM</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, channels, reduction=<span class="number">32</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(CAM, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv_1x1 = nn.Conv2d(in_channels=channels, out_channels=channels // reduction, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>,</span><br><span class="line">                                  bias=<span class="literal">False</span>)                      </span><br><span class="line">        <span class="variable language_">self</span>.mish = nn.Mish() <span class="comment"># 可用自行选择激活函数</span></span><br><span class="line">        <span class="variable language_">self</span>.bn = nn.BatchNorm2d(channels // reduction)  </span><br><span class="line">        <span class="variable language_">self</span>.F_h = nn.Conv2d(in_channels=channels // reduction, out_channels=channels, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.F_w = nn.Conv2d(in_channels=channels // reduction, out_channels=channels, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, bias=<span class="literal">False</span>)  </span><br><span class="line">        <span class="variable language_">self</span>.sigmoid_h = nn.Sigmoid() </span><br><span class="line">        <span class="variable language_">self</span>.sigmoid_w = nn.Sigmoid()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        h, w = x.shape[<span class="number">2</span>], x.shape[<span class="number">3</span>]</span><br><span class="line">        avg_pool_x = nn.AdaptiveAvgPool2d((h, <span class="number">1</span>))</span><br><span class="line">        avg_pool_y = nn.AdaptiveAvgPool2d((<span class="number">1</span>, w))</span><br><span class="line">        x_h = avg_pool_x(x).permute(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>) </span><br><span class="line">        x_w = avg_pool_y(x)  </span><br><span class="line">        x_cat_conv_relu = <span class="variable language_">self</span>.mish(<span class="variable language_">self</span>.conv_1x1(torch.cat((x_h, x_w), <span class="number">3</span>))) </span><br><span class="line">        x_cat_conv_split_h, x_cat_conv_split_w = x_cat_conv_relu.split([h, w], <span class="number">3</span>)</span><br><span class="line">        s_h = <span class="variable language_">self</span>.sigmoid_h(<span class="variable language_">self</span>.F_h(x_cat_conv_split_h.permute(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)))</span><br><span class="line">        s_w = <span class="variable language_">self</span>.sigmoid_w(<span class="variable language_">self</span>.F_w(x_cat_conv_split_w))</span><br><span class="line">        out = x * s_h.expand_as(x) * s_w.expand_as(x)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><h2 id="在yolox-models-yolo-pafpn-py中添加CAM"><a href="#在yolox-models-yolo-pafpn-py中添加CAM" class="headerlink" title="在yolox&#x2F;models&#x2F;yolo_pafpn.py中添加CAM"></a>在yolox&#x2F;models&#x2F;yolo_pafpn.py中添加CAM</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Copyright (c) 2014-2021 Megvii Inc. All rights reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .darknet <span class="keyword">import</span> CSPDarknet</span><br><span class="line"><span class="keyword">from</span> .network_blocks <span class="keyword">import</span> BaseConv, CSPLayer, DWConv</span><br><span class="line"><span class="keyword">from</span> .attention <span class="keyword">import</span> CAM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YOLOPAFPN</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    YOLOv3 model. Darknet 53 is the default backbone of this model.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        depth=<span class="number">1.0</span>,</span></span><br><span class="line"><span class="params">        width=<span class="number">1.0</span>,</span></span><br><span class="line"><span class="params">        in_features=(<span class="params"><span class="string">&quot;dark3&quot;</span>, <span class="string">&quot;dark4&quot;</span>, <span class="string">&quot;dark5&quot;</span></span>),</span></span><br><span class="line"><span class="params">        in_channels=[<span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>],</span></span><br><span class="line"><span class="params">        depthwise=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">        act=<span class="string">&quot;silu&quot;</span>,</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.backbone = CSPDarknet(depth, width, depthwise=depthwise, act=act)</span><br><span class="line">        <span class="variable language_">self</span>.in_features = in_features</span><br><span class="line">        <span class="variable language_">self</span>.in_channels = in_channels</span><br><span class="line">        Conv = DWConv <span class="keyword">if</span> depthwise <span class="keyword">else</span> BaseConv</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.upsample = nn.Upsample(scale_factor=<span class="number">2</span>, mode=<span class="string">&quot;nearest&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lateral_conv0 = BaseConv(</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">2</span>] * width), <span class="built_in">int</span>(in_channels[<span class="number">1</span>] * width), <span class="number">1</span>, <span class="number">1</span>, act=act</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.C3_p4 = CSPLayer(</span><br><span class="line">            <span class="built_in">int</span>(<span class="number">2</span> * in_channels[<span class="number">1</span>] * width),</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">1</span>] * width),</span><br><span class="line">            <span class="built_in">round</span>(<span class="number">3</span> * depth),</span><br><span class="line">            <span class="literal">False</span>,</span><br><span class="line">            depthwise=depthwise,</span><br><span class="line">            act=act,</span><br><span class="line">        )  <span class="comment"># cat</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.reduce_conv1 = BaseConv(</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">1</span>] * width), <span class="built_in">int</span>(in_channels[<span class="number">0</span>] * width), <span class="number">1</span>, <span class="number">1</span>, act=act</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.C3_p3 = CSPLayer(</span><br><span class="line">            <span class="built_in">int</span>(<span class="number">2</span> * in_channels[<span class="number">0</span>] * width),</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">0</span>] * width),</span><br><span class="line">            <span class="built_in">round</span>(<span class="number">3</span> * depth),</span><br><span class="line">            <span class="literal">False</span>,</span><br><span class="line">            depthwise=depthwise,</span><br><span class="line">            act=act,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># bottom-up conv</span></span><br><span class="line">        <span class="variable language_">self</span>.bu_conv2 = Conv(</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">0</span>] * width), <span class="built_in">int</span>(in_channels[<span class="number">0</span>] * width), <span class="number">3</span>, <span class="number">2</span>, act=act</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.C3_n3 = CSPLayer(</span><br><span class="line">            <span class="built_in">int</span>(<span class="number">2</span> * in_channels[<span class="number">0</span>] * width),</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">1</span>] * width),</span><br><span class="line">            <span class="built_in">round</span>(<span class="number">3</span> * depth),</span><br><span class="line">            <span class="literal">False</span>,</span><br><span class="line">            depthwise=depthwise,</span><br><span class="line">            act=act,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># bottom-up conv</span></span><br><span class="line">        <span class="variable language_">self</span>.bu_conv1 = Conv(</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">1</span>] * width), <span class="built_in">int</span>(in_channels[<span class="number">1</span>] * width), <span class="number">3</span>, <span class="number">2</span>, act=act</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.C3_n4 = CSPLayer(</span><br><span class="line">            <span class="built_in">int</span>(<span class="number">2</span> * in_channels[<span class="number">1</span>] * width),</span><br><span class="line">            <span class="built_in">int</span>(in_channels[<span class="number">2</span>] * width),</span><br><span class="line">            <span class="built_in">round</span>(<span class="number">3</span> * depth),</span><br><span class="line">            <span class="literal">False</span>,</span><br><span class="line">            depthwise=depthwise,</span><br><span class="line">            act=act,</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">##################################################</span></span><br><span class="line">        <span class="variable language_">self</span>.CAM0 = CAM(<span class="built_in">int</span>(in_channels[<span class="number">2</span>] * width))</span><br><span class="line">        <span class="variable language_">self</span>.CAM1 = CAM(<span class="built_in">int</span>(in_channels[<span class="number">1</span>] * width))</span><br><span class="line">        <span class="variable language_">self</span>.CAM2 = CAM(<span class="built_in">int</span>(in_channels[<span class="number">0</span>] * width))</span><br><span class="line">        <span class="comment">##################################################</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            inputs: input images.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Tuple[Tensor]: FPN feature.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#  backbone</span></span><br><span class="line">        out_features = <span class="variable language_">self</span>.backbone(<span class="built_in">input</span>)</span><br><span class="line">        features = [out_features[f] <span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable language_">self</span>.in_features]</span><br><span class="line">        [x2, x1, x0] = features</span><br><span class="line">        <span class="comment">##################################################</span></span><br><span class="line">        x0 = <span class="variable language_">self</span>.CAM0(x0)</span><br><span class="line">        x1 = <span class="variable language_">self</span>.CAM1(x1)</span><br><span class="line">        x2 = <span class="variable language_">self</span>.CAM2(x2)</span><br><span class="line">        <span class="comment">##################################################</span></span><br><span class="line"></span><br><span class="line">        fpn_out0 = <span class="variable language_">self</span>.lateral_conv0(x0)  <span class="comment"># 1024-&gt;512/32</span></span><br><span class="line">        f_out0 = <span class="variable language_">self</span>.upsample(fpn_out0)  <span class="comment"># 512/16</span></span><br><span class="line">        f_out0 = torch.cat([f_out0, x1], <span class="number">1</span>)  <span class="comment"># 512-&gt;1024/16</span></span><br><span class="line">        f_out0 = <span class="variable language_">self</span>.C3_p4(f_out0)  <span class="comment"># 1024-&gt;512/16</span></span><br><span class="line"></span><br><span class="line">        fpn_out1 = <span class="variable language_">self</span>.reduce_conv1(f_out0)  <span class="comment"># 512-&gt;256/16</span></span><br><span class="line">        f_out1 = <span class="variable language_">self</span>.upsample(fpn_out1)  <span class="comment"># 256/8</span></span><br><span class="line">        f_out1 = torch.cat([f_out1, x2], <span class="number">1</span>)  <span class="comment"># 256-&gt;512/8</span></span><br><span class="line">        pan_out2 = <span class="variable language_">self</span>.C3_p3(f_out1)  <span class="comment"># 512-&gt;256/8</span></span><br><span class="line"></span><br><span class="line">        p_out1 = <span class="variable language_">self</span>.bu_conv2(pan_out2)  <span class="comment"># 256-&gt;256/16</span></span><br><span class="line">        p_out1 = torch.cat([p_out1, fpn_out1], <span class="number">1</span>)  <span class="comment"># 256-&gt;512/16</span></span><br><span class="line">        pan_out1 = <span class="variable language_">self</span>.C3_n3(p_out1)  <span class="comment"># 512-&gt;512/16</span></span><br><span class="line"></span><br><span class="line">        p_out0 = <span class="variable language_">self</span>.bu_conv1(pan_out1)  <span class="comment"># 512-&gt;512/32</span></span><br><span class="line">        p_out0 = torch.cat([p_out0, fpn_out0], <span class="number">1</span>)  <span class="comment"># 512-&gt;1024/32</span></span><br><span class="line">        pan_out0 = <span class="variable language_">self</span>.C3_n4(p_out0)  <span class="comment"># 1024-&gt;1024/32</span></span><br><span class="line"></span><br><span class="line">        outputs = (pan_out2, pan_out1, pan_out0)</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure><h2 id="其他注意力机制（SE、CBAM、ECA）同理，代码如下-插入使用方法相同"><a href="#其他注意力机制（SE、CBAM、ECA）同理，代码如下-插入使用方法相同" class="headerlink" title="其他注意力机制（SE、CBAM、ECA）同理，代码如下,插入使用方法相同"></a>其他注意力机制（SE、CBAM、ECA）同理，代码如下,插入使用方法相同</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAM</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, channels, reduction=<span class="number">32</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(CAM, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv_1x1 = nn.Conv2d(in_channels=channels, out_channels=channels // reduction, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>,</span><br><span class="line">                                  bias=<span class="literal">False</span>)                      </span><br><span class="line">        <span class="variable language_">self</span>.mish = nn.Mish() <span class="comment"># 可用自行选择激活函数</span></span><br><span class="line">        <span class="variable language_">self</span>.bn = nn.BatchNorm2d(channels // reduction)  </span><br><span class="line">        <span class="variable language_">self</span>.F_h = nn.Conv2d(in_channels=channels // reduction, out_channels=channels, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.F_w = nn.Conv2d(in_channels=channels // reduction, out_channels=channels, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, bias=<span class="literal">False</span>)  </span><br><span class="line">        <span class="variable language_">self</span>.sigmoid_h = nn.Sigmoid() </span><br><span class="line">        <span class="variable language_">self</span>.sigmoid_w = nn.Sigmoid()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        h, w = x.shape[<span class="number">2</span>], x.shape[<span class="number">3</span>]</span><br><span class="line">        avg_pool_x = nn.AdaptiveAvgPool2d((h, <span class="number">1</span>))</span><br><span class="line">        avg_pool_y = nn.AdaptiveAvgPool2d((<span class="number">1</span>, w))</span><br><span class="line">        x_h = avg_pool_x(x).permute(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>) </span><br><span class="line">        x_w = avg_pool_y(x)  </span><br><span class="line">        x_cat_conv_relu = <span class="variable language_">self</span>.mish(<span class="variable language_">self</span>.conv_1x1(torch.cat((x_h, x_w), <span class="number">3</span>))) </span><br><span class="line">        x_cat_conv_split_h, x_cat_conv_split_w = x_cat_conv_relu.split([h, w], <span class="number">3</span>)</span><br><span class="line">        s_h = <span class="variable language_">self</span>.sigmoid_h(<span class="variable language_">self</span>.F_h(x_cat_conv_split_h.permute(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)))</span><br><span class="line">        s_w = <span class="variable language_">self</span>.sigmoid_w(<span class="variable language_">self</span>.F_w(x_cat_conv_split_w))</span><br><span class="line">        out = x * s_h.expand_as(x) * s_w.expand_as(x)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SE</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, channel, ratio=<span class="number">16</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(SE, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.avg_pool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc = nn.Sequential(</span><br><span class="line">                nn.Linear(channel, channel // ratio, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">                nn.Linear(channel // ratio, channel, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.Sigmoid()</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        b, c, _, _ = x.size()</span><br><span class="line">        y = <span class="variable language_">self</span>.avg_pool(x).view(b, c)</span><br><span class="line">        y = <span class="variable language_">self</span>.fc(y).view(b, c, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECA</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, channel, b=<span class="number">1</span>, gamma=<span class="number">2</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(ECA, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        kernel_size = <span class="built_in">int</span>(<span class="built_in">abs</span>((math.log(channel, <span class="number">2</span>) + b) / gamma))</span><br><span class="line">        kernel_size = kernel_size <span class="keyword">if</span> kernel_size % <span class="number">2</span> <span class="keyword">else</span> kernel_size + <span class="number">1</span></span><br><span class="line">      </span><br><span class="line">        <span class="variable language_">self</span>.avg_pool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv = nn.Conv1d(<span class="number">1</span>, <span class="number">1</span>, kernel_size=kernel_size, padding=(kernel_size - <span class="number">1</span>) // <span class="number">2</span>, bias=<span class="literal">False</span>) </span><br><span class="line">        <span class="variable language_">self</span>.sigmoid = nn.Sigmoid()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        y = <span class="variable language_">self</span>.avg_pool(x)</span><br><span class="line">        y = <span class="variable language_">self</span>.conv(y.squeeze(-<span class="number">1</span>).transpose(-<span class="number">1</span>, -<span class="number">2</span>)).transpose(-<span class="number">1</span>, -<span class="number">2</span>).unsqueeze(-<span class="number">1</span>)</span><br><span class="line">        y = <span class="variable language_">self</span>.sigmoid(y)</span><br><span class="line">        <span class="keyword">return</span> x * y.expand_as(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChannelAttention</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_planes, ratio=<span class="number">8</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(ChannelAttention, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.avg_pool = nn.AdaptiveAvgPool2d(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.max_pool = nn.AdaptiveMaxPool2d(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 利用1x1卷积代替全连接</span></span><br><span class="line">        <span class="variable language_">self</span>.fc1   = nn.Conv2d(in_planes, in_planes // ratio, <span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.relu1 = nn.ReLU()</span><br><span class="line">        <span class="variable language_">self</span>.fc2   = nn.Conv2d(in_planes // ratio, in_planes, <span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sigmoid = nn.Sigmoid()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        avg_out = <span class="variable language_">self</span>.fc2(<span class="variable language_">self</span>.relu1(<span class="variable language_">self</span>.fc1(<span class="variable language_">self</span>.avg_pool(x))))</span><br><span class="line">        max_out = <span class="variable language_">self</span>.fc2(<span class="variable language_">self</span>.relu1(<span class="variable language_">self</span>.fc1(<span class="variable language_">self</span>.max_pool(x))))</span><br><span class="line">        out = avg_out + max_out</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.sigmoid(out)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpatialAttention</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, kernel_size=<span class="number">7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(SpatialAttention, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="keyword">assert</span> kernel_size <span class="keyword">in</span> (<span class="number">3</span>, <span class="number">7</span>), <span class="string">&#x27;kernel size must be 3 or 7&#x27;</span></span><br><span class="line">        padding = <span class="number">3</span> <span class="keyword">if</span> kernel_size == <span class="number">7</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">2</span>, <span class="number">1</span>, kernel_size, padding=padding, bias=<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sigmoid = nn.Sigmoid()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        avg_out = torch.mean(x, dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">        max_out, _ = torch.<span class="built_in">max</span>(x, dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">        x = torch.cat([avg_out, max_out], dim=<span class="number">1</span>)</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.sigmoid(x)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CBAM</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, channel, ratio=<span class="number">8</span>, kernel_size=<span class="number">7</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(CBAM, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.channelattention = ChannelAttention(channel, ratio=ratio)</span><br><span class="line">        <span class="variable language_">self</span>.spatialattention = SpatialAttention(kernel_size=kernel_size)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = x*<span class="variable language_">self</span>.channelattention(x)</span><br><span class="line">        x = x*<span class="variable language_">self</span>.spatialattention(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>试验了两个数据集，这些注意力机制通常都有零点几的AP提升，但不会有太大的作用。</p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yolo主流版本介绍(v1-v7)</title>
    <link href="/2022/10/08/yolo%E7%B3%BB%E5%88%97%E7%BB%BC%E8%BF%B0(v1-v7)/"/>
    <url>/2022/10/08/yolo%E7%B3%BB%E5%88%97%E7%BB%BC%E8%BF%B0(v1-v7)/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍目标检测yolo系列主流版本的发展。</p><h3 id="目标检测评价指标"><a href="#目标检测评价指标" class="headerlink" title="目标检测评价指标"></a>目标检测评价指标</h3><h4 id="IOU"><a href="#IOU" class="headerlink" title="IOU"></a>IOU</h4><p>真实框和预测框之间的交并比。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/4.png"></p><h4 id="精确度"><a href="#精确度" class="headerlink" title="精确度"></a>精确度</h4><p>预测为正例的那些数据里预测正确的比例。</p><h4 id="召回率"><a href="#召回率" class="headerlink" title="召回率"></a>召回率</h4><p>真实为正例的那些数据里预测正确的比例。</p><h4 id="AP"><a href="#AP" class="headerlink" title="AP"></a>AP</h4><p>不同的置信度阈值对应不同的检测结果，对应一组精确度和召回率，计算合成的面积<br><img src="https://xinhaojin.github.io/imgs-host/20221010/18.png"></p><h4 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h4><p>MAP是不同类别的平均AP。</p><h2 id="YOLOv1"><a href="#YOLOv1" class="headerlink" title="YOLOv1"></a>YOLOv1</h2><p><a href="https://arxiv.org/abs/1506.02640">paper(CVPR2015)</a></p><p>You only look once,one-stage方法,把目标检测问题直接转化成CNN回归问题（预测数值）。</p><p><strong>思考一个问题：</strong> 怎么表示一个位置框(目标)？<br>x,y,w,h,conf,class<br><img src="https://xinhaojin.github.io/imgs-host/20221010/7.png"></p><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>将一幅图像分成7x7个网格(grid cell),如果某个object的中心落在这个网格中，则这个网格就负责预测这个object。<br>每个网格要预测2个bounding box(指定长宽比例的预选框)，每个bounding box除了要预测位置之外，还要附带预测一个confidence值。每个网格还要预测20个类别的概率。</p><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><p><img src="https://xinhaojin.github.io/imgs-host/20221010/19.png"><br>输入：448<em>448</em>3<code>&lt;br&gt;</code><br>经过卷积池化卷积池化…全连接<code>&lt;br&gt;</code><br>输出：7<em>7</em>30<code>&lt;br&gt;</code><br>7<em>7：格子<code>&lt;br&gt;</code><br>30&#x3D;20+5</em>2<code>&lt;br&gt;</code><br>20：类别<code>&lt;br&gt;</code><br>5：x,y,w,h,conf<code>&lt;br&gt;</code><br>2：两个预选框<code>&lt;br&gt;</code><br><strong>疑问:</strong> 神经网络怎么知道每个值代表什么意思?<br>设计合适的损失函数。</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>bounding box损失、confidence损失和classes损失。在计算损失时主要都是用的误差平方和求解。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/20.png"><br><img src="https://xinhaojin.github.io/imgs-host/20221010/17.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>优点：快速，简单</p><p>缺点：每个cell只能预测一个类别，重叠问题无法解决；<br>小物体检测效果一般；无法应对新尺寸目标；定位不准确</p><h2 id="YOLOv2-YOLO9000"><a href="#YOLOv2-YOLO9000" class="headerlink" title="YOLOv2&#x2F;YOLO9000"></a>YOLOv2&#x2F;YOLO9000</h2><p><a href="https://arxiv.org/abs/1612.08242">paper(CVPR2016)</a></p><p>在v1基础上做的改进</p><h3 id="批标准化"><a href="#批标准化" class="headerlink" title="批标准化"></a>批标准化</h3><p>V2版本舍弃Dropout，卷积后全部加入Batch Normalization，网络的每一层的输入都做了归一化，收敛相对更容易，经过Batch Normalization处理后的网络会提升2%的mAP，从现在的角度来看，Batch Normalization已经成网络必备处理。</p><h3 id="更大的输入尺寸"><a href="#更大的输入尺寸" class="headerlink" title="更大的输入尺寸"></a>更大的输入尺寸</h3><p>在YOLOv1中训练分类器时使用的是224×244的输入，而在 YOLOv2中作者采用了448×448的尺寸作为输入，论文总表明，采用更大的分辨率作为输入可以得到MAP值4%的提升。</p><h3 id="引入锚框"><a href="#引入锚框" class="headerlink" title="引入锚框"></a>引入锚框</h3><p>YOLOv1用全连接层预测边界框的中心坐标、宽度和高度，使用这种方式定位效果比较差，所以在YOLOv2中作者采用anchor进行目标框的预测，使得预测的box数量更多。弃用了全连接层，使用5次下采样，得到13<em>13(实际输入是416</em>416,416&#x3D;13*2^5)，相比全连接节省了参数，可以使网络更容易学习和收敛。</p><h3 id="聚类得到先验框"><a href="#聚类得到先验框" class="headerlink" title="聚类得到先验框"></a>聚类得到先验框</h3><p>引入anchor后的问题1：怎么确定先验框的尺寸和比例？<br><img src="https://xinhaojin.github.io/imgs-host/20221010/21.png"></p><p>把训练集的标注框进行kmeans聚类，k&#x3D;5。距离的定义是D&#x3D;1-IOU。避免了大的框误差就大的情况。</p><h3 id="直接位置预测"><a href="#直接位置预测" class="headerlink" title="直接位置预测"></a>直接位置预测</h3><p>引入anchor后的问题2：直接使用anchor进行预测时发现，在训练模型的时候训练不稳定。通过观察发现训练初始阶段不稳定因素来自中心坐标的预测部分导致，所以yolov2规定了中心点不能乱飘出格子。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/22.png"></p><h3 id="多尺度训练"><a href="#多尺度训练" class="headerlink" title="多尺度训练"></a>多尺度训练</h3><p>实际图片尺寸多变，不可能都resize成416*416。每训练10批次，就随机改变一次图像尺寸，最小320，最大608。使网络能够适应不同输入尺寸的图片。</p><h3 id="特征图融合"><a href="#特征图融合" class="headerlink" title="特征图融合"></a>特征图融合</h3><p>在网络中，前段256<em>256的特征图适合预测小目标，后段13</em>13的特征图适合预测大目标，因为感受野不同。</p><p><strong>感受野</strong>：特征图上的一个点能看到原始图像上多大的区域。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/23.png"><br>最后一层的感受野太大了，容易丢失小目标，所以需要融合之前的特征层，reshape后叠加。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/24.png"></p><h3 id="网络结构-1"><a href="#网络结构-1" class="headerlink" title="网络结构"></a>网络结构</h3><p>采用了Darknet19网络结构，实际的size和图不一样。<br>输入416<em>416</em>3,输出13<em>13</em>1024<br><img src="https://xinhaojin.github.io/imgs-host/20221010/25.png"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>YOLOv2对YOLOv1的缺陷进行优化，大幅度高了检测的性能，但仍存在一定的问题，如无法解决重叠问题的分类等。</p><h2 id="YOLOv3"><a href="#YOLOv3" class="headerlink" title="YOLOv3"></a>YOLOv3</h2><p><a href="https://arxiv.org/abs/1804.02767">paper(CVPR2018)</a></p><p><a href="https://github.com/ultralytics/yolov3">code</a><br><img src="https://xinhaojin.github.io/imgs-host/20221010/26.png"></p><h3 id="网络结构-2"><a href="#网络结构-2" class="headerlink" title="网络结构"></a>网络结构</h3><p>主干网络:全卷积网络DarkNet-53，53层卷积层。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/28.png"></p><h4 id="残差连接"><a href="#残差连接" class="headerlink" title="残差连接"></a>残差连接</h4><p>Resnet思想：传统的卷积网络或者全连接网络在信息传递的时候或多或少会存在信息丢失，损耗等问题，同时还有导致梯度消失或者梯度爆炸，导致很深的网络无法训练。Resnet在网络中增加了直连通道，允许原始输入信息直接传到后面的层中，看图非常明显，也就是如果后面的层性能不好，可以忽略。</p><p><img src="https://xinhaojin.github.io/imgs-host/20221010/27.png"></p><h3 id="多scale特征融合"><a href="#多scale特征融合" class="headerlink" title="多scale特征融合"></a>多scale特征融合</h3><p>随着卷积网络的不断深入，深层卷积得到的特征图语义信息越抽象，从而使小目标的特征信息容易丢失。YOLOv3借鉴特征金字塔网络结构（FPN，feature pyramid networks）实行多尺度检测的方法。将416×416尺寸的图像输入YOLOv3算法中，经过5次下采样后得到13×13、26×26和52×52尺寸的特征图，首先将13×13尺寸的特征图二倍上采样后与26×26尺寸的特征图融合，获得包含浅层特征信息和深层特征信息的特征图，然后将特征图再次二倍上采样与52×52尺寸的特征图融合，最后分别在13×13、26×26和52×52尺寸的特征图上进行目标检测。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/29.png"></p><h3 id="先验框更丰富"><a href="#先验框更丰富" class="headerlink" title="先验框更丰富"></a>先验框更丰富</h3><p><img src="https://xinhaojin.github.io/imgs-host/20221010/30.png"><br>训练集真实框做kmeans聚类,k&#x3D;9,按大小再分三类，用不同的特征图预测。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/31.png"></p><h3 id="预测多标签任务"><a href="#预测多标签任务" class="headerlink" title="预测多标签任务"></a>预测多标签任务</h3><p>一个目标同时属于多个类别，如：动物，狗，哈士奇。在单标签预测的时候，损失函数只和正确类别的概率值有关，而不关心属于其他类别的概率。多标签预测时，相当于将一个多标签问题转化为了在每个标签上的二分类问题,计算一个样本各个标签的损失，然后取平均值，得到最后的损失。</p><h2 id="YOLOv4"><a href="#YOLOv4" class="headerlink" title="YOLOv4"></a>YOLOv4</h2><p><a href="https://arxiv.org/abs/2004.10934">paper(CVPR2020)</a></p><p><a href="https://github.com/Tianxiaomo/pytorch-YOLOv4">code</a></p><p>现阶段的目标检测算法中有三个组件：Backbone、Neck和Head，乍一看很让人不理解：</p><p>Backbone, 译作骨干网络，主要指用于特征提取的，已在大型数据集(例如ImageNet|COCO等)上完成预训练，拥有预训练参数的卷积神经网络，例如：ResNet-50、Darknet53等</p><p>Head，译作检测头，主要用于预测目标的种类和位置(bounding boxes)<br>在Backone和Head之间，会添加一些用于收集不同阶段中特征图的网络层，通常称为Neck。</p><p>输入-&gt;主干-&gt;脖子-&gt;头-&gt;输出。主干网络提取特征，脖子提取一些更复杂的特征，然后头部计算预测输出</p><h3 id="网络结构-3"><a href="#网络结构-3" class="headerlink" title="网络结构"></a>网络结构</h3><p>通过对比多种方法和技巧，YOLOv4最终选用CSPDarknet53作为backbone，选用SPP+PAN作为Neck，选用YOLOv3-head作为Head。</p><h3 id="Bag-of-freebies"><a href="#Bag-of-freebies" class="headerlink" title="Bag of freebies"></a>Bag of freebies</h3><p>将只改变训练策略或只增加训练成本，而不增加推理成本的方法称为“bag of freebies”(BoF)。BoF中包含的方法有数据增强、正则化函数、标签细化网络、框回归函数等。从BoF中挑选保留的方法有，用于Backbone的CutMix、Mosaic数据增强、DropBlock正则化、Class label smoothing；用于检测器中的CIoU-loss、CmBN、DropBlock正则化、Mosaic数据增强、Self-Adversarial Training、Eliminate grid sensitivity、一个GT使用多个anchors、Cosine annealing scheduler、超参数调优、随机训练图片大小。</p><p>Mosaic数据增强，是一种将4张训练图片混合成一张的新数据增强方法，这样可以丰富图像的上下文信息。这种做法的好处是允许检测上下文之外的目标，增强模型的鲁棒性。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/32.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/20221010/33.png"></p><h3 id="Bag-of-specoals"><a href="#Bag-of-specoals" class="headerlink" title="Bag of specoals"></a>Bag of specoals</h3><p>将那些只会少量增加推理成本，但能显著提高目标检测精度的模块和后处理方法，称之为“bag of specoals”(BoS)。BoS中包含的方法有增强感受野、注意力模块、特征集成、激活函数、后处理等。从BoS中挑选保留的方法有，用于Backbone的Mish激活函数、Cross-stage partial connections (CSP)、Multiinput weighted residual connections (MiWRC)；用于检测器的Mish激活函数、SPP-block、SAM-block、PAN path-aggregation block、DIoU-NMS。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>YOLOv4论文中给出了大量的实验结果来证明了其所选择tricks的有效性。</p><h2 id="YOLOv5"><a href="#YOLOv5" class="headerlink" title="YOLOv5"></a>YOLOv5</h2><p><a href="https://github.com/ultralytics/yolov5">code</a></p><h3 id="网络结构-4"><a href="#网络结构-4" class="headerlink" title="网络结构"></a>网络结构</h3><p>Backbone: New CSP-Darknet53</p><p>Neck: SPPF, New CSP-PAN</p><p>Head : YOLOv3 Head</p><h4 id="SPP"><a href="#SPP" class="headerlink" title="SPP"></a>SPP</h4><p>背景：卷积神经网络中经常看到固定输入的设计，但如果我们的输入是不能固定的尺寸怎么办？<br>SPP：空间金字塔池化，能将任意大小的特征图转换成固定大小的特征向量。<br>eg:</p><p>输入层：首先我们现在有一张任意大小的图片，其大小为w * h。</p><p>输出层：21个神经元 – 即我们待会希望提取到21个特征。</p><p>分析如下图所示：分别对1 * 1分块，2 * 2分块和4 * 4子图里分别取每一个框内的max值（即取蓝框框内的最大值），这一步就是作最大池化，这样最后提取出来的特征值（即取出来的最大值）一共有1 * 1 + 2 * 2 + 4 * 4 &#x3D; 21个。得出的特征再concat在一起。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/34.png"></p><h4 id="SPPF"><a href="#SPPF" class="headerlink" title="SPPF"></a>SPPF</h4><p>SPPF串联使用了池化层，使得计算效率更高。<br>将两个5×5的池化层进行串联等价于使用一个9×9的最大池化，而使用3个5×5的最大池化又等价于一个13×13的最大池化。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/35.png"></p><h3 id="数据增强策略"><a href="#数据增强策略" class="headerlink" title="数据增强策略"></a>数据增强策略</h3><p>Mosaic（图像拼接）<br><code>&lt;br&gt;</code>Copy paste（将不同图像中的目标进行负值和粘贴）<br><code>&lt;br&gt;</code>Random affine（随机仿射变换：旋转、平移等）<br><code>&lt;br&gt;</code>MixUp（将两张图片按一定透明程度混合成一张图片）<br><code>&lt;br&gt;</code>Albumentations（滤波、直方图均衡化以及改变图片质量等等）<br><code>&lt;br&gt;</code>Augment HSV（调整图像色度、透明度和饱和度）<br><code>&lt;br&gt;</code>Random horizontal flip（水平翻转）</p><h3 id="训练策略"><a href="#训练策略" class="headerlink" title="训练策略"></a>训练策略</h3><p>Multi-scale training(0.5~1.5x)（多尺度训练）<br><code>&lt;br&gt;</code>AutoAnchor(For training custom data)（重新生成anchor）<br><code>&lt;br&gt;</code>Warmup and Cosine LR scheduler（学习率的调整）<br><code>&lt;br&gt;</code>EMA(Exponential Moving Average)Mixed precision（将学习变量添加一个动量）<br><code>&lt;br&gt;</code>Mixed precision（混合精度训练）<br><code>&lt;br&gt;</code>Evolve hyper-parameters</p><h3 id="损失函数-1"><a href="#损失函数-1" class="headerlink" title="损失函数"></a>损失函数</h3><p>Classes loss，分类损失，采用的是BCE loss（二值交叉熵损失），注意只计算正样本的分类损失。<br><code>&lt;br&gt;</code>objectness loss，obj损失，采用的依然是BCE loss，注意这里的obj指的是网络预测的目标边界框与GT<br>Box的CIoU。这里计算的是所有样本的obj损失。<br><code>&lt;br&gt;</code>Location loss，定位损失，采用的是CIoU loss，注意只计算正样本的定位损失。</p><h2 id="YOLOX"><a href="#YOLOX" class="headerlink" title="YOLOX"></a>YOLOX</h2><p><a href="https://arxiv.org/abs/2107.08430">paper(CVPR2021)</a></p><p><a href="https://github.com/Megvii-BaseDetection/YOLOX">code</a></p><p>与yolov5的对比<br><img src="https://xinhaojin.github.io/imgs-host/20221010/36.png"></p><h3 id="decoupled-head"><a href="#decoupled-head" class="headerlink" title="decoupled head"></a>decoupled head</h3><p>YOLOX和YOLOv5在网络结构上的主要的差别就在检测头head部分。之前的检测头就是通过一个卷积核大小为1x1的卷积层实现的，即这个卷积层要同时预测类别分数、边界框回归参数以及IOU，这种方式在文章中称之为coupled detection head（耦合的检测头）。作者说采用coupled detection head是对网络有害的，如果将coupled detection head换成decoupled detection head（解耦的检测头）能够大幅提升网络的收敛速度。在论文的图3中展示了YOLO v3分别使用coupled detection head和decoupled detection head的训练收敛情况，明显采用decoupled detection head后收敛速度会更快（在论文的表2中显示采用decoupled detection head能够提升AP约1.1个点）。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/37.png"><br>到底什么是解耦的检测头？根据原论文的图2以及源码绘制的decoupled detection head结构如下。在decoupled detection head中对于预测Cls、Reg以及IoU参数分别使用三个不同的分支，这样就将三者进行了解耦。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/38.png"></p><h3 id="anchor-free"><a href="#anchor-free" class="headerlink" title="anchor-free"></a>anchor-free</h3><p>目前行业内，主要有Anchor Based和Anchor Free两种方式。</p><p>在Yolov3、Yolov4、Yolov5中，通常都是采用Anchor Based的方式，来提取目标框，进而和标注的groundtruth进行比对，判断两者的差距。</p><p><strong>缺点</strong></p><p>1).anchor会引入很多需要优化的超参数， 比如anchor number、anchor size、anchor ratio。</p><p>2).因为anchor的大小、比例、数量都是提前确定的，会影响模型的泛化性能。对于新的检测任务，需要重新设计anchor的各种参数。<br>为了保证high recall rate，需要大量密集分布的anchor boxes，会导致训练阶段正负样本不均衡的问题。</p><p>3).因为anchor boxes数量特别多，训练阶段需要计算所有anchor boxes和ground-truth boxes的IOU，导致特别大的计算量和内存（显存）占用。<br><strong>Anchor Based方式</strong></p><p>比如输入图像，经过Backbone、Neck层，最终将特征信息，传送到输出的Feature Map中。</p><p>这时，就要设置一些Anchor规则，将预测框和标注框进行关联。从而在训练中，计算两者的差距，即损失函数，再更新网络参数。</p><p>比如在下图的，最后的三个Feature Map上，基于每个单元格，都有三个不同尺寸大小的锚框。当输入为416<em>416时，网络最后的三个特征图大小分别为13</em>13，26<em>26，52</em>52。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/40.png"></p><p>我们可以看到，黄色框为小狗的Groundtruth，即标注框（真值）。</p><p>而蓝色的框，为小狗中心点所在的单元格（红框），所对应的锚框，每个单元格都有3个蓝框。</p><p>当采用COCO数据集，即有80个类别时。</p><p>基于每个锚框，都有x、y、w、h、obj（前景背景）、class（80个类别），共85个参数。</p><p>因此会产生3*(13<em>13+26</em>26+52*52）*85&#x3D;904995个预测结果。</p><p>如果将输入从416<em>416，变为640</em>640，最后的三个特征图大小为20<em>20,40</em>40,80*80。</p><p>则会产生3*（20<em>20+40</em>40+80*80）*85&#x3D;2142000个预测结果。</p><p><strong>Anchor Free方式</strong><br>在前面Anchor Based中，每个Feature map的单元格，都有3个大小不一的锚框。</p><p>那么Yolox-Darknet53就没有吗？</p><p>其实并不然，这里只是巧妙地将前面Backbone中，下采样的大小信息引入进来。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/41.png"><br>比如上图中，最上面的分支，下采样了5次，2的5次方为32。</p><p>并且Decoupled Head的输出，为20<em>20</em>85大小。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/42.png"><br>因此如上图所示：</p><p>最后8400个预测框中，其中有400个框(20*20)，所对应锚框的大小，为32 * 32。</p><p>同样的原理，中间的分支，最后有1600个预测框(40*40)，所对应锚框的大小，为16 * 16。</p><p>最下面的分支，最后有6400个预测框(80*80)，所对应锚框的大小，为8 * 8。</p><p>当有了8400个预测框的信息，每张图片也有标注的目标框的信息。<br>下一步需要做的，就是将8400个锚框，和图片上所有的目标框进行关联，挑选出正样本锚框。</p><h3 id="标签分配"><a href="#标签分配" class="headerlink" title="标签分配"></a>标签分配</h3><p>当有了8400个Anchor锚框后，这里的每一个锚框，都对应85*8400特征向量中的预测框信息。</p><p>不过需要知道，这些预测框只有少部分是正样本，绝大多数是负样本。</p><p>那么到底哪些才是正样本呢？</p><p>这里需要利用锚框和实际目标框的关系，先挑选出一部分适合的正样本锚框。</p><p>比如第3、10、15个锚框是正样本锚框，则对应到网络输出的8400个预测框中，第3、10、15个预测框，就是相应的正样本预测框。</p><p>训练过程中，在锚框的基础上，不断的预测，然后不断的迭代，从而更新网络参数，让网络损失越来越小，预测的越来越准。</p><p>那么在Yolox中，是如何挑选正样本锚框的呢？</p><p>这里就涉及到两个关键点：初步筛选、SimOTA。</p><h4 id="初步筛选"><a href="#初步筛选" class="headerlink" title="初步筛选"></a>初步筛选</h4><p>1.中心点在真实框内的锚框</p><p>2.已真实框中心点为基准，设置边长为5的正方形，挑选在正方形内的所有锚框</p><h4 id="SimOTA"><a href="#SimOTA" class="headerlink" title="SimOTA"></a>SimOTA</h4><p><img src="https://xinhaojin.github.io/imgs-host/20221010/43.png"><br>SimOTA可以理解为是一种匹配策略的方法，可以看成是一个最优传输的问题。举一个通俗易懂的例子就是，有2个分配基地与6个周围城市，现在需要考虑一个最优的配送方式来确保分配东西到这几个城市的运输成本是最低的。而对于目标检测来说，这个最优传输问题也就是一个最优分配问题，如何实现把这些anchor point分配给groundtruth的代价（cost）是最低的。这个代价就是iou损失，分类损失等内容。<br>(yolox的核心，但没看懂)</p><h2 id="YOLOv7"><a href="#YOLOv7" class="headerlink" title="YOLOv7"></a>YOLOv7</h2><p><a href="https://arxiv.org/abs/2207.02696">paper(CVPR2022)</a></p><p><a href="https://github.com/WongKinYiu/yolov7">code</a></p><p>本文的贡献总结如下：</p><p>1.设计了几种可训练的bag-of-freebies 方法，使得实时目标检测可以在不增加推理成本的情况下大大提高检测精度；</p><p>2.对于目标检测方法的发展，本文发现了两个新问题，即重参数化模块。如何替换原始模块，以及动态标签分配策略，如何处理对不同输出层的分配。此外，本文还提出了解决这些问题的方法；</p><p>3.本文提出了实时目标检测器的extend和compound scaling复合缩放 方法，可以有效地利用参数和计算；</p><p>4.本文提出的方法可以有效地减少目前最优秀的实时目标检测器的大约40%的参数和50%的计算，并且具有更快的推理速度和更高的检测精度。</p><h3 id="模型重参数化方法-GoogLeNet-Snapshot-ensembles"><a href="#模型重参数化方法-GoogLeNet-Snapshot-ensembles" class="headerlink" title="模型重参数化方法(GoogLeNet,Snapshot ensembles)"></a>模型重参数化方法(GoogLeNet,Snapshot ensembles)</h3><p>在推理阶段将多个计算模块合并为一个。模型重参数化技术可以被视为一种集成技术，可以将其分为两类，即模块级集成和模型级集成。有两种用于模型级重参数化以获得最终推理模型的常见用法：一种是用不同的训练数据训练多个相同的模型，然后对多个训练模型的权重进行平均。另一种方法是对不同迭代次数下的模型权重进行加权平均。</p><p>模块级重参数化是最近比较流行的研究问题。这种类型的方法在训练期间将模块拆分为多个相同或不同的模块分支，并在推理期间将多个分支模块集成为完全等效的模块。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/46.png"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>本文提出了一种新的实时目标检测器体系结构 和 相应的模型缩放方法。此外还发现，目标检测方法的发展过程产生了新的研究课题。在研究过程中，发现了 重参数化模块的替换问题和动态标签分配的分配问题。为了解决这个问题，本文提出了一种可训练的bag-of-freebies ，以提高目标检测的准确性。在此基础上，开发了YOLOv7系列目标检测系统 ，该系统获得了最优秀的结果。</p><h2 id="YOLOv6"><a href="#YOLOv6" class="headerlink" title="YOLOv6"></a>YOLOv6</h2><p><a href="https://arxiv.org/abs/2209.02976">paper(CVPR2022)</a></p><p><a href="https://github.com/meituan/YOLOv6">code</a></p><p>YOLOv6 是美团视觉智能部研发的一款目标检测框架，致力于工业应用。本框架同时专注于检测的精度和推理效率，在工业界常用的尺寸模型中：YOLOv6-nano 在 COCO 上精度可达 35.0% AP，在 T4 上推理速度可达 1242 FPS；YOLOv6-s 在 COCO 上精度可达 43.1% AP，在 T4 上推理速度可达 520 FPS。在部署方面，YOLOv6 支持 GPU（TensorRT）、CPU（OPENVINO）、ARM（MNN、TNN、NCNN）等不同平台的部署，极大地简化工程部署时的适配工作。<br><img src="https://xinhaojin.github.io/imgs-host/20221010/45.png"></p><h3 id="现有YOLO的问题"><a href="#现有YOLO的问题" class="headerlink" title="现有YOLO的问题"></a>现有YOLO的问题</h3><p>根据经验分析以往YOLO系列及最新算法，观察到了几个重要因素，这些因素促使重新完善YOLO框架：</p><p>1.RepVGG的重参数化算法是一种优越的技术，尚未在检测中得到充分利用。而且，RepVGG Block的模型缩放不切实际，本文认为小型和大型网络之间的网络设计保持一致是不必要的。普通单路径架构对于小型网络是更好的选择，但是对于更大的模型，参数的指数增长和单路径架构的计算成本使其不可行；</p><p>2.基于重参数化的检测器的量化也需要细致的处理，否则，由于其在训练和推理期间的不同处理，很难处理性能退化的问题。</p><p>3.以前的算法[YOLOX，YOLOv5，YOLOv7，PP-YOLOE]较少 关注部署，其延迟通常在高成本机器（如V100）上进行比较。在实际服务环境中，存在硬件差距。</p><p>4.先进的特定策略，如 标签分配和 损失函数设计，考虑到架构差异，需要进一步验证使用；</p><p>5.对于部署，可以对训练策略进行调整，以提高准确性性能，但不增加推理成本，如知识蒸馏。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>通过对以上问题的分析，提出了YOLOv6，在精度和速度方面实现了迄今为止最好的折衷。另外为了提高推理速度而不使性能有有太多退化，研究了最前沿的量化方法，包括 训练后量化（post-training quantization,PTQ）和 量化感知训练（quantization-aware training,QAT），并将其整合在YOLOv6中。<br>YOLOv6的关键点总结如下：</p><p>1.为不同场景中的工业应用量身定制了一系列不同规模的网络。不同规模的架构各不相同，以实现最佳的速度和精度权衡，其中小型模型采用简单的单路径backbone，大型模型构建在高效的多分支块上。</p><p>2.为YOLOv6在分类任务和回归任务中都加入了自蒸馏策略。同时，动态调整来自teacher和标签的信息，以帮助student模型能在所有训练阶段更有效地学习知识。</p><p>3.广泛验证了比较先进的技术，例如 标签分配、损失函数和数据增强技术等，并 有选择地采用它们以进一步提高性能。</p><p>4.在 RepOptimizer优化器和通道蒸馏的帮助下，对检测任务的量化方案进行了改革，得到了一个具有43.3%COCOAP和869FPS吞吐量的快速准确检测器(batchsize为32)。</p><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>简而言之，考虑到持续的工业需求，提出了YOLOv6，仔细分析了迄今为止目标检测器组件的所有进步。结果在精度和速度上都超过了其他可用的实时目标检测器。为了便于工业部署，还为YOLOv6提供了一种定制的量化方法，从而提供了前所未有的快速检测器。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1gS4y1w79N">https://www.bilibili.com/video/BV1gS4y1w79N</a></p><p><a href="https://blog.csdn.net/weixin_45848575/article/details/125438818">https://blog.csdn.net/weixin_45848575/article/details/125438818</a></p><p><a href="https://www.jianshu.com/p/014e76d3b614">https://www.jianshu.com/p/014e76d3b614</a></p><p><a href="https://blog.csdn.net/qq_39707285/category_12009356.html">https://blog.csdn.net/qq_39707285/category_12009356.html</a></p><p><a href="https://blog.csdn.net/weixin_38688399/article/details/106692156">https://blog.csdn.net/weixin_38688399/article/details/106692156</a></p><p><a href="https://blog.csdn.net/weixin_55073640/article/details/122621148">https://blog.csdn.net/weixin_55073640/article/details/122621148</a></p><p><a href="https://blog.csdn.net/qq_37541097/article/details/125132817">https://blog.csdn.net/qq_37541097/article/details/125132817</a></p><p><a href="https://blog.csdn.net/rh8866/article/details/123775117">https://blog.csdn.net/rh8866/article/details/123775117</a></p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows命令行cmd代理设置（结合v2rayn）</title>
    <link href="/2022/09/22/windows%E5%91%BD%E4%BB%A4%E8%A1%8Ccmd%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%EF%BC%88%E7%BB%93%E5%90%88v2rayn%EF%BC%89/"/>
    <url>/2022/09/22/windows%E5%91%BD%E4%BB%A4%E8%A1%8Ccmd%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%EF%BC%88%E7%BB%93%E5%90%88v2rayn%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="v2rayn代理端口"><a href="#v2rayn代理端口" class="headerlink" title="v2rayn代理端口"></a>v2rayn代理端口</h2><pre><code>socks5:127.0.0.1:10808http:127.0.0.1:10809</code></pre><h2 id="cmd临时代理（对当前cmd生效）"><a href="#cmd临时代理（对当前cmd生效）" class="headerlink" title="cmd临时代理（对当前cmd生效）"></a>cmd临时代理（对当前cmd生效）</h2><pre><code>set http_proxy=http://127.0.0.1:10809set https_proxy=http://127.0.0.1:10809set http_proxy=socks5://127.0.0.1:10808set https_proxy=socks5://127.0.0.1:10808</code></pre><h2 id="cmd永久代理"><a href="#cmd永久代理" class="headerlink" title="cmd永久代理"></a>cmd永久代理</h2><pre><code>netsh winhttp import proxy source=ie</code></pre><h3 id="打开前后的对比"><a href="#打开前后的对比" class="headerlink" title="打开前后的对比"></a>打开前后的对比</h3><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/09/image-7.png"></p><h3 id="测试代理"><a href="#测试代理" class="headerlink" title="测试代理"></a>测试代理</h3><pre><code>curl www.google.com</code></pre><h3 id="控制代理开关，清除系统代理：关，自动配置系统代理：开。"><a href="#控制代理开关，清除系统代理：关，自动配置系统代理：开。" class="headerlink" title="控制代理开关，清除系统代理：关，自动配置系统代理：开。"></a>控制代理开关，清除系统代理：关，自动配置系统代理：开。</h3><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/09/image-6.png"></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yolox+Siamese孪生神经网络:图标点选验证码识别</title>
    <link href="/2022/09/15/yoloxsiamese%E5%AD%AA%E7%94%9F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E6%A0%87%E7%82%B9%E9%80%89%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    <url>/2022/09/15/yoloxsiamese%E5%AD%AA%E7%94%9F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E6%A0%87%E7%82%B9%E9%80%89%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><a href="https://dun.163.com/trial/icon-click">图标点选验证码_点选验证码_验证码API_在线体验_网易易盾 (163.com)</a></p><p>网页场景</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/09/image.png"></p><p>图片下载下来是这样的，底部会有几行小图标，第三行小图标是正确的顺序</p><p>这个问题的目标就是按顺序给出三个坐标点。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/09/00001.jpg"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="step1-使用yolox检测出所有图标的位置（不包含下面的三行图标）"><a href="#step1-使用yolox检测出所有图标的位置（不包含下面的三行图标）" class="headerlink" title="step1.使用yolox检测出所有图标的位置（不包含下面的三行图标）"></a>step1.使用yolox检测出所有图标的位置（不包含下面的三行图标）</h3><p>因为图标种类众多，没法直接用yolox进行图标详细分类，所以我训练的时候只分了两类，一类白的，一类黑的，虽然在本文写的方法中这个类别并没有发挥作用，但考虑到标注一类和两类的工作量是一样的，所以还是标了两类，而且如果采用其他方法对图标进行预处理，这个分类还是有用的。</p><p>yolox部分不做介绍了，之前也写过几篇相关的文章，可以参考。</p><p><a href="https://blog.xinhaojin.top/?s=yolox">“yolox”的搜索结果 – Xinhao Jin</a></p><p><a href="https://github.com/Megvii-BaseDetection/YOLOX">Megvii-BaseDetection&#x2F;YOLOX: YOLOX is a high-performance anchor-free YOLO, exceeding yolov3~v5 with MegEngine, ONNX, TensorRT, ncnn, and OpenVINO supported. Documentation: https://yolox.readthedocs.io/ (github.com)</a></p><p>效果如下图</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/09/image-1.png"></p><h3 id="step2-使用孪生神经网络训练图像相似度"><a href="#step2-使用孪生神经网络训练图像相似度" class="headerlink" title="step2.使用孪生神经网络训练图像相似度"></a>step2.使用孪生神经网络训练图像相似度</h3><p>借用了大佬提供的代码，特征提取网络采用vgg16</p><p><a href="https://github.com/bubbliiiing/Siamese-pytorch">bubbliiiing&#x2F;Siamese-pytorch: 这是一个孪生神经网络（Siamese network）的库，可进行图片的相似性比较。 (github.com)</a></p><p>需要关注的是数据集的格式，就是一个类别一个文件夹，里面放同一类别的图片，相似度记为1，不同文件夹里的图片是不同类的，相似度记为0。</p><p><strong>快速打标签制作数据集的方法</strong></p><p>yolox框出来的5张小图，从左到右记为1-5，给出图标正确顺序对应的记号，如，例图的标签为243，</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/09/00001-1.jpg"></p><p>打开图片文件夹放大，打开一个记事本即可快速打标签</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/09/image-2.png"></p><p>打完标签，结合yolox给出的位置框，即可扣出图片，每张验证码图片可以形成3对图片（3个类别），每个类别有3张图：验证码图片下方给出的黑图、白图，以及嵌入背景的图标。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/09/image-3.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/09/image-4.png"></p><h3 id="数据集去重"><a href="#数据集去重" class="headerlink" title="数据集去重"></a>数据集去重</h3><p>开头提到图标种类很多，但也会有重复的，因此如果仅按照上面的流程，会导致同一类图标放进了两个不同文件夹，神经网络就不懂了，到底是要算一类还是两类？</p><p>所以需要给数据集去重，确保同一类的放在同一个文件夹，方法是取出每个文件夹的第一个图标（1.jpg是验证码图片下方三排中的黑底白图），进行相似度计算，如果足够相似，则把两个文件夹合并。</p><p>怎么判断足够相似？如果同一个图标（黑底白图）出现在不同验证码图片中，那么他们几乎是像素级一致的，可以进行二值化后将两张图片相减，取差值绝对值之和，如果这个值足够小，说明是同一类的图标。</p><h3 id="训练-预测"><a href="#训练-预测" class="headerlink" title="训练&amp;预测"></a>训练&amp;预测</h3><p>训练过程省略</p><p>预测就是输入两个图片，给出相似度</p><h3 id="结果处理"><a href="#结果处理" class="headerlink" title="结果处理"></a>结果处理</h3><p>预测得到一个3*5的相似度矩阵，循环选取相似度最大值并删除所在行列即可得到最佳匹配结果，结果绘图如下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/09/image-5.png"></p><p>Done.</p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>目标检测</tag>
      
      <tag>图像处理</tag>
      
      <tag>孪生网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paddleocr转pytorch推理</title>
    <link href="/2022/08/17/paddleocr%E8%BD%ACpytorch%E6%8E%A8%E7%90%86/"/>
    <url>/2022/08/17/paddleocr%E8%BD%ACpytorch%E6%8E%A8%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/frotms/PaddleOCR2Pytorch">frotms&#x2F;PaddleOCR2Pytorch: PaddleOCR inference in PyTorch. Converted from <a href="https://github.com/PaddlePaddle/PaddleOCR">PaddleOCR</a></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>paddlepaddle==2.0.0shapelynumpypillowpyclipperopencv-python &lt;= 4.2.0.32pytorchpyyamlscikit-image</code></pre><h2 id="中英文推理"><a href="#中英文推理" class="headerlink" title="中英文推理"></a>中英文推理</h2><p>fork了一个，把重要的两个检测识别模型直接加到了主分支中</p><p><a href="https://github.com/xinhaojin/PaddleOCR2Pytorch">xinhaojin&#x2F;PaddleOCR2Pytorch: PaddleOCR inference in PyTorch. Converted from <a href="https://github.com/PaddlePaddle/PaddleOCR">PaddleOCR</a></a></p><p>单检测</p><pre><code>python tools/infer/predict_det.py --det_model_path weights/ch_ptocr_v3_det_infer.pth --image_dir doc/imgs/example.jpg</code></pre><p>单识别</p><pre><code>python tools/infer/predict_rec.py --rec_model_path weights/ch_ptocr_v3_rec_infer.pth --rec_image_shape 3,48,320 --rec_yaml_path configs/rec/PP-OCRv3/multi_language/chinese_cht_PP-OCRv3_rec.yml --rec_char_dict_path pytorchocr/utils/ppocr_keys_v1.txt  --image_dir doc/imgs_words/ch/word_4.jpg</code></pre><p>检测并识别</p><pre><code>python tools/infer/predict_system.py --image_dir doc/imgs/example.jpg --det_model_path weights/ch_ptocr_v3_det_infer.pth --rec_image_shape 3,48,320 --rec_model_path weights/ch_ptocr_v3_rec_infer.pth</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/08/image-1.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/08/example2-1024x724.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用yolox预测结果自动生成voc数据集标签文件</title>
    <link href="/2022/07/12/%E7%94%A8yolox%E9%A2%84%E6%B5%8B%E7%BB%93%E6%9E%9C%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90voc%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%87%E7%AD%BE%E6%96%87%E4%BB%B6/"/>
    <url>/2022/07/12/%E7%94%A8yolox%E9%A2%84%E6%B5%8B%E7%BB%93%E6%9E%9C%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90voc%E6%95%B0%E6%8D%AE%E9%9B%86%E6%A0%87%E7%AD%BE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>已有少量（100张）数据集由手工标注，训练结果也不算差，但希望能够进一步提高准确率，需要扩充数据集样本，手工标注太累，因此利用已有训练权重进行预测，用预测结果自动生成xml格式的标注文件，当然也会存在预测错误的情况，自定义条件筛选正确，其余手工标注即可。</p><h2 id="voc数据集的xml文件格式"><a href="#voc数据集的xml文件格式" class="headerlink" title="voc数据集的xml文件格式"></a>voc数据集的xml文件格式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">folder</span>&gt;</span>jiyan[_new<span class="tag">&lt;/<span class="name">folder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filename</span>&gt;</span>00002.png<span class="tag">&lt;/<span class="name">filename</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>E:[[Y1[[验证码[[数据集[[jiyan[_new[[00002.png<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">database</span>&gt;</span>Unknown<span class="tag">&lt;/<span class="name">database</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">width</span>&gt;</span>300<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">height</span>&gt;</span>200<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depth</span>&gt;</span>3<span class="tag">&lt;/<span class="name">depth</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">segmented</span>&gt;</span>0<span class="tag">&lt;/<span class="name">segmented</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>word<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pose</span>&gt;</span>Unspecified<span class="tag">&lt;/<span class="name">pose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">truncated</span>&gt;</span>0<span class="tag">&lt;/<span class="name">truncated</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">difficult</span>&gt;</span>0<span class="tag">&lt;/<span class="name">difficult</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmin</span>&gt;</span>123<span class="tag">&lt;/<span class="name">xmin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymin</span>&gt;</span>52<span class="tag">&lt;/<span class="name">ymin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmax</span>&gt;</span>177<span class="tag">&lt;/<span class="name">xmax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymax</span>&gt;</span>106<span class="tag">&lt;/<span class="name">ymax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>word<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pose</span>&gt;</span>Unspecified<span class="tag">&lt;/<span class="name">pose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">truncated</span>&gt;</span>0<span class="tag">&lt;/<span class="name">truncated</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">difficult</span>&gt;</span>0<span class="tag">&lt;/<span class="name">difficult</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmin</span>&gt;</span>206<span class="tag">&lt;/<span class="name">xmin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymin</span>&gt;</span>16<span class="tag">&lt;/<span class="name">ymin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmax</span>&gt;</span>260<span class="tag">&lt;/<span class="name">xmax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymax</span>&gt;</span>70<span class="tag">&lt;/<span class="name">ymax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>word<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pose</span>&gt;</span>Unspecified<span class="tag">&lt;/<span class="name">pose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">truncated</span>&gt;</span>0<span class="tag">&lt;/<span class="name">truncated</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">difficult</span>&gt;</span>0<span class="tag">&lt;/<span class="name">difficult</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmin</span>&gt;</span>194<span class="tag">&lt;/<span class="name">xmin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymin</span>&gt;</span>90<span class="tag">&lt;/<span class="name">ymin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xmax</span>&gt;</span>247<span class="tag">&lt;/<span class="name">xmax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ymax</span>&gt;</span>142<span class="tag">&lt;/<span class="name">ymax</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bndbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">annotation</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改预测代码"><a href="#修改预测代码" class="headerlink" title="修改预测代码"></a>修改预测代码</h2><p>使得针对每场图片，输出预测矩形框及对应的类别</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/07/image.png"></p><h2 id="生成xml文件"><a href="#生成xml文件" class="headerlink" title="生成xml文件"></a>生成xml文件</h2><p>拿到矩形框和类别名，就可以写xml文件了，按照上面的格式写就行，有些标签是次要的，并不会用到，可以省略。</p><p>这个函数是copilot插件自动生成的，我只写了个函数名，连参数都没写，就给我自动补全了，你敢信？属实牛逼！</p><p>我只改动了两三行，再加个import，就能用了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> et</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">box2xml</span>(<span class="params">bboxes, <span class="keyword">class</span>[_names, save[_path</span>):</span><br><span class="line">    root = et.Element(<span class="string">&#x27;annotation&#x27;</span>)</span><br><span class="line">    et.SubElement(root, <span class="string">&#x27;folder&#x27;</span>).text = <span class="string">&#x27;VOC2007&#x27;</span></span><br><span class="line">    <span class="comment">#et.SubElement(root, &#x27;filename&#x27;).text = os.path.basename(save[_path)</span></span><br><span class="line">    et.SubElement(root, <span class="string">&#x27;source&#x27;</span>).text = <span class="string">&#x27; &#x27;</span>.join([[<span class="string">&#x27;VOC2007&#x27;</span>, <span class="string">&#x27;createed by YOLOX&#x27;</span>[])</span><br><span class="line">    <span class="comment">#et.SubElement(root, &#x27;segmented&#x27;).text = &#x27;0&#x27;</span></span><br><span class="line">    size = et.SubElement(root, <span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    et.SubElement(size, <span class="string">&#x27;width&#x27;</span>).text = <span class="string">&#x27;300&#x27;</span></span><br><span class="line">    et.SubElement(size, <span class="string">&#x27;height&#x27;</span>).text = <span class="string">&#x27;200&#x27;</span></span><br><span class="line">    et.SubElement(size, <span class="string">&#x27;depth&#x27;</span>).text = <span class="string">&#x27;3&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bboxes.shape[[<span class="number">0</span>[]):</span><br><span class="line">        obj = et.SubElement(root, <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">        et.SubElement(obj, <span class="string">&#x27;name&#x27;</span>).text = <span class="keyword">class</span>[_names[[i[]</span><br><span class="line">        et.SubElement(obj, <span class="string">&#x27;pose&#x27;</span>).text = <span class="string">&#x27;Unspecified&#x27;</span></span><br><span class="line">        et.SubElement(obj, <span class="string">&#x27;truncated&#x27;</span>).text = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        et.SubElement(obj, <span class="string">&#x27;difficult&#x27;</span>).text = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        bbox = et.SubElement(obj, <span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        et.SubElement(bbox, <span class="string">&#x27;xmin&#x27;</span>).text = <span class="built_in">str</span>(bboxes[[i, <span class="number">0</span>[])</span><br><span class="line">        et.SubElement(bbox, <span class="string">&#x27;ymin&#x27;</span>).text = <span class="built_in">str</span>(bboxes[[i, <span class="number">1</span>[])</span><br><span class="line">        et.SubElement(bbox, <span class="string">&#x27;xmax&#x27;</span>).text = <span class="built_in">str</span>(bboxes[[i, <span class="number">2</span>[])</span><br><span class="line">        et.SubElement(bbox, <span class="string">&#x27;ymax&#x27;</span>).text = <span class="built_in">str</span>(bboxes[[i, <span class="number">3</span>[])</span><br><span class="line">    tree = et.ElementTree(root)</span><br><span class="line">    tree.write(save[_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;save xml file to &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(save[_path))</span><br></pre></td></tr></table></figure><h2 id="怎么确定标注的正确性？"><a href="#怎么确定标注的正确性？" class="headerlink" title="怎么确定标注的正确性？"></a>怎么确定标注的正确性？</h2><p>具体问题具体分析</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/07/00001.jpg"></p><p>针对我的场景，正确标注应该是3个框，已有权重有时会只检测出两个框，因此我的筛选条件就是，预测框个数&lt;3的，把文件名汇总起来最后输出，我自己再修改即可。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/07/image-1-1024x108.png"></p><p>这样工作量就从标注500多张图片锐减到30多张。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>由tools&#x2F;demo.py修改</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -[*- coding:utf-8 -[*-</span></span><br><span class="line"><span class="comment"># Copyright (c) Megvii, Inc. and its affiliates.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> yolox.data.data[_augment <span class="keyword">import</span> ValTransform</span><br><span class="line"><span class="keyword">from</span> yolox.data.datasets <span class="keyword">import</span> COCO[_CLASSES</span><br><span class="line"><span class="keyword">from</span> yolox.exp <span class="keyword">import</span> get[_exp</span><br><span class="line"><span class="keyword">from</span> yolox.utils <span class="keyword">import</span> fuse[_model, get[_model[_info, postprocess, vis</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> et</span><br><span class="line"></span><br><span class="line">IMAGE[_EXT = [[<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.webp&quot;</span>, <span class="string">&quot;.bmp&quot;</span>, <span class="string">&quot;.png&quot;</span>[]</span><br><span class="line"><span class="comment">#python tools/predict2xml.py image -n yolox-s -c weights/90jiyan.pth --path /home/jxh/work/YOLOX/datasets/VOCdevkit/VOC2007/JPEGImages --conf 0.6 --nms 0.6 --save[_result --device [[cpu/gpu[]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make</span>[_parser():</span><br><span class="line">    parser = argparse.ArgumentParser(<span class="string">&quot;YOLOX Demo!&quot;</span>)</span><br><span class="line">    parser.add[_argument(</span><br><span class="line">        <span class="string">&quot;demo&quot;</span>, default=<span class="string">&quot;image&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;demo type, eg. image, video and webcam&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add[_argument(<span class="string">&quot;-expn&quot;</span>, <span class="string">&quot;--experiment-name&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    parser.add[_argument(<span class="string">&quot;-n&quot;</span>, <span class="string">&quot;--name&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;yolox-s&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;model name&quot;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add[_argument(</span><br><span class="line">        <span class="string">&quot;--path&quot;</span>, default=<span class="string">&quot;./assets/test&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;path to images or video&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser.add[_argument(<span class="string">&quot;--camid&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>, <span class="built_in">help</span>=<span class="string">&quot;webcam demo camera id&quot;</span>)</span><br><span class="line">    parser.add[_argument(</span><br><span class="line">        <span class="string">&quot;--save[_result&quot;</span>,</span><br><span class="line">        action=<span class="string">&quot;store[_true&quot;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;whether to save the inference result of image/video&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># exp file</span></span><br><span class="line">    parser.add[_argument(</span><br><span class="line">        <span class="string">&quot;-f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--exp[_file&quot;</span>,</span><br><span class="line">        default=<span class="string">&#x27;exps/example/yolox[_voc/yolox[_voc[_s.py&#x27;</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;pls input your experiment description file&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    parser.add[_argument(<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;--ckpt&quot;</span>, default=<span class="string">&#x27;YOLOX[_outputs/yolox[_voc[_s/90jiyan[_new.pth&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;ckpt for eval&quot;</span>)</span><br><span class="line">    parser.add[_argument(</span><br><span class="line">        <span class="string">&quot;--device&quot;</span>,</span><br><span class="line">        default=<span class="string">&quot;cpu&quot;</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;device to run our model, can either be cpu or gpu&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    parser.add[_argument(<span class="string">&quot;--conf&quot;</span>, default=<span class="number">0.5</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, <span class="built_in">help</span>=<span class="string">&quot;test conf&quot;</span>)</span><br><span class="line">    parser.add[_argument(<span class="string">&quot;--nms&quot;</span>, default=<span class="number">0.5</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, <span class="built_in">help</span>=<span class="string">&quot;test nms threshold&quot;</span>)</span><br><span class="line">    parser.add[_argument(<span class="string">&quot;--tsize&quot;</span>, default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&quot;test img size&quot;</span>)</span><br><span class="line">    parser.add[_argument(</span><br><span class="line">        <span class="string">&quot;--fp16&quot;</span>,</span><br><span class="line">        dest=<span class="string">&quot;fp16&quot;</span>,</span><br><span class="line">        default=<span class="literal">False</span>,</span><br><span class="line">        action=<span class="string">&quot;store[_true&quot;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;Adopting mix precision evaluating.&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    parser.add[_argument(</span><br><span class="line">        <span class="string">&quot;--legacy&quot;</span>,</span><br><span class="line">        dest=<span class="string">&quot;legacy&quot;</span>,</span><br><span class="line">        default=<span class="literal">False</span>,</span><br><span class="line">        action=<span class="string">&quot;store[_true&quot;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;To be compatible with older versions&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    parser.add[_argument(</span><br><span class="line">        <span class="string">&quot;--fuse&quot;</span>,</span><br><span class="line">        dest=<span class="string">&quot;fuse&quot;</span>,</span><br><span class="line">        default=<span class="literal">False</span>,</span><br><span class="line">        action=<span class="string">&quot;store[_true&quot;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;Fuse conv and bn for testing.&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    parser.add[_argument(</span><br><span class="line">        <span class="string">&quot;--trt&quot;</span>,</span><br><span class="line">        dest=<span class="string">&quot;trt&quot;</span>,</span><br><span class="line">        default=<span class="literal">False</span>,</span><br><span class="line">        action=<span class="string">&quot;store[_true&quot;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&quot;Using TensorRT model for testing.&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> parser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>[_image[_<span class="built_in">list</span>(path):</span><br><span class="line">    image[_names = [[[]</span><br><span class="line">    <span class="keyword">for</span> maindir, subdir, file[_name[_<span class="built_in">list</span> <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> file[_name[_<span class="built_in">list</span>:</span><br><span class="line">            apath = os.path.join(maindir, filename)</span><br><span class="line">            ext = os.path.splitext(apath)[[<span class="number">1</span>[]</span><br><span class="line">            <span class="keyword">if</span> ext <span class="keyword">in</span> IMAGE[_EXT:</span><br><span class="line">                image[_names.append(apath)</span><br><span class="line">    <span class="keyword">return</span> image[_names</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">box2xml</span>(<span class="params">bboxes, <span class="keyword">class</span>[_names, save[_path</span>):</span><br><span class="line">    root = et.Element(<span class="string">&#x27;annotation&#x27;</span>)</span><br><span class="line">    et.SubElement(root, <span class="string">&#x27;folder&#x27;</span>).text = <span class="string">&#x27;VOC2007&#x27;</span></span><br><span class="line">    <span class="comment">#et.SubElement(root, &#x27;filename&#x27;).text = os.path.basename(save[_path)</span></span><br><span class="line">    et.SubElement(root, <span class="string">&#x27;source&#x27;</span>).text = <span class="string">&#x27; &#x27;</span>.join([[<span class="string">&#x27;VOC2007&#x27;</span>, <span class="string">&#x27;createed by YOLOX&#x27;</span>[])</span><br><span class="line">    <span class="comment">#et.SubElement(root, &#x27;segmented&#x27;).text = &#x27;0&#x27;</span></span><br><span class="line">    size = et.SubElement(root, <span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    et.SubElement(size, <span class="string">&#x27;width&#x27;</span>).text = <span class="string">&#x27;300&#x27;</span></span><br><span class="line">    et.SubElement(size, <span class="string">&#x27;height&#x27;</span>).text = <span class="string">&#x27;200&#x27;</span></span><br><span class="line">    et.SubElement(size, <span class="string">&#x27;depth&#x27;</span>).text = <span class="string">&#x27;3&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bboxes.shape[[<span class="number">0</span>[]):</span><br><span class="line">        obj = et.SubElement(root, <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">        et.SubElement(obj, <span class="string">&#x27;name&#x27;</span>).text = <span class="keyword">class</span>[_names[[i[]</span><br><span class="line">        et.SubElement(obj, <span class="string">&#x27;pose&#x27;</span>).text = <span class="string">&#x27;Unspecified&#x27;</span></span><br><span class="line">        et.SubElement(obj, <span class="string">&#x27;truncated&#x27;</span>).text = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        et.SubElement(obj, <span class="string">&#x27;difficult&#x27;</span>).text = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        bbox = et.SubElement(obj, <span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        et.SubElement(bbox, <span class="string">&#x27;xmin&#x27;</span>).text = <span class="built_in">str</span>(bboxes[[i, <span class="number">0</span>[])</span><br><span class="line">        et.SubElement(bbox, <span class="string">&#x27;ymin&#x27;</span>).text = <span class="built_in">str</span>(bboxes[[i, <span class="number">1</span>[])</span><br><span class="line">        et.SubElement(bbox, <span class="string">&#x27;xmax&#x27;</span>).text = <span class="built_in">str</span>(bboxes[[i, <span class="number">2</span>[])</span><br><span class="line">        et.SubElement(bbox, <span class="string">&#x27;ymax&#x27;</span>).text = <span class="built_in">str</span>(bboxes[[i, <span class="number">3</span>[])</span><br><span class="line">    tree = et.ElementTree(root)</span><br><span class="line">    tree.write(save[_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;save xml file to &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(save[_path))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Predictor</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> [_[_init[_[_(</span><br><span class="line">        <span class="variable language_">self</span>,</span><br><span class="line">        model,</span><br><span class="line">        exp,</span><br><span class="line">        cls[_names=COCO[_CLASSES,</span><br><span class="line">        trt[_file=<span class="literal">None</span>,</span><br><span class="line">        decoder=<span class="literal">None</span>,</span><br><span class="line">        device=<span class="string">&quot;cpu&quot;</span>,</span><br><span class="line">        fp16=<span class="literal">False</span>,</span><br><span class="line">        legacy=<span class="literal">False</span>,</span><br><span class="line">    ):</span><br><span class="line">        <span class="variable language_">self</span>.model = model</span><br><span class="line">        <span class="variable language_">self</span>.cls[_names = cls[_names</span><br><span class="line">        <span class="variable language_">self</span>.decoder = decoder</span><br><span class="line">        <span class="variable language_">self</span>.num[_classes = exp.num[_classes</span><br><span class="line">        <span class="variable language_">self</span>.confthre = exp.test[_conf</span><br><span class="line">        <span class="variable language_">self</span>.nmsthre = exp.nmsthre</span><br><span class="line">        <span class="variable language_">self</span>.test[_size = exp.test[_size</span><br><span class="line">        <span class="variable language_">self</span>.device = device</span><br><span class="line">        <span class="variable language_">self</span>.fp16 = fp16</span><br><span class="line">        <span class="variable language_">self</span>.preproc = ValTransform(legacy=legacy)</span><br><span class="line">        <span class="keyword">if</span> trt[_file <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">from</span> torch2trt <span class="keyword">import</span> TRTModule</span><br><span class="line"></span><br><span class="line">            model[_trt = TRTModule()</span><br><span class="line">            model[_trt.load[_state[_<span class="built_in">dict</span>(torch.load(trt[_file))</span><br><span class="line"></span><br><span class="line">            x = torch.ones(<span class="number">1</span>, <span class="number">3</span>, exp.test[_size[[<span class="number">0</span>[], exp.test[_size[[<span class="number">1</span>[]).cuda()</span><br><span class="line">            <span class="variable language_">self</span>.model(x)</span><br><span class="line">            <span class="variable language_">self</span>.model = model[_trt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inference</span>(<span class="params">self, img</span>):</span><br><span class="line">        img[_info = &#123;<span class="string">&quot;id&quot;</span>: <span class="number">0</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(img, <span class="built_in">str</span>):</span><br><span class="line">            img[_info[[<span class="string">&quot;file[_name&quot;</span>[] = os.path.basename(img)</span><br><span class="line">            img = cv2.imread(img)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            img[_info[[<span class="string">&quot;file[_name&quot;</span>[] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        height, width = img.shape[[:<span class="number">2</span>[]</span><br><span class="line">        img[_info[[<span class="string">&quot;height&quot;</span>[] = height</span><br><span class="line">        img[_info[[<span class="string">&quot;width&quot;</span>[] = width</span><br><span class="line">        img[_info[[<span class="string">&quot;raw[_img&quot;</span>[] = img</span><br><span class="line"></span><br><span class="line">        ratio = <span class="built_in">min</span>(<span class="variable language_">self</span>.test[_size[[<span class="number">0</span>[] / img.shape[[<span class="number">0</span>[], <span class="variable language_">self</span>.test[_size[[<span class="number">1</span>[] / img.shape[[<span class="number">1</span>[])</span><br><span class="line">        img[_info[[<span class="string">&quot;ratio&quot;</span>[] = ratio</span><br><span class="line"></span><br><span class="line">        img, [_ = <span class="variable language_">self</span>.preproc(img, <span class="literal">None</span>, <span class="variable language_">self</span>.test[_size)</span><br><span class="line">        img = torch.<span class="keyword">from</span>[_numpy(img).unsqueeze(<span class="number">0</span>)</span><br><span class="line">        img = img.<span class="built_in">float</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.device == <span class="string">&quot;gpu&quot;</span>:</span><br><span class="line">            img = img.cuda()</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.fp16:</span><br><span class="line">                img = img.half()  <span class="comment"># to FP16</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> torch.no[_grad():</span><br><span class="line">            t0 = time.time()</span><br><span class="line">            outputs = <span class="variable language_">self</span>.model(img)</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.decoder <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                outputs = <span class="variable language_">self</span>.decoder(outputs, dtype=outputs.<span class="built_in">type</span>())</span><br><span class="line">            outputs = postprocess(</span><br><span class="line">                outputs, <span class="variable language_">self</span>.num[_classes, <span class="variable language_">self</span>.confthre,</span><br><span class="line">                <span class="variable language_">self</span>.nmsthre, <span class="keyword">class</span>[_agnostic=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line">            logger.info(<span class="string">&quot;Infer time: &#123;:.4f&#125;s&quot;</span>.<span class="built_in">format</span>(time.time() - t0))</span><br><span class="line">        <span class="keyword">return</span> outputs, img[_info</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">visual</span>(<span class="params">self, output, img[_info, cls[_conf=<span class="number">0.5</span></span>):</span><br><span class="line">        <span class="comment">#print(img[_info)</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &#123;&#x27;id&#x27;: 0, &#x27;file[_name&#x27;: &#x27;00032团圆汤.png&#x27;, &#x27;height&#x27;: 200, &#x27;width&#x27;: 300,&#x27;&#x27;&#x27;</span></span><br><span class="line">        ratio = img[_info[[<span class="string">&quot;ratio&quot;</span>[]</span><br><span class="line">        img = img[_info[[<span class="string">&quot;raw[_img&quot;</span>[]</span><br><span class="line">        <span class="keyword">if</span> output <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> img</span><br><span class="line">        output = output.cpu()</span><br><span class="line"></span><br><span class="line">        bboxes = output[[:, <span class="number">0</span>:<span class="number">4</span>[]</span><br><span class="line">        <span class="comment"># preprocessing: resize</span></span><br><span class="line">        bboxes /= ratio</span><br><span class="line">        boxes=bboxes.numpy()</span><br><span class="line">        boxes = boxes.astype(<span class="built_in">int</span>)</span><br><span class="line">        <span class="built_in">print</span>(boxes)</span><br><span class="line">        cls = output[[:, <span class="number">6</span>[]</span><br><span class="line">        clses= cls.numpy()</span><br><span class="line">        <span class="comment">#转为list</span></span><br><span class="line">        clses = clses.tolist()</span><br><span class="line">        classnames = [[<span class="variable language_">self</span>.cls[_names[[<span class="built_in">int</span>(i)[] <span class="keyword">for</span> i <span class="keyword">in</span> clses[]</span><br><span class="line">        <span class="built_in">print</span>(classnames)</span><br><span class="line">        box2xml(boxes, classnames, <span class="string">&#x27;xml[_output/&#x27;</span>+img[_info[[<span class="string">&#x27;file[_name&#x27;</span>[].split(<span class="string">&#x27;.&#x27;</span>)[[<span class="number">0</span>[]+<span class="string">&#x27;.xml&#x27;</span>)</span><br><span class="line">        scores = output[[:, <span class="number">4</span>[] [* output[[:, <span class="number">5</span>[]</span><br><span class="line"></span><br><span class="line">        vis[_res = vis(img, bboxes, scores, cls, cls[_conf, <span class="variable language_">self</span>.cls[_names)</span><br><span class="line">        <span class="keyword">return</span> vis[_res,bboxes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image</span>[_demo(predictor, vis[_folder, path, current[_time, save[_result):</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">        files = get[_image[_<span class="built_in">list</span>(path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        files = [[path[]</span><br><span class="line">    files.sort()</span><br><span class="line">    error=[[[]</span><br><span class="line">    <span class="keyword">for</span> image[_name <span class="keyword">in</span> files:</span><br><span class="line">        outputs, img[_info = predictor.inference(image[_name)</span><br><span class="line">        result[_image,bboxes = predictor.visual(outputs[[<span class="number">0</span>[], img[_info, predictor.confthre)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(bboxes)&lt;<span class="number">3</span>:</span><br><span class="line">            error.append(image[_name)</span><br><span class="line">        <span class="keyword">if</span> save[_result:</span><br><span class="line">            save[_folder = os.path.join(</span><br><span class="line">                vis[_folder, time.strftime(<span class="string">&quot;%Y[_%m[_%d[_%H[_%M[_%S&quot;</span>, current[_time)</span><br><span class="line">            )</span><br><span class="line">            os.makedirs(save[_folder, exist[_ok=<span class="literal">True</span>)</span><br><span class="line">            save[_file[_name = os.path.join(save[_folder, os.path.basename(image[_name))</span><br><span class="line">            logger.info(<span class="string">&quot;Saving detection result in &#123;&#125;&quot;</span>.<span class="built_in">format</span>(save[_file[_name))</span><br><span class="line">            <span class="comment">####################################</span></span><br><span class="line">            bboxes=bboxes.numpy()</span><br><span class="line">            bboxes = bboxes.astype(<span class="built_in">int</span>)</span><br><span class="line">            log[_file = <span class="built_in">open</span>(<span class="string">&#x27;log.txt&#x27;</span>,<span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line">            log[_file.write(save[_file[_name+<span class="string">&quot;[[n&quot;</span>)</span><br><span class="line">            log[_file.write(<span class="built_in">str</span>(bboxes)+<span class="string">&quot;[[n&quot;</span>)</span><br><span class="line">            log[_file.close()</span><br><span class="line">            <span class="comment">###################################</span></span><br><span class="line">            <span class="comment"># result[_image=koutu(result[_image,bboxes)</span></span><br><span class="line">            cv2.imwrite(save[_file[_name, result[_image)</span><br><span class="line">        ch = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="number">27</span> <span class="keyword">or</span> ch == <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>) <span class="keyword">or</span> ch == <span class="built_in">ord</span>(<span class="string">&quot;Q&quot;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;错误标注文件:&#x27;</span>,error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imageflow</span>[_demo(predictor, vis[_folder, current[_time, args):</span><br><span class="line">    cap = cv2.VideoCapture(args.path <span class="keyword">if</span> args.demo == <span class="string">&quot;video&quot;</span> <span class="keyword">else</span> args.camid)</span><br><span class="line">    width = cap.get(cv2.CAP[_PROP[_FRAME[_WIDTH)  <span class="comment"># float</span></span><br><span class="line">    height = cap.get(cv2.CAP[_PROP[_FRAME[_HEIGHT)  <span class="comment"># float</span></span><br><span class="line">    fps = cap.get(cv2.CAP[_PROP[_FPS)</span><br><span class="line">    <span class="keyword">if</span> args.save[_result:</span><br><span class="line">        save[_folder = os.path.join(</span><br><span class="line">            vis[_folder, time.strftime(<span class="string">&quot;%Y[_%m[_%d[_%H[_%M[_%S&quot;</span>, current[_time)</span><br><span class="line">        )</span><br><span class="line">        os.makedirs(save[_folder, exist[_ok=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> args.demo == <span class="string">&quot;video&quot;</span>:</span><br><span class="line">            save[_path = os.path.join(save[_folder, os.path.basename(args.path))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            save[_path = os.path.join(save[_folder, <span class="string">&quot;camera.mp4&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">f&quot;video save[_path is <span class="subst">&#123;save[_path&#125;</span>&quot;</span>)</span><br><span class="line">        vid[_writer = cv2.VideoWriter(</span><br><span class="line">            save[_path, cv2.VideoWriter[_fourcc([*<span class="string">&quot;mp4v&quot;</span>), fps, (<span class="built_in">int</span>(width), <span class="built_in">int</span>(height))</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ret[_val, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> ret[_val:</span><br><span class="line">            outputs, img[_info = predictor.inference(frame)</span><br><span class="line">            result[_frame = predictor.visual(outputs[[<span class="number">0</span>[], img[_info, predictor.confthre)</span><br><span class="line">            <span class="keyword">if</span> args.save[_result:</span><br><span class="line">                vid[_writer.write(result[_frame)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cv2.namedWindow(<span class="string">&quot;yolox&quot;</span>, cv2.WINDOW[_NORMAL)</span><br><span class="line">                cv2.imshow(<span class="string">&quot;yolox&quot;</span>, result[_frame)</span><br><span class="line">            ch = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="number">27</span> <span class="keyword">or</span> ch == <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>) <span class="keyword">or</span> ch == <span class="built_in">ord</span>(<span class="string">&quot;Q&quot;</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">exp, args</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.experiment[_name:</span><br><span class="line">        args.experiment[_name = exp.exp[_name</span><br><span class="line"></span><br><span class="line">    file[_name = os.path.join(exp.output[_<span class="built_in">dir</span>, args.experiment[_name)</span><br><span class="line">    os.makedirs(file[_name, exist[_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    vis[_folder = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> args.save[_result:</span><br><span class="line">        vis[_folder = os.path.join(file[_name, <span class="string">&quot;vis[_res&quot;</span>)</span><br><span class="line">        os.makedirs(vis[_folder, exist[_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.trt:</span><br><span class="line">        args.device = <span class="string">&quot;gpu&quot;</span></span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;Args: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(args))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.conf <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        exp.test[_conf = args.conf</span><br><span class="line">    <span class="keyword">if</span> args.nms <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        exp.nmsthre = args.nms</span><br><span class="line">    <span class="keyword">if</span> args.tsize <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        exp.test[_size = (args.tsize, args.tsize)</span><br><span class="line"></span><br><span class="line">    model = exp.get[_model()</span><br><span class="line">    logger.info(<span class="string">&quot;Model Summary: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(get[_model[_info(model, exp.test[_size)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.device == <span class="string">&quot;gpu&quot;</span>:</span><br><span class="line">        model.cuda()</span><br><span class="line">        <span class="keyword">if</span> args.fp16:</span><br><span class="line">            model.half()  <span class="comment"># to FP16</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.trt:</span><br><span class="line">        <span class="keyword">if</span> args.ckpt <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            ckpt[_file = os.path.join(file[_name, <span class="string">&quot;best[_ckpt.pth&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ckpt[_file = args.ckpt</span><br><span class="line">        logger.info(<span class="string">&quot;loading checkpoint&quot;</span>)</span><br><span class="line">        ckpt = torch.load(ckpt[_file, <span class="built_in">map</span>[_location=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">        <span class="comment"># load the model state dict</span></span><br><span class="line">        model.load[_state[_<span class="built_in">dict</span>(ckpt[[<span class="string">&quot;model&quot;</span>[])</span><br><span class="line">        logger.info(<span class="string">&quot;loaded checkpoint done.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.fuse:</span><br><span class="line">        logger.info(<span class="string">&quot;[[tFusing model...&quot;</span>)</span><br><span class="line">        model = fuse[_model(model)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.trt:</span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> args.fuse, <span class="string">&quot;TensorRT model is not support model fusing!&quot;</span></span><br><span class="line">        trt[_file = os.path.join(file[_name, <span class="string">&quot;model[_trt.pth&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> os.path.exists(</span><br><span class="line">            trt[_file</span><br><span class="line">        ), <span class="string">&quot;TensorRT model is not found![[n Run python3 tools/trt.py first!&quot;</span></span><br><span class="line">        model.head.decode[_<span class="keyword">in</span>[_inference = <span class="literal">False</span></span><br><span class="line">        decoder = model.head.decode[_outputs</span><br><span class="line">        logger.info(<span class="string">&quot;Using TensorRT to inference&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        trt[_file = <span class="literal">None</span></span><br><span class="line">        decoder = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    predictor = Predictor(</span><br><span class="line">        model, exp, COCO[_CLASSES, trt[_file, decoder,</span><br><span class="line">        args.device, args.fp16, args.legacy,</span><br><span class="line">    )</span><br><span class="line">    current[_time = time.localtime()</span><br><span class="line">    <span class="keyword">if</span> args.demo == <span class="string">&quot;image&quot;</span>:</span><br><span class="line">        image[_demo(predictor, vis[_folder, args.path, current[_time, args.save[_result)</span><br><span class="line">    <span class="keyword">elif</span> args.demo == <span class="string">&quot;video&quot;</span> <span class="keyword">or</span> args.demo == <span class="string">&quot;webcam&quot;</span>:</span><br><span class="line">        imageflow[_demo(predictor, vis[_folder, current[_time, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [_[_name[_[_ == <span class="string">&quot;[_[_main[_[_&quot;</span>:</span><br><span class="line">    args = make[_parser().parse[_args()</span><br><span class="line">    exp = get[_exp(args.exp[_file, args.name)</span><br><span class="line"></span><br><span class="line">    main(exp, args)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于直方图分析的自适应阈值分割</title>
    <link href="/2022/06/10/%E5%9F%BA%E4%BA%8E%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%88%86%E6%9E%90%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94%E9%98%88%E5%80%BC%E5%88%86%E5%89%B2/"/>
    <url>/2022/06/10/%E5%9F%BA%E4%BA%8E%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%88%86%E6%9E%90%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94%E9%98%88%E5%80%BC%E5%88%86%E5%89%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>分割出文字，去掉背景</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-11.png"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>画出直方图，用多项式曲线拟合。在斜率绝对值最大处左右两侧找极小值，对应横坐标作为分割的左右阈值。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-10-1024x534.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-12-1024x538.png"></p><p>对于背景复杂，前景颜色单一的图片，分割效果佳，其余情况可能不适合。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-13.png"></p><p>细节略</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于已知背景的验证码文字倾斜矫正及识别</title>
    <link href="/2022/06/10/%E5%9F%BA%E4%BA%8E%E5%B7%B2%E7%9F%A5%E8%83%8C%E6%99%AF%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E6%96%87%E5%AD%97%E5%80%BE%E6%96%9C%E7%9F%AB%E6%AD%A3%E5%8F%8A%E8%AF%86%E5%88%AB/"/>
    <url>/2022/06/10/%E5%9F%BA%E4%BA%8E%E5%B7%B2%E7%9F%A5%E8%83%8C%E6%99%AF%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E6%96%87%E5%AD%97%E5%80%BE%E6%96%9C%E7%9F%AB%E6%AD%A3%E5%8F%8A%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>请点击“荔枝茶”。即判断文字位置及顺序。</p><p>已知条件：yolox能够预测汉字位置，paddleOCR可以直接识别文字，但有时出错。</p><p>现在要做的是矫正验证码图片中的文字倾斜，以提高文字识别准确率。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-6.png"></p><h2 id="背景匹配"><a href="#背景匹配" class="headerlink" title="背景匹配"></a>背景匹配</h2><p>所有可能的背景</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-5.png"></p><p>用直方图标准差的方法来做背景匹配</p><p><a href="https://xinhaojin.github.io/2022/06/10/%E5%9B%BE%E5%83%8F%E7%9B%B8%E4%BC%BC%E5%BA%A6-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%A0%87%E5%87%86%E5%B7%AE/">图像相似度-直方图标准差</a></p><h2 id="汉字分割"><a href="#汉字分割" class="headerlink" title="汉字分割"></a>汉字分割</h2><p>为什么要分割？分割后可以根据二值图来画出最小外接矩形，计算倾斜角度，给原图汉字矫正。</p><p>怎么分割？遍历像素，如果与对应背景像素相差较大，认为是汉字。</p><p>怎么定义“相差较大大”？可以计算像素间的距离（颜色距离&#x2F;差异）。一种比较接近人眼观察的颜色差异的计算方法是LAB色彩空间的deltaE，（貌似计算速度较慢），但很准确，相比较rgb值方差之类的方法。</p><p>计算方法<a href="https://python-colormath.readthedocs.io/en/latest/delta_e.html">Delta E Equations — python-colormath 3.0.0 documentation</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> colormath.color_objects <span class="keyword">import</span> LabColor</span><br><span class="line"><span class="keyword">from</span> colormath.color_diff <span class="keyword">import</span> delta_e_cmc</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img_lab=cv2.cvtColor(img,cv2.COLOR_BGR2LAB)</span><br><span class="line">background_lab=cv2.cvtColor(background,cv2.COLOR_BGR2LAB)</span><br><span class="line">......</span><br><span class="line">a=img_lab[j,k]</span><br><span class="line">b=background_lab[j,k]</span><br><span class="line">color1 = LabColor(lab_l=a[<span class="number">0</span>], lab_a=a[<span class="number">1</span>], lab_b=a[<span class="number">2</span>])</span><br><span class="line">color2 = LabColor(lab_l=b[<span class="number">0</span>], lab_a=b[<span class="number">1</span>], lab_b=b[<span class="number">2</span>])</span><br><span class="line">delta_e = delta_e_cmc(color1, color2)</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-7.png"></p><h2 id="倾斜矫正"><a href="#倾斜矫正" class="headerlink" title="倾斜矫正"></a>倾斜矫正</h2><p>倾斜矫正的基础是上一步的分割，得到二值图像之后，</p><p>先用contours, hierarchy &#x3D; cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)画出轮廓</p><p>然后最关键的一步，要把轮廓点汇总，把轮廓改成rect &#x3D; cv2.minAreaRect(contours)接收的输入格式，画出最小外接矩形</p><p>然后计算倾斜角度，因为这里基本上是+-45度小角度偏转，所以只要计算外接矩形的任意两个相邻顶点的直线斜率即可，若角度过大，+-90度使角度恢复到+-45度范围内即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">img, angle</span>):</span><br><span class="line">    rows, cols = img.shape[:<span class="number">2</span>]</span><br><span class="line">    rotate = cv2.getRotationMatrix2D((rows*<span class="number">0.5</span>, cols*<span class="number">0.5</span>), angle, <span class="number">1</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    第一个参数：旋转中心点</span></span><br><span class="line"><span class="string">    第二个参数：旋转角度</span></span><br><span class="line"><span class="string">    第三个参数：缩放比例</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    res = cv2.warpAffine(img, rotate, (cols, rows))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAngle</span>(<span class="params">box</span>):</span><br><span class="line">    x1, y1 = <span class="built_in">list</span>(box[<span class="number">0</span>])</span><br><span class="line">    x2, y2 = <span class="built_in">list</span>(box[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(x1-x2)&lt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    k = (y1-y2)/(x1-x2)  <span class="comment"># 计算斜率的相反数，因为图像左上角为原点，不同于普通直角坐标系</span></span><br><span class="line">    angle = np.arctan(-k)*<span class="number">180</span>/math.pi</span><br><span class="line">    <span class="keyword">if</span> angle &gt; <span class="number">45</span>:</span><br><span class="line">        angle -= <span class="number">90</span></span><br><span class="line">    <span class="keyword">elif</span> angle&lt;-<span class="number">45</span>:</span><br><span class="line">        angle += <span class="number">90</span></span><br><span class="line">    <span class="keyword">return</span> angle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mergeContours</span>(<span class="params">contours</span>):  <span class="comment"># 轮廓点汇总</span></span><br><span class="line">    nb = []</span><br><span class="line">    <span class="keyword">for</span> contour <span class="keyword">in</span> contours:</span><br><span class="line">        rect = cv2.minAreaRect(contour)  <span class="comment"># 最小外接矩形</span></span><br><span class="line">        box = cv2.boxPoints(rect)</span><br><span class="line">        box = np.int0(box)  <span class="comment"># np.ndarray</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> box:</span><br><span class="line">            temp = []</span><br><span class="line">            temp.append(b.tolist())</span><br><span class="line">            nb.append(temp)</span><br><span class="line">    nb = np.array(nb)</span><br><span class="line">    <span class="keyword">return</span> nb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawBox</span>(<span class="params">img, contours</span>):  <span class="comment"># 图,轮廓点,返回包含所有轮廓点的最小外接矩形的图,矩形四角</span></span><br><span class="line">    rect = cv2.minAreaRect(contours)  <span class="comment"># 最小外接矩形</span></span><br><span class="line">    box = cv2.boxPoints(rect)</span><br><span class="line">    box = np.int0(box)</span><br><span class="line">    img = cv2.drawContours(img, [box], <span class="number">0</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> img, box</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">correct</span>(<span class="params">img</span>):  <span class="comment"># 传入单通道灰度图</span></span><br><span class="line">    ret, img = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    <span class="comment">#img = cv2.resize(img, (64, 64))</span></span><br><span class="line">    contours, hierarchy = cv2.findContours(</span><br><span class="line">        img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">    img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)</span><br><span class="line"></span><br><span class="line">    contours = mergeContours(contours)  <span class="comment"># 合并轮廓点</span></span><br><span class="line">    img, box = drawBox(img, contours)  <span class="comment"># 画最小外接矩形</span></span><br><span class="line">    angle = getAngle(box)</span><br><span class="line">    <span class="built_in">print</span>(angle)</span><br><span class="line">    img = rotate(img, <span class="built_in">int</span>(-angle))</span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure><p>最后矫正的效果如上图所示，二值图中的文字其实已经矫正了。</p><h2 id="文字识别"><a href="#文字识别" class="headerlink" title="文字识别"></a>文字识别</h2><p>1.直接识别文字是不行的，因为文字图片并不算清楚，十有八九要识别错误。</p><p>2.但是，文字识别模型的输出结果其实是对应字典里每个字的概率，我只要去找标题中三个字的概率哪个最大就行了。</p><p>3.可能有两个框，对于概率最大的是同一个字，怎么处理？</p><p>4.每一个矩形框（一张小图），可以得到标题中三个字的概率，三个矩形框中的文字识别结束后，得到一个3*3的概率矩阵</p><p>先找到9个中最大的，记录它的行列号，消去所在行所在列，剩余4个</p><p>找到4个中最大的，记录它原先的行列号，消去所在行所在列，剩余1个</p><p>三个框，三个字，一一对应，能充分利用排除法和题目已知条件</p><table><thead><tr><th>字1</th><th>字2</th><th>字3</th></tr></thead><tbody><tr><td>矩形框1</td><td>0.xxx</td><td>0.xxx</td></tr><tr><td>矩形框2</td><td>0.xxx(9个中最大)</td><td>0.xxx</td></tr><tr><td>矩形框3</td><td>0.xxx</td><td>0.xxx(4个中最大)</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>把矫正后的文字小图放进文字识别模型中识别，如下两图，其中“糖”矫正成了偏转90度的样子，但结果却是正确的，得益于上述排除法。100张测试图片识别准确率从84%提高到99%。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-8.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-9.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>验证码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图像相似度-直方图标准差</title>
    <link href="/2022/06/10/%E5%9B%BE%E5%83%8F%E7%9B%B8%E4%BC%BC%E5%BA%A6-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%A0%87%E5%87%86%E5%B7%AE/"/>
    <url>/2022/06/10/%E5%9B%BE%E5%83%8F%E7%9B%B8%E4%BC%BC%E5%BA%A6-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%A0%87%E5%87%86%E5%B7%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>现有一张验证码图片，可能的背景有6种，怎么判断他的背景是哪一种？</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-2.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-4.png"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>对于这种大面积相同的图片，一种很快速的方法是计算两张图直方图的标准差。</p><p>计算和每一张背景图的标准差，取最小的就行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算直方图的标准差</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_contrast_std</span>(<span class="params">img1, img2</span>):</span><br><span class="line">    image1 = Image.<span class="built_in">open</span>(img1)</span><br><span class="line">    image2 = Image.<span class="built_in">open</span>(img2)</span><br><span class="line"></span><br><span class="line">    h1 = image1.histogram()</span><br><span class="line">    h2 = image2.histogram()</span><br><span class="line">    h1 = np.array(h1)</span><br><span class="line">    h2 = np.array(h2)</span><br><span class="line">    result = np.std(h1-h2)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>验证码背景合成（多张残缺图合成一张完整图）</title>
    <link href="/2022/06/10/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%83%8C%E6%99%AF%E5%90%88%E6%88%90%EF%BC%88%E5%A4%9A%E5%BC%A0%E6%AE%8B%E7%BC%BA%E5%9B%BE%E5%90%88%E6%88%90%E4%B8%80%E5%BC%A0%E5%AE%8C%E6%95%B4%E5%9B%BE%EF%BC%89/"/>
    <url>/2022/06/10/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%83%8C%E6%99%AF%E5%90%88%E6%88%90%EF%BC%88%E5%A4%9A%E5%BC%A0%E6%AE%8B%E7%BC%BA%E5%9B%BE%E5%90%88%E6%88%90%E4%B8%80%E5%BC%A0%E5%AE%8C%E6%95%B4%E5%9B%BE%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>有多张验证码图片，背景相同，如何获取完整的背景图？</p><p>已有条件：可以使用yolox检测出汉字的位置矩形框。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image.png"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>输入：一个验证码图片文件夹</p><p>输出：包含所有的背景图片的文件夹</p><ol><li>背景区分：假设相同的背景的验证码图片的背景部分是完全一致的的，那么可以比较边框的像素点来判断是否是同一个背景，把所有图片按照背景分类。</li><li>针对每一个分类，用yolox预测出汉字框，把汉字框部分像素点设置为黑色，以其中一张为基础，遍历它的黑色像素位置，在其他几张验证码图片上查找是否有不是黑色的像素点，如果有，则替换基础图片的对应像素点。</li><li>保存合成的背景图片。</li></ol><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/06/image-1.png"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>这里的yolox_predict.imagedemo()用于得到所有文字矩形框</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#用于分析合成所有背景图</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> yolox_predict</span><br><span class="line"></span><br><span class="line"><span class="comment">#图片背景分类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">classify</span>(<span class="params"><span class="built_in">dir</span></span>):</span><br><span class="line">    <span class="built_in">dict</span>=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> fileName <span class="keyword">in</span> os.listdir(<span class="built_in">dir</span>):</span><br><span class="line">        filePath=os.path.join(<span class="built_in">dir</span>,fileName)</span><br><span class="line">        img=cv2.imdecode(np.fromfile(filePath,dtype=np.uint8),-<span class="number">1</span>)</span><br><span class="line">        x,y=img.shape[:<span class="number">2</span>]</span><br><span class="line">        <span class="comment">#提取四个角的像素值作为特征点，分类依据</span></span><br><span class="line">        feature = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> img[<span class="number">0</span>,<span class="number">0</span>])+<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> img[<span class="number">0</span>,y-<span class="number">1</span>])+<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> img[x-<span class="number">1</span>,<span class="number">0</span>])+<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> img[x-<span class="number">1</span>,y-<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(feature)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">dict</span>.__contains__(<span class="built_in">str</span>(feature)):</span><br><span class="line">            <span class="built_in">dict</span>[<span class="built_in">str</span>(feature)].append(fileName)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">dict</span>[<span class="built_in">str</span>(feature)]=[fileName]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># inputDir=&quot;E:/Y1/验证码/数据集/VOC2007-网易/JPEGImages&quot;</span></span><br><span class="line">inputDir=<span class="string">&quot;C:/Users/Administrator/Desktop/test&quot;</span></span><br><span class="line">outputDir=<span class="string">&quot;C:/Users/Administrator/Desktop/result&quot;</span></span><br><span class="line">DICT=classify(inputDir)<span class="comment">#图片背景分类</span></span><br><span class="line"><span class="built_in">print</span>(DICT)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;分类完成...&#x27;</span>)</span><br><span class="line">predictor,current_time= yolox_predict.init()<span class="comment">#加载模型</span></span><br><span class="line">index=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> DICT.items():</span><br><span class="line">    imgs=[]<span class="comment">#该分类下所有挖掉汉字后的背景图</span></span><br><span class="line">    rects=[]<span class="comment">#最后一张图的三个矩形框</span></span><br><span class="line">    <span class="keyword">for</span> fileName <span class="keyword">in</span> value:<span class="comment">#同一背景的验证码图片</span></span><br><span class="line">        filePath=os.path.join(inputDir,fileName)</span><br><span class="line">        rects=yolox_predict.image_demo(predictor, vis_folder=outputDir, path=filePath, current_time=current_time)</span><br><span class="line">        <span class="built_in">print</span>(filePath+<span class="string">&#x27;预测完成...&#x27;</span>)</span><br><span class="line">        img=cv2.imdecode(np.fromfile(filePath,dtype=np.uint8),-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> rect <span class="keyword">in</span> rects:</span><br><span class="line">            x1,y1,x2,y2=rect</span><br><span class="line">            img[y1:y2,x1:x2]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">        imgs.append(img)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(imgs)&lt;<span class="number">5</span>:<span class="comment">#5张相同背景的验证码图片，被认为可以拼凑出完整背景</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> rect <span class="keyword">in</span> rects:</span><br><span class="line">        x1,y1,x2,y2=rect</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(x1,x2):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(y1,y2):<span class="comment">#空缺的每个像素</span></span><br><span class="line">                <span class="keyword">for</span> img <span class="keyword">in</span> imgs[:-<span class="number">1</span>]:<span class="comment">#在其余几张图中找</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">sum</span>(img[y,x])&gt;<span class="number">0</span>:<span class="comment">#不是黑的</span></span><br><span class="line">                            imgs[-<span class="number">1</span>][y,x]=img[y,x]<span class="comment">#找到，替换</span></span><br><span class="line">    cv2.imwrite(os.path.join(outputDir,<span class="built_in">str</span>(index)+<span class="string">&#x27;.jpg&#x27;</span>) ,imgs[-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;合成背景图&#x27;</span>+os.path.join(outputDir,<span class="built_in">str</span>(index)+<span class="string">&#x27;.jpg&#x27;</span>))</span><br><span class="line">    index+=<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>图像处理</tag>
      
      <tag>验证码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu20.04安装配置vncserver</title>
    <link href="/2022/05/18/ubuntu20-04%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEvncserver/"/>
    <url>/2022/05/18/ubuntu20-04%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEvncserver/</url>
    
    <content type="html"><![CDATA[<h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><pre><code>sudo apt updatesudo apt upgrade</code></pre><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><pre><code>sudo apt install tigervncserver</code></pre><p>打开端口</p><pre><code>sudo firewall-cmd --zone=public --add-port=5900/tcp --permanentsudo firewall-cmd --zone=public --add-port=5901/tcp --permanent</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>运行 vncserver 命令，该命令将创建初始配置并设置密码。运行以下命令时不要使用 sudo</p><pre><code>vncserver</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/05/image-3-1024x386.png"></p><p>系统将提示您输入并确认密码，以及是否将其设置为仅查看密码。如果您选择设置仅查看密码，则用户将无法使用鼠标和键盘与 VNC 实例进行交互</p><p>第一次 vncserver 运行命令时，它将创建密码文件并将其存储在 ~&#x2F;.vnc 目录中，如果不存在，将创建该目录。</p><p>注意上面输出中主机名之后的 :1 。这表示运行 vnc 服务器的显示端口号。在我们的例子中，服务器在 TCP 端口 5901 (5900 + 1)上运行。如果您创建第二个实例， vncserver 它将在下一个空闲端口上运行，即 :2 这意味着服务器正在端口 5902 (5900 + 2)上运行。</p><p>重要的是要记住，当使用 VNC 服务器时， :X 是一个引用的显示端口 5900+X 。</p><p>注：如果启动时出现 vnc 启动异常： is taken because of &#x2F;tmp&#x2F;.X11-unix&#x2F;X1</p><p>此时只需要将提示的文件删除即可。再次输入 vncserver。</p><p>在继续下一步之前，首先使用带有 -kill 选项和服务器编号作为参数的 vncserver 命令停止 VNC 实例。在我们的例子中，服务器在端口 5901 (:1)中运行，因此我们将使用以下命令停止它：</p><pre><code>vncserver -kill :1</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/05/image-4.png"></p><p>现在我们已经在服务器上安装了 Xfce 和 TigerVNC ，我们需要配置 TigerVNC 来使用 Xfce 。为此，请创建以下文件 〜&#x2F;.vnc&#x2F;xstartup：</p><pre><code>vi ~/.vnc/xstartup#!/bin/shunset SESSION_MANAGERunset DBUS_SESSION_BUS_ADDRESSexec startxfce4</code></pre><p>保存并关闭文件。无论何时启动或重启 TigerVNC 服务器，都将自动执行上述命令。</p><p>~&#x2F;.vnc&#x2F;xstartup 文件还需要具有执行权限。运行以下命令以确保权限正确：</p><pre><code>chmod u+x ~/.vnc/xstartup</code></pre><p>如果需要将<a href="https://xie.infoq.cn/link?target=http://tigervnc.org/doc/vncserver.html">附加选项</a>传递给 VNC 服务器，则可以创建一个名为 config 的文件，并为每行添加一个选项。这是一个例子：</p><p>文件 ~&#x2F;.vnc&#x2F;config</p><pre><code>geometry=1920x1084dpi=96</code></pre><h2 id="创建-Systemd-单元文件"><a href="#创建-Systemd-单元文件" class="headerlink" title="创建 Systemd 单元文件"></a>创建 Systemd 单元文件</h2><p>我们将创建一个 systemd 单元文件，使我们能够根据需要轻松启动，停止和重新启动 VNC 服务，与任何其他 systemd 服务相同。</p><p>打开文本编辑器，将以下配置复制并粘贴到其中。</p><pre><code>sudo vi /etc/systemd/system/vncserver@.service</code></pre><p>请务必更改第 7 行中的用户名以匹配您的用户名。</p><pre><code>[Unit]Description=Remote desktop service (VNC)After=syslog.target network.target[Service]Type=simpleUser=usernamePAMName=loginPIDFile=/home/%u/.vnc/%H%i.pidExecStartPre=/bin/sh -c &#39;/usr/bin/vncserver -kill :%i &gt; /dev/null 2&gt;&amp;1  :&#39;ExecStart=/usr/bin/vncserver :%i -geometry 1440x900 -alwaysshared -fgExecStop=/usr/bin/vncserver -kill :%i[Install]WantedBy=multi-user.target</code></pre><p>保存并关闭文件。</p><p>通知 systemd 我们创建了一个新的单元文件：</p><pre><code>sudo systemctl daemon-reload</code></pre><p>下一步是使用以下命令启用单元文件：</p><pre><code>sudo systemctl enable vncserver@1.service</code></pre><p>符号 1 后面的数字 @ 定义了运行 VNC 服务的显示端口。这意味着 VNC 服务器将侦听端口 5901 ，正如我们在上一节中讨论的那样。</p><p>执行以下命令启动 VNC 服务：</p><pre><code>sudo systemctl start vncserver@1.service</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/05/image-5-1024x237.png"></p><pre><code>sudo systemctl start vncserver@1.service#启动sudo systemctl enable vncserver@1.service#自启动</code></pre>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>selenium爬取极验验证码，PaddleOCR识别文字作为文件名</title>
    <link href="/2022/05/15/selenium%E7%88%AC%E5%8F%96%E6%9E%81%E9%AA%8C%E9%AA%8C%E8%AF%81%E7%A0%81%EF%BC%8Cpaddleocr%E8%AF%86%E5%88%AB%E6%96%87%E5%AD%97%E4%BD%9C%E4%B8%BA%E6%96%87%E4%BB%B6%E5%90%8D/"/>
    <url>/2022/05/15/selenium%E7%88%AC%E5%8F%96%E6%9E%81%E9%AA%8C%E9%AA%8C%E8%AF%81%E7%A0%81%EF%BC%8Cpaddleocr%E8%AF%86%E5%88%AB%E6%96%87%E5%AD%97%E4%BD%9C%E4%B8%BA%E6%96%87%E4%BB%B6%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>自动爬取验证码图片，图片文件名需要包含右上角的标题文字（在网页上是图片类型，不是文本）</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/05/image-2.png"></p><h2 id="Edge-driver初始化"><a href="#Edge-driver初始化" class="headerlink" title="Edge driver初始化"></a>Edge driver初始化</h2><p>第一种</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> msedge.selenium_tools <span class="keyword">import</span> Edge, EdgeOptions</span><br><span class="line">        edge_options = EdgeOptions()</span><br><span class="line">        edge_options.use_chromium = <span class="literal">True</span></span><br><span class="line">        edge_options.add_argument(<span class="string">&#x27;headless&#x27;</span>)<span class="comment">#后台运行</span></span><br><span class="line">        edge_options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>,<span class="string">&#x27;enable-logging&#x27;</span>])</span><br><span class="line">        driver = Edge(options=edge_options)</span><br><span class="line">        <span class="keyword">return</span> driver</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver=webdriver.Edge(executable_path=<span class="string">&#x27;msedgedriver.exe&#x27;</span>)</span><br><span class="line"><span class="comment">#在https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/下载对应驱动</span></span><br></pre></td></tr></table></figure><h2 id="PaddleOCR文字识别"><a href="#PaddleOCR文字识别" class="headerlink" title="PaddleOCR文字识别"></a>PaddleOCR文字识别</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddleocr <span class="keyword">import</span> PaddleOCR</span><br><span class="line">ocr = PaddleOCR(use_angle_cls=<span class="literal">True</span>, lang=<span class="string">&quot;ch&quot;</span>)<span class="comment">#启动ocr引擎</span></span><br><span class="line">result = ocr.ocr(<span class="string">&#x27;temp.jpg&#x27;</span>)</span><br><span class="line">text=result[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>]<span class="comment">#只有一个字的情况</span></span><br></pre></td></tr></table></figure><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><p>图片下载下来后，用paddleOCR识别，发现无结果，用opencv读取，发现有4通道，应该是有一个透明的通道</p><p>把4通道分别显示出来后发现有信息的是第4通道，所以需要把下载下来的图片读取第4通道保存为灰度图，再给paddleOCR识别即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img=cv2.imdecode(np.fromfile(<span class="string">&#x27;temp.jpg&#x27;</span>,dtype=np.uint8),-<span class="number">1</span>)<span class="comment">#读取图片</span></span><br><span class="line">img=img[:,:,<span class="number">3</span>]<span class="comment">#取第四个通道</span></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;temp.jpg&#x27;</span>,img)<span class="comment">#保存包含汉字信息的灰度图</span></span><br></pre></td></tr></table></figure><p><img src="https://static.geetest.com/nerualpic/original_word_pic/jiangchengzhengjunti/fd6a0e7d3606d6c328cd552c2bb52fa3.png"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> paddleocr <span class="keyword">import</span> PaddleOCR</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downloadPic</span>(<span class="params">url, filename</span>):<span class="comment"># 下载图片</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 下载图片，并保存到文件夹中</span></span><br><span class="line">        urllib.request.urlretrieve(url=url, filename=filename)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;IOError&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Exception&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transfer</span>(<span class="params">num</span>):<span class="comment"># 序号前加0</span></span><br><span class="line">    temp = num</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        temp = <span class="built_in">int</span>(temp/<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> temp &gt; <span class="number">0</span>:</span><br><span class="line">            count = count+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span>*(<span class="number">4</span>-count)+<span class="built_in">str</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getTitleText</span>(<span class="params">titleImgs,ocr</span>):</span><br><span class="line">    title = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        downloadPic(titleImgs[i],<span class="string">&#x27;temp.jpg&#x27;</span>) <span class="comment"># 下载图片,保存到当前文件夹</span></span><br><span class="line">        img=cv2.imdecode(np.fromfile(<span class="string">&#x27;temp.jpg&#x27;</span>,dtype=np.uint8),-<span class="number">1</span>)<span class="comment">#读取图片</span></span><br><span class="line">        img=img[:,:,<span class="number">3</span>]<span class="comment">#取第四个通道</span></span><br><span class="line">        cv2.imwrite(<span class="string">&#x27;temp.jpg&#x27;</span>,img)<span class="comment">#保存包含汉字信息的灰度图</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        result = ocr.ocr(<span class="string">&#x27;temp.jpg&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(result)==<span class="number">0</span>:<span class="comment">#识别失败，不知道什么原因，跳过即可</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            title+=result[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> title</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">mode</span>):<span class="comment">#初始化driver</span></span><br><span class="line">    <span class="keyword">if</span> mode ==<span class="number">1</span>:<span class="comment">#不用driver.exe</span></span><br><span class="line">        <span class="keyword">from</span> msedge.selenium_tools <span class="keyword">import</span> Edge, EdgeOptions</span><br><span class="line">        edge_options = EdgeOptions()</span><br><span class="line">        edge_options.use_chromium = <span class="literal">True</span></span><br><span class="line">        edge_options.add_argument(<span class="string">&#x27;headless&#x27;</span>)</span><br><span class="line">        edge_options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>,<span class="string">&#x27;enable-logging&#x27;</span>])</span><br><span class="line">        driver = Edge(options=edge_options)</span><br><span class="line">        <span class="keyword">return</span> driver</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        driver=webdriver.Edge(executable_path=<span class="string">&#x27;msedgedriver.exe&#x27;</span>)</span><br><span class="line">        driver.maximize_window()</span><br><span class="line">        <span class="keyword">return</span> driver</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ocr = PaddleOCR(use_angle_cls=<span class="literal">True</span>, lang=<span class="string">&quot;ch&quot;</span>)<span class="comment">#启动ocr引擎</span></span><br><span class="line">        <span class="built_in">dir</span>=<span class="string">&#x27;datasets/jiyan_new/&#x27;</span><span class="comment">#保存图片的文件夹</span></span><br><span class="line">        driver=init(<span class="number">0</span>)</span><br><span class="line">        driver.get(<span class="string">&#x27;https://www.geetest.com/adaptive-captcha-demo&#x27;</span>)</span><br><span class="line">        driver.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 最多等待时间</span></span><br><span class="line">        driver.find_element_by_css_selector(<span class="string">&#x27;.tab-item-2&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        driver.find_element_by_css_selector(<span class="string">&#x27;.geetest_btn_click&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="built_in">dir</span>):</span><br><span class="line">            os.mkdir(<span class="built_in">dir</span>)</span><br><span class="line">        files = os.listdir(<span class="built_in">dir</span>)  <span class="comment"># 获取文件数目</span></span><br><span class="line">        num = <span class="built_in">len</span>(files)+<span class="number">1</span>  <span class="comment"># 起始序号</span></span><br><span class="line"></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        last_img_src = <span class="string">&#x27;&#x27;</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> index &lt; <span class="number">500</span>:  <span class="comment"># 需要获取的验证码数量</span></span><br><span class="line">            time.sleep(<span class="number">0.8</span>)</span><br><span class="line">            title_imgs=driver.find_element_by_css_selector(<span class="string">&#x27;.geetest_ques_tips&#x27;</span>)</span><br><span class="line">            <span class="comment">#获取子元素</span></span><br><span class="line">            title_imgs=title_imgs.find_elements_by_tag_name(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">            <span class="comment">#获取子元素的src属性 标题三个字的图片url</span></span><br><span class="line">            title_imgs=[title_img.get_attribute(<span class="string">&#x27;src&#x27;</span>) <span class="keyword">for</span> title_img <span class="keyword">in</span> title_imgs]</span><br><span class="line">            title=getTitleText(title_imgs,ocr)</span><br><span class="line">            <span class="keyword">if</span> title==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                driver.find_element_by_css_selector(</span><br><span class="line">                <span class="string">&#x27;.geetest_refresh&#x27;</span>).click()  <span class="comment"># 刷新按钮</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            img_src = driver.find_element_by_css_selector(<span class="string">&#x27;.geetest_bg&#x27;</span>).get_attribute(<span class="string">&#x27;style&#x27;</span>)  <span class="comment"># 图片url</span></span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            background-image: </span></span><br><span class="line"><span class="string">            url(&quot;https://static.geetest.com/captcha_v4/policy/fdd2aaa4a429487381bd673b104f152d/word/14/2022-03-22T17/9cc1499b9d0646618f0b12863e6410ce.jpg&quot;);</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            img_src = img_src.split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> img_src == last_img_src:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            last_img_src = img_src</span><br><span class="line">            filename = transfer(num+index)+title+<span class="string">&#x27;.png&#x27;</span></span><br><span class="line">            downloadPic(img_src, <span class="built_in">dir</span>+filename)</span><br><span class="line">            time.sleep(<span class="number">0.2</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;序号：&#x27;</span>+<span class="built_in">str</span>(index))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;文件名：&#x27;</span>+filename)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            driver.find_element_by_css_selector(</span><br><span class="line">                <span class="string">&#x27;.geetest_refresh&#x27;</span>).click()  <span class="comment"># 刷新按钮</span></span><br><span class="line">        driver.quit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>selenium</tag>
      
      <tag>验证码</tag>
      
      <tag>ocr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux命令行代理工具：proxychains</title>
    <link href="/2022/05/09/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%EF%BC%9Aproxychains/"/>
    <url>/2022/05/09/linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%EF%BC%9Aproxychains/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>sudo apt install proxychains4</code></pre><p>编辑&#x2F;etc&#x2F;proxychains4.conf</p><p>在末尾添加代理服务器设置</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/05/image.png"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><pre><code>curl www.httpbin.org/ip</code></pre><p>在命令前添加proxychains4来走代理</p><pre><code>proxychains4 curl www.httpbin.org/ip</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/05/image-1-1024x339.png"></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取PDF中的可复制的文本信息</title>
    <link href="/2022/04/14/%E8%8E%B7%E5%8F%96pdf%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%A4%8D%E5%88%B6%E7%9A%84%E6%96%87%E6%9C%AC%E4%BF%A1%E6%81%AF/"/>
    <url>/2022/04/14/%E8%8E%B7%E5%8F%96pdf%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%A4%8D%E5%88%B6%E7%9A%84%E6%96%87%E6%9C%AC%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PyPDF2</span><br><span class="line">pdfFile = <span class="built_in">open</span>(filePath, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">pdfReader = PyPDF2.PdfFileReader(pdfFile)</span><br><span class="line">page0=pdfReader.getPage(<span class="number">0</span>)<span class="comment">#获取第几页的内容</span></span><br><span class="line">page1=pdfReader.getPage(<span class="number">1</span>)</span><br><span class="line"><span class="comment">###########</span></span><br><span class="line">text = page.extractText()  <span class="comment"># 获得所有可复制的文本</span></span><br><span class="line">text = re.sub(<span class="string">&quot;\\s&quot;</span>, <span class="string">&quot;&quot;</span>, text)  <span class="comment"># 去掉所有空格</span></span><br><span class="line"><span class="comment">###########</span></span><br></pre></td></tr></table></figure><h2 id="例：PDF提取表格保存到Excel"><a href="#例：PDF提取表格保存到Excel" class="headerlink" title="例：PDF提取表格保存到Excel"></a>例：PDF提取表格保存到Excel</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-25.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/2297a99239f8bdc75b1b263f6941e40.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>PDF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>frp内网穿透</title>
    <link href="/2022/04/14/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2022/04/14/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>在公网访问实验室服务器</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>服务端：腾讯云服务器（centos7）,有公网IP</p><p>客户端：内网服务器（ubuntu20.04）</p><h2 id="下载frp"><a href="#下载frp" class="headerlink" title="下载frp"></a>下载frp</h2><p>两台机器都下载同一个东西</p><p><a href="https://github.com/fatedier/frp/releases">Releases · fatedier&#x2F;frp (github.com)</a></p><pre><code>wget https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_linux_amd64.tar.gztar -zxvf frp_0.38.0_linux_amd64.tar.gzcd frp_0.38.0_linux_amd64</code></pre><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><h3 id="修改frps-ini"><a href="#修改frps-ini" class="headerlink" title="修改frps.ini"></a>修改frps.ini</h3><pre><code>[common]bind_port = 7000</code></pre><h3 id="放行端口"><a href="#放行端口" class="headerlink" title="放行端口"></a>放行端口</h3><pre><code>firewall-cmd --zone=public --add-port=7000/tcp --permanentfirewall-cmd --zone=public --add-port=6000/tcp --permanent</code></pre><p>云服务器还需要在管理面板安全策略中再次放行</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>.&#x2F;frps -c .&#x2F;frps.ini</p><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><h3 id="修改frpc-ini"><a href="#修改frpc-ini" class="headerlink" title="修改frpc.ini"></a>修改frpc.ini</h3><pre><code>[common]    server_addr = xxx.xxx.xxx.xxx # frps 所在服务器的公网 IP    server_port = 7000[ssh]type = tcplocal_ip = 127.0.0.1    # 本地需要暴露到公网的服务地址local_port = 22         # 本地需要暴露到公网的服务地址remote_port = 6000      # 在 frp 服务端监听的端口，访问此端口的流量将会被转发到本地服务对应的端口</code></pre><h3 id="放行端口（这里是22，已经默认放行）"><a href="#放行端口（这里是22，已经默认放行）" class="headerlink" title="放行端口（这里是22，已经默认放行）"></a>放行端口（这里是22，已经默认放行）</h3><pre><code>firewall-cmd --zone=public --add-port=22/tcp --permanent</code></pre><h3 id="启动客户端程序"><a href="#启动客户端程序" class="headerlink" title="启动客户端程序"></a>启动客户端程序</h3><pre><code>./frpc -c ./frpc.ini</code></pre><h2 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h2><pre><code>ssh username@xxx.xxx.xxx.xxx -p 6000</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-24.png"></p><p>用内网服务器的用户名和密码</p><p>用公网服务器的IP和端口</p><h2 id="设置开启自启动"><a href="#设置开启自启动" class="headerlink" title="设置开启自启动"></a>设置开启自启动</h2><h3 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h3><p>服务端</p><pre><code>sudo vim /lib/systemd/system/frps.service[Unit]Description=fraps serviceAfter=network.target network-online.target syslog.targetWants=network.target network-online.target[Service]Type=simple#启动服务的命令（此处写你的frps的实际安装目录）ExecStart=/your/path/frps -c /your/path/frps.ini[Install]WantedBy=multi-user.target</code></pre><h3 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h3><pre><code>sudo systemctl start frps#启动sudo systemctl enable frps#自启动</code></pre><p>客户端一模一样的操作，只不过把frps改成frpc</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre><code>sudo apt install firewall                 //安装防火墙sudo systemctl start firewalld.service   //开启防火墙sudo systemctl stop firewalld.service   //关闭防火墙sudo systemctl enable firewalld.service  //设置开机自动启动sudo systemctl disable firewalld.service   //设置关闭开机制动启动sudo firewall-cmd --reload  //在不改变状态的条件下重新加载防火墙</code></pre>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10/11安装pycocotools</title>
    <link href="/2022/04/13/win10-11%E5%AE%89%E8%A3%85pycocotools/"/>
    <url>/2022/04/13/win10-11%E5%AE%89%E8%A3%85pycocotools/</url>
    
    <content type="html"><![CDATA[<p>下载对应版本的whl文件到本地</p><p><a href="https://pypi.tuna.tsinghua.edu.cn/simple/pycocotools-windows/">Links for pycocotools-windows (tsinghua.edu.cn)</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-22.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-23.png"></p><p>pip install pycocotools_windows-2.0-cp37-cp37m-win_amd64.whl</p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yolov5旋转目标检测(数据集,训练,预测)</title>
    <link href="/2022/04/07/yolov5%E6%97%8B%E8%BD%AC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%95%B0%E6%8D%AE%E9%9B%86%E8%AE%AD%E7%BB%83%E9%A2%84%E6%B5%8B/"/>
    <url>/2022/04/07/yolov5%E6%97%8B%E8%BD%AC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%95%B0%E6%8D%AE%E9%9B%86%E8%AE%AD%E7%BB%83%E9%A2%84%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目标检测模型一般都是用无角度的矩形框标注的，但有些时候我们的目标在图像中是有角度的，我们希望框出来的目标矩形框也是有角度的贴合目标的，比如下面这种情况</p><p>（虽然训练结果不好，可能是数据集数量少，或者对这种类型的数据集效果不理想之类的，但还是记录一下过程）</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-4.png"></p><p>yolov5本身是一个轻量级的目标检测模型。不支持旋转目标矩形框。</p><p>此次用到的是牛人改写的yolov5-obb</p><p><a href="https://github.com/hukaixuan19970627/yolov5_obb">hukaixuan19970627&#x2F;yolov5_obb: yolov5 + csl_label.(Oriented Object Detection)（Rotation Detection）（Rotated BBox）基于yolov5的旋转目标检测 (github.com)</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-5.png"></p><h2 id="项目环境准备"><a href="#项目环境准备" class="headerlink" title="项目环境准备"></a>项目环境准备</h2><p>git clone <a href="https://github.com/hukaixuan19970627/yolov5_obb.git">https://github.com/hukaixuan19970627/yolov5_obb.git</a><br>cd yolov5_obb<br>pip install -r requirements.txt<br>cd utils&#x2F;nms_rotated<br>python setup.py develop  #or “pip install -v -e .”</p><p>其中最后一步可能会出错，属于CUDA环境问题，如果torch.cuda.is_available()&#x3D;&#x3D;True的话，那应该是cuda toolkit的问题，CUDA_HOME环境变量之类的问题</p><h2 id="数据集格式"><a href="#数据集格式" class="headerlink" title="数据集格式"></a>数据集格式</h2><p>看一下dataset&#x2F;datasetdemo下的示例</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-6.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-7.png"></p><p>结合介绍看一下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-8-1024x569.png"></p><p>可以看出，图片标签的格式是倾斜矩形框的四个点，类别名，是否difficult</p><h2 id="用rolabelimg给图片打标签"><a href="#用rolabelimg给图片打标签" class="headerlink" title="用rolabelimg给图片打标签"></a>用rolabelimg给图片打标签</h2><p><a href="https://xinhaojin.github.io/2022/04/05/%e6%97%8b%e8%bd%ac%e7%9b%ae%e6%a0%87%e6%a3%80%e6%b5%8b%e6%95%b0%e6%8d%ae%e9%9b%86%e5%88%b6%e4%bd%9c-rolabelimg%e7%9a%84%e5%ae%89%e8%a3%85%e5%92%8c%e4%bd%bf%e7%94%a8/">旋转目标检测数据集制作-rolabelimg的安装和使用 – Xinhao Jin</a></p><p>标注完之后得到的是xml格式的标注文件</p><p>需要转换为上述格式的txt文件（4个点1个类别1个difficult）</p><p>找了一下好像项目中没有用于数据集转换的代码，可能作者觉得这很简单。。。</p><h2 id="转换数据集格式"><a href="#转换数据集格式" class="headerlink" title="转换数据集格式"></a>转换数据集格式</h2><p>想想应该也不是很难，自己动手，丰衣足食，首先把xml中的robndbox标签内容读出来，这时候才发现，怎么不是四个点的坐标？</p><p>而是中心点坐标，髋，高，旋转角度？？</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-9.png"></p><p>坐标转换函数如下</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">cx, cy, w, h, angle</span>):</span><br><span class="line">    <span class="comment"># 用于常规坐标时，angle是顺时针旋转角度</span></span><br><span class="line">    <span class="comment"># 用于图像坐标时，angle是逆时针旋转角度</span></span><br><span class="line">    <span class="comment"># math.cos(angle)这里的angle单位是rad</span></span><br><span class="line">    <span class="comment"># angle = angle/180*math.pi  单位转换</span></span><br><span class="line">    angle=-angle<span class="comment">#这里是图像坐标</span></span><br><span class="line">    points = [[cx-w/<span class="number">2</span>, cy-h/<span class="number">2</span>], [cx+w/<span class="number">2</span>, cy-h/<span class="number">2</span>],</span><br><span class="line">              [cx+w/<span class="number">2</span>, cy+h/<span class="number">2</span>], [cx-w/<span class="number">2</span>, cy+h/<span class="number">2</span>]]</span><br><span class="line">    newpoints = []</span><br><span class="line">    <span class="keyword">if</span> angle &lt; <span class="number">0</span>:  <span class="comment"># 逆时针</span></span><br><span class="line">        angle = -angle</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">            x, y = point</span><br><span class="line">            newx = <span class="built_in">round</span>((x-cx)*math.cos(angle) - (y-cy)*math.sin(angle) + cx,<span class="number">1</span>)</span><br><span class="line">            newy = <span class="built_in">round</span>((x-cx)*math.sin(angle) + (y-cy)*math.cos(angle) + cy,<span class="number">1</span>)</span><br><span class="line">            newpoints.append([newx, newy])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">            x, y = point</span><br><span class="line">            newx = <span class="built_in">round</span>((x-cx)*math.cos(angle) + (y-cy)*math.sin(angle) + cx,<span class="number">1</span>)</span><br><span class="line">            newy = <span class="built_in">round</span>((y-cy)*math.cos(angle) - (x-cx)*math.sin(angle) + cy,<span class="number">1</span>)</span><br><span class="line">            newpoints.append([newx, newy])</span><br><span class="line">    <span class="keyword">return</span> newpoints</span><br></pre></td></tr></table></figure><p>从xml到目标txt，完整代码如下：</p><p>首先把xml放在一个单独的文件夹里，然后执行程序会在xml同级目录生成txt文件夹</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">cx, cy, w, h, angle</span>):</span><br><span class="line">    <span class="comment"># 用于常规坐标时，angle是顺时针旋转角度</span></span><br><span class="line">    <span class="comment"># 用于图像坐标时，angle是逆时针旋转角度</span></span><br><span class="line">    <span class="comment"># math.cos(angle)这里的angle单位是rad</span></span><br><span class="line">    <span class="comment"># angle = angle/180*math.pi  单位转换</span></span><br><span class="line">    angle=-angle<span class="comment">#这里是图像坐标</span></span><br><span class="line">    points = [[cx-w/<span class="number">2</span>, cy-h/<span class="number">2</span>], [cx+w/<span class="number">2</span>, cy-h/<span class="number">2</span>],</span><br><span class="line">              [cx+w/<span class="number">2</span>, cy+h/<span class="number">2</span>], [cx-w/<span class="number">2</span>, cy+h/<span class="number">2</span>]]</span><br><span class="line">    newpoints = []</span><br><span class="line">    <span class="keyword">if</span> angle &lt; <span class="number">0</span>:  <span class="comment"># 逆时针</span></span><br><span class="line">        angle = -angle</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">            x, y = point</span><br><span class="line">            newx = <span class="built_in">round</span>((x-cx)*math.cos(angle) - (y-cy)*math.sin(angle) + cx,<span class="number">1</span>)</span><br><span class="line">            newy = <span class="built_in">round</span>((x-cx)*math.sin(angle) + (y-cy)*math.cos(angle) + cy,<span class="number">1</span>)</span><br><span class="line">            newpoints.append([newx, newy])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">            x, y = point</span><br><span class="line">            newx = <span class="built_in">round</span>((x-cx)*math.cos(angle) + (y-cy)*math.sin(angle) + cx,<span class="number">1</span>)</span><br><span class="line">            newy = <span class="built_in">round</span>((y-cy)*math.cos(angle) - (x-cx)*math.sin(angle) + cy,<span class="number">1</span>)</span><br><span class="line">            newpoints.append([newx, newy])</span><br><span class="line">    <span class="keyword">return</span> newpoints</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">roxml2txt</span>(<span class="params"><span class="built_in">dir</span></span>):</span><br><span class="line">    <span class="comment">#dir是xml文件目录</span></span><br><span class="line">    files = os.listdir(<span class="built_in">dir</span>)</span><br><span class="line">    parentdir,dirname = os.path.split(<span class="built_in">dir</span>)</span><br><span class="line">    txtdir=os.path.join(parentdir,<span class="string">&#x27;txt&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(txtdir):</span><br><span class="line">        os.mkdir(txtdir)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">        xml = ET.parse(os.path.join(<span class="built_in">dir</span>,f))</span><br><span class="line">        root = xml.getroot()</span><br><span class="line">        boxes = root.<span class="built_in">iter</span>(<span class="string">&#x27;robndbox&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(txtdir,f.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]+<span class="string">&#x27;.txt&#x27;</span>),<span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> t:</span><br><span class="line">            <span class="keyword">for</span> box <span class="keyword">in</span> boxes:</span><br><span class="line">                cx = <span class="built_in">float</span>(box.find(<span class="string">&#x27;cx&#x27;</span>).text)</span><br><span class="line">                cy = <span class="built_in">float</span>(box.find(<span class="string">&#x27;cy&#x27;</span>).text)</span><br><span class="line">                w = <span class="built_in">float</span>(box.find(<span class="string">&#x27;w&#x27;</span>).text)</span><br><span class="line">                h = <span class="built_in">float</span>(box.find(<span class="string">&#x27;h&#x27;</span>).text)</span><br><span class="line">                angle = <span class="built_in">float</span>(box.find(<span class="string">&#x27;angle&#x27;</span>).text)</span><br><span class="line">                newpoints = rotate(cx, cy, w, h, angle)<span class="comment">#计算旋转后的4个点坐标</span></span><br><span class="line">                <span class="comment"># 用于查看坐标转换是否正确，在原图上画矩形框，自行修改图片路径</span></span><br><span class="line">                newpoints=np.array(newpoints)</span><br><span class="line">                newpoints= newpoints.astype(<span class="built_in">int</span>)</span><br><span class="line">                img=cv2.imread(os.path.join(<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;images&#x27;</span>,f.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]+<span class="string">&#x27;.png&#x27;</span>))</span><br><span class="line">                img=cv2.polylines(img,[newpoints],isClosed=<span class="literal">True</span>,color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">                cv2.imshow(<span class="string">&#x27;pic&#x27;</span>,img)</span><br><span class="line">                cv2.waitKey()</span><br><span class="line">                <span class="comment">##########################################</span></span><br><span class="line">                line=<span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">for</span> point <span class="keyword">in</span> newpoints:</span><br><span class="line">                    line+=<span class="built_in">str</span>(point[<span class="number">0</span>])+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(point[<span class="number">1</span>])+<span class="string">&#x27; &#x27;</span></span><br><span class="line">                line+=<span class="string">&#x27;word 0\n&#x27;</span></span><br><span class="line">                t.write(line)</span><br><span class="line">                <span class="built_in">print</span>(line)</span><br><span class="line">            t.close()</span><br><span class="line"></span><br><span class="line">roxml2txt(<span class="string">&#x27;test/xml&#x27;</span>)<span class="comment">#路径最后不能加/</span></span><br></pre></td></tr></table></figure><p>为了检验坐标转换是否正确，加入了一段画图代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">newpoints=np.array(newpoints)</span><br><span class="line">newpoints= newpoints.astype(<span class="built_in">int</span>)</span><br><span class="line">img=cv2.imread(os.path.join(<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;images&#x27;</span>,f.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]+<span class="string">&#x27;.png&#x27;</span>))</span><br><span class="line">img=cv2.polylines(img,[newpoints],isClosed=<span class="literal">True</span>,color=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">cv2.imshow(<span class="string">&#x27;pic&#x27;</span>,img)</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><p>效果如下，说明是正确的</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-4.png" alt="此图片的alt属性为空；文件名为image-4.png"></p><h2 id="数据集放进项目目录"><a href="#数据集放进项目目录" class="headerlink" title="数据集放进项目目录"></a>数据集放进项目目录</h2><p>然后把图片文件夹改名为images，把txt文件夹改名为labelTxt（不改也行，这样显得规范）</p><p>在dataset目录下新建一个文件夹，存放images和labelTxt</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-10.png"></p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>首先要下载预训练模型，应该在github上的yolov5项目里，下载yolov5s.pt即可</p><p><a href="https://github.com/ultralytics/yolov5">ultralytics&#x2F;yolov5: YOLOv5 🚀 in PyTorch &gt; ONNX &gt; CoreML &gt; TFLite (github.com)</a></p><p>如果是linux，直接使用作者提供的脚本</p><pre><code>pwd=yolov5_obb/ 执行bash data/scripts/download_weights.sh</code></pre><p>会自动下载权重文件到yolov5_obb&#x2F;，为了好看一点还是新建一个weights文件夹来存放</p><h3 id="修改yolov5-obb-DOTA-devkit-dota-utils-py"><a href="#修改yolov5-obb-DOTA-devkit-dota-utils-py" class="headerlink" title="修改yolov5_obb&#x2F;DOTA_devkit&#x2F;dota_utils.py"></a>修改yolov5_obb&#x2F;DOTA_devkit&#x2F;dota_utils.py</h3><p>classnames改为自己的类别</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-11.png"></p><h3 id="修改yolov5-obb-data-dotav15-poly-yaml"><a href="#修改yolov5-obb-data-dotav15-poly-yaml" class="headerlink" title="修改yolov5_obb&#x2F;data&#x2F;dotav15_poly.yaml"></a>修改yolov5_obb&#x2F;data&#x2F;dotav15_poly.yaml</h3><p>修改数据集的目录</p><p>train,val,test都是与path间的相对路径，我这里图方便设为同一个了</p><p>然后修改nc类别数和names类别名即可</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-12.png"></p><h3 id="修改yolov5-obb-train-py"><a href="#修改yolov5-obb-train-py" class="headerlink" title="修改yolov5_obb&#x2F;train.py"></a>修改yolov5_obb&#x2F;train.py</h3><p>修改参数</p><pre><code>weights:/weights/yolov5s.pt，下载的预训练模型路径data:/data/dotav15_poly.yaml，刚刚修改的配置文件路径epochs:100，训练次数batch-size:8，一批的数量imgsz:300，图片大小device:0，显卡索引，没有的话写cpuworkers:8,线程数，出错的话就不断减小</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-13-1024x296.png"></p><p>执行python train.py即可训练</p><p>结果保存在runs&#x2F;train&#x2F;exp…&#x2F;</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-14.png"></p><h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><p>修改yolov5_obb&#x2F;detect.py</p><p>weights路径改为上面训练完生成的权重文件</p><p>source是用于预测的图片路径</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-15-1024x310.png"></p><p>预测结果保存在runs&#x2F;detect&#x2F;exp..&#x2F;下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-17.png"></p><p>这是35张图片300次训练的结果，可以扩大数据集并且把训练集验证集分离，应该会有好的效果</p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>selenium Edge后台静默运行</title>
    <link href="/2022/04/05/selenium-edge%E5%90%8E%E5%8F%B0%E9%9D%99%E9%BB%98%E8%BF%90%E8%A1%8C/"/>
    <url>/2022/04/05/selenium-edge%E5%90%8E%E5%8F%B0%E9%9D%99%E9%BB%98%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p>webdriver中只有ChromeOptions而没有EdgeOptions,无法添加headless参数，需要借助外部工具</p><p>pip install msedge-selenium-tools</p><p>然后就可以了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> msedge.selenium_tools <span class="keyword">import</span> EdgeOptions</span><br><span class="line"><span class="keyword">from</span> msedge.selenium_tools <span class="keyword">import</span> Edge</span><br><span class="line"></span><br><span class="line">edge_options = EdgeOptions()</span><br><span class="line">edge_options.use_chromium = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 设置无界面模式，也可以添加其它设置</span></span><br><span class="line">edge_options.add_argument(<span class="string">&#x27;headless&#x27;</span>)</span><br><span class="line">driver = Edge(options=edge_options)</span><br><span class="line">r = driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(driver.title)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-3.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
      <tag>selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>旋转目标检测数据集制作-rolabelimg的安装和使用</title>
    <link href="/2022/04/05/%E6%97%8B%E8%BD%AC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%B6%E4%BD%9C-rolabelimg%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/04/05/%E6%97%8B%E8%BD%AC%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%B6%E4%BD%9C-rolabelimg%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载项目源码</p><p>git clone <a href="https://github.com/cgvict/roLabelImg">https://github.com/cgvict/roLabelImg</a><br>#防止作者跑路，fork了一个备用<a href="https://github.com/RuBanNo7/roLabelImg">https://github.com/RuBanNo7/roLabelImg</a></p><p>安装依赖</p><pre><code>pip install pyqt5,lxml</code></pre><p>进入到roLabelImg目录下</p><pre><code>pyrcc5 -o resources.py resources.qrc</code></pre><p>成功后会在目录下生成rolabelimg.py文件，运行即可启动</p><pre><code>python rolabelimg.py</code></pre><p>不要关闭命令行窗口，可以使用软件</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>画矩形框，使用z,x or c,v进行旋转调节，其余用法和普通labelImg相同</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/20191211101740462.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-2.png"></p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一张图搞懂python深拷贝浅拷贝</title>
    <link href="/2022/04/05/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%90%9E%E6%87%82python%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2022/04/05/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%90%9E%E6%87%82python%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<p>牛逼的可视化工具<a href="https://pythontutor.com/live.html#mode=edit">Live Programming Mode - Python Tutor - Visualize Python and JavaScript code</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-1-1024x494.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch12-Dropout(缓解过拟合)</title>
    <link href="/2022/04/05/pytorch12-dropout%E7%BC%93%E8%A7%A3%E8%BF%87%E6%8B%9F%E5%90%88/"/>
    <url>/2022/04/05/pytorch12-dropout%E7%BC%93%E8%A7%A3%E8%BF%87%E6%8B%9F%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://mofanpy.com/tutorials/machine-learning/torch/dropout/">Dropout 缓解过拟合 - PyTorch 莫烦Python (mofanpy.com)</a></p><p>过拟合让人头疼, 明明训练时误差已经降得足够低, 可是测试的时候误差突然飙升</p><p>主要原因是训练数据太少，模型对训练数据过度学习了</p><p>可以用数据点的曲线回归问题来解释</p><h2 id="定义数据集"><a href="#定义数据集" class="headerlink" title="定义数据集"></a>定义数据集</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/5-3-2.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)    <span class="comment"># reproducible</span></span><br><span class="line"></span><br><span class="line">N_SAMPLES = <span class="number">20</span></span><br><span class="line">N_HIDDEN = <span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># training data</span></span><br><span class="line">x = torch.unsqueeze(torch.linspace(-<span class="number">1</span>, <span class="number">1</span>, N_SAMPLES), <span class="number">1</span>)</span><br><span class="line">y = x + <span class="number">0.3</span>*torch.normal(torch.zeros(N_SAMPLES, <span class="number">1</span>), torch.ones(N_SAMPLES, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># test data</span></span><br><span class="line">test_x = torch.unsqueeze(torch.linspace(-<span class="number">1</span>, <span class="number">1</span>, N_SAMPLES), <span class="number">1</span>)</span><br><span class="line">test_y = test_x + <span class="number">0.3</span>*torch.normal(torch.zeros(N_SAMPLES, <span class="number">1</span>), torch.ones(N_SAMPLES, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># show data</span></span><br><span class="line">plt.scatter(x.data.numpy(), y.data.numpy(), c=<span class="string">&#x27;magenta&#x27;</span>, s=<span class="number">50</span>, alpha=<span class="number">0.5</span>, label=<span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">plt.scatter(test_x.data.numpy(), test_y.data.numpy(), c=<span class="string">&#x27;cyan&#x27;</span>, s=<span class="number">50</span>, alpha=<span class="number">0.5</span>, label=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">plt.ylim((-<span class="number">2.5</span>, <span class="number">2.5</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="定义网络"><a href="#定义网络" class="headerlink" title="定义网络"></a>定义网络</h2><p>我们在这里搭建两个神经网络, 一个没有 <code>dropout</code>, 一个有 <code>dropout</code>. 没有 <code>dropout</code> 的容易出现 过拟合, 那我们就命名为 <code>net_overfitting</code>, 另一个就是 <code>net_dropped</code>. <code>torch.nn.Dropout(0.5)</code> 这里的 0.5 指的是随机有 50% 的神经元会被关闭&#x2F;丢弃.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">net_overfitting = torch.nn.Sequential(</span><br><span class="line">    torch.nn.Linear(<span class="number">1</span>, N_HIDDEN),</span><br><span class="line">    torch.nn.ReLU(),</span><br><span class="line">    torch.nn.Linear(N_HIDDEN, N_HIDDEN),</span><br><span class="line">    torch.nn.ReLU(),</span><br><span class="line">    torch.nn.Linear(N_HIDDEN, <span class="number">1</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">net_dropped = torch.nn.Sequential(</span><br><span class="line">    torch.nn.Linear(<span class="number">1</span>, N_HIDDEN),</span><br><span class="line">    torch.nn.Dropout(<span class="number">0.5</span>),  <span class="comment"># drop 50% of the neuron</span></span><br><span class="line">    torch.nn.ReLU(),</span><br><span class="line">    torch.nn.Linear(N_HIDDEN, N_HIDDEN),</span><br><span class="line">    torch.nn.Dropout(<span class="number">0.5</span>),  <span class="comment"># drop 50% of the neuron</span></span><br><span class="line">    torch.nn.ReLU(),</span><br><span class="line">    torch.nn.Linear(N_HIDDEN, <span class="number">1</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">optimizer_ofit = torch.optim.Adam(net_overfitting.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line">optimizer_drop = torch.optim.Adam(net_dropped.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line">loss_func = torch.nn.MSELoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    pred_ofit = net_overfitting(x)</span><br><span class="line">    pred_drop = net_dropped(x)</span><br><span class="line"></span><br><span class="line">    loss_ofit = loss_func(pred_ofit, y)</span><br><span class="line">    loss_drop = loss_func(pred_drop, y)</span><br><span class="line"></span><br><span class="line">    optimizer_ofit.zero_grad()</span><br><span class="line">    optimizer_drop.zero_grad()</span><br><span class="line">    loss_ofit.backward()</span><br><span class="line">    loss_drop.backward()</span><br><span class="line">    optimizer_ofit.step()</span><br><span class="line">    optimizer_drop.step()</span><br></pre></td></tr></table></figure><h2 id="对比测试结果"><a href="#对比测试结果" class="headerlink" title="对比测试结果"></a>对比测试结果</h2><p>在这个 <code>for</code> 循环里, 我们加上画测试图的部分. 注意在测试时, 要将网络改成 <code>eval()</code> 形式, 特别是 <code>net_dropped</code>, <code>net_overfitting</code> 改不改其实无所谓. 画好图再改回 <code>train()</code> 模式</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/5-3-1.gif"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">optimizer_ofit.step()</span><br><span class="line">optimizer_drop.step()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着上面来</span></span><br><span class="line"><span class="keyword">if</span> t % <span class="number">10</span> == <span class="number">0</span>:     <span class="comment"># 每 10 步画一次图</span></span><br><span class="line">    <span class="comment"># 将神经网络转换成测试形式, 画好图之后改回 训练形式</span></span><br><span class="line">    net_overfitting.<span class="built_in">eval</span>()</span><br><span class="line">    net_dropped.<span class="built_in">eval</span>()  <span class="comment"># 因为 drop 网络在 train 的时候和 test 的时候参数不一样.</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    test_pred_ofit = net_overfitting(test_x)</span><br><span class="line">    test_pred_drop = net_dropped(test_x)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将两个网络改回 训练形式</span></span><br><span class="line">    net_overfitting.train()</span><br><span class="line">    net_dropped.train()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch11-Batch Normalization(批标准化)</title>
    <link href="/2022/04/05/pytorch11-batch-normalization%E6%89%B9%E6%A0%87%E5%87%86%E5%8C%96/"/>
    <url>/2022/04/05/pytorch11-batch-normalization%E6%89%B9%E6%A0%87%E5%87%86%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://mofanpy.com/tutorials/machine-learning/torch/intro-batch-normalization/">什么是批标准化 (Batch Normalization) - PyTorch 莫烦Python (mofanpy.com)</a></p><p>Batch Normalization, 批标准化, 和普通的数据标准化类似, 是将分散的数据统一的一种做法, 也是优化神经网络的一种方法</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/NB1.png"></p><h2 id="为什么要标准化？"><a href="#为什么要标准化？" class="headerlink" title="为什么要标准化？"></a>为什么要标准化？</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/NB2.png"></p><p>在神经网络中, 数据分布对训练会产生影响. 比如某个神经元 x 的值为1, 某个 Weights 的初始值为 0.1, 这样后一层神经元计算结果就是 Wx &#x3D; 0.1; 又或者 x &#x3D; 20, 这样 Wx 的结果就为 2. 现在还不能看出什么问题, 但是, 当我们加上一层激励函数, 激活这个 Wx 值的时候, 问题就来了. 如果使用 像 tanh 的激励函数, Wx 的激活值就变成了 ~0.1 和 ~1, 接近于 1 的部已经处在了 激励函数的饱和阶段, 也就是如果 x 无论再怎么扩大, tanh 激励函数输出值也还是 接近1. 换句话说, 神经网络在初始阶段已经不对那些比较大的 x 特征范围 敏感了. 这样很糟糕, 想象我轻轻拍自己的感觉和重重打自己的感觉居然没什么差别, 这就证明我的感官系统失效了. 当然我们是可以用之前提到的对数据做 normalization 预处理, 使得输入的 x 变化范围不会太大, 让输入值经过激励函数的敏感部分. 但刚刚这个不敏感问题不仅仅发生在神经网络的输入层, 而且在隐藏层中也经常会发生.</p><h2 id="添加的位置"><a href="#添加的位置" class="headerlink" title="添加的位置"></a>添加的位置</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/NB4.png"></p><p>Batch normalization 的 batch 是批数据, 把数据分成小批小批进行 stochastic gradient descent. 而且在每批数据进行前向传递 forward propagation 的时候, 对每一层都进行 normalization 的处理</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/NB5.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/NB6.png"></p><p>没有 normalize 的数据 使用 tanh 激活以后, 激活值大部分都分布到了饱和阶段, 也就是大部分的激活值不是-1, 就是1, 而 normalize 以后, 大部分的激活值在每个分布区间都还有存在. 再将这个激活后的分布传递到下一层神经网络进行后续计算, 每个区间都有分布的这一种对于神经网络就会更加有价值</p><h2 id="BN算法"><a href="#BN算法" class="headerlink" title="BN算法"></a>BN算法</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/NB7.png"></p><p>这三步就是我们在刚刚一直说的 normalization 工序, 但是公式的后面还有一个反向操作, 将 normalize 后的数据再扩展和平移. 原来这是为了让神经网络自己去学着使用和修改这个扩展参数 gamma, 和 平移参数 β, 这样神经网络就能自己慢慢琢磨出前面的 normalization 操作到底有没有起到优化的作用, 如果没有起到作用, 我就使用 gamma 和 belt 来抵消一些 normalization 的操作.</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/NB8.png"></p><p>最后我们来看看一张神经网络训练到最后, 代表了每层输出值的结果的分布图. 这样我们就能一眼看出 Batch normalization 的功效啦. 让每一层的值在有效的范围内传递下去</p>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch10-Autoencoder(自编码/非监督学习)</title>
    <link href="/2022/04/04/pytorch10-autoencoder%E8%87%AA%E7%BC%96%E7%A0%81-%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/04/04/pytorch10-autoencoder%E8%87%AA%E7%BC%96%E7%A0%81-%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://mofanpy.com/tutorials/machine-learning/torch/autoencoder/">AutoEncoder (自编码&#x2F;非监督学习) - PyTorch 莫烦Python (mofanpy.com)</a></p><h2 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/auto4.png"></p><p>这部分也叫作 encoder 编码器. 编码器能得到原数据的精髓, 然后我们只需要再创建一个小的神经网络学习这个精髓的数据,不仅减少了神经网络的负担, 而且同样能达到很好的效果.</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/auto5.png"></p><p>这是一个通过自编码整理出来的数据, 他能从原数据中总结出每种类型数据的特征, 如果把这些特征类型都放在一张二维的图片上, 每种类型都已经被很好的用原数据的精髓区分开来. 如果你了解 PCA 主成分分析, 再提取主要特征时, 自编码和它一样,甚至超越了 PCA. 换句话说, 自编码 可以像 PCA 一样 给特征属性降维</p><h2 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h2><p>至于解码器 Decoder, 我们也能那它来做点事情. 我们知道, 解码器在训练的时候是要将精髓信息解压成原始信息, 那么这就提供了一个解压器的作用, 甚至我们可以认为是一个生成器 (类似于GAN).</p><p>有一个例子就是让它能模仿并生成手写数字.</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/auto6.jpg"></p><h2 id="非监督学习"><a href="#非监督学习" class="headerlink" title="非监督学习"></a>非监督学习</h2><p>神经网络也能进行非监督学习, 只需要训练数据, 不需要标签数据. 自编码就是这样一种形式. 自编码能自动分类数据, 而且也能嵌套在半监督学习的上面, 用少量的有标签样本和大量的无标签样本学习</p><p>这次我们还用 MNIST 手写数字数据来压缩再解压图片</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/4-4-1.gif"></p><p>然后用压缩的特征进行非监督分类</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/4-4-2.gif"></p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>自编码只用训练集就好了, 而且只需要训练 training data 的 image, 不用训练 labels.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="comment"># 超参数</span></span><br><span class="line">EPOCH = <span class="number">10</span></span><br><span class="line">BATCH_SIZE = <span class="number">64</span></span><br><span class="line">LR = <span class="number">0.005</span></span><br><span class="line">DOWNLOAD_MNIST = <span class="literal">True</span>   <span class="comment"># 下过数据的话, 就可以设置成 False</span></span><br><span class="line">N_TEST_IMG = <span class="number">5</span>          <span class="comment"># 到时候显示 5张图片看效果, 如上图一</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mnist digits dataset</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    root=<span class="string">&#x27;./mnist/&#x27;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,                                     <span class="comment"># this is training data</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),    <span class="comment"># Converts a PIL.Image or numpy.ndarray to</span></span><br><span class="line">                                                    <span class="comment"># torch.FloatTensor of shape (C x H x W) and normalize in the range [0.0, 1.0]</span></span><br><span class="line">    download=DOWNLOAD_MNIST,                        <span class="comment"># download it if you don&#x27;t have it</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">AutoEncoder 形式很简单, 分别是 `encoder` 和 `decoder`, 压缩和解压, 压缩后得到压缩的特征值, 再从压缩的特征值解压成原图片.</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoEncoder</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AutoEncoder, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 压缩</span></span><br><span class="line">        <span class="variable language_">self</span>.encoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">128</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">128</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">12</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">12</span>, <span class="number">3</span>),   <span class="comment"># 压缩成3个特征, 进行 3D 图像可视化</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 解压</span></span><br><span class="line">        <span class="variable language_">self</span>.decoder = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">3</span>, <span class="number">12</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">12</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">128</span>),</span><br><span class="line">            nn.Tanh(),</span><br><span class="line">            nn.Linear(<span class="number">128</span>, <span class="number">28</span>*<span class="number">28</span>),</span><br><span class="line">            nn.Sigmoid(),       <span class="comment"># 激励函数让输出值在 (0, 1)</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        encoded = <span class="variable language_">self</span>.encoder(x)</span><br><span class="line">        decoded = <span class="variable language_">self</span>.decoder(encoded)</span><br><span class="line">        <span class="keyword">return</span> encoded, decoded</span><br><span class="line"></span><br><span class="line">autoencoder = AutoEncoder()</span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>训练, 并可视化训练的过程. 我们可以有效的利用 <code>encoder</code> 和 <code>decoder</code> 来做很多事, 比如这里我们用 <code>decoder</code> 的信息输出看和原图片的对比, 还能用 <code>encoder</code> 来看经过压缩后, 神经网络对原图片的理解. <code>encoder</code> 能将不同图片数据大概的分离开来. 这样就是一个无监督学习的过程</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.Adam(autoencoder.parameters(), lr=LR)</span><br><span class="line">loss_func = nn.MSELoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCH):</span><br><span class="line">    <span class="keyword">for</span> step, (x, b_label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        b_x = x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>)   <span class="comment"># batch x, shape (batch, 28*28)</span></span><br><span class="line">        b_y = x.view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>)   <span class="comment"># batch y, shape (batch, 28*28)</span></span><br><span class="line"></span><br><span class="line">        encoded, decoded = autoencoder(b_x)</span><br><span class="line"></span><br><span class="line">        loss = loss_func(decoded, b_y)      <span class="comment"># mean square error</span></span><br><span class="line">        optimizer.zero_grad()               <span class="comment"># clear gradients for this training step</span></span><br><span class="line">        loss.backward()                     <span class="comment"># backpropagation, compute gradients</span></span><br><span class="line">        optimizer.step()                    <span class="comment"># apply gradients</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3D 的可视化图挺有趣的, 还能挪动观看, 更加直观, 好理解</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要观看的数据</span></span><br><span class="line">view_data = train_data.train_data[:<span class="number">200</span>].view(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>).<span class="built_in">type</span>(torch.FloatTensor)/<span class="number">255.</span></span><br><span class="line">encoded_data, _ = autoencoder(view_data)    <span class="comment"># 提取压缩的特征值</span></span><br><span class="line">fig = plt.figure(<span class="number">2</span>)</span><br><span class="line">ax = Axes3D(fig)    <span class="comment"># 3D 图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y, z 的数据值</span></span><br><span class="line"></span><br><span class="line">X = encoded_data.data[:, <span class="number">0</span>].numpy()</span><br><span class="line">Y = encoded_data.data[:, <span class="number">1</span>].numpy()</span><br><span class="line">Z = encoded_data.data[:, <span class="number">2</span>].numpy()</span><br><span class="line">values = train_data.train_labels[:<span class="number">200</span>].numpy()  <span class="comment"># 标签值</span></span><br><span class="line"><span class="keyword">for</span> x, y, z, s <span class="keyword">in</span> <span class="built_in">zip</span>(X, Y, Z, values):</span><br><span class="line">    c = cm.rainbow(<span class="built_in">int</span>(<span class="number">255</span>*s/<span class="number">9</span>))    <span class="comment"># 上色</span></span><br><span class="line">    ax.text(x, y, z, s, backgroundcolor=c)  <span class="comment"># 标位子</span></span><br><span class="line">ax.set_xlim(X.<span class="built_in">min</span>(), X.<span class="built_in">max</span>())</span><br><span class="line">ax.set_ylim(Y.<span class="built_in">min</span>(), Y.<span class="built_in">max</span>())</span><br><span class="line">ax.set_zlim(Z.<span class="built_in">min</span>(), Z.<span class="built_in">max</span>())</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/4-4-5.png"></p>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch09-RNN(循环神经网络-回归)</title>
    <link href="/2022/04/04/pytorch09-rnn%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E5%9B%9E%E5%BD%92/"/>
    <url>/2022/04/04/pytorch09-rnn%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E5%9B%9E%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://mofanpy.com/tutorials/machine-learning/torch/RNN-regression/">RNN 循环神经网络 (回归) - PyTorch 莫烦Python (mofanpy.com)</a></p><p>PyTorch08-RNN(循环神循环神经网络让神经网络有了记忆, 对于序列话的数据,循环神经网络能达到更好的效果</p><p>上次我们提到了用 RNN 的最后一个时间点输出来判断之前看到的图片属于哪一类, 这次我们用 RNN 来及时预测时间序列</p><p>效果：用sin预测cos</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/4-3-2.png"></p><h2 id="RNN网络"><a href="#RNN网络" class="headerlink" title="RNN网络"></a>RNN网络</h2><p>对每一个 <code>r_out</code> 都得放到 <code>Linear</code> 中去计算出预测的 <code>output</code>, 所以我们能用一个 for loop 来循环计算</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(RNN, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.rnn = nn.RNN(  <span class="comment"># 这回一个普通的 RNN 就能胜任</span></span><br><span class="line">            input_size=<span class="number">1</span>,</span><br><span class="line">            hidden_size=<span class="number">32</span>,     <span class="comment"># rnn hidden unit</span></span><br><span class="line">            num_layers=<span class="number">1</span>,       <span class="comment"># 有几层 RNN layers</span></span><br><span class="line">            batch_first=<span class="literal">True</span>,   <span class="comment"># input &amp; output 会是以 batch size 为第一维度的特征集 e.g. (batch, time_step, input_size)</span></span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.out = nn.Linear(<span class="number">32</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, h_state</span>):  <span class="comment"># 因为 hidden state 是连续的, 所以我们要一直传递这一个 state</span></span><br><span class="line">        <span class="comment"># x (batch, time_step, input_size)</span></span><br><span class="line">        <span class="comment"># h_state (n_layers, batch, hidden_size)</span></span><br><span class="line">        <span class="comment"># r_out (batch, time_step, output_size)</span></span><br><span class="line">        r_out, h_state = <span class="variable language_">self</span>.rnn(x, h_state)   <span class="comment"># h_state 也要作为 RNN 的一个输入</span></span><br><span class="line"></span><br><span class="line">        outs = []    <span class="comment"># 保存所有时间点的预测值</span></span><br><span class="line">        <span class="keyword">for</span> time_step <span class="keyword">in</span> <span class="built_in">range</span>(r_out.size(<span class="number">1</span>)):    <span class="comment"># 对每一个时间点计算 output</span></span><br><span class="line">            outs.append(<span class="variable language_">self</span>.out(r_out[:, time_step, :]))</span><br><span class="line">        <span class="keyword">return</span> torch.stack(outs, dim=<span class="number">1</span>), h_state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rnn = RNN()</span><br><span class="line"><span class="built_in">print</span>(rnn)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">RNN (</span></span><br><span class="line"><span class="string">  (rnn): RNN(1, 32, batch_first=True)</span></span><br><span class="line"><span class="string">  (out): Linear (32 -&gt; 1)</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>使用 <code>x</code> 作为输入的 <code>sin</code> 值, 然后 <code>y</code> 作为想要拟合的输出, <code>cos</code> 值. 因为他们两条曲线是存在某种关系的, 所以我们就能用 <code>sin</code> 来预测 <code>cos</code>. <code>rnn</code> 会理解他们的关系, 并用里面的参数分析出来这个时刻 <code>sin</code> 曲线上的点如何对应上 <code>cos</code> 曲线上的点.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.Adam(rnn.parameters(), lr=LR)   <span class="comment"># optimize all rnn parameters</span></span><br><span class="line">loss_func = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">h_state = <span class="literal">None</span>   <span class="comment"># 要使用初始 hidden state, 可以设成 None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    start, end = step * np.pi, (step+<span class="number">1</span>)*np.pi   <span class="comment"># time steps</span></span><br><span class="line">    <span class="comment"># sin 预测 cos</span></span><br><span class="line">    steps = np.linspace(start, end, <span class="number">10</span>, dtype=np.float32)</span><br><span class="line">    x_np = np.sin(steps)    <span class="comment"># float32 for converting torch FloatTensor</span></span><br><span class="line">    y_np = np.cos(steps)</span><br><span class="line"></span><br><span class="line">    x = torch.from_numpy(x_np[np.newaxis, :, np.newaxis])    <span class="comment"># shape (batch, time_step, input_size)</span></span><br><span class="line">    y = torch.from_numpy(y_np[np.newaxis, :, np.newaxis])</span><br><span class="line"></span><br><span class="line">    prediction, h_state = rnn(x, h_state)   <span class="comment"># rnn 对于每个 step 的 prediction, 还有最后一个 step 的 h_state</span></span><br><span class="line">    <span class="comment"># !!  下一步十分重要 !!</span></span><br><span class="line">    h_state = h_state.data  <span class="comment"># 要把 h_state 重新包装一下才能放入下一个 iteration, 不然会报错</span></span><br><span class="line"></span><br><span class="line">    loss = loss_func(prediction, y)     <span class="comment"># cross entropy loss</span></span><br><span class="line">    optimizer.zero_grad()               <span class="comment"># clear gradients for this training step</span></span><br><span class="line">    loss.backward()                     <span class="comment"># backpropagation, compute gradients</span></span><br><span class="line">    optimizer.step()                    <span class="comment"># apply gradients</span></span><br></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># torch.manual_seed(1)    # reproducible</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hyper Parameters</span></span><br><span class="line">TIME_STEP = <span class="number">10</span>      <span class="comment"># rnn time step</span></span><br><span class="line">INPUT_SIZE = <span class="number">1</span>      <span class="comment"># rnn input size</span></span><br><span class="line">LR =<span class="number">0.02</span>           <span class="comment"># learning rate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show data</span></span><br><span class="line">steps = np.linspace(<span class="number">0</span>, np.pi*<span class="number">2</span>, <span class="number">100</span>, dtype=np.float32)  <span class="comment"># float32 for converting torch FloatTensor</span></span><br><span class="line">x_np = np.sin(steps)</span><br><span class="line">y_np = np.cos(steps)</span><br><span class="line">plt.plot(steps, y_np, <span class="string">&#x27;r-&#x27;</span>, label=<span class="string">&#x27;target (cos)&#x27;</span>)</span><br><span class="line">plt.plot(steps, x_np, <span class="string">&#x27;b-&#x27;</span>, label=<span class="string">&#x27;input (sin)&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(RNN, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.rnn = nn.RNN(</span><br><span class="line">            input_size=INPUT_SIZE,</span><br><span class="line">            hidden_size=<span class="number">32</span>,     <span class="comment"># rnn hidden unit</span></span><br><span class="line">            num_layers=<span class="number">1</span>,       <span class="comment"># number of rnn layer</span></span><br><span class="line">            batch_first=<span class="literal">True</span>,   <span class="comment"># input &amp; output will has batch size as 1s dimension. e.g. (batch, time_step, input_size)</span></span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.out = nn.Linear(<span class="number">32</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, h_state</span>):</span><br><span class="line">        <span class="comment"># x (batch, time_step, input_size)</span></span><br><span class="line">        <span class="comment"># h_state (n_layers, batch, hidden_size)</span></span><br><span class="line">        <span class="comment"># r_out (batch, time_step, hidden_size)</span></span><br><span class="line">        r_out, h_state = <span class="variable language_">self</span>.rnn(x, h_state)</span><br><span class="line"></span><br><span class="line">        outs = []    <span class="comment"># save all predictions</span></span><br><span class="line">        <span class="keyword">for</span> time_step <span class="keyword">in</span> <span class="built_in">range</span>(r_out.size(<span class="number">1</span>)):    <span class="comment"># calculate output for each time step</span></span><br><span class="line">            outs.append(<span class="variable language_">self</span>.out(r_out[:, time_step, :]))</span><br><span class="line">        <span class="keyword">return</span> torch.stack(outs, dim=<span class="number">1</span>), h_state</span><br><span class="line"></span><br><span class="line">        <span class="comment"># instead, for simplicity, you can replace above codes by follows</span></span><br><span class="line">        <span class="comment"># r_out = r_out.view(-1, 32)</span></span><br><span class="line">        <span class="comment"># outs = self.out(r_out)</span></span><br><span class="line">        <span class="comment"># outs = outs.view(-1, TIME_STEP, 1)</span></span><br><span class="line">        <span class="comment"># return outs, h_state</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment"># or even simpler, since nn.Linear can accept inputs of any dimension </span></span><br><span class="line">        <span class="comment"># and returns outputs with same dimension except for the last</span></span><br><span class="line">        <span class="comment"># outs = self.out(r_out)</span></span><br><span class="line">        <span class="comment"># return outs</span></span><br><span class="line"></span><br><span class="line">rnn = RNN()</span><br><span class="line"><span class="built_in">print</span>(rnn)</span><br><span class="line"></span><br><span class="line">optimizer = torch.optim.Adam(rnn.parameters(), lr=LR)   <span class="comment"># optimize all cnn parameters</span></span><br><span class="line">loss_func = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">h_state = <span class="literal">None</span>      <span class="comment"># for initial hidden state</span></span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">1</span>, figsize=(<span class="number">12</span>, <span class="number">5</span>))</span><br><span class="line">plt.ion()           <span class="comment"># continuously plot</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    start, end = step * np.pi, (step+<span class="number">1</span>)*np.pi   <span class="comment"># time range</span></span><br><span class="line">    <span class="comment"># use sin predicts cos</span></span><br><span class="line">    steps = np.linspace(start, end, TIME_STEP, dtype=np.float32, endpoint=<span class="literal">False</span>)  <span class="comment"># float32 for converting torch FloatTensor</span></span><br><span class="line">    x_np = np.sin(steps)</span><br><span class="line">    y_np = np.cos(steps)</span><br><span class="line"></span><br><span class="line">    x = torch.from_numpy(x_np[np.newaxis, :, np.newaxis])    <span class="comment"># shape (batch, time_step, input_size)</span></span><br><span class="line">    y = torch.from_numpy(y_np[np.newaxis, :, np.newaxis])</span><br><span class="line"></span><br><span class="line">    prediction, h_state = rnn(x, h_state)   <span class="comment"># rnn output</span></span><br><span class="line">    <span class="comment"># !! next step is important !!</span></span><br><span class="line">    h_state = h_state.data        <span class="comment"># repack the hidden state, break the connection from last iteration</span></span><br><span class="line"></span><br><span class="line">    loss = loss_func(prediction, y)         <span class="comment"># calculate loss</span></span><br><span class="line">    optimizer.zero_grad()                   <span class="comment"># clear gradients for this training step</span></span><br><span class="line">    loss.backward()                         <span class="comment"># backpropagation, compute gradients</span></span><br><span class="line">    optimizer.step()                        <span class="comment"># apply gradients</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># plotting</span></span><br><span class="line">    plt.plot(steps, y_np.flatten(), <span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line">    plt.plot(steps, prediction.data.numpy().flatten(), <span class="string">&#x27;b-&#x27;</span>)</span><br><span class="line">    plt.draw(); plt.pause(<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line">plt.ioff()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch08-RNN(循环神经网络-手写数字分类)</title>
    <link href="/2022/04/04/pytorch08-rnn%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E5%88%86%E7%B1%BB/"/>
    <url>/2022/04/04/pytorch08-rnn%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://mofanpy.com/tutorials/machine-learning/torch/RNN-classification/">RNN 循环神经网络 (分类) - PyTorch 莫烦Python (mofanpy.com)</a></p><p>循环神经网络让神经网络有了记忆, 对于序列化的数据,循环神经网络能达到更好的效果。</p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision.datasets <span class="keyword">as</span> dsets</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)    <span class="comment"># reproducible</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hyper Parameters</span></span><br><span class="line">EPOCH = <span class="number">1</span>           <span class="comment"># 训练整批数据多少次, 为了节约时间, 我们只训练一次</span></span><br><span class="line">BATCH_SIZE = <span class="number">64</span></span><br><span class="line">TIME_STEP = <span class="number">28</span>      <span class="comment"># rnn 时间步数 / 图片高度</span></span><br><span class="line">INPUT_SIZE = <span class="number">28</span>     <span class="comment"># rnn 每步输入值 / 图片每行像素</span></span><br><span class="line">LR = <span class="number">0.01</span>           <span class="comment"># learning rate</span></span><br><span class="line">DOWNLOAD_MNIST = <span class="literal">True</span>  <span class="comment"># 如果你已经下载好了mnist数据就写上 Fasle</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mnist 手写数字</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    root=<span class="string">&#x27;./mnist/&#x27;</span>,    <span class="comment"># 保存或者提取位置</span></span><br><span class="line">    train=<span class="literal">True</span>,  <span class="comment"># this is training data</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),    <span class="comment"># 转换 PIL.Image or numpy.ndarray 成</span></span><br><span class="line">                                                    <span class="comment"># torch.FloatTensor (C x H x W), 训练的时候 normalize 成 [0.0, 1.0] 区间</span></span><br><span class="line">    download=DOWNLOAD_MNIST,          <span class="comment"># 没下载就下载, 下载了就不用再下了</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>测试数据集</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test_data = torchvision.datasets.MNIST(root=<span class="string">&#x27;./mnist/&#x27;</span>, train=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批训练 50samples, 1 channel, 28x28 (50, 1, 28, 28)</span></span><br><span class="line">train_loader = Data.DataLoader(dataset=train_data, batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了节约时间, 我们测试时只测试前2000个</span></span><br><span class="line">test_x = torch.unsqueeze(test_data.test_data, dim=<span class="number">1</span>).<span class="built_in">type</span>(torch.FloatTensor)[:<span class="number">2000</span>]/<span class="number">255.</span>   <span class="comment"># shape from (2000, 28, 28) to (2000, 1, 28, 28), value in range(0,1)</span></span><br><span class="line">test_y = test_data.test_labels[:<span class="number">2000</span>]</span><br></pre></td></tr></table></figure><h2 id="RNN网络"><a href="#RNN网络" class="headerlink" title="RNN网络"></a>RNN网络</h2><ol><li><code>(input0, state0)</code> -&gt; <code>LSTM</code> -&gt; <code>(output0, state1)</code>;</li><li><code>(input1, state1)</code> -&gt; <code>LSTM</code> -&gt; <code>(output1, state2)</code>;</li><li>…</li><li><code>(inputN, stateN)</code>-&gt; <code>LSTM</code> -&gt; <code>(outputN, stateN+1)</code>;</li><li><code>outputN</code> -&gt; <code>Linear</code> -&gt; <code>prediction</code>. 通过 <code>LSTM</code>分析每一时刻的值, 并且将这一时刻和前面时刻的理解合并在一起, 生成当前时刻对前面数据的理解或记忆. 传递这种理解给下一时刻分析.</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(RNN, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.rnn = nn.LSTM(     <span class="comment"># LSTM 效果要比 nn.RNN() 好多了</span></span><br><span class="line">            input_size=<span class="number">28</span>,      <span class="comment"># 图片每行的数据像素点</span></span><br><span class="line">            hidden_size=<span class="number">64</span>,     <span class="comment"># rnn hidden unit</span></span><br><span class="line">            num_layers=<span class="number">1</span>,       <span class="comment"># 有几层 RNN layers</span></span><br><span class="line">            batch_first=<span class="literal">True</span>,   <span class="comment"># input &amp; output 会是以 batch size 为第一维度的特征集 e.g. (batch, time_step, input_size)</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.out = nn.Linear(<span class="number">64</span>, <span class="number">10</span>)    <span class="comment"># 输出层</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># x shape (batch, time_step, input_size)</span></span><br><span class="line">        <span class="comment"># r_out shape (batch, time_step, output_size)</span></span><br><span class="line">        <span class="comment"># h_n shape (n_layers, batch, hidden_size)   LSTM 有两个 hidden states, h_n 是分线, h_c 是主线</span></span><br><span class="line">        <span class="comment"># h_c shape (n_layers, batch, hidden_size)</span></span><br><span class="line">        r_out, (h_n, h_c) = <span class="variable language_">self</span>.rnn(x, <span class="literal">None</span>)   <span class="comment"># None 表示 hidden state 会用全0的 state</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 选取最后一个时间点的 r_out 输出</span></span><br><span class="line">        <span class="comment"># 这里 r_out[:, -1, :] 的值也是 h_n 的值</span></span><br><span class="line">        out = <span class="variable language_">self</span>.out(r_out[:, -<span class="number">1</span>, :])</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">rnn = RNN()</span><br><span class="line"><span class="built_in">print</span>(rnn)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">RNN (</span></span><br><span class="line"><span class="string">  (rnn): LSTM(28, 64, batch_first=True)</span></span><br><span class="line"><span class="string">  (out): Linear (64 -&gt; 10)</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.Adam(rnn.parameters(), lr=LR)   <span class="comment"># optimize all parameters</span></span><br><span class="line">loss_func = nn.CrossEntropyLoss()   <span class="comment"># the target label is not one-hotted</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># training and testing</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCH):</span><br><span class="line">    <span class="keyword">for</span> step, (x, b_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):   <span class="comment"># gives batch data</span></span><br><span class="line">        b_x = x.view(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)   <span class="comment"># reshape x to (batch, time_step, input_size)</span></span><br><span class="line"></span><br><span class="line">        output = rnn(b_x)               <span class="comment"># rnn output</span></span><br><span class="line">        loss = loss_func(output, b_y)   <span class="comment"># cross entropy loss</span></span><br><span class="line">        optimizer.zero_grad()           <span class="comment"># clear gradients for this training step</span></span><br><span class="line">        loss.backward()                 <span class="comment"># backpropagation, compute gradients</span></span><br><span class="line">        optimizer.step()                <span class="comment"># apply gradients</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Epoch:  0  train loss: 0.0945  test accuracy: 0.94</span></span><br><span class="line"><span class="string">Epoch:  0  train loss: 0.0984  test accuracy: 0.94</span></span><br><span class="line"><span class="string">Epoch:  0  train loss: 0.0332  test accuracy: 0.95</span></span><br><span class="line"><span class="string">Epoch:  0  train loss: 0.1868  test accuracy: 0.96</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 预测</span></span><br><span class="line"></span><br><span class="line">test_output = rnn(test_x[:<span class="number">10</span>].view(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">pred_y = torch.<span class="built_in">max</span>(test_output, <span class="number">1</span>)[<span class="number">1</span>].data.numpy().squeeze()</span><br><span class="line"><span class="built_in">print</span>(pred_y, <span class="string">&#x27;prediction number&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(test_y[:<span class="number">10</span>], <span class="string">&#x27;real number&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[7 2 1 0 4 1 4 9 5 9] prediction number</span></span><br><span class="line"><span class="string">[7 2 1 0 4 1 4 9 5 9] real number</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision.datasets <span class="keyword">as</span> dsets</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># torch.manual_seed(1)    # reproducible</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hyper Parameters</span></span><br><span class="line">EPOCH = <span class="number">1</span>               <span class="comment"># train the training data n times, to save time, we just train 1 epoch</span></span><br><span class="line">BATCH_SIZE = <span class="number">64</span></span><br><span class="line">TIME_STEP = <span class="number">28</span>          <span class="comment"># rnn time step / image height</span></span><br><span class="line">INPUT_SIZE = <span class="number">28</span>         <span class="comment"># rnn input size / image width</span></span><br><span class="line">LR = <span class="number">0.01</span>               <span class="comment"># learning rate</span></span><br><span class="line">DOWNLOAD_MNIST = <span class="literal">True</span>   <span class="comment"># set to True if haven&#x27;t download the data</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mnist digital dataset</span></span><br><span class="line">train_data = dsets.MNIST(</span><br><span class="line">    root=<span class="string">&#x27;./mnist/&#x27;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,                         <span class="comment"># this is training data</span></span><br><span class="line">    transform=transforms.ToTensor(),    <span class="comment"># Converts a PIL.Image or numpy.ndarray to</span></span><br><span class="line">                                        <span class="comment"># torch.FloatTensor of shape (C x H x W) and normalize in the range [0.0, 1.0]</span></span><br><span class="line">    download=DOWNLOAD_MNIST,            <span class="comment"># download it if you don&#x27;t have it</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot one example</span></span><br><span class="line"><span class="comment"># print(train_data.train_data.size())     # (60000, 28, 28)</span></span><br><span class="line"><span class="comment"># print(train_data.train_labels.size())   # (60000)</span></span><br><span class="line"><span class="comment"># plt.imshow(train_data.train_data[0].numpy(), cmap=&#x27;gray&#x27;)</span></span><br><span class="line"><span class="comment"># plt.title(&#x27;%i&#x27; % train_data.train_labels[0])</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Data Loader for easy mini-batch return in training</span></span><br><span class="line">train_loader = torch.utils.data.DataLoader(dataset=train_data, batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># convert test data into Variable, pick 2000 samples to speed up testing</span></span><br><span class="line">test_data = dsets.MNIST(root=<span class="string">&#x27;./mnist/&#x27;</span>, train=<span class="literal">False</span>, transform=transforms.ToTensor())</span><br><span class="line">test_x = test_data.test_data.<span class="built_in">type</span>(torch.FloatTensor)[:<span class="number">1000</span>]/<span class="number">255.</span>   <span class="comment"># shape (2000, 28, 28) value in range(0,1)</span></span><br><span class="line">test_y = test_data.test_labels.numpy()[:<span class="number">1000</span>]    <span class="comment"># covert to numpy array</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(RNN, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.rnn = nn.LSTM(         <span class="comment"># if use nn.RNN(), it hardly learns</span></span><br><span class="line">            input_size=INPUT_SIZE,</span><br><span class="line">            hidden_size=<span class="number">64</span>,         <span class="comment"># rnn hidden unit</span></span><br><span class="line">            num_layers=<span class="number">1</span>,           <span class="comment"># number of rnn layer</span></span><br><span class="line">            batch_first=<span class="literal">True</span>,       <span class="comment"># input &amp; output will has batch size as 1s dimension. e.g. (batch, time_step, input_size)</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.out = nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># x shape (batch, time_step, input_size)</span></span><br><span class="line">        <span class="comment"># r_out shape (batch, time_step, output_size)</span></span><br><span class="line">        <span class="comment"># h_n shape (n_layers, batch, hidden_size)</span></span><br><span class="line">        <span class="comment"># h_c shape (n_layers, batch, hidden_size)</span></span><br><span class="line">        r_out, (h_n, h_c) = <span class="variable language_">self</span>.rnn(x, <span class="literal">None</span>)   <span class="comment"># None represents zero initial hidden state</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># choose r_out at the last time step</span></span><br><span class="line">        out = <span class="variable language_">self</span>.out(r_out[:, -<span class="number">1</span>, :])</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rnn = RNN()</span><br><span class="line"><span class="built_in">print</span>(rnn)</span><br><span class="line"></span><br><span class="line">optimizer = torch.optim.Adam(rnn.parameters(), lr=LR)   <span class="comment"># optimize all cnn parameters</span></span><br><span class="line">loss_func = nn.CrossEntropyLoss()                       <span class="comment"># the target label is not one-hotted</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># training and testing</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCH):</span><br><span class="line">    <span class="keyword">for</span> step, (b_x, b_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):        <span class="comment"># gives batch data</span></span><br><span class="line">        b_x = b_x.view(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)              <span class="comment"># reshape x to (batch, time_step, input_size)</span></span><br><span class="line"></span><br><span class="line">        output = rnn(b_x)                               <span class="comment"># rnn output</span></span><br><span class="line">        loss = loss_func(output, b_y)                   <span class="comment"># cross entropy loss</span></span><br><span class="line">        optimizer.zero_grad()                           <span class="comment"># clear gradients for this training step</span></span><br><span class="line">        loss.backward()                                 <span class="comment"># backpropagation, compute gradients</span></span><br><span class="line">        optimizer.step()                                <span class="comment"># apply gradients</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> step % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">            test_output = rnn(test_x)                   <span class="comment"># (samples, time_step, input_size)</span></span><br><span class="line">            pred_y = torch.<span class="built_in">max</span>(test_output, <span class="number">1</span>)[<span class="number">1</span>].data.numpy()</span><br><span class="line">            accuracy = <span class="built_in">float</span>((pred_y == test_y).astype(<span class="built_in">int</span>).<span class="built_in">sum</span>()) / <span class="built_in">float</span>(test_y.size)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch, <span class="string">&#x27; train loss: %.4f&#x27;</span> % loss.data.numpy(), <span class="string">&#x27; test accuracy: %.2f&#x27;</span> % accuracy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print 10 predictions from test data</span></span><br><span class="line">test_output = rnn(test_x[:<span class="number">10</span>].view(-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">pred_y = torch.<span class="built_in">max</span>(test_output, <span class="number">1</span>)[<span class="number">1</span>].data.numpy()</span><br><span class="line"><span class="built_in">print</span>(pred_y, <span class="string">&#x27;prediction number&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(test_y[:<span class="number">10</span>], <span class="string">&#x27;real number&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch07-CNN(卷积神经网络手写数字识别)</title>
    <link href="/2022/04/04/pytorch07-cnn%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <url>/2022/04/04/pytorch07-cnn%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>原文:<a href="https://mofanpy.com/tutorials/machine-learning/torch/CNN/">CNN 卷积神经网络 - PyTorch 莫烦Python (mofanpy.com)</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/4-1-2.gif"></p><h2 id="下载数据集"><a href="#下载数据集" class="headerlink" title="下载数据集"></a>下载数据集</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="keyword">import</span> torchvision      <span class="comment"># 数据库模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1</span>)    <span class="comment"># reproducible</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hyper Parameters</span></span><br><span class="line">EPOCH = <span class="number">1</span>           <span class="comment"># 训练整批数据多少次, 为了节约时间, 我们只训练一次</span></span><br><span class="line">BATCH_SIZE = <span class="number">50</span></span><br><span class="line">LR = <span class="number">0.001</span>          <span class="comment"># 学习率</span></span><br><span class="line">DOWNLOAD_MNIST = <span class="literal">True</span>  <span class="comment"># 如果你已经下载好了mnist数据就写上 False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mnist 手写数字</span></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    root=<span class="string">&#x27;./mnist/&#x27;</span>,    <span class="comment"># 保存或者提取位置</span></span><br><span class="line">    train=<span class="literal">True</span>,  <span class="comment"># this is training data</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),    <span class="comment"># 转换 PIL.Image or numpy.ndarray 成</span></span><br><span class="line">                                                    <span class="comment"># torch.FloatTensor (C x H x W), 训练的时候 normalize 成 [0.0, 1.0] 区间</span></span><br><span class="line">    download=DOWNLOAD_MNIST,          <span class="comment"># 没下载就下载, 下载了就不用再下了</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/4-1-1.png"></p><p>测试数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test_data = torchvision.datasets.MNIST(root=<span class="string">&#x27;./mnist/&#x27;</span>, train=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批训练 50samples, 1 channel, 28x28 (50, 1, 28, 28)</span></span><br><span class="line">train_loader = Data.DataLoader(dataset=train_data, batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了节约时间, 我们测试时只测试前2000个</span></span><br><span class="line">test_x = torch.unsqueeze(test_data.test_data, dim=<span class="number">1</span>).<span class="built_in">type</span>(torch.FloatTensor)[:<span class="number">2000</span>]/<span class="number">255.</span>   <span class="comment"># shape from (2000, 28, 28) to (2000, 1, 28, 28), value in range(0,1)</span></span><br><span class="line">test_y = test_data.test_labels[:<span class="number">2000</span>]</span><br></pre></td></tr></table></figure><h2 id="搭建CNN网络"><a href="#搭建CNN网络" class="headerlink" title="搭建CNN网络"></a>搭建CNN网络</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(CNN, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Sequential(  <span class="comment"># input shape (1, 28, 28)</span></span><br><span class="line">            nn.Conv2d(</span><br><span class="line">                in_channels=<span class="number">1</span>,      <span class="comment"># input height</span></span><br><span class="line">                out_channels=<span class="number">16</span>,    <span class="comment"># n_filters</span></span><br><span class="line">                kernel_size=<span class="number">5</span>,      <span class="comment"># filter size</span></span><br><span class="line">                stride=<span class="number">1</span>,           <span class="comment"># filter movement/step</span></span><br><span class="line">                padding=<span class="number">2</span>,      <span class="comment"># 如果想要 con2d 出来的图片长宽没有变化, padding=(kernel_size-1)/2 当 stride=1</span></span><br><span class="line">            ),      <span class="comment"># output shape (16, 28, 28)</span></span><br><span class="line">            nn.ReLU(),    <span class="comment"># activation</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),    <span class="comment"># 在 2x2 空间里向下采样, output shape (16, 14, 14)</span></span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Sequential(  <span class="comment"># input shape (16, 14, 14)</span></span><br><span class="line">            nn.Conv2d(<span class="number">16</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),  <span class="comment"># output shape (32, 14, 14)</span></span><br><span class="line">            nn.ReLU(),  <span class="comment"># activation</span></span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),  <span class="comment"># output shape (32, 7, 7)</span></span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.out = nn.Linear(<span class="number">32</span> * <span class="number">7</span> * <span class="number">7</span>, <span class="number">10</span>)   <span class="comment"># fully connected layer, output 10 classes</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.conv2(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)   <span class="comment"># 展平多维的卷积图成 (batch_size, 32 * 7 * 7)</span></span><br><span class="line">        output = <span class="variable language_">self</span>.out(x)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">cnn = CNN()</span><br><span class="line"><span class="built_in">print</span>(cnn)  <span class="comment"># net architecture</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">CNN (</span></span><br><span class="line"><span class="string">  (conv1): Sequential (</span></span><br><span class="line"><span class="string">    (0): Conv2d(1, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span></span><br><span class="line"><span class="string">    (1): ReLU ()</span></span><br><span class="line"><span class="string">    (2): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">  (conv2): Sequential (</span></span><br><span class="line"><span class="string">    (0): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span></span><br><span class="line"><span class="string">    (1): ReLU ()</span></span><br><span class="line"><span class="string">    (2): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">  (out): Linear (1568 -&gt; 10)</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.Adam(cnn.parameters(), lr=LR)   <span class="comment"># optimize all cnn parameters</span></span><br><span class="line">loss_func = nn.CrossEntropyLoss()   <span class="comment"># the target label is not one-hotted</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># training and testing</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCH):</span><br><span class="line">    <span class="keyword">for</span> step, (b_x, b_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):   <span class="comment"># 分配 batch data, normalize x when iterate train_loader</span></span><br><span class="line">        output = cnn(b_x)               <span class="comment"># cnn output</span></span><br><span class="line">        loss = loss_func(output, b_y)   <span class="comment"># cross entropy loss</span></span><br><span class="line">        optimizer.zero_grad()           <span class="comment"># clear gradients for this training step</span></span><br><span class="line">        loss.backward()                 <span class="comment"># backpropagation, compute gradients</span></span><br><span class="line">        optimizer.step()                <span class="comment"># apply gradients</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Epoch:  0  train loss: 0.0306  test accuracy: 0.97</span></span><br><span class="line"><span class="string">Epoch:  0  train loss: 0.0147  test accuracy: 0.98</span></span><br><span class="line"><span class="string">Epoch:  0  train loss: 0.0427  test accuracy: 0.98</span></span><br><span class="line"><span class="string">Epoch:  0  train loss: 0.0078  test accuracy: 0.98</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># third-party library</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># torch.manual_seed(1)    # reproducible</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hyper Parameters</span></span><br><span class="line">EPOCH = <span class="number">1</span>               <span class="comment"># train the training data n times, to save time, we just train 1 epoch</span></span><br><span class="line">BATCH_SIZE = <span class="number">50</span></span><br><span class="line">LR = <span class="number">0.001</span>              <span class="comment"># learning rate</span></span><br><span class="line">DOWNLOAD_MNIST = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mnist digits dataset</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span>(os.path.exists(<span class="string">&#x27;./mnist/&#x27;</span>)) <span class="keyword">or</span> <span class="keyword">not</span> os.listdir(<span class="string">&#x27;./mnist/&#x27;</span>):</span><br><span class="line">    <span class="comment"># not mnist dir or mnist is empyt dir</span></span><br><span class="line">    DOWNLOAD_MNIST = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">train_data = torchvision.datasets.MNIST(</span><br><span class="line">    root=<span class="string">&#x27;./mnist/&#x27;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,                                     <span class="comment"># this is training data</span></span><br><span class="line">    transform=torchvision.transforms.ToTensor(),    <span class="comment"># Converts a PIL.Image or numpy.ndarray to</span></span><br><span class="line">                                                    <span class="comment"># torch.FloatTensor of shape (C x H x W) and normalize in the range [0.0, 1.0]</span></span><br><span class="line">    download=DOWNLOAD_MNIST,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot one example</span></span><br><span class="line"><span class="built_in">print</span>(train_data.train_data.size())                 <span class="comment"># (60000, 28, 28)</span></span><br><span class="line"><span class="built_in">print</span>(train_data.train_labels.size())               <span class="comment"># (60000)</span></span><br><span class="line"><span class="comment"># plt.imshow(train_data.train_data[0].numpy(), cmap=&#x27;gray&#x27;)</span></span><br><span class="line"><span class="comment"># plt.title(&#x27;%i&#x27; % train_data.train_labels[0])</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Data Loader for easy mini-batch return in training, the image batch shape will be (50, 1, 28, 28)</span></span><br><span class="line">train_loader = Data.DataLoader(dataset=train_data, batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pick 2000 samples to speed up testing</span></span><br><span class="line">test_data = torchvision.datasets.MNIST(root=<span class="string">&#x27;./mnist/&#x27;</span>, train=<span class="literal">False</span>)</span><br><span class="line">test_x = torch.unsqueeze(test_data.test_data, dim=<span class="number">1</span>).<span class="built_in">type</span>(torch.FloatTensor)[:<span class="number">1000</span>]/<span class="number">255.</span>   <span class="comment"># shape from (2000, 28, 28) to (2000, 1, 28, 28), value in range(0,1)</span></span><br><span class="line">test_y = test_data.test_labels[:<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(CNN, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Sequential(         <span class="comment"># input shape (1, 28, 28)</span></span><br><span class="line">            nn.Conv2d(</span><br><span class="line">                in_channels=<span class="number">1</span>,              <span class="comment"># input height</span></span><br><span class="line">                out_channels=<span class="number">16</span>,            <span class="comment"># n_filters</span></span><br><span class="line">                kernel_size=<span class="number">5</span>,              <span class="comment"># filter size</span></span><br><span class="line">                stride=<span class="number">1</span>,                   <span class="comment"># filter movement/step</span></span><br><span class="line">                padding=<span class="number">2</span>,                  <span class="comment"># if want same width and length of this image after Conv2d, padding=(kernel_size-1)/2 if stride=1</span></span><br><span class="line">            ),                              <span class="comment"># output shape (16, 28, 28)</span></span><br><span class="line">            nn.ReLU(),                      <span class="comment"># activation</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),    <span class="comment"># choose max value in 2x2 area, output shape (16, 14, 14)</span></span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Sequential(         <span class="comment"># input shape (16, 14, 14)</span></span><br><span class="line">            nn.Conv2d(<span class="number">16</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),     <span class="comment"># output shape (32, 14, 14)</span></span><br><span class="line">            nn.ReLU(),                      <span class="comment"># activation</span></span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),                <span class="comment"># output shape (32, 7, 7)</span></span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.out = nn.Linear(<span class="number">32</span> * <span class="number">7</span> * <span class="number">7</span>, <span class="number">10</span>)   <span class="comment"># fully connected layer, output 10 classes</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.conv2(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)           <span class="comment"># flatten the output of conv2 to (batch_size, 32 * 7 * 7)</span></span><br><span class="line">        output = <span class="variable language_">self</span>.out(x)</span><br><span class="line">        <span class="keyword">return</span> output, x    <span class="comment"># return x for visualization</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cnn = CNN()</span><br><span class="line"><span class="built_in">print</span>(cnn)  <span class="comment"># net architecture</span></span><br><span class="line"></span><br><span class="line">optimizer = torch.optim.Adam(cnn.parameters(), lr=LR)   <span class="comment"># optimize all cnn parameters</span></span><br><span class="line">loss_func = nn.CrossEntropyLoss()                       <span class="comment"># the target label is not one-hotted</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># following function (plot_with_labels) is for visualization, can be ignored if not interested</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">try</span>: <span class="keyword">from</span> sklearn.manifold <span class="keyword">import</span> TSNE; HAS_SK = <span class="literal">True</span></span><br><span class="line"><span class="keyword">except</span>: HAS_SK = <span class="literal">False</span>; <span class="built_in">print</span>(<span class="string">&#x27;Please install sklearn for layer visualization&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_with_labels</span>(<span class="params">lowDWeights, labels</span>):</span><br><span class="line">    plt.cla()</span><br><span class="line">    X, Y = lowDWeights[:, <span class="number">0</span>], lowDWeights[:, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> x, y, s <span class="keyword">in</span> <span class="built_in">zip</span>(X, Y, labels):</span><br><span class="line">        c = cm.rainbow(<span class="built_in">int</span>(<span class="number">255</span> * s / <span class="number">9</span>)); plt.text(x, y, s, backgroundcolor=c, fontsize=<span class="number">9</span>)</span><br><span class="line">    plt.xlim(X.<span class="built_in">min</span>(), X.<span class="built_in">max</span>()); plt.ylim(Y.<span class="built_in">min</span>(), Y.<span class="built_in">max</span>()); plt.title(<span class="string">&#x27;Visualize last layer&#x27;</span>); plt.show(); plt.pause(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">plt.ion()</span><br><span class="line"><span class="comment"># training and testing</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCH):</span><br><span class="line">    <span class="keyword">for</span> step, (b_x, b_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):   <span class="comment"># gives batch data, normalize x when iterate train_loader</span></span><br><span class="line"></span><br><span class="line">        output = cnn(b_x)[<span class="number">0</span>]               <span class="comment"># cnn output</span></span><br><span class="line">        loss = loss_func(output, b_y)   <span class="comment"># cross entropy loss</span></span><br><span class="line">        optimizer.zero_grad()           <span class="comment"># clear gradients for this training step</span></span><br><span class="line">        loss.backward()                 <span class="comment"># backpropagation, compute gradients</span></span><br><span class="line">        optimizer.step()                <span class="comment"># apply gradients</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> step % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">            test_output, last_layer = cnn(test_x)</span><br><span class="line">            pred_y = torch.<span class="built_in">max</span>(test_output, <span class="number">1</span>)[<span class="number">1</span>].data.numpy()</span><br><span class="line">            accuracy = <span class="built_in">float</span>((pred_y == test_y.data.numpy()).astype(<span class="built_in">int</span>).<span class="built_in">sum</span>()) / <span class="built_in">float</span>(test_y.size(<span class="number">0</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch, <span class="string">&#x27; train loss: %.4f&#x27;</span> % loss.data.numpy(), <span class="string">&#x27; test accuracy: %.2f&#x27;</span> % accuracy)</span><br><span class="line">            <span class="keyword">if</span> HAS_SK:</span><br><span class="line">                <span class="comment"># Visualization of trained flatten layer (T-SNE)</span></span><br><span class="line">                tsne = TSNE(perplexity=<span class="number">30</span>, n_components=<span class="number">2</span>, init=<span class="string">&#x27;pca&#x27;</span>, n_iter=<span class="number">5000</span>)</span><br><span class="line">                plot_only = <span class="number">500</span></span><br><span class="line">                low_dim_embs = tsne.fit_transform(last_layer.data.numpy()[:plot_only, :])</span><br><span class="line">                labels = test_y.numpy()[:plot_only]</span><br><span class="line">                plot_with_labels(low_dim_embs, labels)</span><br><span class="line">plt.ioff()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print 10 predictions from test data</span></span><br><span class="line">test_output, _ = cnn(test_x[:<span class="number">10</span>])</span><br><span class="line">pred_y = torch.<span class="built_in">max</span>(test_output, <span class="number">1</span>)[<span class="number">1</span>].data.numpy()</span><br><span class="line"><span class="built_in">print</span>(pred_y, <span class="string">&#x27;prediction number&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(test_y[:<span class="number">10</span>].numpy(), <span class="string">&#x27;real number&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch06-优化器(Optimizer)</title>
    <link href="/2022/04/03/pytorch06-%E4%BC%98%E5%8C%96%E5%99%A8optimizer/"/>
    <url>/2022/04/03/pytorch06-%E4%BC%98%E5%8C%96%E5%99%A8optimizer/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://mofanpy.com/tutorials/machine-learning/torch/optimizer/">Optimizer 优化器 - PyTorch 莫烦Python (mofanpy.com)</a></p><p>采用不同的优化算法，网络模型收敛的效果是不同的</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/3-6-2.png"></p><h2 id="比较优化器采用不同优化算法的效果"><a href="#比较优化器采用不同优化算法的效果" class="headerlink" title="比较优化器采用不同优化算法的效果"></a>比较优化器采用不同优化算法的效果</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">LR = <span class="number">0.01</span></span><br><span class="line">BATCH_SIZE = <span class="number">32</span></span><br><span class="line">EPOCH = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fake dataset</span></span><br><span class="line">x = torch.unsqueeze(torch.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1000</span>), dim=<span class="number">1</span>)</span><br><span class="line">y = x.<span class="built_in">pow</span>(<span class="number">2</span>) + <span class="number">0.1</span>*torch.normal(torch.zeros(*x.size()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot dataset</span></span><br><span class="line"><span class="comment"># plt.scatter(x.numpy(), y.numpy())</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># put dateset into torch dataset</span></span><br><span class="line">torch_dataset = Data.TensorDataset(x, y)</span><br><span class="line">loader = Data.DataLoader(dataset=torch_dataset, batch_size=BATCH_SIZE, shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># default network</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.hidden = torch.nn.Linear(<span class="number">1</span>, <span class="number">20</span>)   <span class="comment"># hidden layer</span></span><br><span class="line">        <span class="variable language_">self</span>.predict = torch.nn.Linear(<span class="number">20</span>, <span class="number">1</span>)   <span class="comment"># output layer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.hidden(x))      <span class="comment"># activation function for hidden layer</span></span><br><span class="line">        x = <span class="variable language_">self</span>.predict(x)             <span class="comment"># linear output</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># different nets</span></span><br><span class="line">    net_SGD         = Net()</span><br><span class="line">    net_Momentum    = Net()</span><br><span class="line">    net_RMSprop     = Net()</span><br><span class="line">    net_Adam        = Net()</span><br><span class="line">    nets = [net_SGD, net_Momentum, net_RMSprop, net_Adam]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># different optimizers</span></span><br><span class="line">    opt_SGD         = torch.optim.SGD(net_SGD.parameters(), lr=LR)</span><br><span class="line">    opt_Momentum    = torch.optim.SGD(net_Momentum.parameters(), lr=LR, momentum=<span class="number">0.8</span>)</span><br><span class="line">    opt_RMSprop     = torch.optim.RMSprop(net_RMSprop.parameters(), lr=LR, alpha=<span class="number">0.9</span>)</span><br><span class="line">    opt_Adam        = torch.optim.Adam(net_Adam.parameters(), lr=LR, betas=(<span class="number">0.9</span>, <span class="number">0.99</span>))</span><br><span class="line">    optimizers = [opt_SGD, opt_Momentum, opt_RMSprop, opt_Adam]</span><br><span class="line"></span><br><span class="line">    loss_func = torch.nn.MSELoss()</span><br><span class="line">    losses_his = [[], [], [], []]   <span class="comment"># record loss</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># training</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCH):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch)</span><br><span class="line">        <span class="keyword">for</span> step, (b_x, b_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(loader):          <span class="comment"># for each training step</span></span><br><span class="line">            <span class="keyword">for</span> net, opt, l_his <span class="keyword">in</span> <span class="built_in">zip</span>(nets, optimizers, losses_his):</span><br><span class="line">                output = net(b_x)              <span class="comment"># get output for every net</span></span><br><span class="line">                loss = loss_func(output, b_y)  <span class="comment"># compute loss for every net</span></span><br><span class="line">                opt.zero_grad()                <span class="comment"># clear gradients for next train</span></span><br><span class="line">                loss.backward()                <span class="comment"># backpropagation, compute gradients</span></span><br><span class="line">                opt.step()                     <span class="comment"># apply gradients</span></span><br><span class="line">                l_his.append(loss.item())     <span class="comment"># loss recoder</span></span><br><span class="line"></span><br><span class="line">    labels = [<span class="string">&#x27;SGD&#x27;</span>, <span class="string">&#x27;Momentum&#x27;</span>, <span class="string">&#x27;RMSprop&#x27;</span>, <span class="string">&#x27;Adam&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i, l_his <span class="keyword">in</span> <span class="built_in">enumerate</span>(losses_his):</span><br><span class="line">        plt.plot(l_his, label=labels[i])</span><br><span class="line">        <span class="built_in">print</span>(l_his)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Steps&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">    plt.ylim((<span class="number">0</span>, <span class="number">0.2</span>))</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>选Adam。</p>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch05-批训练(Batch Training)</title>
    <link href="/2022/04/03/pytorch05-%E6%89%B9%E8%AE%AD%E7%BB%83batch-training/"/>
    <url>/2022/04/03/pytorch05-%E6%89%B9%E8%AE%AD%E7%BB%83batch-training/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://mofanpy.com/tutorials/machine-learning/torch/train-on-batch/">批训练 - PyTorch 莫烦Python (mofanpy.com)</a></p><p>单个数据训练太慢，一批一批训练会加快训练速度</p><h2 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h2><p>Torch提供了DataLoader来帮助批训练</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data</span><br><span class="line">torch.manual_seed(<span class="number">1</span>)    <span class="comment"># reproducible</span></span><br><span class="line"></span><br><span class="line">BATCH_SIZE = <span class="number">5</span>      <span class="comment"># 批训练的数据个数</span></span><br><span class="line"></span><br><span class="line">x = torch.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>)       <span class="comment"># x data (torch tensor)</span></span><br><span class="line">y = torch.linspace(<span class="number">10</span>, <span class="number">1</span>, <span class="number">10</span>)       <span class="comment"># y data (torch tensor)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先转换成 torch 能识别的 Dataset</span></span><br><span class="line">torch_dataset = Data.TensorDataset(data_tensor=x, target_tensor=y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 dataset 放入 DataLoader</span></span><br><span class="line">loader = Data.DataLoader(</span><br><span class="line">    dataset=torch_dataset,      <span class="comment"># torch TensorDataset format</span></span><br><span class="line">    batch_size=BATCH_SIZE,      <span class="comment"># mini batch size</span></span><br><span class="line">    shuffle=<span class="literal">True</span>,               <span class="comment"># 要不要打乱数据 (打乱比较好)</span></span><br><span class="line">    num_workers=<span class="number">2</span>,              <span class="comment"># 多线程来读数据</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):   <span class="comment"># 训练所有!整套!数据 3 次</span></span><br><span class="line">    <span class="keyword">for</span> step, (batch_x, batch_y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(loader):  <span class="comment"># 每一步 loader 释放一小批数据用来学习</span></span><br><span class="line">        <span class="comment"># 假设这里就是你训练的地方...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打出来一些数据</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch, <span class="string">&#x27; Step: &#x27;</span>, step, <span class="string">&#x27; batch x: &#x27;</span>,</span><br><span class="line">              batch_x.numpy(), <span class="string">&#x27; batch y: &#x27;</span>, batch_y.numpy())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Epoch:  0  Step:  0  batch x:  [ 6.  7.  2.  3.  1.]  batch y:  [  5.   4.   9.   8.  10.]</span></span><br><span class="line"><span class="string">Epoch:  0  Step:  1  batch x:  [  9.  10.   4.   8.   5.]  batch y:  [ 2.  1.  7.  3.  6.]</span></span><br><span class="line"><span class="string">Epoch:  1  Step:  0  batch x:  [  3.   4.   2.   9.  10.]  batch y:  [ 8.  7.  9.  2.  1.]</span></span><br><span class="line"><span class="string">Epoch:  1  Step:  1  batch x:  [ 1.  7.  8.  5.  6.]  batch y:  [ 10.   4.   3.   6.   5.]</span></span><br><span class="line"><span class="string">Epoch:  2  Step:  0  batch x:  [ 3.  9.  2.  6.  7.]  batch y:  [ 8.  2.  9.  5.  4.]</span></span><br><span class="line"><span class="string">Epoch:  2  Step:  1  batch x:  [ 10.   4.   8.   1.   5.]  batch y:  [  1.   7.   3.  10.   6.]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch04-保存提取网络模型</title>
    <link href="/2022/04/03/pytorch04-%E4%BF%9D%E5%AD%98%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/04/03/pytorch04-%E4%BF%9D%E5%AD%98%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://mofanpy.com/tutorials/machine-learning/torch/save-reload/">保存提取 - PyTorch 莫烦Python (mofanpy.com)</a></p><p>训练好一个网络的参数之后，如果想要下次直接用，就需要把网络模型参数保存下来。</p><h2 id="快速搭建网络并训练，两种保存方法"><a href="#快速搭建网络并训练，两种保存方法" class="headerlink" title="快速搭建网络并训练，两种保存方法"></a>快速搭建网络并训练，两种保存方法</h2><p>就是之前的回归模型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = torch.unsqueeze(torch.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>), dim=<span class="number">1</span>)  <span class="comment"># x data (tensor), shape=(100, 1)</span></span><br><span class="line">y = x.<span class="built_in">pow</span>(<span class="number">2</span>) + <span class="number">0.2</span>*torch.rand(x.size())  <span class="comment"># noisy y data (tensor), shape=(100, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save</span>():</span><br><span class="line">    net1 = torch.nn.Sequential(</span><br><span class="line">        torch.nn.Linear(<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line">        torch.nn.ReLU(),</span><br><span class="line">        torch.nn.Linear(<span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line">    optimizer = torch.optim.SGD(net1.parameters(), lr=<span class="number">0.5</span>)</span><br><span class="line">    loss_func = torch.nn.MSELoss()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        prediction = net1(x)</span><br><span class="line">        loss = loss_func(prediction, y)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plot result</span></span><br><span class="line">    plt.figure(<span class="number">1</span>, figsize=(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">    plt.subplot(<span class="number">131</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Net1&#x27;</span>)</span><br><span class="line">    plt.scatter(x.data.numpy(), y.data.numpy())</span><br><span class="line">    plt.plot(x.data.numpy(), prediction.data.numpy(), <span class="string">&#x27;r-&#x27;</span>, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2 ways to save the net</span></span><br><span class="line">    torch.save(net1, <span class="string">&#x27;net.pkl&#x27;</span>)  <span class="comment"># 保存整个网络</span></span><br><span class="line">    torch.save(net1.state_dict(), <span class="string">&#x27;net_params.pkl&#x27;</span>)   <span class="comment"># 只保存参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 对应两种提取方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restore_net</span>():</span><br><span class="line">    <span class="comment"># restore entire net1 to net2</span></span><br><span class="line">    net2 = torch.load(<span class="string">&#x27;net.pkl&#x27;</span>)<span class="comment">#加载整个网络</span></span><br><span class="line">    prediction = net2(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plot result</span></span><br><span class="line">    plt.subplot(<span class="number">132</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Net2&#x27;</span>)</span><br><span class="line">    plt.scatter(x.data.numpy(), y.data.numpy())</span><br><span class="line">    plt.plot(x.data.numpy(), prediction.data.numpy(), <span class="string">&#x27;r-&#x27;</span>, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restore_params</span>():<span class="comment">#搭建网络，加载参数</span></span><br><span class="line">    <span class="comment"># restore only the parameters in net1 to net3</span></span><br><span class="line">    net3 = torch.nn.Sequential(</span><br><span class="line">        torch.nn.Linear(<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line">        torch.nn.ReLU(),</span><br><span class="line">        torch.nn.Linear(<span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># copy net1&#x27;s parameters into net3</span></span><br><span class="line">    net3.load_state_dict(torch.load(<span class="string">&#x27;net_params.pkl&#x27;</span>))</span><br><span class="line">    prediction = net3(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plot result</span></span><br><span class="line">    plt.subplot(<span class="number">133</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Net3&#x27;</span>)</span><br><span class="line">    plt.scatter(x.data.numpy(), y.data.numpy())</span><br><span class="line">    plt.plot(x.data.numpy(), prediction.data.numpy(), <span class="string">&#x27;r-&#x27;</span>, lw=<span class="number">5</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 测试一下效果</span></span><br></pre></td></tr></table></figure><p>完全一致</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/image-1024x340.png"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = torch.unsqueeze(torch.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>), dim=<span class="number">1</span>)  <span class="comment"># x data (tensor), shape=(100, 1)</span></span><br><span class="line">y = x.<span class="built_in">pow</span>(<span class="number">2</span>) + <span class="number">0.2</span>*torch.rand(x.size())  <span class="comment"># noisy y data (tensor), shape=(100, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save</span>():</span><br><span class="line">    net1 = torch.nn.Sequential(</span><br><span class="line">        torch.nn.Linear(<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line">        torch.nn.ReLU(),</span><br><span class="line">        torch.nn.Linear(<span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line">    optimizer = torch.optim.SGD(net1.parameters(), lr=<span class="number">0.5</span>)</span><br><span class="line">    loss_func = torch.nn.MSELoss()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        prediction = net1(x)</span><br><span class="line">        loss = loss_func(prediction, y)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plot result</span></span><br><span class="line">    plt.figure(<span class="number">1</span>, figsize=(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">    plt.subplot(<span class="number">131</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Net1&#x27;</span>)</span><br><span class="line">    plt.scatter(x.data.numpy(), y.data.numpy())</span><br><span class="line">    plt.plot(x.data.numpy(), prediction.data.numpy(), <span class="string">&#x27;r-&#x27;</span>, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2 ways to save the net</span></span><br><span class="line">    torch.save(net1, <span class="string">&#x27;net.pkl&#x27;</span>)  <span class="comment"># 保存整个网络</span></span><br><span class="line">    torch.save(net1.state_dict(), <span class="string">&#x27;net_params.pkl&#x27;</span>)   <span class="comment"># 只保存参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restore_net</span>():</span><br><span class="line">    <span class="comment"># restore entire net1 to net2</span></span><br><span class="line">    net2 = torch.load(<span class="string">&#x27;net.pkl&#x27;</span>)<span class="comment">#加载整个网络</span></span><br><span class="line">    prediction = net2(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plot result</span></span><br><span class="line">    plt.subplot(<span class="number">132</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Net2&#x27;</span>)</span><br><span class="line">    plt.scatter(x.data.numpy(), y.data.numpy())</span><br><span class="line">    plt.plot(x.data.numpy(), prediction.data.numpy(), <span class="string">&#x27;r-&#x27;</span>, lw=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restore_params</span>():<span class="comment">#搭建网络，加载参数</span></span><br><span class="line">    <span class="comment"># restore only the parameters in net1 to net3</span></span><br><span class="line">    net3 = torch.nn.Sequential(</span><br><span class="line">        torch.nn.Linear(<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line">        torch.nn.ReLU(),</span><br><span class="line">        torch.nn.Linear(<span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># copy net1&#x27;s parameters into net3</span></span><br><span class="line">    net3.load_state_dict(torch.load(<span class="string">&#x27;net_params.pkl&#x27;</span>))</span><br><span class="line">    prediction = net3(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plot result</span></span><br><span class="line">    plt.subplot(<span class="number">133</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Net3&#x27;</span>)</span><br><span class="line">    plt.scatter(x.data.numpy(), y.data.numpy())</span><br><span class="line">    plt.plot(x.data.numpy(), prediction.data.numpy(), <span class="string">&#x27;r-&#x27;</span>, lw=<span class="number">5</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># save net1</span></span><br><span class="line">save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore entire net (may slow)</span></span><br><span class="line">restore_net()</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore only the net parameters</span></span><br><span class="line">restore_params()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch03-快速搭建网络法</title>
    <link href="/2022/04/03/pytorch03-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C%E6%B3%95/"/>
    <url>/2022/04/03/pytorch03-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://mofanpy.com/tutorials/machine-learning/torch/fast-nn/">快速搭建法 - PyTorch 莫烦Python (mofanpy.com)</a></p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Network</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n_features,n_hidden,n_output</span>):</span><br><span class="line">        <span class="built_in">super</span>(Network,<span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.hidden = torch.nn.Linear(n_features,n_hidden)</span><br><span class="line">        <span class="variable language_">self</span>.predict = torch.nn.Linear(n_hidden,n_output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x=F.relu(<span class="variable language_">self</span>.hidden(x))</span><br><span class="line">        x=<span class="variable language_">self</span>.predict(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net1=Network(<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="方法二（快速）"><a href="#方法二（快速）" class="headerlink" title="方法二（快速）"></a>方法二（快速）</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">net2=torch.nn.Sequential(</span><br><span class="line">    torch.nn.Linear(<span class="number">2</span>,<span class="number">10</span>),</span><br><span class="line">    torch.nn.ReLU(),</span><br><span class="line">    torch.nn.Linear(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(net1)</span><br><span class="line"><span class="built_in">print</span>(net2)</span><br><span class="line"></span><br><span class="line">Network(</span><br><span class="line">  (hidden): Linear(in_features=<span class="number">2</span>, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>) </span><br><span class="line">  (predict): Linear(in_features=<span class="number">10</span>, out_features=<span class="number">2</span>, bias=<span class="literal">True</span>)</span><br><span class="line">)</span><br><span class="line">Sequential(</span><br><span class="line">  (<span class="number">0</span>): Linear(in_features=<span class="number">2</span>, out_features=<span class="number">10</span>, bias=<span class="literal">True</span>)</span><br><span class="line">  (<span class="number">1</span>): ReLU()</span><br><span class="line">  (<span class="number">2</span>): Linear(in_features=<span class="number">10</span>, out_features=<span class="number">2</span>, bias=<span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第一种方法由我们指定了网络层名，第二种方法则是数字索引，第一种方法中Relu是一个function，第二种方法中Relu是torch.nn的一种网络层</p><p><strong>两者完全等价</strong></p>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch02-分类问题（划分数据点类别）</title>
    <link href="/2022/04/03/pytorch02-%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98%EF%BC%88%E5%88%92%E5%88%86%E6%95%B0%E6%8D%AE%E7%82%B9%E7%B1%BB%E5%88%AB%EF%BC%89/"/>
    <url>/2022/04/03/pytorch02-%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98%EF%BC%88%E5%88%92%E5%88%86%E6%95%B0%E6%8D%AE%E7%82%B9%E7%B1%BB%E5%88%AB%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>原文<a href="https://mofanpy.com/tutorials/machine-learning/torch/classification/">区分类型 (分类) - PyTorch 莫烦Python (mofanpy.com)</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/1-1-3.gif"></p><h2 id="定义数据集"><a href="#定义数据集" class="headerlink" title="定义数据集"></a>定义数据集</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#x是数据点</span></span><br><span class="line"><span class="comment">#y是标签</span></span><br><span class="line">n_data = torch.ones(<span class="number">100</span>, <span class="number">2</span>)<span class="comment">#100*2的全1矩阵</span></span><br><span class="line"><span class="comment">#均值为2，方差为1的离散正态分布随机点</span></span><br><span class="line">x0 = torch.normal(<span class="number">2</span>*n_data, <span class="number">1</span>)      <span class="comment"># class0 x data (tensor), shape=(100, 2) </span></span><br><span class="line"><span class="comment">#标签为0</span></span><br><span class="line">y0 = torch.zeros(<span class="number">100</span>)               <span class="comment"># class0 y data (tensor), shape=(100, 1)</span></span><br><span class="line"></span><br><span class="line">x1 = torch.normal(-<span class="number">2</span>*n_data, <span class="number">1</span>)     <span class="comment"># class1 x data (tensor), shape=(100, 2)</span></span><br><span class="line"><span class="comment">#标签为1</span></span><br><span class="line">y1 = torch.ones(<span class="number">100</span>)                <span class="comment"># class1 y data (tensor), shape=(100, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cat 连接两个tensor</span></span><br><span class="line">x = torch.cat((x0, x1), <span class="number">0</span>).<span class="built_in">type</span>(torch.FloatTensor)  <span class="comment"># shape (200, 2) FloatTensor = 32-bit floating </span></span><br><span class="line">y = torch.cat((y0, y1), ).<span class="built_in">type</span>(torch.LongTensor)    <span class="comment"># shape (200,) LongTensor = 64-bit integer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义网络结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):  <span class="comment"># 继承 torch 的 Module</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n_feature, n_hidden, n_output</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()     <span class="comment"># 继承 __init__ 功能</span></span><br><span class="line">        <span class="comment"># 定义每层用什么样的形式</span></span><br><span class="line">        <span class="variable language_">self</span>.hidden = torch.nn.Linear(n_feature, n_hidden)   <span class="comment"># 隐藏层线性输出</span></span><br><span class="line">        <span class="variable language_">self</span>.predict = torch.nn.Linear(n_hidden, n_output)   <span class="comment"># 输出层线性输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):   <span class="comment"># 这同时也是 Module 中的 forward 功能</span></span><br><span class="line">        <span class="comment"># 正向传播输入值, 神经网络分析出输出值</span></span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.hidden(x))      <span class="comment"># 激励函数(隐藏层的线性值)</span></span><br><span class="line">        x = <span class="variable language_">self</span>.predict(x)             <span class="comment"># 输出值</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net = Net(n_feature=<span class="number">2</span>, n_hidden=<span class="number">10</span>, n_output=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>把一堆数据点分为两类</p><p>输入是一个点的坐标[x,y]，输出是一个预测的类别概率[属于第一类的概率,属于第二类的概率]，所以输入输出维度都是2</p><h2 id="定义优化器和损失函数"><a href="#定义优化器和损失函数" class="headerlink" title="定义优化器和损失函数"></a>定义优化器和损失函数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.SGD(net.parameters(), lr=<span class="number">0.02</span>)</span><br><span class="line">loss_func = torch.nn.CrossEntropyLoss()<span class="comment">#softmax概率，用于标签误差计算</span></span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># optimizer 是训练的工具</span></span><br><span class="line">optimizer = torch.optim.SGD(net.parameters(), lr=<span class="number">0.02</span>)  <span class="comment"># 传入 net 的所有参数, 学习率</span></span><br><span class="line"><span class="comment"># 算误差的时候, 注意真实值!不是! one-hot 形式的, 而是1D Tensor, (batch,)</span></span><br><span class="line"><span class="comment"># 但是预测值是2D tensor (batch, n_classes)</span></span><br><span class="line">loss_func = torch.nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    out = net(x)     <span class="comment"># 喂给 net 训练数据 x, 输出分析值</span></span><br><span class="line"></span><br><span class="line">    loss = loss_func(out, y)     <span class="comment"># 计算两者的误差</span></span><br><span class="line"></span><br><span class="line">    optimizer.zero_grad()   <span class="comment"># 清空上一步的残余更新参数值</span></span><br><span class="line">    loss.backward()         <span class="comment"># 误差反向传播, 计算参数更新值</span></span><br><span class="line">    optimizer.step()        <span class="comment"># 将参数更新值施加到 net 的 parameters</span></span><br></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#x是数据</span></span><br><span class="line"><span class="comment">#y是标签</span></span><br><span class="line">n_data = torch.ones(<span class="number">100</span>, <span class="number">2</span>)<span class="comment">#100*2的全1矩阵</span></span><br><span class="line"><span class="comment">#均值为2，方差为1的离散正态分布随机点</span></span><br><span class="line">x0 = torch.normal(<span class="number">2</span>*n_data, <span class="number">1</span>)      <span class="comment"># class0 x data (tensor), shape=(100, 2) </span></span><br><span class="line"><span class="comment">#标签为0</span></span><br><span class="line">y0 = torch.zeros(<span class="number">100</span>)               <span class="comment"># class0 y data (tensor), shape=(100, 1)</span></span><br><span class="line"></span><br><span class="line">x1 = torch.normal(-<span class="number">2</span>*n_data, <span class="number">1</span>)     <span class="comment"># class1 x data (tensor), shape=(100, 2)</span></span><br><span class="line"><span class="comment">#标签为1</span></span><br><span class="line">y1 = torch.ones(<span class="number">100</span>)                <span class="comment"># class1 y data (tensor), shape=(100, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cat 连接两个tensor</span></span><br><span class="line">x = torch.cat((x0, x1), <span class="number">0</span>).<span class="built_in">type</span>(torch.FloatTensor)  <span class="comment"># shape (200, 2) FloatTensor = 32-bit floating </span></span><br><span class="line">y = torch.cat((y0, y1), ).<span class="built_in">type</span>(torch.LongTensor)    <span class="comment"># shape (200,) LongTensor = 64-bit integer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n_feature, n_hidden, n_output</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.hidden = torch.nn.Linear(n_feature, n_hidden)</span><br><span class="line">        <span class="variable language_">self</span>.out =torch.nn.Linear(n_hidden, n_output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.hidden(x))</span><br><span class="line">        x =<span class="variable language_">self</span>.out(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net = Net(n_feature=<span class="number">2</span>, n_hidden=<span class="number">10</span>, n_output=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(net)</span><br><span class="line"></span><br><span class="line">optimizer = torch.optim.SGD(net.parameters(), lr=<span class="number">0.02</span>)</span><br><span class="line">loss_func = torch.nn.CrossEntropyLoss()<span class="comment">#softmax概率，用于标签误差计算</span></span><br><span class="line"></span><br><span class="line">plt.ion()<span class="comment">#实时打印</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    out = net(x)<span class="comment">#输出是类别概率[0.3,0.7]</span></span><br><span class="line">    loss = loss_func(out, y)<span class="comment">#先写预测值，后写真实值</span></span><br><span class="line"></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> t % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        plt.cla()</span><br><span class="line">        prediction = torch.<span class="built_in">max</span>(out, <span class="number">1</span>)[<span class="number">1</span>]<span class="comment">#1是最大值索引，[0]是最大值</span></span><br><span class="line">        pred_y = prediction.data.numpy()</span><br><span class="line">        target_y = y.data.numpy()</span><br><span class="line">        plt.scatter(x.data.numpy()[:, <span class="number">0</span>], x.data.numpy()[:, <span class="number">1</span>], c=pred_y, s=<span class="number">100</span>, lw=<span class="number">0</span>, cmap=<span class="string">&#x27;RdYlGn&#x27;</span>)</span><br><span class="line">        accuracy = <span class="built_in">float</span>((pred_y == target_y).astype(<span class="built_in">int</span>).<span class="built_in">sum</span>()) / <span class="built_in">float</span>(target_y.size)</span><br><span class="line">        plt.text(<span class="number">1.5</span>, -<span class="number">4</span>, <span class="string">&#x27;Accuracy=%.2f&#x27;</span> % accuracy, fontdict=&#123;<span class="string">&#x27;size&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;color&#x27;</span>:  <span class="string">&#x27;red&#x27;</span>&#125;)</span><br><span class="line">        plt.pause(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">plt.ioff()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch01-回归问题（用曲线拟合数据点）</title>
    <link href="/2022/04/03/pytorch01-%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%EF%BC%88%E7%94%A8%E6%9B%B2%E7%BA%BF%E6%8B%9F%E5%90%88%E6%95%B0%E6%8D%AE%E7%82%B9%EF%BC%89/"/>
    <url>/2022/04/03/pytorch01-%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%EF%BC%88%E7%94%A8%E6%9B%B2%E7%BA%BF%E6%8B%9F%E5%90%88%E6%95%B0%E6%8D%AE%E7%82%B9%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>原文<a href="https://mofanpy.com/tutorials/machine-learning/torch/regression/">关系拟合 (回归) - PyTorch 莫烦Python (mofanpy.com)</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/04/1-1-2.gif"></p><h2 id="定义数据点集"><a href="#定义数据点集" class="headerlink" title="定义数据点集"></a>定义数据点集</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=torch.unsqueeze(torch.linspace(-<span class="number">1</span>,<span class="number">1</span>,<span class="number">100</span>),dim=<span class="number">1</span>)</span><br><span class="line">y=x.<span class="built_in">pow</span>(<span class="number">2</span>)+<span class="number">0.2</span>*torch.rand(x.size())</span><br></pre></td></tr></table></figure><p>注：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">torch.linspace(start,end,step)构造等差数列</span><br><span class="line">torch.unsqueeze()升维</span><br></pre></td></tr></table></figure><p>x是(-1,1)区间内的100个等差数，y&#x3D;x^2，外加了一些随机噪声</p><h2 id="定义网络结构"><a href="#定义网络结构" class="headerlink" title="定义网络结构"></a>定义网络结构</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):  <span class="comment"># 继承 torch 的 Module</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n_feature, n_hidden, n_output</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()     <span class="comment"># 继承 __init__ 功能</span></span><br><span class="line">        <span class="comment"># 定义每层用什么样的形式</span></span><br><span class="line">        <span class="variable language_">self</span>.hidden = torch.nn.Linear(n_feature, n_hidden)   <span class="comment"># 隐藏层线性输出</span></span><br><span class="line">        <span class="variable language_">self</span>.predict = torch.nn.Linear(n_hidden, n_output)   <span class="comment"># 输出层线性输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):   <span class="comment"># 这同时也是 Module 中的 forward 功能</span></span><br><span class="line">        <span class="comment"># 正向传播输入值, 神经网络分析出输出值</span></span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.hidden(x))      <span class="comment"># 激励函数(隐藏层的线性值)</span></span><br><span class="line">        x = <span class="variable language_">self</span>.predict(x)             <span class="comment"># 输出值</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net = Net(n_feature=<span class="number">1</span>, n_hidden=<span class="number">10</span>, n_output=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>注：</p><p>init是固定格式，不可修改，可以传参</p><p>forward是前向传播，函数名不可修改</p><p>输入是一个x，输出是一个预测值y，所以输入输出维度都是1</p><p>relu是激活函数，用于把多个线性单元转为非线性映射</p><h2 id="定义优化器和损失函数"><a href="#定义优化器和损失函数" class="headerlink" title="定义优化器和损失函数"></a>定义优化器和损失函数</h2><p>optimizer&#x3D;torch.optim.SGD(net.parameters(),lr&#x3D;0.5)<br>loss_func&#x3D;torch.nn.MSELoss()#均方差，用在回归问题</p><p>注:</p><p>SGD是一种优化算法</p><p>net.parameters()是网络的所有参数，固定写法</p><p>lr是learning rate学习率</p><p>MSELOSS是均方差mean square error loss,适合用于计算回归问题的误差</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    prediction = net(x)     <span class="comment"># 喂给 net 训练数据 x, 输出预测值</span></span><br><span class="line">    loss = loss_func(prediction, y)     <span class="comment"># 计算两者的误差</span></span><br><span class="line"></span><br><span class="line">    optimizer.zero_grad()   <span class="comment"># 清空上一步的残余更新参数值</span></span><br><span class="line">    loss.backward()         <span class="comment"># 误差反向传播, 计算参数更新值</span></span><br><span class="line">    optimizer.step()        <span class="comment"># 将参数更新值施加到 net 的 parameters 上</span></span><br></pre></td></tr></table></figure><p>固定写法</p><h2 id="反馈-可视化"><a href="#反馈-可视化" class="headerlink" title="反馈&#x2F;可视化"></a>反馈&#x2F;可视化</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">plt.ion()<span class="comment">#实时打印</span></span><br><span class="line">plt.show()<span class="comment">#显示画布</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    prediction=net(x)</span><br><span class="line">    loss=loss_func(prediction,y)</span><br><span class="line"></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> t%<span class="number">5</span>==<span class="number">0</span>:</span><br><span class="line">        plt.cla()</span><br><span class="line">        plt.scatter(x.data.numpy(),y.data.numpy())</span><br><span class="line">        plt.plot(x.data.numpy(),prediction.data.numpy(),<span class="string">&#x27;r-&#x27;</span>,lw=<span class="number">5</span>)</span><br><span class="line">        plt.text(<span class="number">0.5</span>,<span class="number">0</span>,<span class="string">&quot;Loss=%.4f&quot;</span>% loss.data,fontdict=&#123;<span class="string">&#x27;size&#x27;</span>:<span class="number">20</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;red&#x27;</span>&#125;)</span><br><span class="line">        plt.pause(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">plt.ioff()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>每隔5次训练就画一下预测曲线，实时打印在画布</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F   <span class="comment">#激励函数都在这里</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):  <span class="comment"># 继承 torch 的 Module</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n_feature, n_hidden, n_output</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()     <span class="comment"># 继承 __init__ 功能</span></span><br><span class="line">        <span class="comment"># 定义每层用什么样的形式</span></span><br><span class="line">        <span class="variable language_">self</span>.hidden = torch.nn.Linear(n_feature, n_hidden)   <span class="comment"># 隐藏层线性输出</span></span><br><span class="line">        <span class="variable language_">self</span>.predict = torch.nn.Linear(n_hidden, n_output)   <span class="comment"># 输出层线性输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):   <span class="comment"># 这同时也是 Module 中的 forward 功能</span></span><br><span class="line">        <span class="comment"># 正向传播输入值, 神经网络分析出输出值</span></span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.hidden(x))      <span class="comment"># 激励函数(隐藏层的线性值)</span></span><br><span class="line">        x = <span class="variable language_">self</span>.predict(x)             <span class="comment"># 输出值</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net = Net(n_feature=<span class="number">1</span>, n_hidden=<span class="number">10</span>, n_output=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">x=torch.unsqueeze(torch.linspace(-<span class="number">1</span>,<span class="number">1</span>,<span class="number">100</span>),dim=<span class="number">1</span>)</span><br><span class="line">y=x.<span class="built_in">pow</span>(<span class="number">2</span>)+<span class="number">0.2</span>*torch.rand(x.size())</span><br><span class="line"></span><br><span class="line">optimizer=torch.optim.SGD(net.parameters(),lr=<span class="number">0.5</span>)</span><br><span class="line">loss_func=torch.nn.MSELoss()<span class="comment">#均方差，用在回归问题</span></span><br><span class="line"></span><br><span class="line">plt.ion()<span class="comment">#实时打印</span></span><br><span class="line">plt.show()<span class="comment">#显示画布</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>):</span><br><span class="line">    prediction=net(x)</span><br><span class="line">    loss=loss_func(prediction,y)</span><br><span class="line"></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> t%<span class="number">5</span>==<span class="number">0</span>:</span><br><span class="line">        plt.cla()</span><br><span class="line">        plt.scatter(x.data.numpy(),y.data.numpy())</span><br><span class="line">        plt.plot(x.data.numpy(),prediction.data.numpy(),<span class="string">&#x27;r-&#x27;</span>,lw=<span class="number">5</span>)</span><br><span class="line">        plt.text(<span class="number">0.5</span>,<span class="number">0</span>,<span class="string">&quot;Loss=%.4f&quot;</span>% loss.data,fontdict=&#123;<span class="string">&#x27;size&#x27;</span>:<span class="number">20</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;red&#x27;</span>&#125;)</span><br><span class="line">        plt.pause(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">plt.ioff()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yolox训练不同数据集注意事项</title>
    <link href="/2022/03/31/yolox%E8%AE%AD%E7%BB%83%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E9%9B%86%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2022/03/31/yolox%E8%AE%AD%E7%BB%83%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E9%9B%86%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>先后训练两个数据集，都是VOC格式，仅有图片和标签不同，那么怎么对他们进行训练？</p><p>答：直觉就是，配置好一次环境，先训练第一个数据集，然后训练第二个数据集的时候，把数据集文件夹内容替换，其余一律不变。</p><p>但这样有一个<strong>致命错误</strong>：AP始终很小，可能是0.00000XXX。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>因为两个数据集的标注工作是分别在labelme和labelimg上完成的，还是有一些细微区别，所以首先怀疑数据集本身的问题，于是我做了个迷你版的数据集，只有10张图片，严格按照VOC2007格式要求来做，然后训练。</p><p>然后我就发现了问题，出现一个报错，没有截图，大概意思是找不到名为‘00022’的图片。</p><p>但是我这次只做了10张图片的数据集，编号1-10，根本没有名为22的图片，这说明，虽然我在用新的数据集，但程序用的还是上一个数据集的某些东西。应该是类似‘缓存’的东西没有清理。</p><p>然后我就在各个配置群文件中找，在YOLOX&#x2F;yolox&#x2F;evaluators&#x2F;voc_eval.py中找到这样一段代码：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-20.png"></p><p>显然这是一段关于缓存文件夹的东西，’annots.pkl’貌似代表着由标签文件生成的某种东西。</p><p>**大师，我悟了！**只要找到这个缓存文件夹，把它删掉即可！<strong>验证正确！</strong></p><p>怪不得删缓存之前AP极小但不为0，不为0说明训练的配置是有效的，AP极小就是因为用于比较IOU的标签是原来是原来数据集上的，根本就没法对应新的数据集图片。</p><p>再仔细一看缓存文件夹下还有子文件夹，命名为test，猜测是train.py里某个自定义的属性值，但奇怪的是没找到哪里设置了test，可能这是默认的名字，懒得深究了</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-21.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>切换数据集训练前，删除数据及文件夹同目录下的annotations_cache文件夹！</p><p>然后python setup.py install一下，这可能是根据配置文件重建一下yolox的什么什么。。？瞎搞一下吧</p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>验证码汉字图二值化处理</title>
    <link href="/2022/03/09/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B1%89%E5%AD%97%E5%9B%BE%E4%BA%8C%E5%80%BC%E5%8C%96%E5%A4%84%E7%90%86/"/>
    <url>/2022/03/09/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B1%89%E5%AD%97%E5%9B%BE%E4%BA%8C%E5%80%BC%E5%8C%96%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>把下图中汉字图片标准化处理，与背景分离，白字黑底</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/%E5%8E%9F%E5%9B%BE-1024x768.jpg"></p><h2 id="转为灰度图"><a href="#转为灰度图" class="headerlink" title="转为灰度图"></a>转为灰度图</h2><p>emmm,勉强还是看得清的</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/%E7%81%B0%E5%BA%A6%E5%9B%BE-1024x768.jpg"></p><p>灰度图直方图如下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/%E7%81%B0%E5%BA%A6%E5%9B%BE_%E7%9B%B4%E6%96%B9%E5%9B%BE-1024x768.jpg"></p><h2 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h2><p>均衡化后的直方图</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/%E5%9D%87%E8%A1%A1%E5%8C%96_%E7%9B%B4%E6%96%B9%E5%9B%BE-1024x768.jpg"></p><p>对应灰度图</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/%E5%9D%87%E8%A1%A1%E5%8C%96_%E7%81%B0%E5%BA%A6%E5%9B%BE-1024x768.jpg"></p><h2 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/%E5%9D%87%E8%A1%A1%E5%8C%96%E4%BA%8C%E5%80%BC%E5%8C%96_%E7%81%B0%E5%BA%A6%E5%9B%BE-1024x768.jpg"></p><p>二值化之后遇到一个问题，白字or黑字？需要统一一下</p><p>黑字白底的情况下，需要进行反色处理</p><p><strong>判别条件：边界像素中，白色像素比黑色像素少</strong></p><p>根据条件反色后的灰度图如下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/%E5%9D%87%E8%A1%A1%E5%8C%96%E4%BA%8C%E5%80%BC%E5%8C%96%E7%99%BD%E5%AD%97_%E7%81%B0%E5%BA%A6%E5%9B%BE-1024x768.jpg"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert</span>(<span class="params">img</span>):</span><br><span class="line">    y,x=img.shape</span><br><span class="line">    left=[[[]</span><br><span class="line">    right=[[[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        left.append(img[[i,<span class="number">0</span>[])</span><br><span class="line">        right.append(img[[i,x-<span class="number">1</span>[])</span><br><span class="line">    blackPoints=<span class="built_in">list</span>(img[[<span class="number">0</span>[]).count(<span class="number">0</span>)+<span class="built_in">list</span>(img[[y-<span class="number">1</span>[]).count(<span class="number">0</span>)+left.count(<span class="number">0</span>)+right.count(<span class="number">0</span>)</span><br><span class="line">    blackRate=<span class="built_in">float</span>(blackPoints/(x[*<span class="number">2</span>+y[*<span class="number">2</span>-<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">if</span> blackRate&lt;<span class="number">0.5</span>:<span class="comment">#边界黑像素比例</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(y):<span class="comment">#反色</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">                img[[i,j[] = <span class="number">255</span> - img[[i,j[]</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line">path=<span class="string">&#x27;D:[[[[Desktop[[[[2022[_03[_08[_15[_04[_37[[[[&#x27;</span></span><br><span class="line">files=os.listdir(path)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    img=cv2.imdecode(np.fromfile(path+files[[i[], dtype=np.uint8),-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># B,G,R = cv2.split(img) #get single 8-bits channel</span></span><br><span class="line">    <span class="comment"># EB=cv2.equalizeHist(B)</span></span><br><span class="line">    <span class="comment"># EG=cv2.equalizeHist(G)</span></span><br><span class="line">    <span class="comment"># ER=cv2.equalizeHist(R)</span></span><br><span class="line">    <span class="comment"># img=cv2.merge([[EB,EG,ER[])  #merge it back</span></span><br><span class="line"></span><br><span class="line">    img=cv2.cvtColor(img,cv2.COLOR[_BGR2GRAY)<span class="comment">#灰度图</span></span><br><span class="line">    <span class="comment">#img=cv2.GaussianBlur(img,(3,3),0,)#高斯平滑</span></span><br><span class="line">    img=cv2.equalizeHist(img)<span class="comment">#直方图均衡化</span></span><br><span class="line">    r,img=cv2.threshold(img,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH[_BINARY)<span class="comment">#二值化</span></span><br><span class="line">    img=invert(img)<span class="comment">#如果字体是黑的，反色处理</span></span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">8</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.imshow(img,cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.savefig(<span class="string">&#x27;均衡化+二值化+白字[_灰度图.jpg&#x27;</span>,dpi=<span class="number">800</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.基本达到要求，但部分图片肉眼可见无法识别</p><p>2.在彩色图像上比较好区分，但第一步就转为了灰度图，丢失了很多信息，这里应该还有很大的提升空间</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>图像处理</tag>
      
      <tag>验证码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>opencv中文路径、图片名的读写</title>
    <link href="/2022/03/08/opencv%E4%B8%AD%E6%96%87%E8%B7%AF%E5%BE%84%E3%80%81%E5%9B%BE%E7%89%87%E5%90%8D%E7%9A%84%E8%AF%BB%E5%86%99/"/>
    <url>/2022/03/08/opencv%E4%B8%AD%E6%96%87%E8%B7%AF%E5%BE%84%E3%80%81%E5%9B%BE%E7%89%87%E5%90%8D%E7%9A%84%E8%AF%BB%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h2 id="读"><a href="#读" class="headerlink" title="读"></a>读</h2><p>一般写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;中文目录/中文名称.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>报错</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-17.png"></p><p>改进写法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv2.imdecode(np.fromfile(<span class="string">&#x27;中文目录/中文名称.jpg&#x27;</span>, dtype=np.uint8), -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="写"><a href="#写" class="headerlink" title="写"></a>写</h2><p>一般写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.imwrite(<span class="string">&#x27;中文目录/中文名称.jpg&#x27;</span>,img)</span><br></pre></td></tr></table></figure><p>不报错，但没用</p><p>改进写法，需要额外再写一遍后缀名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>,img)[<span class="number">1</span>].tofile(<span class="string">&#x27;中文目录/中文名称.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu20.04关闭自动休眠</title>
    <link href="/2022/03/04/ubuntu20-04%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E4%BC%91%E7%9C%A0/"/>
    <url>/2022/03/04/ubuntu20-04%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E4%BC%91%E7%9C%A0/</url>
    
    <content type="html"><![CDATA[<pre><code>sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-16-1024x274.png"></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yolox训练voc数据集</title>
    <link href="/2022/03/01/yolox%E8%AE%AD%E7%BB%83voc%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2022/03/01/yolox%E8%AE%AD%E7%BB%83voc%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="制作数据集"><a href="#制作数据集" class="headerlink" title="制作数据集"></a>制作数据集</h2><p>请参考上一篇使用labelme打标签并制作voc数据集</p><p><a href="https://xinhaojin.github.io/2022/02/26/labelme%e6%a0%87%e6%b3%a8%e5%9b%be%e7%89%87%e5%b9%b6%e5%88%b6%e4%bd%9cvoc%e6%95%b0%e6%8d%ae%e9%9b%86/">labelme标注图片并制作voc数据集</a></p><p>上文中最后得到了几个文件夹</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image.png"></p><p>但这不能直接用，还需要划分训练集和测试集，可以手动划分，或者写段代码随机划分，最后数据集目录结构如下</p><p>VOC2007<br>—-Annotations<br>—-JPEGImages<br>—-ImageSets<br>——–Main<br>————test.txt<br>————trainval.txt</p><p>Annotations是VOC格式的标注文件</p><p>JPEGImages是图片文件夹</p><p>ImageSets&#x2F;Main中包含了训练集和测试集的图片名列表，不包含后缀名</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-1.png"></p><p>在VOC2007同级目录执行下面这段代码即可自动划分</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">train_rate=<span class="number">0.75</span><span class="comment">#训练集比例</span></span><br><span class="line">xmls=os.listdir(<span class="string">&#x27;./VOC2007/Annotations&#x27;</span>)</span><br><span class="line">nums=<span class="built_in">len</span>(xmls)</span><br><span class="line">train_nums=<span class="built_in">int</span>(train_rate*nums)</span><br><span class="line">train_index=random.sample(<span class="built_in">range</span>(nums),train_nums)</span><br><span class="line"><span class="built_in">print</span>(train_index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./VOC2007/ImageSets&#x27;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;./VOC2007/ImageSets&#x27;</span>)</span><br><span class="line">    os.mkdir(<span class="string">&#x27;./VOC2007/ImageSets/Main&#x27;</span>)</span><br><span class="line">trainval=<span class="built_in">open</span>(<span class="string">&#x27;./VOC2007/ImageSets/Main/trainval.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">test=<span class="built_in">open</span>(<span class="string">&#x27;./VOC2007/ImageSets/Main/test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums):</span><br><span class="line">    name=xmls[i].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> train_index:</span><br><span class="line">        trainval.write(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        test.write(name)</span><br><span class="line"></span><br><span class="line">trainval.close()</span><br><span class="line">test.close()</span><br></pre></td></tr></table></figure><h2 id="安装YOLOX"><a href="#安装YOLOX" class="headerlink" title="安装YOLOX"></a>安装YOLOX</h2><p>从github下载即可</p><p><a href="https://github.com/Megvii-BaseDetection/YOLOX">Megvii-BaseDetection&#x2F;YOLOX: YOLOX is a high-performance anchor-free YOLO, exceeding yolov3~v5 with MegEngine, ONNX, TensorRT, ncnn, and OpenVINO supported. Documentation: https://yolox.readthedocs.io/ (github.com)</a></p><p>建议新建一个conda环境来安装</p><p>参考之前写过的文章</p><p><a href="https://xinhaojin.github.io/2021/08/05/win10%e4%b8%8b%e5%ae%89%e8%a3%85%e9%85%8d%e7%bd%aeyolox/">win10下安装配置yolox</a></p><p>因为和现在的版本稍有不同，以github项目官方安装指引为准</p><p>总结来讲就是在项目根目录成功执行下面两行命令</p><p>pip install -r requirement.txt<br>python setup.py develop</p><p>如果安装GPU版本torch，再安装cudnn和cuda即可</p><h2 id="修改训练相关配置文件"><a href="#修改训练相关配置文件" class="headerlink" title="修改训练相关配置文件"></a>修改训练相关配置文件</h2><p>首先把数据集放到datasets目录下，严格按照以下目录结构，会更方便一些</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-2.png"></p><h3 id="修改exps-example-yolox-voc-yolox-voc-s-py"><a href="#修改exps-example-yolox-voc-yolox-voc-s-py" class="headerlink" title="修改exps&#x2F;example&#x2F;yolox_voc&#x2F;yolox_voc_s.py"></a>修改exps&#x2F;example&#x2F;yolox_voc&#x2F;yolox_voc_s.py</h3><p>num_classes改为标签数目，我这里只有一个标签类别</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-3.png"></p><p>去掉2012相关的内容</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-4.png"></p><h3 id="修改tools-train-py"><a href="#修改tools-train-py" class="headerlink" title="修改tools&#x2F;train.py"></a>修改tools&#x2F;train.py</h3><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-5.png"></p><p>-b 一次训练所抓取的数据样本数量，取决于内存大小，提示memory相关错误优先考虑这个问题，2,4,8,16…</p><p>-d GPU索引，只有一个GPU的话，写0或1是一样的</p><p>-f 试验描述文件路径，也就是上面修改的配置文件</p><p>-c 模型权重文件，使用预训练模型，从官网下载</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-6.png"></p><h3 id="修改yolox-data-datasets-voc-py"><a href="#修改yolox-data-datasets-voc-py" class="headerlink" title="修改yolox&#x2F;data&#x2F;datasets&#x2F;voc.py"></a>修改yolox&#x2F;data&#x2F;datasets&#x2F;voc.py</h3><p>注释difficult，意思是打标签时对应标签的识别难度，我的标签里没有这一项，不修改会报错，需要把difficult设置为False</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-7.png"></p><p>删去花括号里原有的:s，否则无法正确读取</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-8.png"></p><h3 id="修改yolox-data-datasets-voc-classes-pycoco-classes-py-记得改下coco类名，因为后面import类别的时候默认是coco"><a href="#修改yolox-data-datasets-voc-classes-pycoco-classes-py-记得改下coco类名，因为后面import类别的时候默认是coco" class="headerlink" title="修改yolox&#x2F;data&#x2F;datasets&#x2F;voc_classes.pycoco_classes.py(记得改下coco类名，因为后面import类别的时候默认是coco)"></a>修改yolox&#x2F;data&#x2F;datasets&#x2F;voc_classes.pycoco_classes.py(记得改下coco类名，因为后面import类别的时候默认是coco)</h3><p>注释原有类别，改为自己的，这里只有单类</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-9.png"></p><h3 id="修改yolox-evaluators-voc-eval-py"><a href="#修改yolox-evaluators-voc-eval-py" class="headerlink" title="修改yolox&#x2F;evaluators&#x2F;voc_eval.py"></a>修改yolox&#x2F;evaluators&#x2F;voc_eval.py</h3><p>因为没有truncated和difficult标签，所以这里也要修改为0</p><p>还有一处是类型转换，添加了float类型转换，否则报错</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-11.png"></p><p>x[“difficult”]改为0</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-12.png"></p><h3 id="修改yolox-exp-yolox-base-py"><a href="#修改yolox-exp-yolox-base-py" class="headerlink" title="修改yolox&#x2F;exp&#x2F;yolox_base.py"></a>修改yolox&#x2F;exp&#x2F;yolox_base.py</h3><p>修改训练轮次，默认300<br>self.max_epoch &#x3D; 150</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>python tools&#x2F;train.py</p><p>每10轮会有一次统计，只要下面两个数字不是0就好了，越接近1效果越好</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/image-15.png"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>训练完后的模型权重文件保存在YOLOX_outputs&#x2F;yolox_voc_s下，最好的权重是best_ckpt.pth</p><p>使用这个权重来验证一下</p><p>python tools&#x2F;demo.py image -f exps&#x2F;example&#x2F;yolox_voc&#x2F;yolox_voc_s.py -c YOLOX_outputs&#x2F;yolox_voc_s&#x2F;best_ckpt.pth –path datasets&#x2F;coco&#x2F;val2017&#x2F;00001.png –save_result –device gpu</p><p>然后在YOLOX_outputs&#x2F;yolox_voc_s&#x2F;vis_res下的时间文件夹里就能找到识别结果，如下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/03/00001.png"></p><h2 id="另"><a href="#另" class="headerlink" title="另"></a>另</h2><p>如果要训练多个数据集，建议看下注意事项：</p><p><a href="https://xinhaojin.github.io/2022/03/31/yolox%e8%ae%ad%e7%bb%83%e4%b8%8d%e5%90%8c%e6%95%b0%e6%8d%ae%e9%9b%86%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9/">yolox训练不同数据集注意事项</a></p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>labelme标注图片并制作voc数据集</title>
    <link href="/2022/02/26/labelme%E6%A0%87%E6%B3%A8%E5%9B%BE%E7%89%87%E5%B9%B6%E5%88%B6%E4%BD%9Cvoc%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2022/02/26/labelme%E6%A0%87%E6%B3%A8%E5%9B%BE%E7%89%87%E5%B9%B6%E5%88%B6%E4%BD%9Cvoc%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h3 id="安装labelme"><a href="#安装labelme" class="headerlink" title="安装labelme"></a>安装labelme</h3><p><a href="https://github.com/wkentaro/labelme">wkentaro&#x2F;labelme: Image Polygonal Annotation with Python (polygon, rectangle, circle, line, point and image-level flag annotation). (github.com)</a></p><pre><code>pip install labelme</code></pre><p>如果安装过，建议升级成新版本</p><pre><code>pip install -U labelme</code></pre><h3 id="使用labelme"><a href="#使用labelme" class="headerlink" title="使用labelme"></a>使用labelme</h3><p>打开命令行，输入labelme回车即可，不要关闭命令行</p><p>在图形界面中选择打开图片所在文件夹</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-11.png"></p><p>然后在file中修改3条设置</p><p>勾选自动保存（图标有蓝色阴影就是选上了）</p><p>修改输出文件夹，一般不要和图片放在同一个文件夹里，选择另一个文件夹</p><p><strong>纠正：不建议修改</strong></p><p>取消勾选保存图像数据，否则json很大，没有必要</p><p><strong>纠正：最好勾选保存图像数据</strong>，否则如果想转换其他数据集格式如coco好像不行</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-13.png"></p><p>然后ctrl+r快捷键标矩形框就行，点一下放开，再点一下，然后输入标签点击OK即可</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-12.png"></p><h3 id="转换为voc数据集"><a href="#转换为voc数据集" class="headerlink" title="转换为voc数据集"></a>转换为voc数据集</h3><p>下载labelme2voc.py</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-14.png"></p><p>新建labels.txt存放标签</p><p>__ignore__和_background_是必须的，其他标签为自定义，比如我只需要检测验证码图片中文字的位置，那么只有一个标签就是word</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-16.png"></p><p>此时有一个文件夹,比如images，里面包含了所有图片和所有标注后的json文件</p><p>把labelme2voc.py和labels.txt放到和images同级目录下，执行</p><p>python labelme2voc.py images voc –labels labels.txt</p><p>images是输入文件夹名，即标注后保存的json所在文件夹</p><p>voc是输出文件夹名，不能是已存在的文件夹</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-15.png"></p><p>然后就在当前目录下生成了一个voc文件夹，4个内容，分别是</p><p>xml格式的标注文件夹</p><p>带标注的图片文件夹</p><p>原图片文件夹</p><p>存有标签名的文本</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-19.png"></p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>点选验证码自动爬取(网易易盾）</title>
    <link href="/2022/02/26/%E7%82%B9%E9%80%89%E9%AA%8C%E8%AF%81%E7%A0%81%E8%87%AA%E5%8A%A8%E7%88%AC%E5%8F%96/"/>
    <url>/2022/02/26/%E7%82%B9%E9%80%89%E9%AA%8C%E8%AF%81%E7%A0%81%E8%87%AA%E5%8A%A8%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>汉字点选验证码的批量获取，图片命名为序号加文字，后面用于制作数据集</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-6.png"></p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-7.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>注释很清楚，不再赘述，可参考站内写过的其他selenium内容</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -_*- coding: utf-8 -_*-</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downloadPic</span>(<span class="params">url,filename</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#下载图片，并保存到文件夹中</span></span><br><span class="line">        urllib.request.urlretrieve(url=url,filename=filename)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;IOError&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Exception&quot;</span>)</span><br><span class="line"><span class="comment">#序号前加0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transfer</span>(<span class="params">num</span>):</span><br><span class="line">    temp=num</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        temp=<span class="built_in">int</span>(temp/<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> temp&gt;<span class="number">0</span>:</span><br><span class="line">            count=count+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span>_*(<span class="number">4</span>-count)+<span class="built_in">str</span>(num)</span><br><span class="line"><span class="keyword">if</span> ____name____ == <span class="string">&#x27;____main____&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        options=webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment">#后台静默运行</span></span><br><span class="line">        options.add__argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">        <span class="comment">#忽略无用的报错</span></span><br><span class="line">        options.add__experimental__option(<span class="string">&#x27;excludeSwitches&#x27;</span>,_[<span class="string">&#x27;enable-automation&#x27;</span>,<span class="string">&#x27;enable-logging&#x27;</span>_])</span><br><span class="line">        driver=webdriver.Chrome(chrome__options=options,executable__path=<span class="string">&#x27;./chromedriver.exe&#x27;</span>)</span><br><span class="line">        <span class="comment">#http://npm.taobao.org/mirrors/chromedriver/</span></span><br><span class="line">        driver.maximize__window()</span><br><span class="line">        driver.get(<span class="string">&#x27;https://dun.163.com/trial/picture-click&#x27;</span>)</span><br><span class="line">        driver.implicitly__wait(<span class="number">10</span>)<span class="comment">#最多等待时间</span></span><br><span class="line">        driver.find__element__by__css__selector(<span class="string">&#x27;_[captcha-mode=embed_]&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./datasets&#x27;</span>):</span><br><span class="line">            os.mkdir(<span class="string">&#x27;./datasets&#x27;</span>)</span><br><span class="line">        files=os.listdir(<span class="string">&#x27;./datasets&#x27;</span>)<span class="comment">#获取文件数目</span></span><br><span class="line">        num=<span class="built_in">len</span>(files)+<span class="number">1</span><span class="comment">#起始序号</span></span><br><span class="line">        index=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> index&lt;<span class="number">100</span>:<span class="comment">#需要获取的验证码数量</span></span><br><span class="line">            time.sleep(<span class="number">0.2</span>)</span><br><span class="line">            img__src=driver.find__element__by__css__selector(<span class="string">&#x27;.yidun__bg-img&#x27;</span>).get__attribute(<span class="string">&#x27;src&#x27;</span>)<span class="comment">#图片url</span></span><br><span class="line">            img__text=driver.find__element__by__css__selector(<span class="string">&#x27;.yidun__tips____point&#x27;</span>).text<span class="comment">#正确文本</span></span><br><span class="line">            <span class="keyword">if</span> img__text==<span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> img__text==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">                img__src=<span class="string">&#x27;&#x27;</span></span><br><span class="line">                img__text=<span class="string">&#x27;&#x27;</span></span><br><span class="line">                driver.find__element__by__css__selector(<span class="string">&#x27;.yidun__refresh&#x27;</span>).click()<span class="comment">#刷新按钮</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            img__text=img__text.replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#去掉引号和空格</span></span><br><span class="line">            img__text=img__text.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            filename=transfer(num+index)+<span class="string">&#x27;__&#x27;</span>+img__text+<span class="string">&#x27;.png&#x27;</span></span><br><span class="line">            downloadPic(img__src,<span class="string">&#x27;./datasets/&#x27;</span>+filename)</span><br><span class="line">            time.sleep(<span class="number">0.2</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;序号：&#x27;</span>+<span class="built_in">str</span>(index))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;文件名：&#x27;</span>+filename)</span><br><span class="line">            index+=<span class="number">1</span></span><br><span class="line">            driver.find__element__by__css__selector(<span class="string">&#x27;.yidun__refresh&#x27;</span>).click()<span class="comment">#刷新按钮</span></span><br><span class="line">        driver.quit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        driver.quit()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>点选验证码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git配置</title>
    <link href="/2022/02/25/linux%E9%85%8D%E7%BD%AEgit/"/>
    <url>/2022/02/25/linux%E9%85%8D%E7%BD%AEgit/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>找到用户目录下的.ssh文件夹下的id_rsa.pub，复制内容到github设置中添加sshkey<br><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-5-1024x442.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>列出局域网内可Ping通的IP</title>
    <link href="/2022/02/25/%E5%88%97%E5%87%BA%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E5%8F%AFping%E9%80%9A%E7%9A%84ip/"/>
    <url>/2022/02/25/%E5%88%97%E5%87%BA%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E5%8F%AFping%E9%80%9A%E7%9A%84ip/</url>
    
    <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">live_ip = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_os</span>():</span><br><span class="line">    os = platform.system()</span><br><span class="line">    <span class="keyword">if</span> os == <span class="string">&quot;Windows&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;n&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;c&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ping_ip</span>(<span class="params">ip_str</span>):</span><br><span class="line">    cmd = [<span class="string">&quot;ping&quot;</span>, <span class="string">&quot;-&#123;op&#125;&quot;</span>.<span class="built_in">format</span>(op=get_os()),</span><br><span class="line">           <span class="string">&quot;1&quot;</span>, ip_str]</span><br><span class="line">    output = os.popen(<span class="string">&quot; &quot;</span>.join(cmd)).readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> output:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(line).upper().find(<span class="string">&quot;TTL&quot;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ip: %s 在线&quot;</span> % ip_str)</span><br><span class="line">            <span class="keyword">global</span> live_ip</span><br><span class="line">            live_ip += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_ip</span>(<span class="params">ip_prefix</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    给出当前的ip地址段 ，然后扫描整个段所有地址</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">        ip = <span class="string">&#x27;%s.%s&#x27;</span> % (ip_prefix, i)</span><br><span class="line">        threads.append(threading.Thread(target=ping_ip, args=&#123;ip, &#125;))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">        i.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">        i.join()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_local_ip</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取本机当前ip地址</span></span><br><span class="line"><span class="string">    :return: 返回本机ip地址</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    myname = socket.getfqdn(socket.gethostname())</span><br><span class="line">    myaddr = socket.gethostbyname(myname)</span><br><span class="line">    <span class="keyword">return</span> myaddr</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始扫描时间: %s&quot;</span> % time.ctime())</span><br><span class="line">    addr = find_local_ip()</span><br><span class="line">    args = <span class="string">&quot;&quot;</span>.join(addr)</span><br><span class="line">    ip_pre = <span class="string">&#x27;.&#x27;</span>.join(args.split(<span class="string">&#x27;.&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">    find_ip(ip_pre)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;扫描结束时间 %s&quot;</span> % time.ctime())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;本次扫描共检测到本网络存在%s台设备&#x27;</span> % live_ip)</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-4.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>局域网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>滑块验证码自动拖拽（selenium+opencv）</title>
    <link href="/2022/02/22/%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E8%87%AA%E5%8A%A8%E6%8B%96%E6%8B%BD%EF%BC%88seleniumopencv%EF%BC%89/"/>
    <url>/2022/02/22/%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E8%87%AA%E5%8A%A8%E6%8B%96%E6%8B%BD%EF%BC%88seleniumopencv%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="计算需要移动的像素"><a href="#计算需要移动的像素" class="headerlink" title="计算需要移动的像素"></a>计算需要移动的像素</h2><p>首先我在github上找到了一个大佬写的项目<a href="https://github.com/crazyxw/SlideCrack/tree/master/slide_01">SlideCrack&#x2F;slide_01 at master · crazyxw&#x2F;SlideCrack (github.com)</a></p><p>输入是本地的两张图：滑块验证码背景和滑块图片</p><p>输出是两个缺口的像素距离</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-1-1024x493.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SlideCrack</span>(<span class="title class_ inherited__">object</span>):<span class="comment"># https://github.com/crazyxw/SlideCrack/tree/master/slide_01</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, gap, bg, out</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        init code</span></span><br><span class="line"><span class="string">        :param gap: 缺口图片</span></span><br><span class="line"><span class="string">        :param bg: 背景图片</span></span><br><span class="line"><span class="string">        :param out: 输出图片</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.gap = gap</span><br><span class="line">        <span class="variable language_">self</span>.bg = bg</span><br><span class="line">        <span class="variable language_">self</span>.out = out</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear_white</span>(<span class="params">img</span>):</span><br><span class="line">        <span class="comment"># 清除图片的空白区域，这里主要清除滑块的空白</span></span><br><span class="line">        img = cv2.imread(img)</span><br><span class="line">        rows, cols, channel = img.shape</span><br><span class="line">        min_x = <span class="number">255</span></span><br><span class="line">        min_y = <span class="number">255</span></span><br><span class="line">        max_x = <span class="number">0</span></span><br><span class="line">        max_y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rows):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, cols):</span><br><span class="line">                t = <span class="built_in">set</span>(img[x, y])</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(t) &gt;= <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> x &lt;= min_x:</span><br><span class="line">                        min_x = x</span><br><span class="line">                    <span class="keyword">elif</span> x &gt;= max_x:</span><br><span class="line">                        max_x = x</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> y &lt;= min_y:</span><br><span class="line">                        min_y = y</span><br><span class="line">                    <span class="keyword">elif</span> y &gt;= max_y:</span><br><span class="line">                        max_y = y</span><br><span class="line">        img1 = img[min_x:max_x, min_y: max_y]</span><br><span class="line">        <span class="keyword">return</span> img1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">template_match</span>(<span class="params">self, tpl, target</span>):</span><br><span class="line">        th, tw = tpl.shape[:<span class="number">2</span>]</span><br><span class="line">        result = cv2.matchTemplate(target, tpl, cv2.TM_CCOEFF_NORMED)</span><br><span class="line">        <span class="comment"># 寻找矩阵(一维数组当作向量,用Mat定义) 中最小值和最大值的位置</span></span><br><span class="line">        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)</span><br><span class="line">        tl = max_loc</span><br><span class="line">        br = (tl[<span class="number">0</span>] + tw, tl[<span class="number">1</span>] + th)</span><br><span class="line">        <span class="comment"># 绘制矩形边框，将匹配区域标注出来</span></span><br><span class="line">        <span class="comment"># target：目标图像</span></span><br><span class="line">        <span class="comment"># tl：矩形定点</span></span><br><span class="line">        <span class="comment"># br：矩形的宽高</span></span><br><span class="line">        <span class="comment"># (0,0,255)：矩形边框颜色</span></span><br><span class="line">        <span class="comment"># 1：矩形边框大小</span></span><br><span class="line">        cv2.rectangle(target, tl, br, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">        cv2.imwrite(<span class="variable language_">self</span>.out, target)</span><br><span class="line">        <span class="keyword">return</span> tl[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">image_edge_detection</span>(<span class="params">img</span>):</span><br><span class="line">        edges = cv2.Canny(img, <span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">        <span class="keyword">return</span> edges</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">discern</span>(<span class="params">self</span>):</span><br><span class="line">        img1 = <span class="variable language_">self</span>.clear_white(<span class="variable language_">self</span>.gap)</span><br><span class="line">        img1 = cv2.cvtColor(img1, cv2.COLOR_RGB2GRAY)</span><br><span class="line">        slide = <span class="variable language_">self</span>.image_edge_detection(img1)</span><br><span class="line"></span><br><span class="line">        back = cv2.imread(<span class="variable language_">self</span>.bg, <span class="number">0</span>)</span><br><span class="line">        back = <span class="variable language_">self</span>.image_edge_detection(back)</span><br><span class="line"></span><br><span class="line">        slide_pic = cv2.cvtColor(slide, cv2.COLOR_GRAY2RGB)</span><br><span class="line">        back_pic = cv2.cvtColor(back, cv2.COLOR_GRAY2RGB)</span><br><span class="line">        x = <span class="variable language_">self</span>.template_match(slide_pic, back_pic)</span><br><span class="line">        <span class="comment"># 输出横坐标, 即 滑块在图片上的位置</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 滑块图片</span></span><br><span class="line">img1 = <span class="string">&quot;1.png&quot;</span></span><br><span class="line"><span class="comment"># 背景图片</span></span><br><span class="line">img2 = <span class="string">&quot;2.jpg&quot;</span></span><br><span class="line"><span class="comment"># 处理结果图片,用红线标注</span></span><br><span class="line">img3 = <span class="string">&quot;3.png&quot;</span></span><br><span class="line">sc = SlideCrack(img1, img2, img3)</span><br><span class="line">x=sc.discern()</span><br></pre></td></tr></table></figure><h2 id="浏览器自动控制"><a href="#浏览器自动控制" class="headerlink" title="浏览器自动控制"></a>浏览器自动控制</h2><p>针对这个网页，分为三步，打开网址，点击按钮，拖拽滑块</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-2-1024x634.png"></p><h3 id="操作网页元素"><a href="#操作网页元素" class="headerlink" title="操作网页元素"></a>操作网页元素</h3><p>可以用css选择器来获取网页元素对象</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_css_selector(<span class="string">&#x27;.yidun_slider&#x27;</span>)</span><br><span class="line">driver.find_element_by_css_selector(<span class="string">&#x27;[captcha-mode=embed]&#x27;</span>).click()</span><br><span class="line">driver.find_element_by_css_selector(<span class="string">&#x27;.yidun_jigsaw&#x27;</span>).get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用这个方法就可以得到图片的src属性，也就是url地址</p><p>下一步就是把图片下载下来</p><h3 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h3><p>使用urllib.request即可</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downloadPic</span>(<span class="params">url,filename</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#下载图片，并保存到文件夹中</span></span><br><span class="line">        urllib.request.urlretrieve(url=url,filename=filename)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;IOError&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Exception&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="模拟拖拽"><a href="#模拟拖拽" class="headerlink" title="模拟拖拽"></a>模拟拖拽</h3><p>使用ActionChains(driver).drag_and_drop_by_offset(source,xoffset,yoffset).perform()</p><p>三个参数分别是元素对象，横向偏移，纵向盘偏移，比如下面这段代码，意思就是找到类名为yidun_slider的元素，向右拖动50像素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tag=driver.find_element_by_css_selector(<span class="string">&#x27;.yidun_slider&#x27;</span>)</span><br><span class="line">ActionChains(driver).drag_and_drop_by_offset(tag,<span class="number">50</span>,<span class="number">0</span>).perform()</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2022/02/image-3.png"></p><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><p>然后就可以用别人写好的代码了，实际操作时发现计算出的距离偏小一点点，拖拽参数里手动加一点点就行</p><p>但是！</p><p>这个网站好像识别出来是selenium在控制浏览器，就算拖拽的位置非常准确，也不会通过</p><p>我以为是检测到拖拽太准太快了，然后我就手动拖拽，居然也不行</p><p>初步得出的结论是只要是用selenium打开的这个网页，打开后即使手动操作也不可能成功</p><p>其他网站可能没有这种限制，没有测试</p><p>关于selenium怎么不被网站检测到，值得研究。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downloadPic</span>(<span class="params">url,filename</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#下载图片，并保存到文件夹中</span></span><br><span class="line">        urllib.request.urlretrieve(url=url,filename=filename)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;IOError&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Exception&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SlideCrack</span>(<span class="title class_ inherited__">object</span>):<span class="comment"># https://github.com/crazyxw/SlideCrack/tree/master/slide_01</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, gap, bg, out</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        init code</span></span><br><span class="line"><span class="string">        :param gap: 缺口图片</span></span><br><span class="line"><span class="string">        :param bg: 背景图片</span></span><br><span class="line"><span class="string">        :param out: 输出图片</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.gap = gap</span><br><span class="line">        <span class="variable language_">self</span>.bg = bg</span><br><span class="line">        <span class="variable language_">self</span>.out = out</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear_white</span>(<span class="params">img</span>):</span><br><span class="line">        <span class="comment"># 清除图片的空白区域，这里主要清除滑块的空白</span></span><br><span class="line">        img = cv2.imread(img)</span><br><span class="line">        rows, cols, channel = img.shape</span><br><span class="line">        min_x = <span class="number">255</span></span><br><span class="line">        min_y = <span class="number">255</span></span><br><span class="line">        max_x = <span class="number">0</span></span><br><span class="line">        max_y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rows):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, cols):</span><br><span class="line">                t = <span class="built_in">set</span>(img[x, y])</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(t) &gt;= <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> x &lt;= min_x:</span><br><span class="line">                        min_x = x</span><br><span class="line">                    <span class="keyword">elif</span> x &gt;= max_x:</span><br><span class="line">                        max_x = x</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> y &lt;= min_y:</span><br><span class="line">                        min_y = y</span><br><span class="line">                    <span class="keyword">elif</span> y &gt;= max_y:</span><br><span class="line">                        max_y = y</span><br><span class="line">        img1 = img[min_x:max_x, min_y: max_y]</span><br><span class="line">        <span class="keyword">return</span> img1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">template_match</span>(<span class="params">self, tpl, target</span>):</span><br><span class="line">        th, tw = tpl.shape[:<span class="number">2</span>]</span><br><span class="line">        result = cv2.matchTemplate(target, tpl, cv2.TM_CCOEFF_NORMED)</span><br><span class="line">        <span class="comment"># 寻找矩阵(一维数组当作向量,用Mat定义) 中最小值和最大值的位置</span></span><br><span class="line">        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)</span><br><span class="line">        tl = max_loc</span><br><span class="line">        br = (tl[<span class="number">0</span>] + tw, tl[<span class="number">1</span>] + th)</span><br><span class="line">        <span class="comment"># 绘制矩形边框，将匹配区域标注出来</span></span><br><span class="line">        <span class="comment"># target：目标图像</span></span><br><span class="line">        <span class="comment"># tl：矩形定点</span></span><br><span class="line">        <span class="comment"># br：矩形的宽高</span></span><br><span class="line">        <span class="comment"># (0,0,255)：矩形边框颜色</span></span><br><span class="line">        <span class="comment"># 1：矩形边框大小</span></span><br><span class="line">        cv2.rectangle(target, tl, br, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">        cv2.imwrite(<span class="variable language_">self</span>.out, target)</span><br><span class="line">        <span class="keyword">return</span> tl[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">image_edge_detection</span>(<span class="params">img</span>):</span><br><span class="line">        edges = cv2.Canny(img, <span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">        <span class="keyword">return</span> edges</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">discern</span>(<span class="params">self</span>):</span><br><span class="line">        img1 = <span class="variable language_">self</span>.clear_white(<span class="variable language_">self</span>.gap)</span><br><span class="line">        img1 = cv2.cvtColor(img1, cv2.COLOR_RGB2GRAY)</span><br><span class="line">        slide = <span class="variable language_">self</span>.image_edge_detection(img1)</span><br><span class="line"></span><br><span class="line">        back = cv2.imread(<span class="variable language_">self</span>.bg, <span class="number">0</span>)</span><br><span class="line">        back = <span class="variable language_">self</span>.image_edge_detection(back)</span><br><span class="line"></span><br><span class="line">        slide_pic = cv2.cvtColor(slide, cv2.COLOR_GRAY2RGB)</span><br><span class="line">        back_pic = cv2.cvtColor(back, cv2.COLOR_GRAY2RGB)</span><br><span class="line">        x = <span class="variable language_">self</span>.template_match(slide_pic, back_pic)</span><br><span class="line">        <span class="comment"># 输出横坐标, 即 滑块在图片上的位置</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line">driver=webdriver.Chrome(executable_path=<span class="string">&#x27;chromedriver.exe&#x27;</span>)</span><br><span class="line"><span class="comment">#http://npm.taobao.org/mirrors/chromedriver/</span></span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.get(<span class="string">&#x27;https://dun.163.com/trial/jigsaw&#x27;</span>)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)<span class="comment">#最多等待时间</span></span><br><span class="line">driver.find_element_by_css_selector(<span class="string">&#x27;[captcha-mode=embed]&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">tag=driver.find_element_by_css_selector(<span class="string">&#x27;.yidun_slider&#x27;</span>)</span><br><span class="line">driver.find_element_by_css_selector(<span class="string">&#x27;[captcha-mode=embed]&#x27;</span>).click()</span><br><span class="line">img1_src=driver.find_element_by_css_selector(<span class="string">&#x27;.yidun_jigsaw&#x27;</span>).get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">img2_src=driver.find_element_by_css_selector(<span class="string">&#x27;.yidun_bg-img&#x27;</span>).get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(img1_src)</span><br><span class="line"><span class="built_in">print</span>(img2_src)</span><br><span class="line">downloadPic(img1_src,<span class="string">&#x27;1.png&#x27;</span>)</span><br><span class="line">downloadPic(img2_src,<span class="string">&#x27;2.jpg&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 滑块图片</span></span><br><span class="line">img1 = <span class="string">&quot;1.png&quot;</span></span><br><span class="line"><span class="comment"># 背景图片</span></span><br><span class="line">img2 = <span class="string">&quot;2.jpg&quot;</span></span><br><span class="line"><span class="comment"># 处理结果图片,用红线标注</span></span><br><span class="line">img3 = <span class="string">&quot;3.png&quot;</span></span><br><span class="line">sc = SlideCrack(img1, img2, img3)</span><br><span class="line">x=sc.discern()</span><br><span class="line">ActionChains(driver).drag_and_drop_by_offset(tag,x,<span class="number">0</span>).perform()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>验证码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu终端source: not found</title>
    <link href="/2022/01/07/ubuntu%E7%BB%88%E7%AB%AFsource-not-found/"/>
    <url>/2022/01/07/ubuntu%E7%BB%88%E7%AB%AFsource-not-found/</url>
    
    <content type="html"><![CDATA[<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>shell脚本中含有source命令运行时提示 source: not found</p><p>运行 ls -l &#x2F;bin&#x2F;sh 后显示&#x2F;bin&#x2F;sh -&gt; dash<br>这说明是用dash来进行解析的。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>命令行执行：（需要root权限）</p><pre><code>dpkg-reconfigure dash</code></pre><p>在界面中选择no<br>再运行ls -l &#x2F;bin&#x2F;sh 后显示&#x2F;bin&#x2F;sh -&gt; bash</p><p>原文链接：<a href="https://blog.csdn.net/buynow123/article/details/51774018">https://blog.csdn.net/buynow123/article/details/51774018</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs cheerio爬虫</title>
    <link href="/2021/12/14/nodejs-cheerio%E7%88%AC%E8%99%AB/"/>
    <url>/2021/12/14/nodejs-cheerio%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>获取美国各州疫情数据<a href="https://www.guruin.com/guides/covid19">美国疫情（每小时更新） 各州新增新冠确诊案例、疫苗接种率、实时新闻、疫情地图 - 咕噜美国通 (Guruin.com)</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/12/image-3.png"></p><p>本来用的数据来源不是这个网站，但原先的数据源不让跨域爬虫，http和request都没法获取HTML源码，只好换了一个数据源</p><h2 id="request获取目标网页源代码"><a href="#request获取目标网页源代码" class="headerlink" title="request获取目标网页源代码"></a>request获取目标网页源代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://www.guruin.com/guides/covid19&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,                   <span class="comment">// 请求方法</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;                       <span class="comment">// 指定请求头</span></span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>:</span><br><span class="line">                <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!error &amp;&amp; response.<span class="property">statusCode</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(body) // body即为HTML内容</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="转换为cheerio对象，利用jquery选择器规则选取需要的元素"><a href="#转换为cheerio对象，利用jquery选择器规则选取需要的元素" class="headerlink" title="转换为cheerio对象，利用jquery选择器规则选取需要的元素"></a>转换为cheerio对象，利用jquery选择器规则选取需要的元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(body);<span class="comment">// body为html内容</span></span><br><span class="line"></span><br><span class="line">[jQuery 选择器 菜鸟教程 (runoob.<span class="property">com</span>)](<span class="attr">https</span>:<span class="comment">//www.runoob.com/jquery/jquery-ref-selectors.html)</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;选择器&#x27;</span>)即为筛选的元素，要获取其文本，用.<span class="title function_">text</span>()方法</span><br><span class="line"></span><br><span class="line">如$(<span class="string">&#x27;[data-total-positive]&#x27;</span>).<span class="title function_">text</span>()，得到具有 data-total-positive 属性的元素的文本</span><br><span class="line"></span><br><span class="line">要遍历所有符合的元素进行单独操作，使用 $(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i,elem</span>)&#123;$(<span class="variable language_">this</span>).<span class="title function_">text</span>()...&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//把有data-total-positive属性的元素遍历，其文本内容放到数组</span></span><br><span class="line"><span class="keyword">var</span> positive = []</span><br><span class="line">$(<span class="string">&#x27;[data-total-positive]&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">i, elem</span>) &#123;</span><br><span class="line">                positive[i] = $(<span class="variable language_">this</span>).<span class="title function_">text</span>();</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>针对需求分析，可以选择用以下三个属性来筛选，分别对应确诊、死亡和接种率，然后分别遍历放到三个数组中</p><p>……写到这刚发现忘记爬取州名了，问题不大。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/12/image-4.png"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="comment">//  Cheerio 是一个Node.js的库， 它可以从html的片断中构建DOM结构，然后提供像jquery一样的css选择器查询</span></span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"><span class="comment">//包装成模块函数</span></span><br><span class="line"><span class="keyword">export</span> &#123; getData &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://www.guruin.com/guides/covid19&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,                   <span class="comment">// 请求方法</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;                       <span class="comment">// 指定请求头</span></span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>:</span><br><span class="line">                <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error, response, body</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!error &amp;&amp; response.<span class="property">statusCode</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(body) // 输出网页内容</span></span><br><span class="line">            <span class="comment">// 接下来用cheerio来提取网页中的数据</span></span><br><span class="line">            <span class="comment">// 通过 load 方法把 HTML 代码转换成一个 jQuery 对象</span></span><br><span class="line">            <span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(body);<span class="comment">//table-row .collapsed</span></span><br><span class="line">            <span class="keyword">var</span> positive = []</span><br><span class="line">            <span class="keyword">var</span> death = []</span><br><span class="line">            <span class="keyword">var</span> detection_rate = []</span><br><span class="line">            $(<span class="string">&#x27;[data-total-positive]&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">i, elem</span>) &#123;</span><br><span class="line">                positive[i] = $(<span class="variable language_">this</span>).<span class="title function_">text</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&#x27;[data-total-death]&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">i, elem</span>) &#123;</span><br><span class="line">                death[i] = $(<span class="variable language_">this</span>).<span class="title function_">text</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&#x27;[data-detection-rate]&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">i, elem</span>) &#123;</span><br><span class="line">                detection_rate[i] = $(<span class="variable language_">this</span>).<span class="title function_">text</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(positive);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(death);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(detection_rate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/12/image-5-1024x241.png"></p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu普通用户安装配置anaconda</title>
    <link href="/2021/12/10/ubuntu%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEanaconda/"/>
    <url>/2021/12/10/ubuntu%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEanaconda/</url>
    
    <content type="html"><![CDATA[<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">anaconda清华源地址</a></p><p>方法一：在服务器上使用wget命令</p><pre><code>wget -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.11-Linux-x86_64.sh</code></pre><p>方法二：下载到本地之后通过ftp工具上传到服务器（推荐使用FinalShell）</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在下载目录执行下载的bash文件</p><pre><code>bash Anaconda3-2021.11-Linux-x86_64.sh</code></pre><p>根据提示一路yes即可</p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>安装完之后conda还不能直接使用，需要把conda目录加入到用户变量中</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/12/image.png"></p><pre><code>vi ~/.bashrc</code></pre><p>在最后一行加入</p><pre><code>export PATH=/home/username/anaconda3/bin:$PATH</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/12/image-1.png"></p><p>保存退出，再执行</p><pre><code>source ~/.bashrc</code></pre><p>成功</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/12/image-2.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>selenium+beautifulsoup4获取网页动态加载的数据</title>
    <link href="/2021/11/25/seleniumbeautifulsoup4%E8%8E%B7%E5%8F%96%E7%BD%91%E9%A1%B5%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
    <url>/2021/11/25/seleniumbeautifulsoup4%E8%8E%B7%E5%8F%96%E7%BD%91%E9%A1%B5%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>想要获取一个网页中的表格数据，但是不提供下载</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/image-5-1024x475.png"></p><p>网页源码中能看到表格信息，但beautiful获取源码结果中没有表格</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/image-6.png"></p><p>原因是表格数据从后台动态加载，beautifulsoup无法获取</p><h2 id="使用selenium获取源码"><a href="#使用selenium获取源码" class="headerlink" title="使用selenium获取源码"></a>使用selenium获取源码</h2><p>selenium是浏览器自动化工具，可以模拟人的操作，能够正常获取所有源码</p><p>为了程序运行更优雅，设置浏览器在后台静默运行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options=webdriver.ChromeOptions()</span><br><span class="line"><span class="comment">#后台静默运行</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line"><span class="comment">#忽略无用的报错</span></span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>,<span class="string">&#x27;enable-logging&#x27;</span>])</span><br><span class="line">driver=webdriver.Chrome(chrome_options=options,executable_path=<span class="string">&#x27;./driver/chromedriver.exe&#x27;</span>)</span><br><span class="line"><span class="comment">#把驱动文件放到根目录，或把路径当作参数传入，chrome驱动下载地址如下：</span></span><br><span class="line"><span class="comment">#http://npm.taobao.org/mirrors/chromedriver/</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">driver=webdriver.Edge(executable_path=&#x27;./driver/edgedriver.exe&#x27;)</span></span><br><span class="line"><span class="string">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#driver.set_window_size(1000,800)#打开浏览器的窗口尺寸</span></span><br><span class="line"><span class="comment">#driver.maximize_window()</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;https://www.heywhale.com/mw/dataset/5fe1c7d183e4460030ab6c08/file&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)<span class="comment">#最多等待时间</span></span><br><span class="line">html=driver.page_source<span class="comment">#html源码</span></span><br><span class="line">driver.quit()<span class="comment">#退出浏览器</span></span><br><span class="line"></span><br><span class="line">![](https://xinhaojin.github.io/imgs-host/past/<span class="number">2021</span>/<span class="number">11</span>/image-<span class="number">7.</span>png)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 转为beautifulsoup对象</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#print(soup.prettify())#prettify是格式化结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取表格数据</span></span><br><span class="line"></span><br><span class="line">results=[]<span class="comment">#表格结果保存到二维数组</span></span><br><span class="line">tags=soup.find_all(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> tags:<span class="comment">#tag表示一行数据</span></span><br><span class="line">    result=[]</span><br><span class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> tag.contents:<span class="comment">#content表示每一行的每一个数据</span></span><br><span class="line">        result.append(content.string)</span><br><span class="line">    results.append(result)</span><br><span class="line"><span class="comment">#print(results)</span></span><br><span class="line"></span><br><span class="line">![](https://xinhaojin.github.io/imgs-host/past/<span class="number">2021</span>/<span class="number">11</span>/image-<span class="number">8</span>-1024x336.png)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 写入Excel</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">wk=xlwt.Workbook()</span><br><span class="line">sheet = wk.add_sheet(<span class="string">&quot;数据&quot;</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(results)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(results[<span class="number">0</span>])):</span><br><span class="line">        sheet.write(i , j, results[i][j])</span><br><span class="line">wk.save(<span class="string">&quot;数据.xls&quot;</span>)</span><br><span class="line"></span><br><span class="line">![](https://xinhaojin.github.io/imgs-host/past/<span class="number">2021</span>/<span class="number">11</span>/image-<span class="number">9</span>-1024x263.png)</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options=webdriver.ChromeOptions()</span><br><span class="line"><span class="comment">#后台静默运行</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line"><span class="comment">#忽略无用的报错</span></span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>,<span class="string">&#x27;enable-logging&#x27;</span>])</span><br><span class="line">driver=webdriver.Chrome(chrome_options=options,executable_path=<span class="string">&#x27;./driver/chromedriver.exe&#x27;</span>)</span><br><span class="line"><span class="comment">#把驱动文件放到根目录，或把路径当作参数传入，chrome驱动下载地址如下：</span></span><br><span class="line"><span class="comment">#http://npm.taobao.org/mirrors/chromedriver/</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">driver=webdriver.Edge(executable_path=&#x27;./driver/edgedriver.exe&#x27;)</span></span><br><span class="line"><span class="string">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#driver.set_window_size(1000,800)#打开浏览器的窗口尺寸</span></span><br><span class="line"><span class="comment">#driver.maximize_window()</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;https://www.heywhale.com/mw/dataset/5fe1c7d183e4460030ab6c08/file&#x27;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)<span class="comment">#最多等待时间</span></span><br><span class="line">html=driver.page_source</span><br><span class="line">driver.quit()</span><br><span class="line">soup = BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment">#print(soup.prettify())#prettify是格式化结果</span></span><br><span class="line"></span><br><span class="line">results=[]<span class="comment">#表格结果保存到二维数组</span></span><br><span class="line">tags=soup.find_all(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> tags:<span class="comment">#tag表示一行数据</span></span><br><span class="line">    result=[]</span><br><span class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> tag.contents:<span class="comment">#content表示每一行的每一个数据</span></span><br><span class="line">        result.append(content.string)</span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(results)==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error!&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line">  </span><br><span class="line"><span class="comment">#写入excel</span></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">wk=xlwt.Workbook()</span><br><span class="line">sheet = wk.add_sheet(<span class="string">&quot;数据&quot;</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(results)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(results[<span class="number">0</span>])):</span><br><span class="line">        sheet.write(i , j, results[i][j])</span><br><span class="line">wk.save(<span class="string">&quot;数据.xls&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Success!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>因为这次需求中的表格没有完整显示在网页中，所以只获取了一部分数据，没有满足需求，但对于数据完全显示在网页上的需求，有参考价值，特此记录</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/image-11.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wordcloud词云</title>
    <link href="/2021/11/10/wordcloud%E8%AF%8D%E4%BA%91/"/>
    <url>/2021/11/10/wordcloud%E8%AF%8D%E4%BA%91/</url>
    
    <content type="html"><![CDATA[<h4 id="加载停用词"><a href="#加载停用词" class="headerlink" title="加载停用词"></a>加载停用词</h4><p>stopwords.txt是一个自定义的停用词列表，里面的词都会被过滤</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;读取停用词&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;stopwords.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    stopwords = <span class="built_in">set</span>([s.rstrip() <span class="keyword">for</span> s <span class="keyword">in</span> fp.readlines()])</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/image.png"></p><h4 id="读取文本内容，过滤停用词"><a href="#读取文本内容，过滤停用词" class="headerlink" title="读取文本内容，过滤停用词"></a>读取文本内容，过滤停用词</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;获取文本内容&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    content = fp.read()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;中文分词&quot;&quot;&quot;</span></span><br><span class="line">content = jieba.lcut(content)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;去除停用词&quot;&quot;&quot;</span></span><br><span class="line">text = []</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> content:</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopwords:</span><br><span class="line">        text.append(word)</span><br></pre></td></tr></table></figure><h4 id="计算词频"><a href="#计算词频" class="headerlink" title="计算词频"></a>计算词频</h4><p>词频格式是字典{词：数量}，text是一个去掉停用词后的词数组，直接统计</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frequency = <span class="built_in">dict</span>(Counter(text))  <span class="comment"># 去掉停用词后的词频统计</span></span><br></pre></td></tr></table></figure><p>计算词频的目的是根据词频来生成词云</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wordcloud.fit_words(frequency)</span><br></pre></td></tr></table></figure><h4 id="wordcloud（）参数"><a href="#wordcloud（）参数" class="headerlink" title="wordcloud（）参数"></a>wordcloud（）参数</h4><p>具体API请查阅<a href="https://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html">wordcloud.WordCloud — wordcloud 1.8.1 documentation (amueller.github.io)</a></p><p>常用的有这些</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wc = WordCloud(font_path=<span class="string">&#x27;C:\\Windows\\Fonts\\STZHONGS.TTF&#x27;</span>,  <span class="comment"># 字体</span></span><br><span class="line">               background_color=<span class="string">&quot;white&quot;</span>,  <span class="comment"># 背景色</span></span><br><span class="line">               mask=mask_image,  <span class="comment"># 遮罩</span></span><br><span class="line">               prefer_horizontal=<span class="number">0.6</span>,  <span class="comment"># 水平文字比例</span></span><br><span class="line">               width=<span class="number">800</span>,  <span class="comment"># 宽度</span></span><br><span class="line">               height=<span class="number">1000</span>,  <span class="comment"># 高度</span></span><br><span class="line">               colormap=<span class="string">&quot;tab10&quot;</span>  <span class="comment"># 指定字体颜色</span></span><br><span class="line">               )</span><br></pre></td></tr></table></figure><p>其中遮罩是一个白底的图片，非白色部分就是词云的形状</p><p>有时候找的背景图不是白色或者不够白，可以在画图工具中打开图片，画笔-填充-颜色默认-白色-点击背景色</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/image-1-1024x792.png"></p><p>colormap就是指定的颜色集合，参数填的是string类型，可选的值有下面这些，左侧列表都可作为参数值，对应的颜色是右边这些</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/colormaps_reference_00.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/colormaps_reference_01.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/colormaps_reference_02.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/colormaps_reference_03.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/colormaps_reference_04.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/colormaps_reference_05.png"></p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/11/output.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;读取停用词&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;stopwords.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    stopwords = <span class="built_in">set</span>([s.rstrip() <span class="keyword">for</span> s <span class="keyword">in</span> fp.readlines()])  <span class="comment"># 数组转集合</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;获取文本内容&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    content = fp.read()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;中文分词&quot;&quot;&quot;</span></span><br><span class="line">content = jieba.lcut(content)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;去除停用词&quot;&quot;&quot;</span></span><br><span class="line">text = []</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> content:</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopwords:</span><br><span class="line">        text.append(word)</span><br><span class="line"></span><br><span class="line">frequency = <span class="built_in">dict</span>(Counter(text))  <span class="comment"># 去掉停用词后的词频统计</span></span><br><span class="line"></span><br><span class="line">mask_image = imread(<span class="string">&quot;map.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">wc = WordCloud(font_path=<span class="string">&#x27;C:\\Windows\\Fonts\\STZHONGS.TTF&#x27;</span>,  <span class="comment"># 字体</span></span><br><span class="line">               background_color=<span class="string">&quot;white&quot;</span>,  <span class="comment"># 背景色</span></span><br><span class="line">               mask=mask_image,  <span class="comment"># 遮罩</span></span><br><span class="line">               prefer_horizontal=<span class="number">0.6</span>,  <span class="comment"># 水平文字比例</span></span><br><span class="line">               width=<span class="number">800</span>,  <span class="comment"># 宽度</span></span><br><span class="line">               height=<span class="number">1000</span>,  <span class="comment"># 高度</span></span><br><span class="line">               colormap=<span class="string">&quot;tab10&quot;</span></span><br><span class="line">               )</span><br><span class="line"></span><br><span class="line">wc.fit_words(frequency)</span><br><span class="line"></span><br><span class="line">plt.imshow(wc, interpolation=<span class="string">&quot;bilinear&quot;</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">wc.to_file(<span class="string">&quot;output.png&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>worldcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红米AC2100在线刷breed+老毛子固件</title>
    <link href="/2021/10/25/%E7%BA%A2%E7%B1%B3ac2100%E5%9C%A8%E7%BA%BF%E5%88%B7breed%E8%80%81%E6%AF%9B%E5%AD%90%E5%9B%BA%E4%BB%B6/"/>
    <url>/2021/10/25/%E7%BA%A2%E7%B1%B3ac2100%E5%9C%A8%E7%BA%BF%E5%88%B7breed%E8%80%81%E6%AF%9B%E5%AD%90%E5%9B%BA%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>纯记录，不放图了</p><h4 id="刷breed"><a href="#刷breed" class="headerlink" title="刷breed"></a>刷breed</h4><p>登录路由器后台192.168.31.1，复制地址栏的stock</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/10/stock-1024x286.png"></p><p>替换掉下面地址中的stock，直接在浏览器里输入并回车，返回一个code:0即成功</p><p><a href="http://192.168.31.1/cgi-bin/luci/;stok=dcd5c3196a7d5e620bd382328bf36218/api/misystem/set_config_iotdev?bssid=Xiaomi&user_id=longdike&ssid=%0Acd%20/tmp%0Acurl%20-o%20B%20-O%20https://breed.hackpascal.net/breed-mt7621-xiaomi-r3g.bin%20-k%0A%5B%20-z%20%22$(sha256sum%20B%20%7C%20grep%20242d42eb5f5aaa67ddc9c1baf1acdf58d289e3f792adfdd77b589b9dc71eff85)%22%20%5D%20%7C%7C%20mtd%20-r%20write%20B%20Bootloader%0A">http://192.168.31.1/cgi-bin/luci/;stok=dcd5c3196a7d5e620bd382328bf36218/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;user_id=longdike&amp;ssid=%0Acd%20%2Ftmp%0Acurl%20-o%20B%20-O%20https%3A%2F%2Fbreed.hackpascal.net%2Fbreed-mt7621-xiaomi-r3g.bin%20-k%0A%5B%20-z%20%22%24(sha256sum%20B%20%7C%20grep%20242d42eb5f5aaa67ddc9c1baf1acdf58d289e3f792adfdd77b589b9dc71eff85)%22%20%5D%20%7C%7C%20mtd%20-r%20write%20B%20Bootloader%0A</a></p><p>等待路由器灯变成橘色，断开电源，按下reset，同时接通电源，等待10秒钟松开reset，等待一下输入192.168.1.1进入breed后台</p><h4 id="刷老毛子固件"><a href="#刷老毛子固件" class="headerlink" title="刷老毛子固件"></a>刷老毛子固件</h4><p>在breed后台选择固件更新，上传固件即可</p><p><a href="https://xinhaojin.lanzoui.com/ixnETvqlrfa">固件下载地址</a></p><p><a href="https://www.right.com.cn/forum/forum.php?mod=forumdisplay&fid=171&filter=digest&digest=1&typeid=43">固件精华帖</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/10/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210306233855.png"></p><p>提示更新完成后等待两分钟进入192.168.123.1，用户名admin，密码admin，进入老毛子后台。</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>路由器刷机</tag>
      
      <tag>老毛子固件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jupyter matplotlib画图中文乱码的解决方案</title>
    <link href="/2021/10/14/jupyter-matplotlib%E7%94%BB%E5%9B%BE%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/10/14/jupyter-matplotlib%E7%94%BB%E5%9B%BE%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>在jupyter notebook中使用matplotlib画图时，中文字体显示乱码</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/10/image-1-1024x416.png"></p><p>看提示是缺少字体</p><h4 id="查找matplotlib字体配置文件的目录"><a href="#查找matplotlib字体配置文件的目录" class="headerlink" title="查找matplotlib字体配置文件的目录"></a>查找matplotlib字体配置文件的目录</h4><p>import matplotlib<br>matplotlib.matplotlib_fname()</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/10/image-2.png"></p><h4 id="下载字体，放入对应目录中"><a href="#下载字体，放入对应目录中" class="headerlink" title="下载字体，放入对应目录中"></a>下载字体，放入对应目录中</h4><p>下载地址：<a href="https://xinhaojin.lanzoui.com/ibUMJvbo7ib">https://xinhaojin.lanzoui.com/ibUMJvbo7ib</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/10/image-3.png"></p><h4 id="修改配置文件，启用新字体"><a href="#修改配置文件，启用新字体" class="headerlink" title="修改配置文件，启用新字体"></a>修改配置文件，启用新字体</h4><p>打开matplotliblibrc</p><p>取消font.family前面的注释</p><p>取消font.sans-serif前面的注释，冒号后面增加SimHei</p><p>取消axes.unicode_minus前面的注释，True改为False</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/10/image-4.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/10/image-5.png"></p><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><p>删除~&#x2F;.cache&#x2F;matplotlib</p><h4 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h4><p>中文出现</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/10/image-6.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python与RPA（转载）</title>
    <link href="/2021/09/14/python%E4%B8%8Erpa%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <url>/2021/09/14/python%E4%B8%8Erpa%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>RPA，是Robotic Process Automation的英文缩写，中文是机器人流程自动化，利用软件将重复性的工作自动化。基本目标是让人从重复性强的繁琐工作中解放出来去做更有意义更具创造性的工作。比如自动爬取网站内容、将十几个Excel中数据合并分析、定时发送邮件等都是简单的RPA应用的例子。</p><p>加上如今AI技术的快速发展，能极大地扩展软件自动化的应用范围，可以实现更复杂的功能。比如，可以通过图像识别、语义理解等技术将图片、特定格式的文档等非结构化数据转换为结构化数据，自动提交到数据中心，然后基于机器学习算法定时分析结果生成报表并发送到邮箱。</p><p>RPA的本质是让计算机自动为人服务，RPA就像一个粘合剂，通过RPA人不需要对计算机操作细节，只需要指挥计算机执行某个任务就行了。</p><p>现在国内外有不少功能在研发RPA软件用于实现流程自动化。但作为一个Python程序员，我觉得Python是实现RPA的天然工具。</p><p>Python作为RPA工具有以下优势：</p><p>一方面，Python语法简单，容易上手。而且早期Python起源就是作为c语言和shell脚本之间的中间层而被开发出来（详见漫画Python三十年），可见它本身就有这方面的基因；</p><p>另一方面，Python应用范围广阔，包括系统管理、文件处理、邮件发送、机器学习、深度学习等，基本上都有免费开源的类库可以使用，RPA需要的功能Python基本上都可以支持，不需要自己再重新开发。</p><p>有兴趣的同学可以基于Python根据自己的需要定制一套强大的自动化系统。但根据业务不同实现方式也不能一概而论。这里收集整理了几个常用自动化处理工具库供大家参考学习，能力有限，不足之处请多指正。</p><p>概要如下图：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA3UzhaSWxseTFnaHp3YjYxeTV6ajMweXUwdTBqd3MuanBn-1024x882.jpg"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA3UzhaSWxseTFnaHp3YjVubjd6ajMxMnUwaGdqdDMuanBn-1024x460.jpg"></p><h4 id="Excel自动化"><a href="#Excel自动化" class="headerlink" title="Excel自动化"></a>Excel自动化</h4><p><strong>功能</strong>：实现对excel文件的增删改写、格式修改等</p><p><strong>常用库</strong>：xlwings、xlrd、xlwt</p><ul><li>xlrd用于读Excel文件(<a href="https://xlrd.readthedocs.io/en/latest/">官方文档</a>)</li><li>xlwt用于写Excel文件(<a href="https://xlwt.readthedocs.io/en/latest/">官方文档</a>)</li><li>xlwings实现了Excel中调用Python，python中调用Excel的骚操作，还支持VBA。（<a href="https://www.xlwings.org/">官方文档</a>）</li></ul><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA3UzhaSWxneTFnaTB4N3B4djNiajMyNGgwdTBha2suanBn-1024x402.jpg"></p><h4 id="Word自动化"><a href="#Word自动化" class="headerlink" title="Word自动化"></a>Word自动化</h4><p><strong>实现功能</strong>：对word文件的增删改写、格式修改等</p><p><strong>常用库</strong>：python-docx</p><p>官方示例：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA3UzhaSWxseTFnaTBpemdyOGxlajMwd2owdTBxYzMuanBn-1024x944.jpg"></p><p><a href="https://python-docx.readthedocs.io/en/latest/">官方文档</a></p><h4 id="PPT自动化"><a href="#PPT自动化" class="headerlink" title="PPT自动化"></a>PPT自动化</h4><p><strong>实现功能</strong>：对PPT的创建和修改</p><p><strong>常用库</strong>：python-pptx</p><p>简单示例：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA3UzhaSWxseTFnaTBpemhiYXE5ajMxY3EwdTBncDMuanBn-1024x631.jpg"></p><p><a href="https://python-pptx.readthedocs.io/en/latest/user/quickstart.html">官方文档</a></p><h4 id="邮件自动化"><a href="#邮件自动化" class="headerlink" title="邮件自动化"></a>邮件自动化</h4><p><strong>实现功能</strong>：构造邮件和发送邮件</p><p><strong>常用库</strong>：smtplib和email</p><p><strong>smtplib</strong>提供了一种很方便的途径发送电子邮件。它对smtp协议进行了简单的封装。使用如下：</p><p>import smtplib<br>smtp &#x3D; smtplib.SMTP( [host [, port [, local_hostname]]] )</p><p>其中参数说明如下：</p><p>host: SMTP 服务器主机。 你可以指定主机的ip地址或者域名如: runoob.com，这个是可选参数。<br>port: 如果你提供了 host 参数, 你需要指定 SMTP 服务使用的端口号，一般情况下 SMTP 端口号为25。<br>local_hostname: 如果 SMTP 在你的本机上，你只需要指定服务器地址为 localhost 即可。<br>然后使用sendmail发送邮件，示例如下：</p><p>smtp.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options])</p><p>参数说明如下：</p><ul><li>from_addr: 邮件发送者地址。</li><li>to_addrs: 字符串列表，邮件发送地址。</li><li>msg: 发送消息</li></ul><p><strong>email</strong>库可以读取、写入和发送电子邮件内容，示例如下：</p><p>import smtplib</p><h1 id="Import-the-email-modules-we’ll-need"><a href="#Import-the-email-modules-we’ll-need" class="headerlink" title="Import the email modules we’ll need"></a>Import the email modules we’ll need</h1><p>from email.message import EmailMessage</p><h1 id="Open-the-plain-text-file-whose-name-is-in-textfile-for-reading"><a href="#Open-the-plain-text-file-whose-name-is-in-textfile-for-reading" class="headerlink" title="Open the plain text file whose name is in textfile for reading."></a>Open the plain text file whose name is in textfile for reading.</h1><p>with open(textfile) as fp:<br>    # Create a text&#x2F;plain message<br>    msg &#x3D; EmailMessage()<br>    msg.set_content(fp.read())</p><h1 id="me-the-sender’s-email-address"><a href="#me-the-sender’s-email-address" class="headerlink" title="me &#x3D;&#x3D; the sender’s email address"></a>me &#x3D;&#x3D; the sender’s email address</h1><h1 id="you-the-recipient’s-email-address"><a href="#you-the-recipient’s-email-address" class="headerlink" title="you &#x3D;&#x3D; the recipient’s email address"></a>you &#x3D;&#x3D; the recipient’s email address</h1><p>msg[‘Subject’] &#x3D; f’The contents of {textfile}’<br>msg[‘From’] &#x3D; me<br>msg[‘To’] &#x3D; you</p><h1 id="Send-the-message-via-our-own-SMTP-server"><a href="#Send-the-message-via-our-own-SMTP-server" class="headerlink" title="Send the message via our own SMTP server."></a>Send the message via our own SMTP server.</h1><p>s &#x3D; smtplib.SMTP(‘localhost’)<br>s.send_message(msg)<br>s.quit()</p><h4 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h4><p><strong>实现功能</strong>：批量修改文件等重复性操作</p><p><strong>常用库</strong>：os</p><p><strong>os</strong>库提供了一种使用与操作系统相关的功能的便捷式途径，常用操作如下：</p><p>函数</p><p>功能</p><p>os.listdir()</p><p>列出当前目录下的所有文件和文件夹（包括被隐藏的）</p><p>os.system()</p><p>运行shell命令；可将 指令 以 字符串 &#x2F; 字符串拼接 的形式喂进去</p><p>os.sep()</p><p>更改操作系统中的路径分隔符</p><p>os.getcwd()</p><p>获取当前路径(中间会自动添上一个路径分隔符)</p><p>os.walk</p><p>循环遍历目录，返回tuple表，表中每一个tuple包含该层文件、文件夹及该层父节点</p><p>os.path.isfile()</p><p>是否是文件</p><p>os.path.isdir()</p><p>是否是文件夹</p><p>os.path.exists()</p><p>路径是否存在</p><p>os.path.abspath()</p><p>如果输入路径是相对路径，则转换为绝对路径</p><p>os.path.dirname()</p><p>获取指定目录的父目录路径</p><p>os.path.pardir</p><p>获取当前目录的父目录路径</p><p>os.pardir()</p><p>获取当前目录的父目录路径</p><p>os.path.split()</p><p>将目录和文件名分割开，组成二元组返回</p><p>os.remove()</p><p>删除指定文件</p><p>os.rmdir()</p><p>删除空文件夹</p><p>os.mkdir()</p><p>新建文件夹</p><p>os.makedirs( , exist_ok&#x3D;True)</p><p>创建递归的目录树(exist_ok是py3.2才加入的参数)</p><p>os.chdir()</p><p>改变当前目录到指定目录中</p><p>os.rename(path1 ,path2)</p><p>重命名文件</p><p>os.chmod(path ,mode)</p><p>改变文件权限模式</p><p>os.access(path ,mode)</p><p>检验文件权限模式</p><p>os.sep</p><p>输出操作系统特定的路径分隔符。win下为””,macx下为”&#x2F;“</p><p>os.linesep</p><p>输出当前平台使用的行终止符</p><p>os.pathsep</p><p>输出用于分割文件路径的字符串</p><p>os.name</p><p>输出字符串指示当前使用平台。win-&gt;‘nt’; mac-&gt;‘posix’</p><p>os.environ</p><p>获取系统环境变量</p><h4 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h4><p><strong>实现功能</strong>：爬取豆瓣、知乎、微博等数据用于数据分析</p><p><strong>常用库</strong>：requests、scrapy</p><p><strong>requests</strong>是一个Python HTTP库，在Apache License 2.0下发布。该项目的目标是使HTTP请求更简单，更人性化。示例如下：</p><p>&gt;&gt;&gt; r &#x3D; requests.get(‘<a href="https://api.github.com/user">https://api.github.com/user</a>‘, auth&#x3D;(‘user’, ‘pass’))</p><blockquote><blockquote><blockquote><p>r.status_code<br>200<br>r.headers[‘content-type’]<br>‘application&#x2F;json; charset&#x3D;utf8’<br>r.encoding<br>‘utf-8’<br>r.text<br>‘{“type”:”User”…’<br>r.json()<br>{‘private_gists’: 419, ‘total_private_repos’: 77, …}</p></blockquote></blockquote></blockquote><p><a href="https://requests.readthedocs.io/en/master/">官方文档</a></p><p><strong>Scrapy</strong> 是用Python 实现的一个为了爬取网站数据、提取结构性数据而编写的应用框架，其架构如下：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA3UzhaSWxseTFnaTBqbmNva2xhajMwamcwZHE3NWQuanBn.jpg"></p><p><a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/tutorial.html">官方文档</a></p><h4 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h4><p>实现功能：处理统计各种数据，并进行可视化</p><p>常用库：pandas、matplotlib</p><p>pandas是为Python编程语言编写的软件库，用于数据处理和分析。特别是，它提供了用于操作数值表和时间序列的数据结构和操作。(十分钟入门pandas)</p><p>Matplotlib 是 Python 的一个绘图库。它包含了大量的工具，你可以使用这些工具创建各种图形，包括简单的散点图，正弦曲线，甚至是三维图形。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA3UzhaSWxseTFnaTBrNzEyNGw5ajMxZzIwdHNqdHkuanBn-1024x586.jpg"></p><p><a href="https://matplotlib.org/">官方教程</a></p><h4 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h4><p><strong>实现功能</strong>：识别出文本等信息</p><p><strong>常用库</strong>：‎pytesseract，opencv</p><p><strong>Python-tesseract</strong> 是一个基于 google’s Tesseract-OCR 的独立封装包，功能是识别图片文件中文字，并作为返回参数返回识别结果。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA3UzhaSWxseTFnaTBrYXN1OTZtajMwemwwdTBuMHEuanBn-1024x863.jpg"></p><p>OpenCV的全称是Open Source Computer Vision Library，是一个跨平台的计算机视觉库，用于图像处理、分析、机器视觉方面的开源函数库。OpenCV采用C&#x2F;C++语言编写，python-opencv是Python对OpenCV的封装，可以让Python调用OpenCV的功能。</p><p><a href="https://docs.opencv.org/master/d6/d00/tutorial_py_root.html">官方教程</a></p><h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p><strong>实现功能</strong>：定制执行某个动作</p><p><strong>常用库</strong>：APScheduler</p><p><strong>APScheduler</strong>实现了一个定时任务框架，提供了非常丰富而且方便易用的定时任务接口，可以实现基于日期、固定时间间隔以及crontab 类型的任务。</p><p><a href="https://apscheduler.readthedocs.io/en/stable/">官方文档</a></p><h4 id="RPA框架"><a href="#RPA框架" class="headerlink" title="RPA框架"></a>RPA框架</h4><p><strong>实现功能</strong>：模拟鼠标键盘操作，控制浏览器、桌面应用等软件，让电脑上操作流程自动化</p><p><strong>常用库</strong>：python-rpa</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA3UzhaSWxseTFnaTBqbmN5NGN3ajMwazAwZGNxNmYuanBn.jpg"></p><p><a href="https://github.com/tebelorg/RPA-Python">官方文档</a></p><p>原文链接：<a href="https://blog.csdn.net/pyfun/article/details/108216876">https://blog.csdn.net/pyfun/article/details/108216876</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>rpa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用labelme制作coco数据集</title>
    <link href="/2021/09/02/%E4%BD%BF%E7%94%A8labelme%E5%88%B6%E4%BD%9Ccoco%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2021/09/02/%E4%BD%BF%E7%94%A8labelme%E5%88%B6%E4%BD%9Ccoco%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h4 id="安装labelme"><a href="#安装labelme" class="headerlink" title="安装labelme"></a>安装labelme</h4><p>直接使用pip安装</p><pre><code>pip install labelme</code></pre><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>命令行执行</p><pre><code>labelme</code></pre><p>打开后选择打开文件夹，选择自动保存</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/image-1.png"></p><p>编辑，画矩形，然后打上标签</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/image-2-1024x626.png"></p><p>在图片目录下会保存json格式的标签信息</p><h4 id="应用（以yolox为例）"><a href="#应用（以yolox为例）" class="headerlink" title="应用（以yolox为例）"></a>应用（以yolox为例）</h4><p>yolox的数据集readme中写明了需要的数据集格式</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/image-3.png"></p><p>其中instancesxxx.json是很多json的集合，需要手动生成</p><p>现在要做的是，先手动划分训练集和测试集，再生成对应标签的json集合</p><p>下载labelme2coco.py</p><p><a href="https://github.com/Tony607/labelme2coco">https://github.com/Tony607/labelme2coco</a></p><p>进入json文件夹，执行</p><pre><code>python labelme2coco.py ./</code></pre><p>会生成一个大json文件，改成需要的文件名使用即可</p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flask使用https</title>
    <link href="/2021/09/01/flask%E4%BD%BF%E7%94%A8https/"/>
    <url>/2021/09/01/flask%E4%BD%BF%E7%94%A8https/</url>
    
    <content type="html"><![CDATA[<p>有一个https页面，需要加载http资源（后台是flask），出于安全原因被浏览器禁止了</p><p>既然只能用https，那就干脆把flask的所有请求都改成https</p><p>代码方面，只需要在app.run方法中增加ssl_context&#x3D;’adhoc’，意思是使用服务器的本地SSL证书</p><p>if <strong>name</strong>&#x3D;&#x3D;”<strong>main</strong>“:<br>    app.run(host&#x3D;”0.0.0.0”, port&#x3D;5000,ssl_context&#x3D;’adhoc’)</p><p>然后就可以使用https访问了</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/09/image.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu20安装cuda&amp;cudnn</title>
    <link href="/2021/08/14/ubuntu20%E5%AE%89%E8%A3%85cudacudnn/"/>
    <url>/2021/08/14/ubuntu20%E5%AE%89%E8%A3%85cudacudnn/</url>
    
    <content type="html"><![CDATA[<h4 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h4><p>在软件和更新-附加驱动里，选择显卡驱动</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/2021-08-14-15-39-14%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p>禁用自带显卡驱动</p><pre><code>sudo gedit /etc/modprobe.d/blacklist.conf</code></pre><p>在最后一行加上:  blacklist nouveau ，将Ubuntu自带的显卡驱动加入黑名单，修改后保存</p><p>还需执行一条命令使他生效</p><pre><code>sudo update-initramfs -u</code></pre><p>然后重启，输入以下命令查看支持的cuda版本</p><pre><code>nvidia-smi</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/2021-08-14-16-18-59%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p>所以我可以安装的是cuda11.4版本</p><h4 id="下载cuda"><a href="#下载cuda" class="headerlink" title="下载cuda"></a>下载cuda</h4><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p><p>选择正确的版本</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/2021-08-14-16-23-17%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p>选择操作系统、架构等，依次执行下面生成的命令</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/2021-08-14-16-24-23%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-1024x545.png"></p><p>我这里就是这样</p><pre><code>wget https://developer.download.nvidia.com/compute/cuda/11.4.0/local_installers/cuda_11.4.0_470.42.01_linux.runsudo sh cuda_11.4.0_470.42.01_linux.run</code></pre><p>bash命令执行要等一会儿，出现这个界面后选择continue</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/2021-08-14-16-47-50%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p>下个界面输入accept</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/2021-08-14-16-49-42%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p>再下个界面先按空格，取消安装驱动，因为上面我们已经安装好了，然后选择install</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/2021-08-14-16-50-48%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p>等待安装完成后是这个界面</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/2021-08-14-16-52-43%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>输入gedit ~&#x2F;.bashrc命令打开文件，在文件结尾输入以下语句，保存</p><pre><code>export PATH=/usr/local/cuda-11.4/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;export LD_LIBRARY_PATH=/usr/local/cuda-11.4/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/2021-08-14-16-54-30%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p>更新环境变量配置</p><pre><code>source ~/.bashrc</code></pre><p>至此，cuda安装完成，输入nvcc -V 查看是否成功</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/2021-08-14-16-56-54%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><h4 id="安装cudnn"><a href="#安装cudnn" class="headerlink" title="安装cudnn"></a>安装cudnn</h4><p><a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a></p><p>需要登录(比较麻烦，建议看最后一步的阿里云镜像源)</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/2021-08-14-17-01-39%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p>解压后进入解压目录，将cuda&#x2F;include&#x2F;cudnn.h文件复制到usr&#x2F;local&#x2F;cuda&#x2F;include文件夹，将cuda&#x2F;lib64&#x2F;下所有文件复制到&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64文件夹中,再添加读取权限</p><p>可以在解压后的cudnn-11.4…..&#x2F;cuda目录下执行</p><pre><code>sudo cp include/cudnn.h /usr/local/cuda/include/cudnn.hsudo cp -r lib64/* /usr/local/cuda/lib64sudo chmod a+r /usr/local/cuda/lib64/libcudnn*sudo chmod a+r /usr/local/cuda/include/cudnn.h</code></pre><p>至此，cudnn安装完成</p><h4 id="阿里云镜像deb安装方法"><a href="#阿里云镜像deb安装方法" class="headerlink" title="阿里云镜像deb安装方法"></a>阿里云镜像deb安装方法</h4><p><a href="https://mirrors.aliyun.com/nvidia-cuda/">https://mirrors.aliyun.com/nvidia-cuda/</a></p><p>选择对应的操作系统版本，查找cuda版本对应的cudnn，dev和非dev两个版本，都需要下载<br><img src="https://xinhaojin.github.io/imgs-host/20221025/xxx.4tdndxgkm1k0.png"><br>安装命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i libcudnn8-dev_8.2.4.15-1+cuda11.4_amd64.deb</span><br><span class="line">sudo dpkg -i libcudnn8_8.2.4.15-1+cuda11.4_amd64.deb</span><br></pre></td></tr></table></figure><p>检查是否安装成功，有以上两个的安装信息即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -l | grep cudnn</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10下安装配置yolox</title>
    <link href="/2021/08/05/win10%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEyolox/"/>
    <url>/2021/08/05/win10%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEyolox/</url>
    
    <content type="html"><![CDATA[<h4 id="下载源码和模型文件"><a href="#下载源码和模型文件" class="headerlink" title="下载源码和模型文件"></a>下载源码和模型文件</h4><p><a href="https://github.com/Megvii-BaseDetection/YOLOX">https://github.com/Megvii-BaseDetection/YOLOX</a></p><h4 id="创建一个新环境"><a href="#创建一个新环境" class="headerlink" title="创建一个新环境"></a>创建一个新环境</h4><p>conda create -n yolox python&#x3D;&#x3D;3.7<br>conda activate yolox</p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>在yolox根目录下执行</p><p>pip install -U pip<br>pip install -r requirements.txt<br>pip install cython<br>pip install -U setuptools<br>python setup.py develop</p><h2 id="cuda配置（针对torch-gpu版本，默认cpu版本可跳过）"><a href="#cuda配置（针对torch-gpu版本，默认cpu版本可跳过）" class="headerlink" title="cuda配置（针对torch-gpu版本，默认cpu版本可跳过）"></a>cuda配置（针对torch-gpu版本，默认cpu版本可跳过）</h2><p>cuda以及cudnn的正确安装方式如下两篇文章<br><a href="https://xinhaojin.github.io/2021/05/18/cuda%E5%AE%89%E8%A3%85/">https://xinhaojin.github.io/2021/05/18/cuda安装/</a><br><a href="https://xinhaojin.github.io/2021/05/19/cudnn%E5%AE%89%E8%A3%85/">https://xinhaojin.github.io/2021/05/19/cudnn安装/</a></p><p>然后按照对应的cuda版本选择安装命令</p><p>参考<a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/image-4.png"></p><h2 id="模型文件"><a href="#模型文件" class="headerlink" title="模型文件"></a>模型文件</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/image-5.png"></p><p>把下载的模型文件放到yolox&#x2F;yolox&#x2F;models下</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre><code>python tools/demo.py image -n yolox-s -c yolox/models/yolox_s.pth --path assets/dog.jpg --conf 0.25 --nms 0.45 --tsize 640 --save_result --device [cpu/gpu]</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/image-7.png"></p><p>图片识别成功</p><h4 id="demo-py主要参数"><a href="#demo-py主要参数" class="headerlink" title="demo.py主要参数"></a>demo.py主要参数</h4><pre><code>--demo  可以是image,video或者wecam,分别用于处理图片、视频和摄像头的视频--path  图片或者视频的路径--camid  摄像头的序号，一个摄像头的话就是0--save_result  不用额外设置参数，添加这一项可以把识别结果保存-c  模型文件路径--device GPU/CPU计算--nms  相似度门限，高于这个值就框出来--tsize  图像大小</code></pre>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓Intent返回上一个activity</title>
    <link href="/2021/07/28/%E5%AE%89%E5%8D%93intent%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E4%B8%AAactivity/"/>
    <url>/2021/07/28/%E5%AE%89%E5%8D%93intent%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E4%B8%AAactivity/</url>
    
    <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>从Activity1跳转到 Activity2，再从 Activity2返回到 Activity1，返回后自动更新 Activity1</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>如果只使用常规的startActivity是不行的，按我的理解，他会保存跳转的状态栈，状态只增不减，无法实现真正的“返回”，即：</p><p>从1跳转到2使用 startActivity ，从2跳转到1也使用 startActivity ，那么这两次跳转之后，如果你按手机的返回按钮，会发现他返回到了2，如果再多跳转几次，按返回按钮，就会在1和2之间反复横跳，这显然不符合预期。</p><p>要实现真正的“返回”，可以使用startActivityForResult</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>在activity1中，startActivityForResult(Intent,requestCode)</p><p>其中requestCode用于区分是从哪个activity返回到当前activity的，是自定义的int类型值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Activity1.<span class="built_in">this</span>, Activity2.class);</span><br><span class="line">startActivityForResult(intent,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>在activity2中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setResult(RESULT_OK);<span class="comment">//RESULT_OK表示正确返回</span></span><br><span class="line">finish();<span class="comment">//结束当前avtivity，返回上一个activity</span></span><br><span class="line"></span><br><span class="line">当activity2执行finish后，会自动返回到activity1，此时会调用activity1中定义的onActivityResult方法做返回后的操作，如更新activity1</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        <span class="keyword">if</span>(resultCode==RESULT_OK)&#123;<span class="comment">//判断是否返回成功</span></span><br><span class="line">            <span class="keyword">if</span>(requestCode==<span class="number">1</span>)<span class="comment">//判断是否是哪个avtivity返回,一个avtivity对应一个code,上面定义过为1</span></span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">//你的操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>当然，每次跳转都可以在intent中携带数据，这里没有写出</p>]]></content>
    
    
    <categories>
      
      <category>安卓</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matplotlib动态画图</title>
    <link href="/2021/07/27/matplotlib%E5%8A%A8%E6%80%81%E7%94%BB%E5%9B%BE/"/>
    <url>/2021/07/27/matplotlib%E5%8A%A8%E6%80%81%E7%94%BB%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>方法一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    y.append(i)     <span class="comment"># 每迭代一次，追加y数组的内容</span></span><br><span class="line">    ax.cla()        <span class="comment"># 清除键</span></span><br><span class="line">    ax.bar(y, label=<span class="string">&#x27;test&#x27;</span>, height=y, width=<span class="number">0.3</span>)<span class="comment">#画图</span></span><br><span class="line">    ax.legend()<span class="comment">#标注图例</span></span><br><span class="line">    plt.pause(<span class="number">0.1</span>)<span class="comment">#暂停0.1s</span></span><br><span class="line"></span><br><span class="line">![](https://xinhaojin.github.io/imgs-host/past/<span class="number">2021</span>/07/<span class="number">20180611135854497.</span>gif)</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">1</span>])<span class="comment">#设置坐标轴</span></span><br><span class="line">plt.ion()<span class="comment">#打开交互模式，同时显示多张图或动态图，关闭：plt.ioff()</span></span><br><span class="line"></span><br><span class="line">xs = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">ys = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    y = np.random.random()<span class="comment">#0-1的随机数</span></span><br><span class="line">    xs[<span class="number">0</span>] = xs[<span class="number">1</span>]</span><br><span class="line">    ys[<span class="number">0</span>] = ys[<span class="number">1</span>]</span><br><span class="line">    xs[<span class="number">1</span>] = i</span><br><span class="line">    ys[<span class="number">1</span>] = y</span><br><span class="line">    plt.plot(xs, ys)</span><br><span class="line">    plt.pause(<span class="number">0.1</span>)<span class="comment">#暂停0.1s</span></span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/07/20180611135923916.gif"></p><p>原文<a href="https://blog.csdn.net/xyisv/article/details/80651334">https://blog.csdn.net/xyisv/article/details/80651334</a></p><p>以上均为转载，感觉例子不太具有普适性，可能以下方法更简单更普遍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_iterations):</span><br><span class="line">        plt.cla()        <span class="comment"># 清除键</span></span><br><span class="line">        <span class="comment">#...</span></span><br><span class="line">        plt.plot(...)</span><br><span class="line">        plt.pause(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程爬取某个网页的所有图片</title>
    <link href="/2021/07/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E5%8F%96%E6%9F%90%E4%B8%AA%E7%BD%91%E9%A1%B5%E7%9A%84%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87/"/>
    <url>/2021/07/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E5%8F%96%E6%9F%90%E4%B8%AA%E7%BD%91%E9%A1%B5%E7%9A%84%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup, UnicodeDammit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imageSpider</span>(<span class="params">start_url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        urls = []</span><br><span class="line">        req = urllib.request.Request(start_url,headers=headers)</span><br><span class="line">        data = urllib.request.urlopen(req)</span><br><span class="line">        data = data.read()</span><br><span class="line">        dammit = UnicodeDammit(data, [<span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;gbk&quot;</span>])</span><br><span class="line">        data = dammit.unicode_markup</span><br><span class="line">        soup = BeautifulSoup(data, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        images = soup.select(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                src = image[<span class="string">&quot;src&quot;</span>]</span><br><span class="line">                url = urllib.request.urljoin(start_url, src)</span><br><span class="line">                <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> urls:</span><br><span class="line">                    urls.append(url)</span><br><span class="line">                <span class="built_in">print</span>(url)</span><br><span class="line">                download(url)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                <span class="built_in">print</span>(err)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(err)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count = count+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(url[<span class="built_in">len</span>(url)-<span class="number">4</span>] == <span class="string">&quot;.&quot;</span>):</span><br><span class="line">            ext = url[<span class="built_in">len</span>(url)-<span class="number">4</span>:] </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ext = <span class="string">&quot;&quot;</span></span><br><span class="line">        req = urllib.request.Request(url, headers=headers)</span><br><span class="line">        data = urllib.request.urlopen(req, timeout=<span class="number">100</span>)</span><br><span class="line">        data = data.read()</span><br><span class="line">        fobj = <span class="built_in">open</span>(<span class="string">&quot;images&quot;</span>+<span class="built_in">str</span>(count)+ext, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">        fobj.write(data)</span><br><span class="line">        fobj.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;downloaded &quot;</span>+<span class="built_in">str</span>(count)+ext)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(err)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_url = <span class="string">&quot;https://blog.xinhaojin.top&quot;</span></span><br><span class="line">headers=&#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&quot;</span>&#125;</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">importlib.reload(sys)</span><br><span class="line">imageSpider(start_url)</span><br></pre></td></tr></table></figure><p>在程序根目录下新建images文件夹即可</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BeautifulSoup查找元素</title>
    <link href="/2021/07/14/beautifulsoup%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0/"/>
    <url>/2021/07/14/beautifulsoup%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment">#获取网页html代码</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">url=<span class="string">&#x27;https://blog.xinhaojin.top&#x27;</span></span><br><span class="line">resp=urllib.request.urlopen(url)</span><br><span class="line">data=resp.read()</span><br><span class="line">html=data.decode()</span><br><span class="line"><span class="comment">#print(html)</span></span><br><span class="line"></span><br><span class="line">soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找第一个title元素</span></span><br><span class="line">tag=soup.find(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tag),tag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找所有超链接</span></span><br><span class="line">tags=soup.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">    <span class="built_in">print</span>(tag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找class=xxx的div元素</span></span><br><span class="line">tags=soup.find_all(<span class="string">&#x27;div&#x27;</span>,attrs=&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&quot;entry excerpt entry-summary&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">    <span class="built_in">print</span>(tag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找符合条件的所有类型元素</span></span><br><span class="line">tags=soup.find_all(name=<span class="literal">None</span>,attrs=&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&quot;entry excerpt entry-summary&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">    <span class="built_in">print</span>(tag)</span><br><span class="line"><span class="comment">#获取tag属性值</span></span><br><span class="line">    <span class="built_in">print</span>(tag[<span class="string">&#x27;class&#x27;</span>])</span><br><span class="line"><span class="comment">#获取元素包含的文本值</span></span><br><span class="line">    <span class="built_in">print</span>(tag.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义高级查找</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myFilter</span>(<span class="params">tag</span>):</span><br><span class="line">    <span class="comment">#print(tag.name)</span></span><br><span class="line">    <span class="comment">#利用class属性查找时,应注意:class为列表,而非字符串</span></span><br><span class="line">    <span class="keyword">return</span> (tag.name==<span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> tag.has_attr(<span class="string">&quot;href&quot;</span>) <span class="keyword">and</span> tag[<span class="string">&#x27;href&#x27;</span>]==<span class="string">&quot;https://blog.xinhaojin.top/2020/08/&quot;</span>)</span><br><span class="line"></span><br><span class="line">tag=soup.find_all(myFilter)</span><br><span class="line"><span class="built_in">print</span>(tag)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python flask实现前后端交互</title>
    <link href="/2021/07/09/python-flask%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    <url>/2021/07/09/python-flask%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line">app=flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> *</span><br><span class="line">CORS(app, supports_credentials=<span class="literal">True</span>)<span class="comment">#接收跨域请求</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/path&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p=flask.request.args.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        c=flask.request.args.get(<span class="string">&quot;sex&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(p,c)</span><br><span class="line">        <span class="keyword">return</span> p+<span class="string">&quot;,&quot;</span>+c</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>)<span class="comment">#想要外部客户端访问，必须是0.0.0.0</span></span><br></pre></td></tr></table></figure><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flask测试页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    sex:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;submit()&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">submit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行的代码</span></span></span><br><span class="line"><span class="language-javascript">        xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">else</span></span></span><br><span class="line"><span class="language-javascript">    &#123;  </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//IE6, IE5 浏览器执行的代码</span></span></span><br><span class="line"><span class="language-javascript">        xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> res=<span class="title class_">JSON</span>.<span class="title function_">parse</span>( xmlhttp.<span class="property">responseText</span> );</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//res是返回的数据，可以做后续处理</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> name=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> sex=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sex&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> url=<span class="string">&#x27;http://127.0.0.1:5000/path?name=&#x27;</span>+name+<span class="string">&#x27;&amp;sex=&#x27;</span>+sex;</span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,url,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="直接测试url"><a href="#直接测试url" class="headerlink" title="直接测试url"></a>直接测试url</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/07/image-4.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/07/image-3.png"></p><h4 id="HTML测试GET"><a href="#HTML测试GET" class="headerlink" title="HTML测试GET"></a>HTML测试GET</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/07/image-5.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/07/image-6.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php发送SMTP邮件</title>
    <link href="/2021/07/03/php%E5%8F%91%E9%80%81smtp%E9%82%AE%E4%BB%B6/"/>
    <url>/2021/07/03/php%E5%8F%91%E9%80%81smtp%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>main.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPMailer</span>\\<span class="title">PHPMailer</span>\\<span class="title">PHPMailer</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPMailer</span>\\<span class="title">PHPMailer</span>\\<span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./src/Exception.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./src/PHPMailer.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./src/SMTP.php&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendEmail</span>(<span class="params"><span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$mail</span> = <span class="keyword">new</span> <span class="title class_">PHPMailer</span>(<span class="literal">true</span>);                              <span class="comment">// Passing \`true\` enables exceptions</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//服务器配置</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;CharSet =<span class="string">&quot;UTF-8&quot;</span>;                     <span class="comment">//设定邮件编码</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;SMTPDebug = <span class="number">0</span>;                        <span class="comment">// 调试模式输出</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;<span class="title function_ invoke__">isSMTP</span>();                             <span class="comment">// 使用SMTP</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;Host = <span class="string">&#x27;smtp.qq.com&#x27;</span>;                <span class="comment">// SMTP服务器</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;SMTPAuth = <span class="literal">true</span>;                      <span class="comment">// 允许 SMTP 认证</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;Username = <span class="string">&#x27;xinhaojin@qq.com&#x27;</span>;                <span class="comment">// SMTP 用户名  即邮箱的用户名</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;Password = <span class="string">&#x27;tjhv*********xdjaj&#x27;</span>;             <span class="comment">// SMTP 密码  部分邮箱是授权码(例如163邮箱)</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;SMTPSecure = <span class="string">&#x27;ssl&#x27;</span>;                    <span class="comment">// 允许 TLS 或者ssl协议</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;Port = <span class="number">465</span>;                            <span class="comment">// 服务器端口 25 或者465 具体要看邮箱服务器支持</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$mail</span>-&gt;<span class="title function_ invoke__">setFrom</span>(<span class="string">&#x27;xinhaojin@qq.com&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);  <span class="comment">//发件人</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;<span class="title function_ invoke__">addAddress</span>(<span class="string">&#x27;xinhaojin@qq.com&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);  <span class="comment">// 收件人</span></span><br><span class="line">        <span class="comment">//$mail-&gt;addAddress(&#x27;ellen@example.com&#x27;);  // 可添加多个收件人</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;<span class="title function_ invoke__">addReplyTo</span>(<span class="string">&#x27;xinhaojin@qq.com&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>); <span class="comment">//回复的时候回复给哪个邮箱 建议和发件人一致</span></span><br><span class="line">        <span class="comment">//$mail-&gt;addCC(&#x27;cc@example.com&#x27;);                    //抄送</span></span><br><span class="line">        <span class="comment">//$mail-&gt;addBCC(&#x27;bcc@example.com&#x27;);                    //密送</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送附件</span></span><br><span class="line">        <span class="comment">// $mail-&gt;addAttachment(&#x27;../xy.zip&#x27;);         // 添加附件</span></span><br><span class="line">        <span class="comment">// $mail-&gt;addAttachment(&#x27;../thumb-1.jpg&#x27;, &#x27;new.jpg&#x27;);    // 发送附件并且重命名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Content</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;<span class="title function_ invoke__">isHTML</span>(<span class="literal">true</span>);                                  <span class="comment">// 是否以HTML文档格式发送  发送后客户端可直接显示对应HTML内容</span></span><br><span class="line">        <span class="variable">$mail</span>-&gt;Subject = <span class="string">&#x27;有新留言，请尽快审核！&#x27;</span>;</span><br><span class="line">        <span class="variable">$mail</span>-&gt;Body    = <span class="string">&#x27;&lt;h1&gt;&#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;&lt;/h1&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$mail</span>-&gt;AltBody = <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$mail</span>-&gt;<span class="title function_ invoke__">send</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;邮件发送成功&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;邮件发送失败: &#x27;</span>, <span class="variable">$mail</span>-&gt;ErrorInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">sendEmail</span>(<span class="string">&#x27;快来看看吧&#x27;</span>);</span><br></pre></td></tr></table></figure><p>还需要一个src文件夹，内容如下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/07/image-1.png"></p><p>可以在GitHub下载<a href="https://github.com/PHPMailer/PHPMailer%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%90%8E%E8%A7%A3%E5%8E%8B%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0src%E6%96%87%E4%BB%B6%E5%A4%B9">https://github.com/PHPMailer/PHPMailer，下载后解压，只需要用到src文件夹</a></p><p>蓝奏云下载链接<a href="https://xinhaojin.lanzoui.com/izMoEqz9fyj">https://xinhaojin.lanzoui.com/izMoEqz9fyj</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/07/image-2.png"></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
      <tag>SMTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决wordpress页面改为固定链接后403的问题</title>
    <link href="/2021/07/03/%E8%A7%A3%E5%86%B3wordpress%E9%A1%B5%E9%9D%A2%E6%94%B9%E4%B8%BA%E5%9B%BA%E5%AE%9A%E9%93%BE%E6%8E%A5%E5%90%8E403%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/07/03/%E8%A7%A3%E5%86%B3wordpress%E9%A1%B5%E9%9D%A2%E6%94%B9%E4%B8%BA%E5%9B%BA%E5%AE%9A%E9%93%BE%E6%8E%A5%E5%90%8E403%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>修改nginx配置文件，在站点目录字段后添加</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (-f <span class="variable">$request_filename</span>/index.html)&#123;</span><br><span class="line">    <span class="title function_ invoke__">rewrite</span> (.*) $<span class="number">1</span>/index.html <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (-f <span class="variable">$request_filename</span>/index.php)&#123;</span><br><span class="line">    <span class="title function_ invoke__">rewrite</span> (.*) $<span class="number">1</span>/index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">rewrite</span> (.*) /index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    rewrite /wp-admin$ <span class="variable">$scheme</span>:<span class="comment">//$host$uri/ permanent;</span></span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/07/image.png"></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python发送QQ邮件</title>
    <link href="/2021/06/30/python%E5%8F%91%E9%80%81qq%E9%82%AE%E4%BB%B6/"/>
    <url>/2021/06/30/python%E5%8F%91%E9%80%81qq%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>现在有个需求，需要在后台数据库变化时主动提醒我，自动发邮件是个很好的选择</p><h4 id="开启QQ邮箱的SMTP服务"><a href="#开启QQ邮箱的SMTP服务" class="headerlink" title="开启QQ邮箱的SMTP服务"></a>开启QQ邮箱的SMTP服务</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/image-8.png"></p><h4 id="获取授权码"><a href="#获取授权码" class="headerlink" title="获取授权码"></a>获取授权码</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/image-9.png"></p><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><p>完全参考了菜鸟教程的代码，修改参数即可<a href="https://www.runoob.com/python3/python3-smtp.html">https://www.runoob.com/python3/python3-smtp.html</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第三方 SMTP 服务</span></span><br><span class="line">mail_host=<span class="string">&quot;smtp.qq.com&quot;</span>  <span class="comment">#设置服务器，这里是QQ的smtp服务器地址</span></span><br><span class="line">mail_user=<span class="string">&quot;xinhaojin@qq.com&quot;</span>    <span class="comment">#用户名</span></span><br><span class="line">mail_pass=<span class="string">&quot;tj***********j&quot;</span>   <span class="comment">#口令 ，即授权码</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">sender = <span class="string">&#x27;xinhaojin@qq.com&#x27;</span><span class="comment">#发送者</span></span><br><span class="line">receivers = [<span class="string">&#x27;xinhaojin@qq.com&#x27;</span>]  <span class="comment"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></span><br><span class="line"> </span><br><span class="line">message = MIMEText(<span class="string">&#x27;Python 邮件发送测试...&#x27;</span>, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">message[<span class="string">&#x27;From&#x27;</span>] = Header(<span class="string">&quot;菜鸟教程&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">message[<span class="string">&#x27;To&#x27;</span>] =  Header(<span class="string">&quot;测试&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">subject = <span class="string">&#x27;Python SMTP 邮件测试&#x27;</span></span><br><span class="line">message[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    smtpObj = smtplib.SMTP() </span><br><span class="line">    smtpObj.connect(mail_host, <span class="number">25</span>)    <span class="comment"># 25 为 SMTP 端口号</span></span><br><span class="line">    smtpObj.login(mail_user,mail_pass)</span><br><span class="line">    smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;邮件发送成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Error: 无法发送邮件&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/image-10.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python项目生成requirements.txt</title>
    <link href="/2021/06/26/python%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90requirements-txt/"/>
    <url>/2021/06/26/python%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90requirements-txt/</url>
    
    <content type="html"><![CDATA[<h4 id="导出当前环境所有依赖"><a href="#导出当前环境所有依赖" class="headerlink" title="导出当前环境所有依赖"></a>导出当前环境所有依赖</h4><pre><code>pip freeze &gt; requirements.txt</code></pre><p>但这些不一定都是当前项目必需的包，更好的方法是下面这种</p><h4 id="导出当前目录项目的依赖"><a href="#导出当前目录项目的依赖" class="headerlink" title="导出当前目录项目的依赖"></a>导出当前目录项目的依赖</h4><pre><code>pip install pipreqspipreqs . --encoding=utf8 --force</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/image-6.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/image-7.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wordpress一键搬迁</title>
    <link href="/2021/06/01/wordpress%E4%B8%80%E9%94%AE%E6%90%AC%E8%BF%81/"/>
    <url>/2021/06/01/wordpress%E4%B8%80%E9%94%AE%E6%90%AC%E8%BF%81/</url>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>之前用的阿里云服务器快到期了，续费不起，买了台腾讯云服务器，3年300块，真香。香的同时，问题也来了，之前的网站怎么搬迁过来，同时我对之前的网站域名还不满意，想重新换一个新的。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>本来想把踩坑过程记录一下的，想想还是算了吧，总感觉罗里吧嗦的。直接把最正确最完美的一次做对的方案贴出来！</p><h5 id="导出-wpress文件"><a href="#导出-wpress文件" class="headerlink" title="导出.wpress文件"></a>导出.wpress文件</h5><p>首先安装<a href="https://wordpress.org/plugins/all-in-one-wp-migration/">All in one WP migration</a>插件，然后选择导出，导出的时候可以添加条件，把数据库的文件内容进行自定义的替换，特别适合要改域名的我，比如</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/image-1024x457.png"></p><p>然后下载到本地电脑，文件后缀是.wpress</p><h5 id="安装老版本插件"><a href="#安装老版本插件" class="headerlink" title="安装老版本插件"></a>安装老版本插件</h5><p>在新wordpress站点上，安装旧版本的All in one WP Migration插件（新版本的插件不能免费恢复备份）</p><p>下载地址<a href="https://webhostingadvices.com/wp-content/uploads/2020/05/all-in-one-wp-migration-6.7.zip">All-in-on WP Migration Plugin 6.7</a>，下载完后通过本地上传的方式安装插件</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/image-1.png"></p><h5 id="上传-wpress"><a href="#上传-wpress" class="headerlink" title="上传.wpress"></a>上传.wpress</h5><p>启用插件后，通过FTP工具把之前下载的.wpress文件上传到服务器这个文件夹中（网站根目录下的wp-content&#x2F;ai1wm-backups）</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/image-2.png"></p><h5 id="提高文件上传上限"><a href="#提高文件上传上限" class="headerlink" title="提高文件上传上限"></a>提高文件上传上限</h5><p>查找php.ini</p><pre><code>php -i  grep &#39;php.ini&#39;</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/image-3.png"></p><p>打开php.ini</p><pre><code>vim /www/server/php/70/etc/php.ini</code></pre><p>修改以下几个参数，由于我的.wpress大概780M，所以我把filesize改成了1024M，其他参数也可以根据需求调很大</p><pre><code>upload_max_filesize 128Mpost_max_size 128Mmemory_limit 256Mmax_execution_time 300max_input_time 300</code></pre><p>到这里只是解除了php服务的限制，插件本身还有限制，需要对插件进行编辑，选择插件-插件编辑器，右侧选中All in one WP Migration,点击选择，然后选择constants.php，编辑284行，size修改为如图（数字30原本是28），增大1就增大一倍，30的话限制上传是2G，够了</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/image-4-1024x409.png"></p><h5 id="恢复备份"><a href="#恢复备份" class="headerlink" title="恢复备份"></a>恢复备份</h5><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/image-5-1024x455.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/06/QQ%E6%88%AA%E5%9B%BE20210601193705-1024x435.png"></p><p>Done.</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows安装openssh</title>
    <link href="/2021/05/22/windows%E5%AE%89%E8%A3%85openssh/"/>
    <url>/2021/05/22/windows%E5%AE%89%E8%A3%85openssh/</url>
    
    <content type="html"><![CDATA[<h4 id="不吐不快（有戾气，未成年人请在家长陪同下阅读）"><a href="#不吐不快（有戾气，未成年人请在家长陪同下阅读）" class="headerlink" title="不吐不快（有戾气，未成年人请在家长陪同下阅读）"></a>不吐不快（有戾气，未成年人请在家长陪同下阅读）</h4><p>就装个SSH，网上一堆教程贼xx，真不知道哪里来的自信发出来，没图没逻辑没重点没上下文，我吐了</p><p>有些人真以为自己安装成功了就可以随便发几句话出来成为小白教程了？傻逼。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://github.com/PowerShell/Win32-OpenSSH/releases">https://github.com/PowerShell/Win32-OpenSSH/releases</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-35.png"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>解压到c:\Program Files\</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-36.png"></p><p>在OpenSSH-Win64文件夹中打开cmd</p><pre><code>powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1sc config sshd start= autonet start sshd</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-37.png"></p><p>添加环境变量</p><p>环境变量-系统变量-Path末尾添加;<code>C:\Program Files\OpenSSH-Win64</code></p><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>以上安装只针对windows作为客户端的情况</p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux服务器安装jupyter notebook</title>
    <link href="/2021/05/22/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85jupyter-notebook/"/>
    <url>/2021/05/22/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85jupyter-notebook/</url>
    
    <content type="html"><![CDATA[<p>用pip安装</p><pre><code>sudo pip3 install jupyter</code></pre><p>进入python3环境，设置密码，生成秘钥，复制下来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-33.png"></p><p>查找配置文件所在路径</p><pre><code>jupyter notebook --generate-config</code></pre><p>如果提示未找到命令，先找一下jupyter的安装目录</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/10/image.png"></p><p>根据路径打开配置文件jupyter_notebook_config.py,输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#允许root用户启动</span></span><br><span class="line">c.NotebookApp.allow_root = <span class="literal">True</span></span><br><span class="line"><span class="comment">#允许任意IP访问</span></span><br><span class="line">c.NotebookApp.ip=<span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="comment">#默认不打开浏览器，仅启动服务</span></span><br><span class="line">c.NotebookApp.open_browser=<span class="literal">False</span></span><br><span class="line"><span class="comment">#密钥</span></span><br><span class="line">c.NotebookApp.password=<span class="string">&#x27;argI******你的密钥**********zQ&#x27;</span></span><br><span class="line"><span class="comment">#端口号，记得放行</span></span><br><span class="line">c.NotebookApp.port=<span class="number">8888</span></span><br><span class="line"><span class="comment">#工作目录</span></span><br><span class="line">c.NotebookApp.notebook_dir=<span class="string">&#x27;/notebook_space&#x27;</span></span><br></pre></td></tr></table></figure><p>然后在任意终端的浏览器输入IP端口号就能打开了，密码是自己设置的passwd</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-34-1024x332.png"></p><p>为了方便，直接把jupyter notebook加入开机启动项</p><p>在&#x2F;etc&#x2F;rc.d&#x2F;rc.local中添加</p><pre><code>jupyter notebook</code></pre>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云服务器+wget+转储：解决网络造成的下载问题</title>
    <link href="/2021/05/21/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8wget%E8%BD%AC%E5%82%A8%EF%BC%9A%E8%A7%A3%E5%86%B3%E7%BD%91%E7%BB%9C%E9%80%A0%E6%88%90%E7%9A%84%E4%B8%8B%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
    <url>/2021/05/21/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8wget%E8%BD%AC%E5%82%A8%EF%BC%9A%E8%A7%A3%E5%86%B3%E7%BD%91%E7%BB%9C%E9%80%A0%E6%88%90%E7%9A%84%E4%B8%8B%E8%BD%BD%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>下载经常是一件让人头痛的事情，尤其是下载国外网站的资源，能用的国内镜像站很少且不稳定，归根到底还是网络环境不够好。</p><p>一种无需代理的解决方案是利用云服务器下载资源，再转存到本地， 因为云服务器的网络环境通常非常好（部分资源在国内云服务器上仍然无法下载，可以考虑用境外服务器下载）</p><p>下面举个例子，我特意找了一个之前下载列表里失败的一个条目，再次尝试下载，果然还是失败的，正好来拿测试</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/QQ%E6%88%AA%E5%9B%BE20210521151432.png"></p><p>复制下载链接，登上服务器，使用wget命令下载，畅通无阻，由于带宽限制不算特别快，但至少解决了完全无法下载的问题</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-31.png"></p><p>接下来就是从自己的服务器下载资源到本地了，例如我使用finalshell,直接选择下载即可</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-32-1024x678.png"></p><p>以后碰到下载方面的疑难杂症，优先考虑此方法，特此记录。</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows安装wget+用法</title>
    <link href="/2021/05/21/windows%E5%AE%89%E8%A3%85wget%E7%94%A8%E6%B3%95/"/>
    <url>/2021/05/21/windows%E5%AE%89%E8%A3%85wget%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>wget是一个轻量级的可配置下载工具</p><h4 id="windows下安装wget"><a href="#windows下安装wget" class="headerlink" title="windows下安装wget"></a>windows下安装wget</h4><p>下载地址-&gt;<a href="https://jaist.dl.sourceforge.net/project/gnuwin32/wget/1.11.4-1/">这里</a></p><p>安装时记住安装目录，这玩意儿压根不占空间，随他默认即可</p><p>在高级系统设置-环境变量-系统变量中添加一个字段</p><pre><code>GNU_HOME=C:\\Program Files (x86)\\GnuWin32</code></pre><p>在系统变量Path中添加;%GNU_HOME%\bin（win7注意前面有分号）</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-30.png"></p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p><strong>直接下载单个文件</strong> wget url</p><pre><code>wget https://down.qq.com/qqweb/PCQQ/PCQQ_EXE/PCQQ2021.exe</code></pre><p><strong>自定义文件名</strong> wget -O name url</p><p>wget默认会以最后一个符合”&#x2F;”的后面的字符来命令，对于动态链接的下载通常文件名会不正确。 </p><p>下面的例子会下载一个文件并以名称download.php?id&#x3D;1080保存 </p><pre><code>wget http://www.xxxx.xxx/download?id=1080</code></pre><p>即使下载的文件是zip格式，它仍然以download.php?id&#x3D;1080命名</p><p>为了解决这个问题，我们可以使用参数-O来指定一个文件名</p><pre><code>wget -O abc.zip http://www.xxxx.xxx/download.php?id=1080</code></pre><p><strong>断点续传</strong> wget -c</p><p>对于大文件下载时间较长，过程中可能会出现网络中断，这时使用wget -c url便可以续传</p><p><strong>后台下载</strong> wget -b</p><pre><code>wget -b url</code></pre><p>查看进度可以使用wget-log</p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件安装配置</tag>
      
      <tag>wget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LDA模型(gensim)中文主题提取</title>
    <link href="/2021/05/20/lda%E6%A8%A1%E5%9E%8B%E4%B8%AD%E6%96%87%E4%B8%BB%E9%A2%98%E6%8F%90%E5%8F%96/"/>
    <url>/2021/05/20/lda%E6%A8%A1%E5%9E%8B%E4%B8%AD%E6%96%87%E4%B8%BB%E9%A2%98%E6%8F%90%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>python版本3.7</p><pre><code>pip install gensimpip install jieba</code></pre><h4 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h4><p>数据很随意，没什么格式要求，像这样的都行</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-25-1024x596.png"></p><h4 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h4><p>把原始数据按行分词，去掉没用的部分</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-26-1024x388.png"></p><p>分词代码如下，可以一次转换单个txt或者整个文件夹（文件夹内不能有其他格式文件）</p><p>#coding&#x3D;utf-8<br>import re<br>import jieba as jb<br>import os<br>def stopwordslist(filepath):<br>    stopwords &#x3D; [line.strip() for line in open(filepath, ‘r’, encoding&#x3D;’utf-8’).readlines()]<br>    return stopwords</p><h1 id="对句子进行分词"><a href="#对句子进行分词" class="headerlink" title="对句子进行分词"></a>对句子进行分词</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">seg_sentence</span>(<span class="params">sentence</span>):</span><br><span class="line">    sentence = re.sub(<span class="string">u&#x27;[0-9\\.]+&#x27;</span>, <span class="string">u&#x27;&#x27;</span>, sentence)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;jb.add_word(&#x27;光线摄影学院&#x27;)# 这里是加入用户自定义的词来补充jieba词典。</span></span><br><span class="line"><span class="string">    jb.add_word(&#x27;曾兰老师&#x27;)# 同样，如果你想删除哪个特定的未登录词，就先把它加上然后放进停用词表里。</span></span><br><span class="line"><span class="string">    jb.add_word(&#x27;网页链接&#x27;)</span></span><br><span class="line"><span class="string">    jb.add_word(&#x27;微博视频&#x27;)&#x27;&#x27;&#x27;</span></span><br><span class="line">    sentence_seged = jb.cut(sentence.strip())</span><br><span class="line">    stopwords = stopwordslist(<span class="string">&#x27;stopwords.txt&#x27;</span>)  <span class="comment"># 这里加载停用词的路径</span></span><br><span class="line">    outstr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> sentence_seged:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopwords <span class="keyword">and</span> word.__len__()&gt;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> word != <span class="string">&#x27;\\t&#x27;</span>:</span><br><span class="line">                outstr += word</span><br><span class="line">                outstr += <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="keyword">return</span> outstr</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">seg_file</span>(<span class="params">input_file,output_file</span>):<span class="comment">#单个txt</span></span><br><span class="line">    inputs = <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    outputs = <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> inputs:</span><br><span class="line">        line_seg = seg_sentence(line)  <span class="comment"># 这里的返回值是字符串</span></span><br><span class="line">        outputs.write(line_seg + <span class="string">&#x27;\\n&#x27;</span>)</span><br><span class="line">    outputs.close()</span><br><span class="line">    inputs.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">seg_dir</span>(<span class="params">input_dir,output_dir</span>):<span class="comment">#整个文件夹</span></span><br><span class="line">    filelist=os.listdir(input_dir)</span><br><span class="line">    <span class="keyword">for</span> files <span class="keyword">in</span> filelist:</span><br><span class="line">        inputs = <span class="built_in">open</span>(input_dir+<span class="string">&#x27;/&#x27;</span>+files, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        outputs = <span class="built_in">open</span>(output_dir+<span class="string">&#x27;/&#x27;</span>+files, <span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> inputs:</span><br><span class="line">            line_seg = seg_sentence(line)  <span class="comment"># 这里的返回值是字符串</span></span><br><span class="line">            outputs.write(line_seg + <span class="string">&#x27;\\n&#x27;</span>)</span><br><span class="line">        outputs.close()</span><br><span class="line">        inputs.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seg_dir(<span class="string">&quot;original_input&quot;</span>,<span class="string">&quot;processed_input&quot;</span>)</span><br><span class="line"><span class="comment">#seg_file(&quot;original_input/绍兴.txt&quot;,&quot;processed_input/绍兴.txt&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h4><p>相关性强的词聚为一类</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-27.png"></p><p>聚类代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> gensim <span class="keyword">import</span> corpora</span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> LdaModel</span><br><span class="line"><span class="keyword">from</span> gensim.corpora <span class="keyword">import</span> Dictionary</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">classify</span>(<span class="params">file</span>):</span><br><span class="line">    train = []</span><br><span class="line">    fp = codecs.<span class="built_in">open</span>(<span class="string">&#x27;processed_input/&#x27;</span>+file,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fp:</span><br><span class="line">        <span class="keyword">if</span> line != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            line = line.split()</span><br><span class="line">            train.append([w <span class="keyword">for</span> w <span class="keyword">in</span> line])</span><br><span class="line"></span><br><span class="line">    dictionary = corpora.Dictionary(train)</span><br><span class="line"></span><br><span class="line">    corpus = [dictionary.doc2bow(text) <span class="keyword">for</span> text <span class="keyword">in</span> train]</span><br><span class="line"></span><br><span class="line">    lda = LdaModel(corpus=corpus, id2word=dictionary, num_topics=<span class="number">5</span>, passes=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># num_topics：主题数目</span></span><br><span class="line">    <span class="comment"># passes：训练伦次</span></span><br><span class="line">    <span class="comment"># num_words：每个主题下输出的term的数目</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;txt_output/&#x27;</span>+file):</span><br><span class="line">        os.remove(<span class="string">&#x27;txt_output/&#x27;</span>+file)</span><br><span class="line">    f=<span class="built_in">open</span>(<span class="string">&#x27;txt_output/&#x27;</span>+file,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> topic <span class="keyword">in</span> lda.print_topics(num_words = <span class="number">10</span>):</span><br><span class="line">        termNumber = topic[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(topic[<span class="number">0</span>], <span class="string">&#x27;:&#x27;</span>, sep=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(topic[<span class="number">0</span>])+<span class="string">&#x27;:\\n&#x27;</span>)<span class="comment">#输出保存到文件</span></span><br><span class="line">        listOfTerms = topic[<span class="number">1</span>].split(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> term <span class="keyword">in</span> listOfTerms:</span><br><span class="line">            listItems = term.split(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">            result=<span class="string">&#x27;  &#x27;</span>+listItems[<span class="number">1</span>]+<span class="string">&#x27;(&#x27;</span>+<span class="built_in">str</span>(listItems[<span class="number">0</span>])+<span class="string">&#x27;)&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">            f.write(result+<span class="string">&#x27;\\n&#x27;</span>)<span class="comment">#输出保存到文件</span></span><br><span class="line">    f.close()</span><br><span class="line">classify(<span class="string">&#x27;塞纳河.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><p>添加依赖</p><pre><code>pip install pyldavis</code></pre><p>在聚类代码的基础上，增加可视化，保存网页文件到本地</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gensim</span><br><span class="line"><span class="keyword">import</span> OpenSSL.crypto</span><br><span class="line"><span class="keyword">import</span> pyLDAvis.gensim_models</span><br><span class="line"><span class="keyword">from</span> gensim <span class="keyword">import</span> corpora, models</span><br><span class="line"><span class="keyword">from</span> gensim.corpora <span class="keyword">import</span> Dictionary</span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> LdaModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visualize</span>(<span class="params">file</span>):</span><br><span class="line">    train = []</span><br><span class="line">    fp = codecs.<span class="built_in">open</span>(<span class="string">&#x27;processed_input/&#x27;</span>+file,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fp:</span><br><span class="line">        <span class="keyword">if</span> line != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            line = line.split()</span><br><span class="line">            train.append([w <span class="keyword">for</span> w <span class="keyword">in</span> line])</span><br><span class="line"></span><br><span class="line">    dictionary = corpora.Dictionary(train)</span><br><span class="line"></span><br><span class="line">    corpus = [dictionary.doc2bow(text) <span class="keyword">for</span> text <span class="keyword">in</span> train]</span><br><span class="line"></span><br><span class="line">    lda = LdaModel(corpus=corpus, id2word=dictionary, num_topics=<span class="number">5</span>, passes=<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># num_topics：主题数目</span></span><br><span class="line">    <span class="comment"># passes：训练伦次</span></span><br><span class="line">    <span class="comment"># num_words：每个主题下输出的term的数目</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;txt_output/&#x27;</span>+file):</span><br><span class="line">        os.remove(<span class="string">&#x27;txt_output/&#x27;</span>+file)</span><br><span class="line">    f=<span class="built_in">open</span>(<span class="string">&#x27;txt_output/&#x27;</span>+file,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> topic <span class="keyword">in</span> lda.print_topics(num_words = <span class="number">10</span>):</span><br><span class="line">        termNumber = topic[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(topic[<span class="number">0</span>], <span class="string">&#x27;:&#x27;</span>, sep=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(topic[<span class="number">0</span>])+<span class="string">&#x27;:\\n&#x27;</span>)<span class="comment">#输出保存到文件</span></span><br><span class="line">        listOfTerms = topic[<span class="number">1</span>].split(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> term <span class="keyword">in</span> listOfTerms:</span><br><span class="line">            listItems = term.split(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">            result=<span class="string">&#x27;  &#x27;</span>+listItems[<span class="number">1</span>]+<span class="string">&#x27;(&#x27;</span>+<span class="built_in">str</span>(listItems[<span class="number">0</span>])+<span class="string">&#x27;)&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">            f.write(result+<span class="string">&#x27;\\n&#x27;</span>)<span class="comment">#输出保存到文件</span></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="comment">#dictionary = gensim.corpora.Dictionary.load(&#x27;lda.dict&#x27;)</span></span><br><span class="line">    <span class="comment">#corpus = gensim.corpora.MmCorpus(&#x27;lda.mm&#x27;)</span></span><br><span class="line">    <span class="comment">#lda = models.ldamodel.LdaModel.load(&#x27;lda.lda&#x27;)</span></span><br><span class="line">    vis = pyLDAvis.gensim_models.prepare(lda, corpus, dictionary)</span><br><span class="line">    pyLDAvis.save_html(vis, <span class="string">&#x27;html_output/&#x27;</span>+file[:-<span class="number">4</span>]+<span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">visualize(<span class="string">&quot;绍兴.txt&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-28-1024x646.png"></p><h4 id="可视化结果的含义"><a href="#可视化结果的含义" class="headerlink" title="可视化结果的含义"></a>可视化结果的含义</h4><p>左边的每个气泡代表一个主题，气泡越大，序号也越小，代表这个主题出现的频率越高，气泡之间的距离远近代表主题之间的相关性，气泡重叠代表主题之间的特征词有交叉重复</p><p>选中主题气泡后，右侧列出了这个主题下的30个最具相关性的主题词，红色柱子代表该特征词在这个主题下出现的次数，更长的浅蓝色柱子代表该主题词在整个文本中出现的次数</p><p>右上角的λ参数，可以通过拉动调节，代表的是主题词与主题的相关性。如果λ接近1，那么在该主题下更频繁出现的词，跟主题更相关；如果λ越接近0，那么该主题下更特殊、更独有的词，跟主题更相关。</p><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>目录格式如下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-29.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>LDA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda国内镜像源3个</title>
    <link href="/2021/05/20/anaconda%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%903%E4%B8%AA/"/>
    <url>/2021/05/20/anaconda%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%903%E4%B8%AA/</url>
    
    <content type="html"><![CDATA[<h4 id="北京外国语大学镜像源"><a href="#北京外国语大学镜像源" class="headerlink" title="北京外国语大学镜像源"></a>北京外国语大学镜像源</h4><pre><code>channels:  - defaultsshow_channel_urls: truechannel_alias: https://mirrors.bfsu.edu.cn/anacondadefault_channels:  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/main  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/free  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/r  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/pro  - https://mirrors.bfsu.edu.cn/anaconda/pkgs/msys2custom_channels:  conda-forge: https://mirrors.bfsu.edu.cn/anaconda/cloud  msys2: https://mirrors.bfsu.edu.cn/anaconda/cloud  bioconda: https://mirrors.bfsu.edu.cn/anaconda/cloud  menpo: https://mirrors.bfsu.edu.cn/anaconda/cloud  pytorch: https://mirrors.bfsu.edu.cn/anaconda/cloud  simpleitk: https://mirrors.bfsu.edu.cn/anaconda/cloud</code></pre><h4 id="上海交通大学镜像源"><a href="#上海交通大学镜像源" class="headerlink" title="上海交通大学镜像源"></a>上海交通大学镜像源</h4><pre><code>channels:  - defaultsshow_channel_urls: truechannel_alias: https://anaconda.mirrors.sjtug.sjtu.edu.cn/default_channels:  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/main  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/free  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/mro  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/msys2  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/pro  - https://anaconda.mirrors.sjtug.sjtu.edu.cn/pkgs/rcustom_channels:  conda-forge: https://anaconda.mirrors.sjtug.sjtu.edu.cn/conda-forge  soumith: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/soumith  bioconda: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/bioconda  menpo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/menpo  viscid-hub: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/viscid-hub  atztogo: https://anaconda.mirrors.sjtug.sjtu.edu.cn/cloud/atztogo</code></pre><h4 id="清华大学镜像源"><a href="#清华大学镜像源" class="headerlink" title="清华大学镜像源"></a>清华大学镜像源</h4><pre><code>channels:  - defaultsshow_channel_urls: truechannel_alias: https://mirrors.tuna.tsinghua.edu.cn/anacondadefault_channels:  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2custom_channels:  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</code></pre>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cudnn安装</title>
    <link href="/2021/05/19/cudnn%E5%AE%89%E8%A3%85/"/>
    <url>/2021/05/19/cudnn%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>上一篇已经介绍了cuda的安装方法</p><p>于是我尝试运行一个paddle样例，报错，最前面的提示信息是这样的，好的我看懂了</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-20-1024x129.png"></p><p>所以，cudnn是什么？</p><p><em>cuDNN（CUDA Deep Neural Network library）：是NVIDIA打造的针对深度神经网络的加速库，是一个用于深层神经网络的GPU加速库。 如果你要用GPU训练模型，cuDNN不是必须的，但是一般会采用这个加速库。</em></p><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p><a href="https://developer.nvidia.com/rdp/cudnn-download">下载地址</a>下载前需要注册登录NVIDIA账号</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/QQ%E6%88%AA%E5%9B%BE20210519135720.png"></p><p>登录后重新打开下载链接</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/QQ%E6%88%AA%E5%9B%BE20210519140216.png"></p><p>下载完成后解压，然后把bin、include、lib目录下的文件复制到cuda安装目录下的bin、include、lib目录</p><p>这是cuda安装的默认路径C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2</p><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><p>在CUDA文件夹中打开cmd</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-22.png"></p><p>输入.\bandwidthTest.exe和.\deviceQuery.exe，result&#x3D;PASS即可</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-24-1024x493.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cuda安装</title>
    <link href="/2021/05/18/cuda%E5%AE%89%E8%A3%85/"/>
    <url>/2021/05/18/cuda%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="确定安装版本"><a href="#确定安装版本" class="headerlink" title="确定安装版本"></a>确定安装版本</h4><p>首先查看显卡信息，一般都是用的英伟达显卡，打开NVIDIA控制面板-帮助-系统信息-显示，查看驱动程序版本</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-9.png"></p><p>使用驱动精灵查看可更新的驱动版本（只用于查看，不需要在这更新驱动，cuda安装时会自动更新驱动）</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-10-1024x664.png"></p><p>最后对照这张<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">表</a>，查看可以安装的cuda版本，对于我的机器而言，更新驱动后最高能安装cuda10.2版本</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-12-1024x504.png"></p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>在<a href="https://developer.nvidia.com/cuda-toolkit-archive">这里</a>选择我要安装的版本</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-14.png"></p><p>点击下载链接</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-13-1024x490.png"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>打开安装包，默认路径即可，保证C盘空间充足</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-15.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-16.png"></p><p>安装完成后再次打开NVIDIA控制面板-帮助-系统信息</p><p>驱动成功更新</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-17.png"></p><p>cuda10.2也安装成功</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-18.png"></p><p>cmd输入nvcc -V能看到版本号</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-19.png"></p><p>Done.</p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cloudflare域名重定向</title>
    <link href="/2021/05/11/cloudflare%E5%9F%9F%E5%90%8D%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <url>/2021/05/11/cloudflare%E5%9F%9F%E5%90%8D%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>将<a href="https://www.xinhaojin.top,https//xinhaojin.top%E4%B8%A4%E4%B8%AA%E5%9F%9F%E5%90%8D%E9%83%BD%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0https://main.xinhaojin.top">https://www.xinhaojin.top,https://xinhaojin.top两个域名都重定向到https://main.xinhaojin.top</a></p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>使用cloudflare管理域名</p><p>修改DNS的A记录，地址解析到任意DNS解析服务器，如114.114.114,8.8.8.8,223.5.5.5等(建议使用阿里云公共DNS)，代理状态选择代理</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-6-1024x471.png"></p><p>选择页面规则，新建规则</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-7-1024x490.png"></p><p>选择转发URL，301重定向</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/image-8.png"></p><p>这就完成了从<a href="http://www.xinhaojin.top到main.xinhaojin.top的重定向/">www.xinhaojin.top到main.xinhaojin.top的重定向</a></p><p>Done.</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloudflare</tag>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode写Java</title>
    <link href="/2021/04/27/vscode%E5%86%99java/"/>
    <url>/2021/04/27/vscode%E5%86%99java/</url>
    
    <content type="html"><![CDATA[<p>首先要有Java JDK环境，写在上一篇<br><a href="https://xinhaojin.github.io/2021/04/27/win10-java-se-jdk%E5%AE%89%E8%A3%85/">https://xinhaojin.github.io/2021/04/27/win10-java-se-jdk安装/</a></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>扩展程序搜java就行，主要是安装language support</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-38.png"></p><p>安装好后在设置里搜索java.home</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-39.png"></p><p>设置里搜索java runtime，选择已安装的jdk，然后reload window</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-50-1024x427.png"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>ctrl+shift+p输入java，选择创建新项目</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-42.png"></p><p>选择no build tools</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-43.png"></p><p>选择文件夹</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-44.png"></p><p>输入项目名</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-45.png"></p><p>生成了项目文件，选择app.java</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-51.png"></p><p>helloworld输出成功</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-52-1024x674.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10 Java JDK安装（Oracle/OpenJDK）</title>
    <link href="/2021/04/27/win10-java-se-jdk%E5%AE%89%E8%A3%85/"/>
    <url>/2021/04/27/win10-java-se-jdk%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="Oracle版本（安装相对较复杂）"><a href="#Oracle版本（安装相对较复杂）" class="headerlink" title="Oracle版本（安装相对较复杂）"></a>Oracle版本（安装相对较复杂）</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></p><p>选择版本</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-33.png"></p><p>选择平台</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/QQ%E6%88%AA%E5%9B%BE20210427200447-1024x375.png"></p><p>现在下载好像要Oracle账号了……没有的注册一个吧</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>选择路径即可</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/QQ%E6%88%AA%E5%9B%BE20210427201237.png"></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>高级系统设置-环境变量-用户变量，添加或修改3个变量：</p><p>JAVA_HOME      C:\Program Files\Java\jdk1.8.0_291\</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/QQ%E6%88%AA%E5%9B%BE20210427202303-1.png"></p><p>Path       %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/QQ%E6%88%AA%E5%9B%BE20210427202436.png"></p><p>CLASSPATH    .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/QQ%E6%88%AA%E5%9B%BE20210427202529.png"></p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>cmd输入java有内容就对了</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-35.png"></p><p>java -version查看版本</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-36.png"></p><h3 id="OpenJDK版本（超级方便）"><a href="#OpenJDK版本（超级方便）" class="headerlink" title="OpenJDK版本（超级方便）"></a>OpenJDK版本（超级方便）</h3><p>从GitHub下载，如<a href="https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/">openjdk15</a>，windows直接选择msi下载</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-47.png"></p><p>安装时下面两项默认没有勾选，可以选一下，然后一直下一步就行</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-48.png"></p><p>这样就安装好了</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-49.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VL53L0X激光测距（树莓派）</title>
    <link href="/2021/04/27/vl53l0x%E6%BF%80%E5%85%89%E6%B5%8B%E8%B7%9D%EF%BC%88%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%89/"/>
    <url>/2021/04/27/vl53l0x%E6%BF%80%E5%85%89%E6%B5%8B%E8%B7%9D%EF%BC%88%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>上篇曾提到超声波测距非常不准，所以花10块钱在淘宝买了个激光测距传感器VL53L0X（便宜才买的），特此记录配置过程</p><h4 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h4><p>有4个引脚需要接</p><p>VIN接3-5V电源；GND接地；SDA和SCL接树莓派上对应的SDA和SCL</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-32.png"></p><p>那么怎么判断接线是否正确呢？可以查看I2C设备地址，如果接线后I2C设备多了一个，那就基本没错了</p><p>开启I2C</p><pre><code>sudo raspi-config #依次选择Interfacing Options---I2C---Enabled</code></pre><p>查看I2C设备地址</p><pre><code>sudo i2cdetect -y 1</code></pre><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><p>VL53L0X是有一个专门的包的，可以通过pip安装</p><p>但我尝试pip安装后提示没有可用的版本,查看pypi后发现仅支持到python3.5，而我用的是python3.7</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-31-1024x535.png"></p><p>抱着侥幸的心理下载3.5的包，本地安装时把包名改成3.7的，安装成功，但是跑了样例代码还是不对，判断下来是安装的问题，于是又把这个包卸载了</p><h4 id="正确方法"><a href="#正确方法" class="headerlink" title="正确方法"></a>正确方法</h4><p>换个安装方法，上<a href="https://github.com/pimoroni/VL53L0X-python">GitHub</a>一搜，果然有源码安装方法</p><pre><code>sudo apt-get install build-essential python-dev#前置条件pip install git+https://github.com/pimoroni/VL53L0X-python.gitcd your_directory#选择你的目录git clone https://github.com/pimoroni/VL53L0X_rasp_python.gitcd VL53L0X-pythonmake</code></pre><p>然后在VL53L0X-python文件夹中，有一个VL53L0X_example.py，就是样例代码，能跑通就可以了</p><p>整体精度表现碾压超声波没有悬念</p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
      <tag>激光测距</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>针对指定参考物的单目摄像头测距</title>
    <link href="/2021/04/26/%E9%92%88%E5%AF%B9%E6%8C%87%E5%AE%9A%E5%8F%82%E8%80%83%E7%89%A9%E7%9A%84%E5%8D%95%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%B5%8B%E8%B7%9D/"/>
    <url>/2021/04/26/%E9%92%88%E5%AF%B9%E6%8C%87%E5%AE%9A%E5%8F%82%E8%80%83%E7%89%A9%E7%9A%84%E5%8D%95%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%B5%8B%E8%B7%9D/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>测距是智能小车上常备的一项功能，常见方案有超声波测距、红外线测距、激光测距，其中超声波测距非常鸡肋，仅仅对于大平面能起到良好的超声波反射效果，其他情况几乎无法测量距离，红外和激光测距应该是性能较好的，不过目前尚未使用。此外，考虑到我的智能小车上有一个摄像头，我的应用又是目标检测，正好能框出指定物体的轮廓，根据 近 <strong>大</strong> 远 <em>小</em> 的原理，理论上来讲，通过判断矩形框的大小应该可以推断物体离摄像头的距离，于是尝试使用摄像头进行测距实验。</p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>一句话概括：手动标记多个<strong>点</strong>，进行多项式拟合，得到矩形框参数与距离之间的映射关系。</p><p>已知矩形框的宽度，把它作为自变量x，同时进行实际测量，测量值distance作为因变量。多换几个位置，再进行测量，就得到了多个x-distance，把它看做多个已知点，然后进行多项式拟合。</p><p>这种常用的东西一般都会有免费的在线工具，一搜就有。如<a href="http://www.qinms.com/webapp/curvefit/cf.aspx">这个</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-28.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-29.png"></p><p>拟合的时候要查看拟合结果是否良好，有些时候拟合的结果对于实数范围内总体良好，但在实际使用场景的范围内不一定好，这时候建议换一下最高次数再次尝试，上面我这个结果就算还不错。</p><p>根据拟合方程式，就得到了x-distance的映射关系，之后就能通过目标检测的矩形框宽度，来推算距离了，实际误差也在3cm以内，可以接受</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-27-1024x805.png"></p><p>Done.</p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
      <tag>单目摄像头测距</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>甲骨文云（Oracle Cloud）nginx启动失败（端口被占用）</title>
    <link href="/2021/04/24/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%EF%BC%88oracle-cloud%EF%BC%89nginx%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%EF%BC%88%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%EF%BC%89/"/>
    <url>/2021/04/24/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BA%91%EF%BC%88oracle-cloud%EF%BC%89nginx%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%EF%BC%88%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>甲骨文云创建实例后，始终有进程占用80端口，导致nginx无法正常启用默认80端口，非常不方便</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-25.png"></p><p>当然可以kill之后再尝试，但是这明显是开启自启的服务，kill一次，还会有千千万万次</p><p>对于centos,终端输入ntsysv,查看所有服务</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-26.png"></p><p>方向键选择，找到相关的，按空格设置或取消服务，按tanab键切到下方按钮</p><p>这里明显需要关闭红框中的服务,也可以直接用命令</p><pre><code>systemctl stop oracle-cloud-agentsystemctl disable oracle-cloud-agentsystemctl stop oracle-cloud-agent-updatersystemctl disable oracle-cloud-agent-updater</code></pre><p>对于Ubuntu&#x2F;Debian，使用service –status-all查看服务</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cenos7修改ssh端口号</title>
    <link href="/2021/04/17/cenos7%E4%BF%AE%E6%94%B9ssh%E7%AB%AF%E5%8F%A3%E5%8F%B7/"/>
    <url>/2021/04/17/cenos7%E4%BF%AE%E6%94%B9ssh%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>以前真没想过会有人攻击我的服务器，所以也就没改ssh默认端口，直到我看到这个</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/QQ%E6%88%AA%E5%9B%BE20210417012556.png"></p><p>我看了下，从4月13号开始，连续攻击了4天，滚犊子玩意儿，nmd，改端口！</p><p>打开ssh配置文件</p><pre><code>vim /etc/ssh/sshd_config</code></pre><p>找到port，取消注释，改为自定义端口</p><p>重启ssh服务</p><pre><code>/etc/init.d/sshd restart</code></pre><p>添加防火墙放行规则，如修改ssh端口为xxx,则</p><pre><code>iptables -I INPUT  -p tcp --dport xxx -j ACCEPT</code></pre><p>有宝塔面板的记得在安全组中放行对应端口，有云服务器供应商提供的控制台的也在安全组中放行对应端口，顺便把默认22端口禁了</p><p>Done.</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yolov5训练自己的数据集</title>
    <link href="/2021/04/12/yolo5%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2021/04/12/yolo5%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><p><a href="https://xinhaojin.github.io/2021/04/12/yolov5%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">yolov5的环境配置</a></p><p><a href="https://xinhaojin.github.io/2021/04/12/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B-%E5%88%B6%E4%BD%9C%E6%95%B0%E6%8D%AE%E9%9B%86/">制作yolov5数据集</a></p><h4 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h4><p>1.复制data目录下的coco.yaml，重命名为自定义的，如test.yaml</p><p>要修改的内容是，图片路径，类别数，类别名称</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-9-1024x416.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-10.png"></p><p>可以看到我修改后的图片路径的表达方式不同，是直接给出图片的目录，建议就像我这样改，目录结构在之前文章中介绍过</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-11.png"></p><p>2.修改weights目录下的yolov5s.yaml（要用哪个就修改哪个）</p><p>修改内容是类别数目</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-12.png"></p><p>3.修改根目录下的train.py</p><p>修改内容为几个重要参数，如上配置的话，就应该这样修改</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-14-1024x291.png"></p><p>其中epochs是迭代次数，默认300，时间太久了，先改小一点试试，batch-size貌似跟显卡配置和内存有关，建议也先改小一点试试</p><p>执行train.py就可以开始训练了，结果如下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-15-1024x616.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-17-1024x420.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-18-1024x775.png"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>编辑根目录下的test.py</p><p>修改权重文件为以上训练出的结果（上图标红），其他参数修改如下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-19-1024x353.png"></p><p>执行test.py后就会去识别测试集中的图片</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-21-1024x99.png"></p><p>像我这样的一个简单目标是很容易检测出来的</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/test_batch0_pred-1024x474.jpg"></p><h4 id="正向推理"><a href="#正向推理" class="headerlink" title="正向推理"></a>正向推理</h4><p>编辑detect.py，同样地，修改主要参数，训练出的权重文件和想要测试的图片文件夹路径</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-22-1024x197.png"></p><p>结果如下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-23.png"></p>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目标检测-制作数据集</title>
    <link href="/2021/04/12/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B-%E5%88%B6%E4%BD%9C%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2021/04/12/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B-%E5%88%B6%E4%BD%9C%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h4 id="图像采集"><a href="#图像采集" class="headerlink" title="图像采集"></a>图像采集</h4><p>可以自己拍照，或者是搜集网络图片，我都试了一下，感觉自己拍的更好一些，原因有二，一是自己拍的图片尺寸风格都一致，更好处理，二是网络上的图片五花八门，差异太大，对于初学者来说，这些图片的组合可能很难轻易训练出一个好的结果，新手很难在短时间内获得成就感。</p><h4 id="图像预处理"><a href="#图像预处理" class="headerlink" title="图像预处理"></a>图像预处理</h4><p>图片批量改名</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rename</span>():</span><br><span class="line">    <span class="comment">#path=input(&quot;请输入路径(例如D:\\picture)：&quot;)</span></span><br><span class="line">    <span class="comment">#name=input(&quot;请输入开头名:&quot;)</span></span><br><span class="line">    <span class="comment">#startNumber=input(&quot;请输入开始数:&quot;)</span></span><br><span class="line">    <span class="comment">#fileType=input(&quot;请输入后缀名（如 .jpg、.txt等等）:&quot;)</span></span><br><span class="line">    path=<span class="string">r&quot;C:\\Users\\Administrator\\Desktop\\pic&quot;</span></span><br><span class="line">    name=<span class="string">&quot;&quot;</span></span><br><span class="line">    startNumber=<span class="string">&quot;10000&quot;</span></span><br><span class="line">    fileType=<span class="string">&quot;.jpg&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在生成以&quot;</span>+name+startNumber+fileType+<span class="string">&quot;迭代的文件名&quot;</span>)</span><br><span class="line">    count=<span class="number">1</span></span><br><span class="line">    filelist=os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> files <span class="keyword">in</span> filelist:</span><br><span class="line">        Olddir=os.path.join(path,files)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(Olddir):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        Newdir=os.path.join(path,name+<span class="built_in">str</span>(count+<span class="built_in">int</span>(startNumber))+fileType)</span><br><span class="line">        os.rename(Olddir,Newdir)</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;一共修改了&quot;</span>+<span class="built_in">str</span>(count)+<span class="string">&quot;个文件&quot;</span>)</span><br><span class="line"></span><br><span class="line">rename() </span><br></pre></td></tr></table></figure><p>深度学习按像素来进行计算，在不明显失真的情况下，建议先压缩图片，可以大大提高计算速度，尤其是手机拍的图片，比如我的手机拍的照片尺寸4000<em>1800，我把它按比例调整到了800</em>360</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提取目录下所有图片,更改尺寸后保存到另一目录</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convertjpg</span>(<span class="params">jpgfile,outdir,width=<span class="number">800</span>,height=<span class="number">360</span></span>):</span><br><span class="line">  img=Image.<span class="built_in">open</span>(jpgfile)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span>(img.width&lt;img.height):<span class="comment">#长宽颠倒的情况(手机横排竖排的区别)</span></span><br><span class="line">        img = img.transpose(Image.ROTATE_90)</span><br><span class="line">    new_img=img.resize((width,height),Image.BILINEAR)  </span><br><span class="line">    new_img.save(os.path.join(outdir,os.path.basename(jpgfile)))</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">for</span> jpgfile <span class="keyword">in</span> glob.glob(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\pic\\*.jpg&quot;</span>):</span><br><span class="line">  convertjpg(jpgfile,<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\xml&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="图像标注"><a href="#图像标注" class="headerlink" title="图像标注"></a>图像标注</h4><p>所谓图像标注就是框出图像中的某个对象，并且标记这个对象应属于哪一类。</p><p>标注后生成的文件格式通常是xml(voc)或者txt(yolo),图片和标注文件的一一对应的批量集合，就是数据集。</p><p>标注软件可以使用labelimg，<a href="https://blog.csdn.net/weixin_41010198/article/details/106378404">这篇文章</a>写得还不错，可以参考一下，我的总结是：</p><p>安装：pip install labelimg -i <a href="http://mirrors.aliyun.com/pypi/simple">http://mirrors.aliyun.com/pypi/simple</a></p><p>打开：cmd输入labelimg</p><p>标注（打框）：英文输入法下按w</p><p>保存：软件左上角设置好保存目录，ctrl+s</p><p>下一张图：英文输入法下按d</p><p>切换导出格式和设置默认标签：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-8-1024x545.png"></p><p>标注完后把图片整理到images文件夹，标注文件放到labels文件夹，再进行分割，目录结构如下</p><pre><code>images      train      val      testlabels      train      val</code></pre><h4 id="Done"><a href="#Done" class="headerlink" title="Done."></a>Done.</h4>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据集</tag>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yolov5的环境配置</title>
    <link href="/2021/04/12/yolov5%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/04/12/yolov5%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-7.png"></p><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><p>官方地址<a href="https://github.com/ultralytics/yolov5">https://github.com/ultralytics/yolov5</a></p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>下载完成后解压，进入requirement.txt所在目录，执行</p><p>pip install -r requirements.txt</p><p>或者，你可以直接查看requirement.txt内的版本要求，实际测试中发现略低于这些版本也可使用，以下版本已经是我略降低后的标准</p><p># pip install -r requirements.txt</p><pre><code># base ----------------------------------------matplotlib&gt;=3.2.2numpy&gt;=1.18.5opencv-python&gt;=4.1.2PillowPyYAML&gt;=5.3.1scipy&gt;=1.4.1torch&gt;=1.7.0torchvision&gt;=0.8.1tqdm&gt;=4.41.0# logging -------------------------------------tensorboard&gt;=2.4.1# wandb# plotting ------------------------------------seaborn&gt;=0.11.0pandas# export --------------------------------------# coremltools&gt;=4.1# onnx&gt;=1.8.1# scikit-learn==0.19.2  # for coreml quantization# extras --------------------------------------thop  # FLOPS computationpycocotools&gt;=2.0  # COCO mAP</code></pre><p>安装步骤看起来简单，装起来是真的不容易，由于网络问题，最好先将pip换源，我自己使用清华源时经常出错，阿里云镜像源好像更加稳定一些，如安装xxx依赖包，可使用以下命令从阿里云镜像源加速下载</p><pre><code>pip install xxx -i http://mirrors.aliyun.com/pypi/simple</code></pre><p>在win10上安装还好说一点，我的最终应用平台是树莓派，装起来更加艰难，印象中比较难安装的是opencv、torch、matplotlib，如果在线安装失败，建议直接选择下载包到本地手动安装，其中最难的是torch1.7以上版本的安装，我发现在Debian10系统下，pip install torch只支持到torch0.4的版本，在官网又找不到树莓派支持的版本，下载了好几个都说平台不支持，最后在网上找到了树莓派可用的版本**<a href="https://gitee.com/jin_xin_hao/pytorch-armv7l">pytorch-armv7l</a>**，写本文的时候突然上不去GitHub，此链接是克隆在码云上的项目</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>这么复杂的环境，装完总要验证一下才放心。运行detect.py，source参数改为0，即调用摄像头</p><pre><code>python detect.py --source=0 --weights=&quot;weights/yolov5s.pt&quot;</code></pre><p>其中pt文件是权重文件，源码中没有自带，需要自行下载</p><p>在weights文件夹中，有一个download_weights.sh文件，内容如下，写明了权重文件的下载方式，默认是会自动下载，但往往也因为网络问题很难一次下载成功</p><pre><code>#!/bin/bash# Download latest models from https://github.com/ultralytics/yolov5/releases# Usage:#    $ bash weights/download_weights.shpython - &lt;&lt;EOFfrom utils.google_utils import attempt_downloadfor x in [&#39;s&#39;, &#39;m&#39;, &#39;l&#39;, &#39;x&#39;]:    attempt_download(f&#39;yolov5&#123;x&#125;.pt&#39;)EOF</code></pre><p>这里也放上<a href="https://xinhaojin.lanzous.com/iHb5xnza7mh">蓝奏云链接</a>，不过只有一个yolov5s.pt，这是官方给的最小最快的模型，下载下来放在weights文件夹下即可，如果一切顺利，则会调取摄像头识别物体。</p><h4 id="Done"><a href="#Done" class="headerlink" title="Done."></a>Done.</h4>]]></content>
    
    
    <categories>
      
      <category>目标检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python you-get下载网站的高清视频</title>
    <link href="/2021/04/08/%E4%B8%80%E7%A7%8D%E9%AB%98%E9%80%BC%E6%A0%BC%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99%E7%9A%84%E9%AB%98%E6%B8%85%E8%A7%86%E9%A2%91%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2021/04/08/%E4%B8%80%E7%A7%8D%E9%AB%98%E9%80%BC%E6%A0%BC%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%AB%99%E7%9A%84%E9%AB%98%E6%B8%85%E8%A7%86%E9%A2%91%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>然后安装工具包you-get</p><pre><code>pip install you-get  --user</code></pre><p>（添加–user是防止权限不够）</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/frc-24638666a79a06cf463dc80738373c87.png"></p><p>到此为止环境全部安装成功！就是这么简单</p><p>接下来直奔主题，找到我们想要下载的视频，复制网址</p><p>例如，腾讯视频最新一期的吐槽大会</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/frc-a5bd4da209b06aea93d621e4e7cd9100.png"></p><p>直接下载</p><p>you-get   网址</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/frc-1ea81a81a0694083efca7c3ee3229b16.png"></p><p>下载成功，路径是前面这一段，这里是桌面</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/frc-fa7dc37930434cda9de6680a92c2eb35.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/frc-83f37026375ac95c3b306afc14573df0.png"></p><p>想要下载到指定文件夹，建议打开那个文件夹，使用法3打开命令行，简单快捷</p><p>再试一次，B站视频，华农给小羊治病</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/frc-d89514ce7fc1a460cf23faa0fa68e16d.png"></p><p>下载成功，而且是1080p的</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/05/frc-796be781caceda7dbce461438786e51f.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视频下载</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>局域网IP查看</title>
    <link href="/2021/04/06/%E5%B1%80%E5%9F%9F%E7%BD%91ip%E6%9F%A5%E7%9C%8B/"/>
    <url>/2021/04/06/%E5%B1%80%E5%9F%9F%E7%BD%91ip%E6%9F%A5%E7%9C%8B/</url>
    
    <content type="html"><![CDATA[<p>cmd命令窗口输入ipconfig,找到当前使用的网卡的IPv4地址</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image.png"></p><p>记住前3个数，那么我们要找的局域网内其他设备的IP基本上就是192.168.54.xxx</p><p>输入for &#x2F;L %i IN (1,1,254) DO ping -w 2 -n 1 192.168.54.%i，等待运行完成</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-2.png"></p><p>输入arp -a，查看局域网内其它设备的IP，其中192.168.54.xxx的，且物理地址不全为f的，就是要找的设备</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-4.png"></p><p>更好的方法</p><p><a href="https://xinhaojin.github.io/2022/02/25/%E5%88%97%E5%87%BA%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E5%8F%AFping%E9%80%9A%E7%9A%84ip/">列出局域网内可Ping通的IP</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>局域网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jupyter notebook默认目录修改</title>
    <link href="/2021/03/29/jupyter-notebook%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E4%BF%AE%E6%94%B9/"/>
    <url>/2021/03/29/jupyter-notebook%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<p>打开环境终端，输入</p><pre><code>jupyter notebook --generate-config</code></pre><p>生成配置文件</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/03/image-2.png"></p><p>根据提示路径打开配置文件，搜索dir快速定位，修改默认目录，文件夹需自己新建</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/03/image-3.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh反向代理实现内网穿透</title>
    <link href="/2021/03/05/ssh%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/03/05/ssh%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h4><table><thead><tr><th>服务器</th><th align="center">IP</th><th align="right">用户名</th><th align="center">备注</th></tr></thead><tbody><tr><td>A</td><td align="center">192.168.3.241</td><td align="right">pi</td><td align="center">树莓派4b，Raspbian GNU&#x2F;Linux 10，处于内网，需要被远程访问</td></tr><tr><td>B</td><td align="center">101.133.xxx.xxx</td><td align="right">root</td><td align="center">阿里云服务器，centos7，有公网IP</td></tr></tbody></table><h4 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h4><p>在B上执行</p><pre><code>vi /etc/ssh/sshd_config</code></pre><p>找到Gatewayports,取消注释，改为yes</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/02/image.png"></p><p>保存，重启服务器</p><p>建立A到B的反向代理,这里把A的22端口映射到了B的2222端口，记得放行B的端口</p><p>在A上执行</p><pre><code>sudo ssh -fCNR 2222:localhost:22 root@101.133.xxx.xxx</code></pre><p>然后输入B的root用户密码即可</p><p>检验一下是否成功</p><p>在B上查看</p><pre><code>netstat -anp  grep 2222</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/02/image-1-1024x68.png"></p><p>有结果说明已经成功</p><p>此时可以在任意一台能访问公网的电脑上远程访问A</p><pre><code>ssh -p 2222 pi@101.133.xxx.xxx</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/02/image-2.png"></p><p>要注意的是，此处<strong>用到的是A的用户名和密码，B的IP和端口号</strong></p><p>这种方法的缺点是不稳定，ssh连接容易断开</p><h4 id="改进的方法"><a href="#改进的方法" class="headerlink" title="改进的方法"></a>改进的方法</h4><p>改进的方向是：<strong>开机自启，免密登录，断线重连</strong>。需要用到autossh</p><p>安装autossh,在A上执行</p><pre><code>sudo apt-get install autossh</code></pre><p>安装成功后，把上面的ssh命令改成autossh格式的,用到了另一个端口2223，用于监听ssh连接情况，记得放行</p><pre><code>autossh -M 2223 -NR 2222:localhost:22 root@101.133.xxx.xxx</code></pre><p>输入密码即可同样可在B上用netstat -anp grep 2222命令查看是否成功</p><pre><code>netstat -anp  grep 2222</code></pre><p>继续改进，实现免密登录,在A上分别执行</p><pre><code>ssh-keygenssh-copy-id root@101.133.xxx.xxx</code></pre><p>要输入一次密码，成功后可直接免密登录B,如下图</p><pre><code>ssh root@101.133.xxx.xxx</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/02/image-3.png"></p><p>接下来使用autossh就可以免密码了，把autossh命令设置成开启启动</p><pre><code>sudo vim /etc/rc.local</code></pre><p>在exit0前面增加一行</p><pre><code>sudo su pi -c &quot;autossh -M 2223 -fNR 2222:localhost:22 root@101.133.xxx.xxx&quot;</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/02/image-4.png"></p><p>这里要注意执行命令的用户，如果直接把上面的autossh写在这里是不行的，因为写在rc.local里的命令是root用户执行的，我们上面免密登录的执行用户是是普通用户pi，所以要用sudo su [用户名] -c “[命令]”</p><p>autossh的参数中添加了f，意思是后台执行</p><p>这样配置之后，只要A开机联网，B正常运行，就可以在任何能访问到B的主机上用ssh远程登录A的pi用户</p><p><strong>用到的是A的用户名和密码，B的IP和端口号</strong></p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>这个功能当然不仅限于远程ssh登录，根本上是NAT端口映射，如内网上A主机的8080端口上的数据流是我的目标，但是公网无法访问，通过这种方法，我就可以把8080端口映射到公网服务器B的指定端口如9090上，相当于一次转发，这时访问B_IP:9090等价于访问A_IP:8080，缺点是相应的延时也会增大，如果转发数据较大，对公网服务器的带宽也是一种消耗</p><p>Done.</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
      <tag>代理</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派/centos开机自启python脚本</title>
    <link href="/2021/02/15/linux%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AFpython%E8%84%9A%E6%9C%AC/"/>
    <url>/2021/02/15/linux%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AFpython%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<pre><code>sudo vim /etc/rc.local</code></pre><p>在exit 0前面加入一行，如图所示，main.py是python文件名，main.log是运行后将要生成的日志文件</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-51.png"></p><p>在centos7中，&#x2F;etc&#x2F;rc.d&#x2F;rc.local的权限被降低了，所以需要执行如下命令赋予其可执行权限</p><pre><code>chmod +x /etc/rc.d/rc.local</code></pre>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python3 socket自动重连、心跳包</title>
    <link href="/2021/02/14/python3-socket%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E%E3%80%81%E5%88%A4%E6%96%AD%E8%BF%9E%E6%8E%A5%E6%98%AF%E5%90%A6%E6%96%AD%E5%BC%80/"/>
    <url>/2021/02/14/python3-socket%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E%E3%80%81%E5%88%A4%E6%96%AD%E8%BF%9E%E6%8E%A5%E6%98%AF%E5%90%A6%E6%96%AD%E5%BC%80/</url>
    
    <content type="html"><![CDATA[<h4 id="客户端异常处理"><a href="#客户端异常处理" class="headerlink" title="客户端异常处理"></a>客户端异常处理</h4><p>服务端一般都不会有网络问题，而客户端有可能因为网络不稳定等原因会导致连接断开，因此有时需要设置客户端自动重连</p><p>客户端无法直接判断连接是否断开，如果连接断开，则继续操作会产生异常，在异常处理中进行重连即可</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span> <span class="comment">#服务端ip</span></span><br><span class="line">PORT = <span class="number">9999</span> <span class="comment">#服务端端口号</span></span><br><span class="line">BUFSIZ = <span class="number">1024</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line">tcpCliSock=<span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect</span>():</span><br><span class="line">    <span class="keyword">global</span> tcpCliSock</span><br><span class="line">    tcpCliSock = socket(AF_INET, SOCK_STREAM) <span class="comment">#创建socket对象</span></span><br><span class="line">    tcpCliSock.connect(ADDR) <span class="comment">#连接服务器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        connect()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = tcpCliSock.recv(BUFSIZ) <span class="comment">#读取消息</span></span><br><span class="line">            <span class="comment">#data处理</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        tcpCliSock.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>这样处理之后，一旦网络恢复正常，就会自动重连</p><h4 id="在服务端中判断客户端是否断开连接"><a href="#在服务端中判断客户端是否断开连接" class="headerlink" title="在服务端中判断客户端是否断开连接"></a>在服务端中判断客户端是否断开连接</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">......</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn, addr = tcpS.accept() </span><br><span class="line">    conn.settimeout(<span class="number">10</span>)<span class="comment">#10s没有收到数据，进入timeout异常处理</span></span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data)==<span class="number">0</span>:</span><br><span class="line">        <span class="comment">#客户端主动关闭连接时，返回空字符串</span></span><br><span class="line"><span class="keyword">except</span> timeout:</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="comment">#其他处理</span></span><br></pre></td></tr></table></figure><p>这里涉及了两种情况：</p><h5 id="1-客户端主动关闭连接，服务端读取数据时会返回空字符串"><a href="#1-客户端主动关闭连接，服务端读取数据时会返回空字符串" class="headerlink" title="1.客户端主动关闭连接，服务端读取数据时会返回空字符串"></a>1.客户端主动关闭连接，服务端读取数据时会返回空字符串</h5><h5 id="2-客户端网络异常导致连接断开，这时服务端recv会一直等待，可以设置超时时间，超时后在异常处理中断开连接，进行重连"><a href="#2-客户端网络异常导致连接断开，这时服务端recv会一直等待，可以设置超时时间，超时后在异常处理中断开连接，进行重连" class="headerlink" title="2.客户端网络异常导致连接断开，这时服务端recv会一直等待，可以设置超时时间，超时后在异常处理中断开连接，进行重连"></a>2.客户端网络异常导致连接断开，这时服务端recv会一直等待，可以设置超时时间，超时后在异常处理中断开连接，进行重连</h5><h4 id="心跳包"><a href="#心跳包" class="headerlink" title="心跳包"></a>心跳包</h4><p>上面这种处理的缺点是就算连接一切正常也会在无操作一段时间后进行重连，这样就多了很多不必要的重连，一种更好的相对复杂的策略是心跳包机制，约定每隔一段时间发送指定数据表明连接正常，如果超过约定时间未收到该心跳包，则认为连接断开，此时重连。显然这需要用到定时器，为了不影响主线程运行，应该在子线程中实现心跳包比较合适。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myThread</span> (threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, threadID, name, counter</span>):</span><br><span class="line">        threading.Thread.__init__(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.threadID = threadID</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.counter = counter</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;心跳启动&quot;</span>)</span><br><span class="line">        heartBeat()</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;心跳停止&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heartBeat</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> exitFlag:</span><br><span class="line">        time.sleep(<span class="number">20</span>)<span class="comment">#20s发一次心跳包</span></span><br><span class="line">        <span class="comment">#发送数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新线程</span></span><br><span class="line">thread1 = myThread(<span class="number">1</span>, <span class="string">&quot;heartbeat&quot;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启新线程</span></span><br><span class="line">thread1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">#原来写的代码在此处不受干扰</span></span><br></pre></td></tr></table></figure><p>设置心跳包之后，配合超时检测就可以实现仅在必要情况下重连，最大程度维护了长连接。</p><p>注意心跳包间隔略小于超时时间即可，如心跳包间隔20s，timeout设置为30s</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派安装中文输入法</title>
    <link href="/2021/02/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <url>/2021/02/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<pre><code>sudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin</code></pre><p>重启即可</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-41.png"></p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派4B接超声波模块HC-SR05</title>
    <link href="/2021/02/04/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E6%8E%A5%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%A8%A1%E5%9D%97hc-sr05/"/>
    <url>/2021/02/04/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E6%8E%A5%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%A8%A1%E5%9D%97hc-sr05/</url>
    
    <content type="html"><![CDATA[<h4 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h4><p>超声波模块HC-SR05相比于HC-SR04，多了一个OUT引脚，不太懂，没用到</p><p>所以，跟HC-SR04一样看待即可</p><p>VCC：接5V</p><p>GND：接地</p><p>Trig和Echo接任意两个GPIO口</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#超声波引脚定义</span></span><br><span class="line">EchoPin = <span class="number">16</span>   <span class="comment">#GPIO16</span></span><br><span class="line">TrigPin = <span class="number">12</span>   <span class="comment">#GPIO12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置GPIO口为BCM编码方式</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line"></span><br><span class="line"><span class="comment">#忽略警告信息</span></span><br><span class="line">GPIO.setwarnings(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#超声波引脚初始化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    GPIO.setup(EchoPin,GPIO.IN)</span><br><span class="line">    GPIO.setup(TrigPin,GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="comment">#超声波函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getDistance</span>():</span><br><span class="line">    GPIO.output(TrigPin,GPIO.HIGH)</span><br><span class="line">    time.sleep(<span class="number">0.000015</span>)</span><br><span class="line">    GPIO.output(TrigPin,GPIO.LOW)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> GPIO.<span class="built_in">input</span>(EchoPin):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    t1 = time.time()</span><br><span class="line">    <span class="keyword">while</span> GPIO.<span class="built_in">input</span>(EchoPin):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    t2 = time.time()</span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">return</span> ((t2 - t1)* <span class="number">340</span> / <span class="number">2</span>) * <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    init()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;distance is %d cm&quot;</span> % getDistance())</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-40.png"></p><p>发现这个传感器不是很灵敏，角度不能偏，遮挡物面需要够大且尽可能光滑，不太满意</p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
      <tag>超声波</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python3运行shell命令</title>
    <link href="/2021/02/03/python3%E7%94%A8subprocess%E8%BF%90%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/03/python3%E7%94%A8subprocess%E8%BF%90%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.run(<span class="string">&quot;xxx&quot;</span>,shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&quot;xxx&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android把图片url转为drawable</title>
    <link href="/2021/01/18/android%E6%8A%8A%E5%9B%BE%E7%89%87url%E8%BD%AC%E4%B8%BAdrawable/"/>
    <url>/2021/01/18/android%E6%8A%8A%E5%9B%BE%E7%89%87url%E8%BD%AC%E4%B8%BAdrawable/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> (InputStream) <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://xxx.jpg&quot;</span>).openStream();</span><br><span class="line"><span class="keyword">final</span> <span class="type">Drawable</span> <span class="variable">d</span> <span class="operator">=</span> Drawable.createFromStream(in, <span class="string">&quot;src&quot;</span>);</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure><p>以下示例给linearlayout设置网络图片为背景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">linear=(LinearLayout)findViewById(R.id.linear);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> (InputStream) <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://xxx.jpg&quot;</span>).openStream();</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">Drawable</span> <span class="variable">d</span> <span class="operator">=</span> Drawable.createFromStream(in, <span class="string">&quot;src&quot;</span>);</span><br><span class="line">                    in.close();</span><br><span class="line">                    runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            linear.setBackground(d);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br></pre></td></tr></table></figure><p>注意，http请求需要在子线程中完成，UI更新需要在主线程中完成</p><p>android9.0以上版本中允许http请求需要在AndroidManifest.xml中的application标签中添加</p><p>android:usesCleartextTraffic&#x3D;”true”</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-38.png"></p>]]></content>
    
    
    <categories>
      
      <category>安卓</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android去掉ActionBar</title>
    <link href="/2021/01/17/android%E5%8E%BB%E6%8E%89actionbar/"/>
    <url>/2021/01/17/android%E5%8E%BB%E6%8E%89actionbar/</url>
    
    <content type="html"><![CDATA[<p>只需要把style.xml中的默认主题修改一下即可</p><p>(style.xml在app-res-values目录下)</p><pre><code>`&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;`</code></pre><p>修改成</p><pre><code>`&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;`</code></pre><p>完成</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-37.png"></p>]]></content>
    
    
    <categories>
      
      <category>安卓</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派4B编译安装opencv</title>
    <link href="/2021/01/12/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85opencv/"/>
    <url>/2021/01/12/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85opencv/</url>
    
    <content type="html"><![CDATA[<p>pip安装失败，无奈选择手动编译安装</p><h4 id="下载opencv-3-4-13"><a href="#下载opencv-3-4-13" class="headerlink" title="下载opencv-3.4.13"></a>下载opencv-3.4.13</h4><p>官网<a href="https://opencv.org/releases/">https://opencv.org/releases/</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-35.png"></p><p>官网源码是github链接，下载巨慢，github挂代理也不管用，结果试了一下用手机浏览器下载，不到10s就下载完了，现在还有点懵……总之能下载下来就行</p><p>这里放一个蓝奏云链接提供下载<a href="https://xinhaojin.lanzous.com/iEQV5kamg6j">https://xinhaojin.lanzous.com/iEQV5kamg6j</a></p><p>解压，放到要安装的目录下，进入opencv-3.4.13文件夹</p><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><p>分别执行以下命令</p><pre><code>cd  opencv-3.4.13mkdir releasecd releasecmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..makesudo make install</code></pre><p>其中make要等待很长时间，我大概花了一个多小时</p><p>结果是[100%] Built target opencv verson忘记截图了</p><pre><code>sudo make install</code></pre><p>之后是这样的</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-36.png"></p><p>Done.</p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派4B接USB摄像头发送视频流</title>
    <link href="/2021/01/11/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E6%8E%A5usb%E6%91%84%E5%83%8F%E5%A4%B4/"/>
    <url>/2021/01/11/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E6%8E%A5usb%E6%91%84%E5%83%8F%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<h4 id="添加摄像头设备"><a href="#添加摄像头设备" class="headerlink" title="添加摄像头设备"></a>添加摄像头设备</h4><p>插拔摄像头分别执行一次以下命令</p><pre><code>pi@raspberrypi:~ $ lsusb</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-31.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-32.png"></p><p>或者</p><pre><code>pi@raspberrypi:~ $ ls /dev</code></pre><p>插上USB摄像头有video0即可</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-30.png"></p><p>不插的情况</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-33.png"></p><h4 id="安装MJPG-Streamer"><a href="#安装MJPG-Streamer" class="headerlink" title="安装MJPG-Streamer"></a>安装MJPG-Streamer</h4><p>依次通过以下命令安装</p><pre><code>pi@raspberrypi:~ $ sudo apt-get install cmake libjpeg8-devpi@raspberrypi:~ $ git clone https://e.coding.net/fivecc/mjpg-streamer/mjpg-streamer.gitpi@raspberrypi:~ $ cd mjpg-*pi@raspberrypi:~/mjpg-streamer-master $ cd mjpg-*pi@raspberrypi:~/mjpg-streamer-master/mjpg-streamer-experimental $ makepi@raspberrypi:~/mjpg-streamer-master/mjpg-streamer-experimental $ sudo make installpi@raspberrypi:~/mjpg-streamer-master/mjpg-streamer-experimental $ cdpi@raspberrypi:~ $</code></pre><h4 id="启动-MJPG-Streamer"><a href="#启动-MJPG-Streamer" class="headerlink" title="启动 MJPG-Streamer"></a>启动 MJPG-Streamer</h4><pre><code>pi@raspberrypi: ~ $ /usr/local/bin/mjpg_streamer -i &quot;/usr/local/lib/mjpg-streamer/input_uvc.so -n -f 30 -r 1280x720&quot; -o &quot;/usr/local/lib/mjpg-streamer/output_http.so -p 8080 -w /usr/local/share/mjpg-streamer/www&quot;</code></pre><p>正常的结果</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-34.png"></p><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>   -i “&#x2F;usr&#x2F;local&#x2F;lib&#x2F;mjpg-streamer&#x2F;input_uvc.so -n -f 30 -r 1280x720”</p><p>  -i 输入</p><p>         input_uvc.so：UVC输入组件</p><p>       -f  30             ：表示30帧</p><p>       -r 1280*720     ：分辨率</p><p>       -y                   ：YUV格式输入（有卡顿），不加表示MJPG输入（需要摄像头支持）</p><p>    -o “&#x2F;usr&#x2F;local&#x2F;lib&#x2F;mjpg-streamer&#x2F;output_http.so -p 8080 -w &#x2F;usr&#x2F;local&#x2F;share&#x2F;mjpg-streamer&#x2F;www”</p><p>          -o 输出</p><p>            output_http.so          ：网页输出组件</p><p>            -w www                                  : 网页输出</p><p>           -p 8080                                   ：端口   8080</p><p>             -d 1000                                   ： 时间1S</p><h4 id="浏览器实时视频接收"><a href="#浏览器实时视频接收" class="headerlink" title="浏览器实时视频接收"></a>浏览器实时视频接收</h4><p>创建一个html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>实时视频<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">     <span class="selector-id">#webcam</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">margin</span>: <span class="number">10%</span> auto;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">     &#125;</span></span><br><span class="line"><span class="language-css">     <span class="selector-id">#webcam</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">height</span>: auto;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">     &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;webcam&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> imageNr = <span class="number">0</span>; <span class="comment">// 图片的索引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> finished = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">// 下载图片的队列</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> paused = <span class="literal">false</span>; <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">createImageLayer</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&quot;absolute&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">style</span>.<span class="property">zIndex</span> = -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">onload</span> = imageOnload;</span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">onclick</span> = imageOnclick;</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//填你对应的ip和端口</span></span></span><br><span class="line"><span class="language-javascript">      img.<span class="property">src</span> = <span class="string">&quot;http://192.16.34.182:8080/?action=snapshot&amp;n=&quot;</span> + (++imageNr);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> webcam = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;webcam&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      webcam.<span class="title function_">insertBefore</span>(img, webcam.<span class="property">firstChild</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">imageOnload</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">zIndex</span> = imageNr; </span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">while</span> (<span class="number">1</span> &lt; finished.<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> del = finished.<span class="title function_">shift</span>(); <span class="comment">// 删除旧照片</span></span></span><br><span class="line"><span class="language-javascript">        del.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(del);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      finished.<span class="title function_">push</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (!paused) <span class="title function_">createImageLayer</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">imageOnclick</span>(<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">      paused = !paused;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (!paused) <span class="title function_">createImageLayer</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createImageLayer</span>() </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把IP部分改成树莓派的IP，打开网页即可</p><p>其实只需要关注“<a href="http://192.16.34.182:8080/?action=snapshot&n=%E2%80%9D%EF%BC%8C%E8%BF%99%E5%90%8E%E9%9D%A2%E6%98%AF%E8%A7%86%E9%A2%91%E5%B8%A7%E7%9A%84%E7%B4%A2%E5%BC%95%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E7%BB%99%E4%B8%80%E4%B8%AA%E8%B6%B3%E5%A4%9F%E5%A4%A7%E7%9A%84%E6%95%B0%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E7%9A%84%E8%A7%86%E9%A2%91%E5%B8%A7">http://192.16.34.182:8080/?action=snapshot&amp;n=”，这后面是视频帧的索引，只需要给一个足够大的数就可以获取最新的视频帧</a></p><p>如“<a href="http://192.16.34.182:8080/?action=snapshot&n=100000000%E2%80%9D">http://192.16.34.182:8080/?action=snapshot&amp;n=100000000”</a></p><p>当然，也可直接在浏览器输入视频流地址“<a href="http://192.16.34.182:8080/?action=streamer%E2%80%9D">http://192.16.34.182:8080/?action=streamer”</a></p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
      <tag>视频流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux关闭占用端口的进程</title>
    <link href="/2021/01/10/linux%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
    <url>/2021/01/10/linux%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<pre><code>[root@izuf64lmg25t75c8db3hxcz workspace]# lsof -i:9999COMMAND   PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAMEpython3 11902 root    3u  IPv4 9435173      0t0  TCP *:distinct (LISTEN)python3 11902 root    5u  IPv4 9451420      0t0  TCP izuf64lmg25t75c8db3hxcz:distinct-&gt;115.200.48.232:ibm-mgr (CLOSE_WAIT)[root@izuf64lmg25t75c8db3hxcz workspace]# kill -9 11902</code></pre><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-29-1024x173.png"></p><p>lsof -i:端口号</p><p>kill -9 pid</p><p>当然也有另一种不用查看pid的方法</p><p>kill -9 `lsof -i:9999  awk ‘NR&#x3D;&#x3D;2{print $2}’`</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android设置横屏/避免旋转屏幕导致avtivity重载</title>
    <link href="/2021/01/08/android%E8%AE%BE%E7%BD%AE%E6%A8%AA%E5%B1%8F/"/>
    <url>/2021/01/08/android%E8%AE%BE%E7%BD%AE%E6%A8%AA%E5%B1%8F/</url>
    
    <content type="html"><![CDATA[<p>在AndroidManifest.xml的activity标签中添加如下片段：</p><p>android:screenOrientation&#x3D;”portrait”</p><p>横屏改成android:screenOrientation&#x3D;”landscape”</p><p>另一个问题，有时把程序切换到后台或旋转屏幕使布局改变时，会重载onCreate方法导致activity重载，避免这种情况的方法是在AndroidManifest.xml中activity标签中添加</p><p>android:configChanges&#x3D;”orientationkeyboardHiddenscreenSize”</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/04/image-24.png"></p>]]></content>
    
    
    <categories>
      
      <category>安卓</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派4B换源</title>
    <link href="/2021/01/06/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E6%8D%A2%E6%BA%90/"/>
    <url>/2021/01/06/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E6%8D%A2%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><pre><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.baksudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak</code></pre><h4 id="更改系统源文件"><a href="#更改系统源文件" class="headerlink" title="更改系统源文件"></a>更改系统源文件</h4><pre><code>sudo vim /etc/apt/sources.list</code></pre><p>把原有的注释掉，添加</p><pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpideb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi</code></pre><h4 id="更新软件列表和软件"><a href="#更新软件列表和软件" class="headerlink" title="更新软件列表和软件"></a>更新软件列表和软件</h4><pre><code>sudo apt-get updatesudo apt-get upgrade</code></pre><h4 id="更改系统源"><a href="#更改系统源" class="headerlink" title="更改系统源"></a>更改系统源</h4><pre><code>sudo vim /etc/apt/sources.list.d/raspi.list</code></pre><p>同样注释掉原内容，添加上</p><pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main uideb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</code></pre><p>刚更新到了最新版本</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-16-1024x805.png"></p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pip换源、设置多个源并添加信任</title>
    <link href="/2021/01/06/pip%E6%8D%A2%E6%BA%90/"/>
    <url>/2021/01/06/pip%E6%8D%A2%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><p>cd ~ # 进入家目录<br>mkdir .pip # 新建.pip隐藏文件夹<br>cd .pip # 进入.pip文件夹<br>touch pip.conf # 新建pip.conf文件<br>vim pip.conf # 用vim编辑pip.conf文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br><span class="hljs-attr">index-url</span>=https://mirrors.ustc.edu.cn/pypi/simple<br><span class="hljs-attr">extra-index-url</span>=https://pypi.tuna.tsinghua.edu.cn/simple/<br>                http://mirrors.aliyun.com/pypi/simple/<br><br><span class="hljs-section">[install]</span><br><span class="hljs-attr">trusted-host</span>=mirrors.ustc.edu.cn<br>            pypi.tuna.tsinghua.edu.cn<br>            mirrors.aliyun.com<br></code></pre></td></tr></table></figure><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>在这个目录下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/08/image-2.png"></p><p>找到pip文件夹，没有pip文件夹就新建一个</p><p>在pip文件夹里面新建一个txt,内容同上</p><p>命名为pip.ini保存</p><h4 id="临时换源"><a href="#临时换源" class="headerlink" title="临时换源"></a>临时换源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install xxx -i http://mirrors.baidu.com/pypi/simple --trusted-host mirrors.baidu.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome插件SwitchyOmega配置</title>
    <link href="/2021/01/06/chrome%E6%8F%92%E4%BB%B6switchyomega%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/01/06/chrome%E6%8F%92%E4%BB%B6switchyomega%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="到插件选项界面，新建情景模式，选择代理服务器"><a href="#到插件选项界面，新建情景模式，选择代理服务器" class="headerlink" title="到插件选项界面，新建情景模式，选择代理服务器"></a>到插件选项界面，新建情景模式，选择代理服务器</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-8-1024x598.png"></p><h4 id="选择socket5代理，填写正确的代理端口"><a href="#选择socket5代理，填写正确的代理端口" class="headerlink" title="选择socket5代理，填写正确的代理端口"></a>选择socket5代理，填写正确的代理端口</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-11-1024x221.png"></p><h4 id="端口号可以在代理客户端中查看"><a href="#端口号可以在代理客户端中查看" class="headerlink" title="端口号可以在代理客户端中查看"></a>端口号可以在代理客户端中查看</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-10-1024x684.png"></p><h4 id="选择应用选项"><a href="#选择应用选项" class="headerlink" title="选择应用选项"></a>选择应用选项</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-12.png"></p><h4 id="配置auto-switch-默认选择直连，规则列表规则对应点情景模式为刚新建的那个情景模式，规则列表格式选择AutoProxy-规则列表网址GitHub-gfwlist-gfwlist-The-one-and-only-one-gfwlist-here"><a href="#配置auto-switch-默认选择直连，规则列表规则对应点情景模式为刚新建的那个情景模式，规则列表格式选择AutoProxy-规则列表网址GitHub-gfwlist-gfwlist-The-one-and-only-one-gfwlist-here" class="headerlink" title="配置auto switch,默认选择直连，规则列表规则对应点情景模式为刚新建的那个情景模式，规则列表格式选择AutoProxy,规则列表网址GitHub - gfwlist&#x2F;gfwlist: The one and only one gfwlist here"></a>配置auto switch,默认选择直连，规则列表规则对应点情景模式为刚新建的那个情景模式，规则列表格式选择AutoProxy,规则列表网址<a href="https://github.com/gfwlist/gfwlist">GitHub - gfwlist&#x2F;gfwlist: The one and only one gfwlist here</a></h4><p>建议地址<a href="https://gitlab.com/gfwlist/gfwlist/raw/master/gfwlist.txt">https://gitlab.com/gfwlist/gfwlist/raw/master/gfwlist.txt</a></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-13-1024x467.png"></p><h4 id="选择立即更新，再保存"><a href="#选择立即更新，再保存" class="headerlink" title="选择立即更新，再保存"></a>选择立即更新，再保存</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-14.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CloudFlareIP优选CDN加速</title>
    <link href="/2021/01/04/cloudflareip%E4%BC%98%E9%80%89cdn%E5%8A%A0%E9%80%9F/"/>
    <url>/2021/01/04/cloudflareip%E4%BC%98%E9%80%89cdn%E5%8A%A0%E9%80%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="cloudflare代理"><a href="#cloudflare代理" class="headerlink" title="cloudflare代理"></a>cloudflare代理</h3><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-1024x149.png"></p><p>ping域名结果都是cloudflare节点就说明代理成功了，延迟高速度不一定慢</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-5-1024x594.png"></p><h3 id="IP优选"><a href="#IP优选" class="headerlink" title="IP优选"></a>IP优选</h3><p>下载地址<a href="https://github.com/badafans/better-cloudflare-ip,%E7%82%B9%E5%87%BB%E5%8F%B3%E4%BE%A7release%E9%80%89%E6%8B%A9%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD">https://github.com/badafans/better-cloudflare-ip,点击右侧release选择版本下载</a></p><p>双击打开</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-2.png"></p><p>输入期望带宽，建议小一点，否则可能选不到合适的IP</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-3.png"></p><p>等待结果，第一个IP即是</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2021/01/image-4.png"></p><h3 id="新的IP优选工具"><a href="#新的IP优选工具" class="headerlink" title="新的IP优选工具"></a>新的IP优选工具</h3><p><a href="https://github.com/XIU2/CloudflareSpeedTest">https://github.com/XIU2/CloudflareSpeedTest</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cloudflare</tag>
      
      <tag>CDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派4B连接WiFi</title>
    <link href="/2020/12/30/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E8%BF%9E%E6%8E%A5wifi/"/>
    <url>/2020/12/30/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E8%BF%9E%E6%8E%A5wifi/</url>
    
    <content type="html"><![CDATA[<p>新建TXT文件，格式如：</p><pre><code>country=CNctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=1network=&#123;    ssid=&quot;目标Wi-Fi名称&quot;    psk=&quot;目标Wi-Fi密码&quot;    priority=3&#125;network=&#123;    ssid=&quot;目标Wi-Fi名称&quot;    psk=&quot;目标Wi-Fi密码&quot;    priority=2&#125;</code></pre><p>ssid为WiFi名称，psk为密码，保留引号，priority为连接优先级</p><p>重命名为wpa_supplicant.conf，复制文件到boot目录下</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-22-1024x516.png"></p><p>拔掉网线重新启动，查看路由器，发现没有连上网，折腾了很久，发现好像需要手动打开WiFi开关</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-23.png"></p><p>重启，上线！</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-24-1024x493.png"></p><p>这时候有一个变化，就是IP改了，远程连接时需要进行修改。</p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派4B查找IP，开启SSH或VNC连接</title>
    <link href="/2020/12/29/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E6%9F%A5%E6%89%BEip%EF%BC%8C%E5%BC%80%E5%90%AFssh%E6%88%96vnc%E8%BF%9E%E6%8E%A5/"/>
    <url>/2020/12/29/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E6%9F%A5%E6%89%BEip%EF%BC%8C%E5%BC%80%E5%90%AFssh%E6%88%96vnc%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="一、查找IP"><a href="#一、查找IP" class="headerlink" title="一、查找IP"></a>一、查找IP</h3><p>方法有很多，只介绍我实践成功的方法，可能也是最方便的方法：</p><p>网线连接路由器和树莓派，树莓派网线接口灯光快闪表示连接正常，此时打开路由器终端管理界面：</p><p>在电脑连接WiFi的情况下，命令行运行ipconfig，无线局域网适配器的默认网关就是路由器终端管理界面地址</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-7.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-8-1024x588.png"></p><p>找到有线连接设备，很多路由器在这里会显示Raspberry，很好识别，我这里因为设备少也很好识别，如果有多个疑似IP的话，可以挨个尝试SSH连接</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-9-1024x505.png"></p><h3 id="二、SSH连接"><a href="#二、SSH连接" class="headerlink" title="二、SSH连接"></a>二、SSH连接</h3><p>新建空白txt文件，重命名为ssh，删去后缀，复制文件到SD卡boot根目录</p><p>插卡，通电。官方推荐用Putty作为SSH连接工具，默认用户名pi，密码raspberry，注意输入密码时不显示字符</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-12.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-13.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-14.png"></p><p>然后输入sudo raspi-config，进入树莓派配置界面</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-15.png"></p><p>选择3 Interface Options，开启SSH和VNC服务</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-16.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-17.png"></p><p>如果要用VNC操作图形界面，建议再操作一步，确保VNC连接后图形界面可以成功显示（默认设置有时候会提示没法显示）</p><p>选择2 Display Options D1 Resolution 修改分辨率</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-18.png"></p><h3 id="三、VNC连接"><a href="#三、VNC连接" class="headerlink" title="三、VNC连接"></a>三、VNC连接</h3><p>VNC只针对系统镜像带图形界面的。这里使用VNC viewer，地址栏输入IP即可</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-19.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-20.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-21-1024x801.png"></p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派4B系统镜像烧录</title>
    <link href="/2020/12/29/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E7%83%A7%E5%BD%95/"/>
    <url>/2020/12/29/%E6%A0%91%E8%8E%93%E6%B4%BE4b%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E7%83%A7%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一、下载系统镜像"><a href="#一、下载系统镜像" class="headerlink" title="一、下载系统镜像"></a>一、下载系统镜像</h3><p>到树莓派官网下载系统镜像</p><p><a href="https://www.raspberrypi.org/software/operating-systems/#raspberry-pi-os-32-bit">https://www.raspberrypi.org/software/operating-systems/#raspberry-pi-os-32-bit</a></p><p>下载下来后解压为.img文件才可使用</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-2-1024x579.png"></p><h3 id="二、烧录镜像"><a href="#二、烧录镜像" class="headerlink" title="二、烧录镜像"></a>二、烧录镜像</h3><p>烧录软件推荐balenaEtcher或Win32DiskImager</p><p>内存卡插入读卡器，读卡器插入电脑USB接口，打开烧录软件</p><p>balenaEtcher：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-5-1024x614.png"></p><p>Win32DiskImager：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-4.png"></p><p>烧录成功后sd卡在windows盘符中显示为两个盘，一个为boot，只有两三百兆</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/12/image-6.png"></p><p>把烧录好的sd卡插入树莓派，接通type-C电源，正常状态为红灯常亮，绿灯快闪一段时间后可能不亮</p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B树、B+树插入删除</title>
    <link href="/2020/11/30/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81b%E6%A0%91%E3%80%81b%E6%A0%91%E3%80%81b%E6%A0%91/"/>
    <url>/2020/11/30/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81b%E6%A0%91%E3%80%81b%E6%A0%91%E3%80%81b%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h3 id="1-B树"><a href="#1-B树" class="headerlink" title="1 B树"></a>1 B树</h3><p>在介绍B+树之前， 先简单的介绍一下B树，这两种数据结构既有相似之处，也有他们的区别，最后，我们也会对比一下这两种数据结构的区别。</p><h4 id="1-1-B树概念"><a href="#1-1-B树概念" class="headerlink" title="1.1 B树概念"></a>1.1 B树概念</h4><p>B树也称B-树,它是一颗多路平衡查找树。二叉树我想大家都不陌生，其实，B树和后面讲到的B+树也是从最简单的二叉树变换而来的，并没有什么神秘的地方，下面我们来看看B树的定义。</p><ul><li>每个节点最多有m-1个<strong>关键字</strong>（可以存有的键值对）。</li><li>根节点最少可以只有1个<strong>关键字</strong>。</li><li>非根节点至少有m&#x2F;2个<strong>关键字</strong>。</li><li>每个节点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。</li><li>所有叶子节点都位于同一层，或者说根节点到每个叶子节点的长度都相同。</li><li>每个节点都存有索引和数据，也就是对应的key和value。</li></ul><p>所以，根节点的<strong>关键字</strong>数量范围：<code>1 &lt;= k &lt;= m-1</code>，非根节点的<strong>关键字</strong>数量范围：<code>m/2 &lt;= k &lt;= m-1</code>。</p><p>另外，我们需要注意一个概念，描述一颗B树时需要指定它的阶数，阶数表示了一个节点最多有多少个孩子节点，一般用字母m表示阶数。</p><p>我们再举个例子来说明一下上面的概念，比如这里有一个5阶的B树，根节点数量范围：1 &lt;&#x3D; k &lt;&#x3D; 4，非根节点数量范围：2 &lt;&#x3D; k &lt;&#x3D; 4。</p><p>下面，我们通过一个插入的例子，讲解一下B树的插入过程，接着，再讲解一下删除关键字的过程。</p><h4 id="1-2-B树插入"><a href="#1-2-B树插入" class="headerlink" title="1.2 B树插入"></a>1.2 B树插入</h4><p>插入的时候，我们需要记住一个规则：<strong>判断当前结点key的个数是否小于等于m-1，如果满足，直接插入即可，如果不满足，将节点的中间的key将这个节点分为左右两部分，中间的节点放到父节点中即可。</strong></p><p>例子：在5阶B树中，结点最多有4个key,最少有2个key（注意：下面的节点统一用一个节点表示key和value）。</p><ul><li>插入18，70，50,40</li></ul><p><img src="https://oscimg.oschina.net/oscnet/eb191e52c4af046dc6d858c793c8ddf3c8e.jpg"></p><ul><li>插入22</li></ul><p><img src="https://oscimg.oschina.net/oscnet/0c6e169e37ff9643c46c72922f42bcb5d46.jpg"></p><p>插入22时，发现这个节点的关键字已经大于4了，所以需要进行分裂，分裂的规则在上面已经讲了，分裂之后，如下。</p><p><img src="https://oscimg.oschina.net/oscnet/1377e97a1160e07ffa600c0d8cba7cadf1e.jpg"></p><ul><li>接着插入23，25，39</li></ul><p><img src="https://oscimg.oschina.net/oscnet/03e1e510bcd8672a98e1a67dd60a91d3aea.jpg"></p><p>分裂，得到下面的。</p><p><img src="https://oscimg.oschina.net/oscnet/1155825270844bbe53c9f2701395c3fa9af.jpg"></p><p>更过的插入的过程就不多介绍了，相信有这个例子你已经知道怎么进行插入操作了。</p><h4 id="1-3-B树的删除操作"><a href="#1-3-B树的删除操作" class="headerlink" title="1.3 B树的删除操作"></a>1.3 B树的删除操作</h4><p>B树的删除操作相对于插入操作是相对复杂一些的，但是，你知道记住几种情况，一样可以很轻松的掌握的。</p><ul><li>现在有一个初始状态是下面这样的B树，然后进行删除操作。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/261678b789a5f4dac373093919ea6a41b8a.jpg"></p><ul><li>删除15，这种情况是删除叶子节点的元素，如果删除之后，节点数还是大于 <code>m/2</code>，这种情况只要直接删除即可。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/0ed340c43b270b4a7932d7db15ebf0acc26.jpg"></p><p><img src="https://oscimg.oschina.net/oscnet/11e2970a52f2b9c73b2a30922b623d4e380.jpg"></p><ul><li>接着，我们把22删除，这种情况的规则：22是非叶子节点，<strong>对于非叶子节点的删除，我们需要用后继key（元素）覆盖要删除的key，然后在后继key所在的子支中删除该后继key</strong>。对于删除22，需要将后继元素24移到被删除的22所在的节点。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/6343b9be4ff09d04096e9eac1d500ba0e9d.jpg"></p><p><img src="https://oscimg.oschina.net/oscnet/c60eb3ba1f5fac64515eccfc03192f40fdb.jpg"></p><p>此时发现26所在的节点只有一个元素，小于2个（m&#x2F;2），这个节点不符合要求，这时候的规则（向兄弟节点借元素）：<strong>如果删除叶子节点，如果删除元素后元素个数少于（m&#x2F;2），并且它的兄弟节点的元素大于（m&#x2F;2），也就是说兄弟节点的元素比最少值m&#x2F;2还多，将先将父节点的元素移到该节点，然后将兄弟节点的元素再移动到父节点</strong>。这样就满足要求了。</p><p>我们看看操作过程就更加明白了。</p><p><img src="https://oscimg.oschina.net/oscnet/853a8ead34267d029e8d984958c8d4dbea8.jpg"></p><p><img src="https://oscimg.oschina.net/oscnet/0ac5a97219474c5fc16270314e655bf0437.jpg"></p><ul><li>接着删除28，<strong>删除叶子节点</strong>，删除后不满足要求，所以，我们需要考虑向兄弟节点借元素，但是，兄弟节点也没有多的节点（2个），借不了，怎么办呢？如果遇到这种情况，<strong>首先，还是将先将父节点的元素移到该节点，然后，将当前节点及它的兄弟节点中的key合并，形成一个新的节点</strong>。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/e5845ae0ae2fe779a932aa452ce650a4b48.jpg"></p><p>移动之后，跟兄弟节点合并。</p><p><img src="https://oscimg.oschina.net/oscnet/2dfa4b4474986a121c404f2b7b89579616f.jpg"></p><p>删除就只有上面的几种情况，根据不同的情况进行删除即可。</p><p>上面的这些介绍，相信对于B树已经有一定的了解了，接下来的一部分，我们接着讲解B+树，我相信加上B+树的对比，就更加清晰明了了。</p><h3 id="2-B-树"><a href="#2-B-树" class="headerlink" title="2 B+树"></a>2 B+树</h3><h4 id="2-1-B-树概述"><a href="#2-1-B-树概述" class="headerlink" title="2.1 B+树概述"></a>2.1 B+树概述</h4><p>B+树其实和B树是非常相似的，我们首先看看<strong>相同点</strong>。</p><ul><li>根节点至少一个元素</li><li>非根节点元素范围：m&#x2F;2 &lt;&#x3D; k &lt;&#x3D; m-1</li></ul><p><strong>不同点</strong>。</p><ul><li>B+树有两种类型的节点：内部结点（也称索引结点）和叶子结点。内部节点就是非叶子节点，内部节点不存储数据，只存储索引，数据都存储在叶子节点。</li><li>内部结点中的key都按照从小到大的顺序排列，对于内部结点中的一个key，左树中的所有key都小于它，右子树中的key都大于等于它。叶子结点中的记录也按照key的大小排列。</li><li>每个叶子结点都存有相邻叶子结点的指针，叶子结点本身依关键字的大小自小而大顺序链接。</li><li>父节点存有右孩子的第一个元素的索引。</li></ul><p>下面我们看一个B+树的例子，感受感受它吧！</p><p><img src="https://oscimg.oschina.net/oscnet/bf4d4963b024f6c9fe44d6b26d4f27af54f.jpg"></p><h4 id="2-2-插入操作"><a href="#2-2-插入操作" class="headerlink" title="2.2 插入操作"></a>2.2 插入操作</h4><p>对于插入操作很简单，只需要记住一个技巧即可：<strong>当节点元素数量大于m-1的时候，按中间元素分裂成左右两部分，中间元素分裂到父节点当做索引存储，但是，本身中间元素还是分裂右边这一部分的</strong>。</p><p>下面以一颗5阶B+树的插入过程为例，5阶B+树的节点最少2个元素，最多4个元素。</p><ul><li>插入5，10，15，20</li></ul><p><img src="https://oscimg.oschina.net/oscnet/00114e18a748d2a453007a8b252a43ae8a4.jpg"></p><ul><li>插入25，此时元素数量大于4个了，分裂</li></ul><p><img src="https://oscimg.oschina.net/oscnet/6869626e80377a560361d624f172e1e384f.jpg"></p><ul><li>接着插入26，30，继续分裂</li></ul><p><img src="https://oscimg.oschina.net/oscnet/0a0428579676a0b2543433cafd702029a76.jpg"></p><p><img src="https://oscimg.oschina.net/oscnet/57e93e2184d5307f303a6f846cdf900345b.jpg"></p><p>有了这几个例子，相信插入操作没什么问题了，下面接着看看删除操作。</p><h4 id="2-3-删除操作"><a href="#2-3-删除操作" class="headerlink" title="2.3 删除操作"></a>2.3 删除操作</h4><p>对于删除操作是比B树简单一些的，因为<strong>叶子节点有指针的存在，向兄弟节点借元素时，不需要通过父节点了，而是可以直接通过兄弟节移动即可（前提是兄弟节点的元素大于m&#x2F;2），然后更新父节点的索引；如果兄弟节点的元素不大于m&#x2F;2（兄弟节点也没有多余的元素），则将当前节点和兄弟节点合并，并且删除父节点中的key</strong>，下面我们看看具体的实例。</p><ul><li>初始状态</li></ul><p><img src="https://oscimg.oschina.net/oscnet/365354deaff4bc75d16cf17c3255c46aca4.jpg"></p><ul><li>删除10，删除后，不满足要求，发现左边兄弟节点有多余的元素，所以去借元素，最后，修改父节点索引</li></ul><p><img src="https://oscimg.oschina.net/oscnet/685a53344454eb37d664919a42dac30a45a.jpg"></p><ul><li>删除元素5，发现不满足要求，并且发现左右兄弟节点都没有多余的元素，所以，可以选择和兄弟节点合并，最后修改父节点索引</li></ul><p><img src="https://oscimg.oschina.net/oscnet/f74ef5fff6f4489fbdcaa8d9c113eb48b26.jpg"></p><ul><li>发现父节点索引也不满足条件，所以，需要做跟上面一步一样的操作</li></ul><p><img src="https://oscimg.oschina.net/oscnet/177f38002658f2edfb39a811fed992d58b0.jpg"></p><p>这样，B+树的删除操作也就完成了，是不是看完之后，觉得非常简单！</p><h3 id="3-B树和B-树总结"><a href="#3-B树和B-树总结" class="headerlink" title="3 B树和B+树总结"></a>3 B树和B+树总结</h3><p>B+树相对于B树有一些自己的优势，可以归结为下面几点。</p><ul><li>单一节点存储的元素更多，使得查询的IO次数更少，所以也就使得它更适合做为数据库MySQL的底层数据结构了。</li><li>所有的查询都要查找到叶子节点，查询性能是稳定的，而B树，每个节点都可以查找到数据，所以不稳定。</li><li>所有的叶子节点形成了一个有序链表，更加便于查找。</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络知识点提要</title>
    <link href="/2020/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8F%90%E8%A6%81/"/>
    <url>/2020/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8F%90%E8%A6%81/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h1><p><strong>网络协议的要素</strong></p><ol><li>语法：数据与控制信息的结构或格式 。</li><li>语义：需要发出何种控制信息，完成何种动作以及做出何种响应。</li><li>同步：事件实现顺序的详细说明</li></ol><p><strong>分层的好处：</strong></p><ol><li>各层之间是独立的</li><li>灵活性好</li><li>结构上可分割开</li><li>易于实现和维护</li><li>能促进标准化工作</li></ol><p><strong>网络体系结构</strong> <img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_1.png">  <strong>信道利用率</strong></p><p>U&#x3D;TD&#x2F;(TD+RTT+TA)</p><p>即：接收到第一个确认前尽可能发送最多的帧</p><p>令 D0 表示网络空闲时的时延，D 表示网络当前的时延</p><p>D&#x3D;D0&#x2F;（1-U）</p><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a><strong>物理层</strong></h1><p><strong>物理层设备</strong></p><p>中继器：放大信号转发，不能隔离冲突域</p><p>集线器：多端口中继器，不能隔离冲突域</p><p><strong>三种交换</strong></p><p>电路交换：物理通信线路，独占</p><p>报文交换：整个存储转发</p><p>分组交换：分组，一个个存储转发</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_2.png"></p><p><strong>传输媒体</strong></p><p>单模光纤：距离远，质量好，适用于千米级别</p><p>多模光纤：距离近，适用于百米级别</p><p>双绞线：5类达百兆</p><p>同抽电缆</p><p><strong>编码方式</strong></p><p>曼彻斯特编码：位周期中心的向上跳变代表 0，位周期中心的向下跳变代表 1。但也可反过来定义。</p><p>差分曼彻斯特编码：在每一位的中心处始终都有跳变。位开始边界有跳变代表 0，而位开始边界没有跳变代表 1。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_3.png"></p><p><strong>香农公式</strong></p><p>信道的极限信息传输速率</p><p>C &#x3D; W log2(1+S&#x2F;N)</p><p>信噪比&#x3D;10lg(S&#x2F;N) (dB)</p><p><strong>奈氏准则</strong> 最高码元传输速率</p><p>C&#x3D;2Wlog2V</p><p>(W是带宽Hz，V是每个码元的离散电平个数)</p><p><strong>信道复用技术</strong></p><ol><li>频分复用FDM（Frequency Division Multiplexing）</li><li>时分复用TDM (Time Division Multiplexing)</li><li>统计时分复用 STDM(Statistic TDM) 动态地分配时隙</li><li>波分复用 WDM(Wavelength Division Multiplexing) 一根光纤来同时传输多个光载波信号</li><li>码分复用 CDM(Code Division Multiplexing)</li></ol><p>码分多址 CDMA (Code Division Multiple Access)</p><p>S 站的 8 bit 码片序列是 00011011。</p><p>发送比特 1 时，就发送序列 00011011，</p><p>发送比特 0 时，就发送序列 11100100。</p><p>S 站的码片序列：(–1 –1 –1 +1 +1 –1 +1 +1)</p><p>把收到的码与S的码片进行规格化内积，&gt;0（发送的是1）,&lt;0(发送的是0)，&#x3D;0（未发送）</p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a><strong>数据链路层</strong></h1><p><strong>数据链路层设备</strong></p><p>网桥：以太网互连，隔离冲突域</p><p>交换机：多端口网桥，隔离冲突域</p><p><strong>三大问题</strong></p><ol><li>封装成帧：加首部尾部</li><li>透明传输：不论什么比特组合，都能传输</li><li>差错检测：循环冗余检测CRC</li></ol><p><strong>点对点协议 PPP (Point-to-Point Protocol) 面向字节</strong></p><ol><li>一个将 IP 数据报封装到串行链路的方法</li><li>链路控制协议 LCP (Link Control Protocol)</li><li>网络控制协议 NCP (Network Control Protocol)</li></ol><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_4.png"></p><p><strong>字符填充（异步传输）</strong></p><p>每一个 0x7E 字节转变成为 2 字节序列 (0x7D, 0x5E)</p><p>一个 0x7D 的字节, 则将其转变成为 2 字节序列 (0x7D, 0x5D)</p><p><strong>零比特填充（同步传输）</strong></p><p>在发送端，5 个连续 1，则立即填入一个 0</p><p>接收端，5 个连续1，就把这 5 个连续 1 后的一个 0 删除</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_5.png"></p><p><strong>CSMA&#x2F;CD 载波监听多点接入 &#x2F; 碰撞检测 (Carrier Sense Multiple Access with Collision Detection)</strong></p><p>(1) 准备发送。但在发送之前，必须先检测信道。</p><p>(2) 检测信道。若检测到信道空闲，并在 96 比特时间内信道保持空闲（保证了帧间最小间隔），就发送这个帧。</p><p>(3) 检查碰撞。在发送过程中仍不停地检测信道，即网络适配器要边发送边监听。这里只有两种可能性：</p><p>①发送成功：在争用期内一直未检测到碰撞。这个帧肯定能够发送成功。发送完毕后，其他什么也不做。然后回到 (1)。</p><p>②发送失败：在争用期内检测到碰撞。这时立即停止发送数据，并按规定发送人为干扰信号。适配器接着就执行指数退避算法，等待 r 倍 512 比特时间（2τ）后，返回到步骤 (2)，继续检测信道。但若重传达 16 次仍不能成功，则停止重传而向上报错。</p><p>端到端时延必须小于争用期（发送64字节的时间）的一半！</p><h2 id="以太网V2MAC帧格式"><a href="#以太网V2MAC帧格式" class="headerlink" title="以太网V2MAC帧格式"></a><strong>以太网V2MAC帧格式</strong></h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_6.png"></p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a><strong>网络层</strong></h1><p><strong>网络层设备</strong></p><p>路由器：具有多个输入输出端口的专用计算机，负责路由选择和分组转发，可以隔离冲突域和广播域。</p><p><strong>两种服务</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_7.png"></p><p><strong>ARP（Address Resolution Protocol）地址解析协议</strong></p><p>ARP 高速缓存：存放最近获得的 IP 地址到 MAC 地址的绑定，以减少 ARP 广播的数量。ARP 是解决同一个局域网上的主机或路由器的 IP 地址和硬件地址的映射问题。如果所要找的主机和源主机不在同一个局域网上，那么就要通过 ARP 找到一个位于本局域网上的某个路由器的硬件地址，然后把分组发送给这个路由器，让这个路由器把分组转发给下一个网络。剩下的工作就由下一个网络来做。</p><p><strong>ICMP（Internet Control Message Protocol）网络控制报文协议</strong> ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。 4种差错</p><ol><li>终点不可达 （如：端口错误）</li><li>时间超过</li><li>参数问题</li><li>改变路由（重定向）(Redirect)</li></ol><p>ping(Packet InterNet Groper) 是应用层直接使用网络层 ICMP 的例子，它没有通过运输层的 TCP 或UDP。</p><p>tracert用来跟踪一个分组从源点到终点的路径。它利用 IP 数据报中的 TTL 字段和 ICMP 时间超过差错报告报文实现对从源点到终点的路径的跟踪。</p><h2 id="IP数据报首部格式"><a href="#IP数据报首部格式" class="headerlink" title="IP数据报首部格式"></a><strong>IP数据报首部格式</strong></h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_8.png"></p><p><strong>IP数据报分片</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_9.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_10.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_11.png"></p><p><strong>IP数据报首部检验和计算</strong> 二进制加法即可，有进位，最终结果取反写入</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_12.png"></p><p><strong>IP分类</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_13.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_14.png"></p><p><strong>内部网关协议</strong> <strong>IGP</strong> (Interior Gateway Protocol) <strong>域内路由选择</strong> <strong>RIP（Routing Information Protocol）</strong> 距离向量算法：下一跳相同时，要更新；<strong>距离相同</strong>，下一跳不同时，<strong>不更新</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_15.png"></p><p>好消息传播得快，坏消息传播得慢</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_16.png"></p><p><strong>OSPF 开放最短路径优先 OSPF (Open Shortest Path First)</strong></p><ol><li>向本自治系统中所有路由器发送信息，洪泛法。</li><li>发送的信息就是与本路由器相邻的所有路由器的<strong>链路状态</strong>，但这只是路由器所知道的部分信息。</li><li>“链路状态”就是说明本路由器都**和哪些路由器相邻，**以及该链路的”<strong>度量</strong>“(metric)。</li><li>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。</li></ol><p>为了使 OSPF 能够用于规模很大的网络，OSPF 将一个自治系统再划分为若干个更小的范围，叫做<strong>区域</strong>。 <strong>外部网关协议 EGP (External Gateway Protocol) 域间路由选择</strong></p><p>BGP 是不同自治系统的路由器之间交换路由信息的协议。</p><p>BGP 协议交换路由信息的结点数量级是<strong>自治系统数的量级</strong>，这要比这些自治系统中的网络数少很多。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_17.png"></p><p><strong>虚拟专用网VPN</strong></p><p>专用地址只能用作本地地址而不能用作全球地址。在互联网中的所有路由器，对目的地址是专用地址的数据报一律不进行转发。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_18.png"></p><p>利用公用的互联网作为本机构各专用网之间的通信载体，这样的专用网又称为虚拟专用网VPN (Virtual Private Network)。</p><p><strong>网络地址转换 NAT (Network Address Translation)</strong></p><p>使用端口号的 NAT 叫做网络地址与端口号转换NAPT (Network Address and Port Translation)，而不使用端口号的 NAT 就叫做传统的 NAT (traditional NAT)。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_19.png"></p><h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a><strong>运输层</strong></h1><p><strong>端口复用分用</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_20.png"></p><p><strong>服务器端口</strong> 熟知端口，数值一般为 0~1023。</p><p>登记端口号，数值为 1024~49151，为没有熟知端口号的应用程序使用的。使用这个范围的端口号必须在 IANA 登记，以防止重复。</p><p><strong>客户端端口</strong> 又称为短暂端口号，数值为 49152~65535。 <strong>常用端口</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_21.png"></p><p><strong>用户数据报协议UDP</strong></p><p>无连接、尽最大努力交付、面向报文（应用层给的报文，不合并不拆分）</p><p>没有拥塞控制，适合实时通信</p><p>支持一对多、多对一、一对一、多对多交互通信</p><p><strong>应用程序必须选择合适大小的报文</strong></p><p>若报文太长，UDP 把它交给 IP 层后，IP 层在传送时可能要进行分片，这会降低 IP 层的效率。</p><p>若报文太短，UDP 把它交给 IP 层后，会使 IP 数据报的首部的相对长度太大，这也降低了 IP 层的效率。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_22.png"></p><h2 id="UDP首部格式"><a href="#UDP首部格式" class="headerlink" title="UDP首部格式"></a><strong>UDP首部格式</strong></h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_23.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_24.png"></p><p><strong>传输控制协议TCP</strong></p><p>点对点、面向连接、全双工、面向字节</p><p>根据对方给出的窗口值和网络拥塞程度来决定报文段的字节数</p><p><strong>TCP 连接的端点叫做套接字 (socket) 或插口</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_25.png"></p><h2 id="TCP首部格式"><a href="#TCP首部格式" class="headerlink" title="TCP首部格式"></a><strong>TCP首部格式</strong></h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_26.png"></p><p><strong>可靠传输的原理（停止等待和连续ARQ）</strong> <strong>停止等待</strong>：每发送完一个分组就停止发送，等待对方的确认。 **超时重传：**自动重传请求 ARQ (Automatic Repeat reQuest)</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_27.png"></p><p><strong>可靠传输的实现（滑动窗口、超时重传时间选择、选择确认SACK）</strong> <strong>滑动窗口</strong></p><p>发送窗口+接收窗口&lt;&#x3D;2^（序号位数）</p><p>发送窗口的上限值 = Min [rwnd, cwnd]</p><p>发送方：位于发送窗口内的分组都可连续发送出去，而不需要等待对方的确认，每收到一个确认，就把发送窗口向前滑动一个分组的位置。</p><p>接收方：对按序到达的最后一个分组发送确认。</p><p><strong>Go-back-N（回退 N）</strong></p><p>如果发送方发送了前 5 个分组，而中间的第 3 个分组丢失了。这时接收方只能对前两个分组发出确认。发送方无法知道后面三个分组的下落，而只好把后面的三个分组都再重传一次。</p><p><strong>加权平均往返时间RTTS</strong></p><p>新的RTTS = (1 - a) ´ (旧的RTTS) + a ´ (新的RTT样本) a &#x3D; 1&#x2F;8</p><p><strong>RTT的偏差的加权平均值RTTD</strong></p><p>第一次测量时，RTTD 值取为测量到的 RTT 样本值的一半</p><p>新的 RTTD &#x3D; (1 - b) ´ (旧的RTTD) + b ´ ½RTTS - 新的 RTT 样本½ β&#x3D;0.25</p><p><strong>超时重传时间RTO</strong></p><p>RTO = RTTS + 4 ´ RTTD</p><p><strong>TCP拥塞控制算法</strong></p><ol><li><p><strong>慢开始</strong> (slow-start)</p><p>拥塞窗口cwnd每次的增加量 &#x3D; min (N, SMSS)</p><p>N 是原先未被确认的、但现在被刚收到的确认报文段所确认的字节数</p><p>慢开始门限 ssthresh 的用法如下：</p><p>当 cwnd &lt; ssthresh 时，使用慢开始算法。</p><p>当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。</p><p>当 cwnd &#x3D; ssthresh 时，既可使用慢开始算法，也可使用拥塞避免算法。</p></li><li><p><strong>拥塞避免</strong> (congestion avoidance)</p><p>每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加 1，<strong>加法增大</strong></p></li></ol><p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（重传定时器超时）： ssthresh &#x3D; max(cwnd&#x2F;2，2) cwnd &#x3D; 1 执行慢开始算法</p><ol><li><p><strong>快重传</strong> (fast retransmit)</p><p>只要一连收到三个重复确认，就知道接收方确实没有收到报文段，因而应当立即进行重传（即”快重传”）</p></li><li><p><strong>快恢复</strong> (fast recovery)</p></li></ol><p>收到连续三个重复的确认时，很可能没有发生拥塞，执行快恢复算法</p><p>ssthresh &#x3D; 当前拥塞窗口 cwnd &#x2F; 2</p><p>cwnd &#x3D; 慢开始门限 ssthresh <strong>乘法减小</strong></p><p>执行拥塞避免算法</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_28.png"></p><p><strong>全局同步</strong></p><p>网络中通常有很多的 TCP 连接，这些连接中的报文段通常是复用在网络层的 IP 数据报中传送的，若发生了路由器中的尾部丢弃，就可能会同时影响到很多条 TCP 连接，结果使这许多 TCP 连接在同一时间突然都进入到慢开始状态。这在 TCP 的术语中称为全局同步 (global syncronization)。</p><p><strong>主动队列管理AQM</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_29.png"></p><p><strong>TCP的运输链接管理</strong>（客户服务器方式） <strong>连接建立：三报文握手</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_30.png"></p><p><strong>连接释放：四报文握手</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_31.png"></p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a><strong>应用层</strong></h1><p><strong>域名系统DNS(Domain Name System)</strong> … . 三级域名 . 二级域名 . 顶级域名 <strong>顶级域名</strong> .com    （公司和企业） .net    （网络服务机构 .org    （非赢利性组织） .edu    （美国专用的教育机构） .gov    （美国专用的政府部门） .mil    （美国专用的军事部门） .int    （国际组织） .arpa （基础结构域名，用于反向域名解析） <strong>域名服务器</strong> 根域名服务器 顶级域名服务器 权限域名服务器 本地域名服务器 <strong>本地域名服务器迭代查询</strong>（我不知道，你找张三吧）</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_32.png"></p><p><strong>本地域名服务器递归查询</strong>（行，我去帮你问）</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_33.png"></p><p><strong>统一资源定位符 URL</strong> (Uniform Resource Locator) 来标志万维网上的各种文档。 在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是<strong>超文本传送协议</strong> <strong>HTTP (HyperText Transfer Protocol)</strong>。</p><p>HTTP 是面向事务的客户服务器协议。</p><p>HTTP 1.0 协议是无状态的 (stateless)。</p><p>HTTP 协议本身也是无连接的，虽然它使用了面向连接的 TCP 向上提供的服务。</p><p>HTTP&#x2F;1.1 协议使用持续连接 (persistent connection)。</p><p><strong>请求一个万维网文档所需的时间</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_34.png"></p><p><strong>代理服务器 (proxy server)</strong> 又称为万维网高速缓存 (Web cache)</p><p>它代表浏览器发出 HTTP 请求</p><p>万维网高速缓存把最近的一些请求和响应暂存在本地磁盘中。</p><p>当与暂时存放的请求相同的新请求到达时，万维网高速缓存就把暂存的响应发送出去，而不需要按 URL 的地址再去互联网访问该资源</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_35.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_36.png"></p><p><strong>HTTP状态码</strong></p><p>1xx 表示通知信息的，如请求收到了或正在进行处理。</p><p>2xx 表示成功，如接受或知道了。</p><p>3xx 表示重定向，表示要完成请求还必须采取进一步的行动。</p><p>4xx 表示客户的差错，如请求中有错误的语法或不能完成。</p><p>5xx 表示服务器的差错，如服务器失效无法完成请求。</p><p><strong>电子邮件</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_37.png"></p><p><strong>SMTP</strong></p><p>SMTP 不能传送可执行文件或其他的二进制对象。</p><p>SMTP 限于传送 7 位的 ASCII 码</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_38.png"></p><p><strong>MIME</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_39.png"></p><p><strong>网络安全</strong></p><p><strong>数据加密模型</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_40.png"></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_41.png"></p><p><strong>对称密钥密码体制</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_42.png"></p><p><strong>公钥密码体制</strong></p><p>加密密钥(即公钥) PK 是公开信息，而解密密钥(即私钥或秘钥) SK 是需要保密的。</p><p>加密算法 E 和解密算法 D 也都是公开的。</p><p>虽然秘钥 SK 是由公钥 PK 决定的，但却不能根据 PK 计算出 SK。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_43.png"></p><p><strong>数字签名</strong>     如果某一信息用公开密钥加密，则必须用私有密钥解密，这就是实现保密的方法     如果某一信息用私有密钥加密，那么，它必须用公开密钥解密。这就是实现数字签名的方法 <strong>鉴别</strong></p><p>在信息的安全领域中，对付被动攻击的重要措施是加密，而对付主动攻击中的篡改和伪造则要用鉴别 (authentication) 。</p><p>报文鉴别使得通信的接收方能够验证所收到的报文（发送者和报文内容、发送时间、序列等）的真伪。</p><p>数字签名可以实现鉴别，但代价较大。</p><p><strong>密码散列函数</strong> (cryptographic hash function)是一种相对简单的对报文进行鉴别的方法。     (1) 散列函数的输入长度可以很长，但其输出长度则是固定的，并且较短。散列函数的输出叫做散列值，或更简单些，称为散列。     (2) 不同的散列值肯定对应于不同的输入，但不同的输入却可能得出相同的散列值。这就是说，散列函数的输入和输出并非一一对应的，而是多对一的。 <strong>密钥分配</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/11/112820_0411_44.png"></p><p><strong>防火墙</strong></p><p>防火墙是由软件、硬件构成的系统，是一种特殊编程的路由器，用来在两个网络之间实施访问控制策略。</p><p>功能有两个：阻止和允许。</p><p>    “阻止”就是阻止某种类型的通信量通过防火墙（从外部网络到内部网络，或反过来）。</p><p>    “允许”的功能与”阻止”恰好相反。</p><p><strong>入侵检测IDS (Intrusion Detection System)</strong></p><p>    IDS 对进入网络的分组执行深度分组检查，当观察到可疑分组时，向网络管理员发出告警或执行阻断操作（由于 IDS 的”误报”率通常较高，多数情况不执行自动阻断）。</p><p>    基于特征的 IDS <strong>维护一个所有已知攻击标志性特征的数据库</strong>。</p><p>    基于异常的 IDS 通过观察正常运行的网络流量，学习正常流量的统计特性和规律。当检测到网络中流量某种统计规律不符合正常情况时，则认为可能发生了入侵行为。</p><p>    至今为止，大多数部署的 IDS <strong>主要是基于特征的</strong>，尽管某些 IDS 包括了某些基于异常的特性。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet允许跨域访问（Ajax请求Servlet数据）</title>
    <link href="/2020/09/21/elementor-servletajaxservlet/"/>
    <url>/2020/09/21/elementor-servletajaxservlet/</url>
    
    <content type="html"><![CDATA[<p>之前用Servlet写过一个用户信息管理的服务端程序，是用于安卓app上的HTTP请求，现在想把这个客户端部分内容在网页重现，尝试用Ajax请求url为“xxx.do”的数据发现不行，浏览器开发者模式提示不允许跨域访问。</p><p>于是在Java代码HttpServletResponse处添加如下代码，使用 CORS协议允许 <code>Response</code> 跨域。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-31.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 允许跨域的主机地址 */</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);  </span><br><span class="line"><span class="comment">/* 允许跨域的请求方法GET, POST, HEAD 等 */</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;*&quot;</span>);  </span><br><span class="line"><span class="comment">/* 重新预检验跨域的缓存时间 (s) */</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);  </span><br><span class="line"><span class="comment">/* 允许跨域的请求头 */</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>);  </span><br><span class="line"><span class="comment">/* 是否携带cookie */</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);  </span><br></pre></td></tr></table></figure><p>再次尝试Ajax请求，就可以拿到servlet的数据啦</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-32-1024x225.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">loadXMLDoc</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span></span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// IE6, IE5 浏览器执行代码</span></span></span><br><span class="line"><span class="language-javascript">xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;http://xxxxxxxx/xxx.do&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">xmlhttp.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>AJAX<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;loadXMLDoc()&quot;</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈夫曼树，编码解码</title>
    <link href="/2020/09/19/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%EF%BC%8C%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/"/>
    <url>/2020/09/19/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%EF%BC%8C%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>给定N个权值作为N个<a href="https://baike.baidu.com/item/%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9/3620239">叶子结点</a>，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-22.png"></p><h4 id="树结构"><a href="#树结构" class="headerlink" title="树结构"></a>树结构</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> c;     <span class="comment">//字符</span></span><br><span class="line">    <span class="type">int</span> weight; <span class="comment">//权重</span></span><br><span class="line">    Node *left;</span><br><span class="line">    Node *right;</span><br><span class="line">    Node *parent;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">char</span> cc, <span class="type">int</span> w) <span class="comment">//叶子节点构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        c = cc;</span><br><span class="line">        weight = w;</span><br><span class="line">        left = <span class="literal">NULL</span>;</span><br><span class="line">        right = <span class="literal">NULL</span>;</span><br><span class="line">        parent = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> w, Node *l, Node *r, Node *p) <span class="comment">//非叶子节点构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        c = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        weight = w;</span><br><span class="line">        left = l;</span><br><span class="line">        right = r;</span><br><span class="line">        parent = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanTree</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HuffmanTree</span>() &#123; root = <span class="literal">NULL</span>; &#125;</span><br><span class="line">    ~<span class="built_in">HuffmanTree</span>() &#123; <span class="built_in">release</span>(root); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">release</span><span class="params">(Node *root)</span></span>;        <span class="comment">//用于析构释放内存</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setTree</span><span class="params">(vector&lt;Node *&gt; &amp;v)</span></span>; <span class="comment">//生成哈夫曼树</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">enCode</span><span class="params">(string s)</span></span>;           <span class="comment">//编码</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deCode</span><span class="params">(string str)</span></span>;         <span class="comment">//解码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="构造树"><a href="#构造树" class="headerlink" title="构造树"></a>构造树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffmanTree::setTree</span><span class="params">(vector&lt;Node *&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//传入参数为节点向量，结合测试用例看</span></span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">int</span>(v.<span class="built_in">size</span>() != <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">int</span>(v.<span class="built_in">size</span>()) - <span class="number">1</span>;</span><br><span class="line">        Node *p1 = v[n];</span><br><span class="line">        Node *p2 = v[n - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//排序后，以最后两个元素，new一个新节点，新节点权重等于两个子节点权重之和</span></span><br><span class="line">        Node *temp = <span class="keyword">new</span> <span class="built_in">Node</span>((p1-&gt;weight + p2-&gt;weight), p1, p2, <span class="literal">NULL</span>);</span><br><span class="line">        p1-&gt;parent = temp; <span class="comment">//最后两个元素的父节点为新节点</span></span><br><span class="line">        p2-&gt;parent = temp;</span><br><span class="line">        v.<span class="built_in">erase</span>(v.<span class="built_in">end</span>() - <span class="number">1</span>); <span class="comment">//移除最后两个元素，（没有释放对象内存）</span></span><br><span class="line">        v.<span class="built_in">erase</span>(v.<span class="built_in">end</span>() - <span class="number">1</span>);</span><br><span class="line">        v.<span class="built_in">push_back</span>(temp);             <span class="comment">//把新节点放进向量中</span></span><br><span class="line">        <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), cmp); <span class="comment">//重新排序</span></span><br><span class="line">    &#125;</span><br><span class="line">    root = v[<span class="number">0</span>]; <span class="comment">//向量中只剩下一个元素时，该节点就是哈夫曼树根</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Node *p1, Node *p2)</span> <span class="comment">//向量排序时的自定义规则</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p1-&gt;weight &gt; p2-&gt;weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffmanTree::enCode</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p = root;</span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    stack&lt;Node *&gt; s;</span><br><span class="line">    vector&lt;Node&gt; v;</span><br><span class="line">    <span class="comment">//以下为非递归前序遍历</span></span><br><span class="line">    s.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        Node *temp = s.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">if</span> (!temp-&gt;left &amp;&amp; !temp-&gt;right) <span class="comment">//是叶子节点</span></span><br><span class="line">            v.<span class="built_in">push_back</span>(*temp);          <span class="comment">//放进向量中</span></span><br><span class="line">        s.<span class="built_in">pop</span>();                         <span class="comment">//弹出栈顶元素</span></span><br><span class="line">        <span class="keyword">if</span> (temp-&gt;right)                 <span class="comment">//右节点不空</span></span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(temp-&gt;right); <span class="comment">//入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp-&gt;left) <span class="comment">//左节点不空</span></span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(temp-&gt;left); <span class="comment">//入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以上遍历后所有叶子节点存进了一个向量中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(str.<span class="built_in">length</span>()); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">int</span>(v.<span class="built_in">size</span>()); j++) <span class="comment">//在向量中查找</span></span><br><span class="line">            <span class="keyword">if</span> (v[j].c == str[i])               <span class="comment">//目标叶子节点的字符和传递进来的字符相同</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//执行编码算法</span></span><br><span class="line">                stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line">                Node *cur;</span><br><span class="line">                cur = &amp;v[j];</span><br><span class="line">                <span class="keyword">while</span> (cur) <span class="comment">//从叶子节点向根回溯路径，每一步压入栈</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cur-&gt;parent)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cur-&gt;parent-&gt;left-&gt;weight == cur-&gt;weight) <span class="comment">//是左节点，标记路径为0</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            stk.<span class="built_in">push</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="comment">//是右节点，标记路径为1</span></span><br><span class="line">                            stk.<span class="built_in">push</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    cur = cur-&gt;parent; <span class="comment">//回溯一步</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>()) <span class="comment">//输出栈中所有元素，即为根到叶子节点的路径</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; stk.<span class="built_in">top</span>();</span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">//每个字符编码输出间空一格，方便查看验证</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffmanTree::deCode</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p = root;</span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(str.<span class="built_in">length</span>()); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&#x27;0&#x27;</span>)                       <span class="comment">//读到0</span></span><br><span class="line">            p = p-&gt;left;                         <span class="comment">//指针指向左节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;1&#x27;</span>)                  <span class="comment">//读到1</span></span><br><span class="line">            p = p-&gt;right;                        <span class="comment">//指针指向右节点</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;left == <span class="literal">NULL</span> &amp;&amp; p-&gt;right == <span class="literal">NULL</span>) <span class="comment">//是叶子节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; p-&gt;c; <span class="comment">//输出字符</span></span><br><span class="line">            p = root;     <span class="comment">//指针重新指向根节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;Node *&gt; v;</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="string">&#x27;S&#x27;</span>, <span class="number">5</span>));</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="string">&#x27;U&#x27;</span>, <span class="number">8</span>));</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="string">&#x27;C&#x27;</span>, <span class="number">9</span>));</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="string">&#x27;E&#x27;</span>, <span class="number">20</span>));</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="string">&#x27;!&#x27;</span>, <span class="number">10</span>));</span><br><span class="line">    HuffmanTree t;</span><br><span class="line">    t.<span class="built_in">setTree</span>(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;输入为:SUCCESS!n编码为:&quot;;</span></span><br><span class="line">    t.<span class="built_in">enCode</span>(<span class="string">&quot;SUCCESS!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;输入为:1001011101100100100111n解码为:&quot;;</span></span><br><span class="line">    t.<span class="built_in">deCode</span>(<span class="string">&quot;1001011101100100100111&quot;</span>); <span class="comment">//上一步中的编码反过来解析</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;nn&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-23.png"></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>c++</tag>
      
      <tag>哈夫曼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆的基本操作：插入元素、删除最大元素</title>
    <link href="/2020/09/19/%E5%A0%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%9A%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%E3%80%81%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <url>/2020/09/19/%E5%A0%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%9A%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%E3%80%81%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h4 id="最大堆结构定义"><a href="#最大堆结构定义" class="headerlink" title="最大堆结构定义"></a>最大堆结构定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Heap</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;<span class="comment">//用向量来构造堆</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Heap</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Heap</span>()&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> n)</span></span>;<span class="comment">//插入</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">()</span></span>;<span class="comment">//删除最大值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;<span class="comment">//按层次输出，方便验证程序是否正确</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="插入（添加在尾部，上调）"><a href="#插入（添加在尾部，上调）" class="headerlink" title="插入（添加在尾部，上调）"></a>插入（添加在尾部，上调）</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-19.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Heap::insert</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(n);           <span class="comment">//向量末尾加一个元素</span></span><br><span class="line">    <span class="type">int</span> s = <span class="built_in">int</span>(vec.<span class="built_in">size</span>()) - <span class="number">1</span>; <span class="comment">//获取元素个数</span></span><br><span class="line">    <span class="keyword">while</span> (vec[(s - <span class="number">1</span>) / <span class="number">2</span>] &lt; vec[s])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(vec[(s - <span class="number">1</span>) / <span class="number">2</span>], vec[s]); <span class="comment">//和父节点元素交换</span></span><br><span class="line">        s = (s - <span class="number">1</span>) / <span class="number">2</span>;                    <span class="comment">//定位到原父节点位置</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除最大元素（删除根，末尾节点浮上，再下调）"><a href="#删除最大元素（删除根，末尾节点浮上，再下调）" class="headerlink" title="删除最大元素（删除根，末尾节点浮上，再下调）"></a>删除最大元素（删除根，末尾节点浮上，再下调）</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-20.png"></p><p>每次下调，与左右节点中大的那个交换</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-21.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Heap::erase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vec.<span class="built_in">empty</span>()) <span class="comment">//向量为空，直接返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> s = <span class="built_in">int</span>(vec.<span class="built_in">size</span>());</span><br><span class="line">    <span class="built_in">swap</span>(vec[<span class="number">0</span>], vec[s - <span class="number">1</span>]); <span class="comment">//交换首尾元素</span></span><br><span class="line">    vec.<span class="built_in">pop_back</span>();              <span class="comment">//删除末尾元素</span></span><br><span class="line">    s -= <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) <span class="comment">//对根节点执行下调</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">2</span> * i + <span class="number">1</span>) &lt;= (s - <span class="number">1</span>)) <span class="comment">//左节点存在</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="number">2</span> * i + <span class="number">2</span>) &lt;= s - <span class="number">1</span>) <span class="comment">//右节点存在</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (vec[i] &lt; vec[<span class="number">2</span> * i + <span class="number">1</span>] &amp;&amp; vec[i] &lt; vec[<span class="number">2</span> * i + <span class="number">2</span>]) <span class="comment">//比两个子节点都小</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> temp = vec[<span class="number">2</span> * i + <span class="number">1</span>] &lt; vec[<span class="number">2</span> * i + <span class="number">2</span>] ? (<span class="number">2</span> * i + <span class="number">2</span>) : (<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">swap</span>(vec[i], vec[temp]); <span class="comment">//和大的那个子节点交换</span></span><br><span class="line">                    i = temp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (vec[i] &lt; vec[<span class="number">2</span> * i + <span class="number">1</span>]) <span class="comment">//比左节点小，比右节点大</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(vec[i], vec[<span class="number">2</span> * i + <span class="number">1</span>]); <span class="comment">//和左子节点交换</span></span><br><span class="line">                    i = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (vec[i] &lt; vec[<span class="number">2</span> * i + <span class="number">2</span>]) <span class="comment">//比右节点小，比左节点大</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(vec[i], vec[<span class="number">2</span> * i + <span class="number">2</span>]); <span class="comment">//和右子节点交换</span></span><br><span class="line">                    i = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">//比左右节点都大</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//不存在右节点</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (vec[i] &lt; vec[<span class="number">2</span> * i + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(vec[i], vec[<span class="number">2</span> * i + <span class="number">1</span>]); <span class="comment">//和左子节点交换</span></span><br><span class="line">                    i = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">//比左节点大</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//没有左节点</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>c++</tag>
      
      <tag>堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>满二叉树、完全二叉树、平衡二叉树、堆、哈夫曼树的概念</title>
    <link href="/2020/09/19/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E5%A0%86%E3%80%81%E5%93%88%E5%A4%AB%E6%9B%BC/"/>
    <url>/2020/09/19/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E5%A0%86%E3%80%81%E5%93%88%E5%A4%AB%E6%9B%BC/</url>
    
    <content type="html"><![CDATA[<h4 id="一、满二叉树"><a href="#一、满二叉树" class="headerlink" title="一、满二叉树"></a>一、满二叉树</h4><p>　　一棵二叉树的结点要么是叶子结点，要么它有两个子结点（如果一个二叉树的层数为K，且结点总数是(2^k) -1，则它就是满二叉树。）</p><p><img src="https://img2018.cnblogs.com/i-beta/1468919/201911/1468919-20191103194220076-925294362.png"></p><h4 id="二、完全二叉树"><a href="#二、完全二叉树" class="headerlink" title="二、完全二叉树"></a>二、完全二叉树</h4><p>　　若设二叉树的深度为k，除第 k 层外，其它各层 (1～k-1) 的结点数都达到最大个数，第k 层所有的结点都<strong>连续集中在最左边</strong>，这就是完全二叉树。</p><p><img src="https://img2018.cnblogs.com/i-beta/1468919/201911/1468919-20191103194739538-2034251878.png"></p><h4 id="三、平衡二叉树"><a href="#三、平衡二叉树" class="headerlink" title="三、平衡二叉树"></a>三、平衡二叉树</h4><p>　　它或者是一颗空树，或它的左子树和右子树的深度之差(平衡因子)的绝对值不超过1，且它的左子树和右子树都是一颗平衡二叉树。</p><p><img src="https://img2018.cnblogs.com/i-beta/1468919/201911/1468919-20191103195149869-1317786481.png"></p><h4 id="四、堆"><a href="#四、堆" class="headerlink" title="四、堆"></a>四、堆</h4><p>是一颗完全二叉树，每个节点中的数据项都大于或等于其子女的数据项—-最大堆。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-17.png"></p><p>是一颗完全二叉树，每个节点中的数据项都小于或等于其子女的数据项—-最小堆。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-18.png"></p><h4 id="五、最优二叉树（哈夫曼树）"><a href="#五、最优二叉树（哈夫曼树）" class="headerlink" title="五、最优二叉树（哈夫曼树）"></a>五、最优二叉树（哈夫曼树）</h4><p>　　树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉搜索树的插入、删除节点</title>
    <link href="/2020/09/19/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9/"/>
    <url>/2020/09/19/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="二叉树结构定义"><a href="#二叉树结构定义" class="headerlink" title="二叉树结构定义"></a>二叉树结构定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data=<span class="number">0</span>;</span><br><span class="line">    Node* parent=<span class="literal">NULL</span>;</span><br><span class="line">    Node* lchild=<span class="literal">NULL</span>;</span><br><span class="line">    Node* rchild=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        data=n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span></span><br><span class="line">&#123;</span><br><span class="line">    Node* root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Node* <span class="title">getRoot</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> root;&#125;</span><br><span class="line"><span class="function">Node* <span class="title">getNode</span><span class="params">(<span class="type">int</span> data)</span></span>;<span class="comment">//查找对应节点</span></span><br><span class="line"><span class="function">Node* <span class="title">sucessor</span><span class="params">(Node *p)</span></span>;<span class="comment">//查找对应节点的在中序遍历中的后继节点</span></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> data)</span></span>;<span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> data)</span></span>;<span class="comment">//删除</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">BinarySearchTree::insert</span><span class="params">(<span class="type">int</span> data)</span> <span class="comment">//插入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p = root, *newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(data);</span><br><span class="line">    Node *temp = p;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="comment">//空树</span></span><br><span class="line">    &#123;</span><br><span class="line">        root = newNode; <span class="comment">//插入的为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = p;</span><br><span class="line">            <span class="keyword">if</span> (data &lt; p-&gt;data)</span><br><span class="line">                p = p-&gt;lchild;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; p-&gt;data)</span><br><span class="line">                p = p-&gt;rchild;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="comment">//找到应该插入的位置</span></span><br><span class="line">        newNode-&gt;parent = temp;</span><br><span class="line">        <span class="keyword">if</span> (newNode-&gt;data &gt; temp-&gt;data)</span><br><span class="line">            temp-&gt;rchild = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp-&gt;lchild = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">BinarySearchTree::remove</span><span class="params">(<span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p = <span class="built_in">getNode</span>(data);</span><br><span class="line">    <span class="keyword">if</span> (!p-&gt;parent) <span class="comment">//根节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        Node *q = <span class="built_in">sucessor</span>(p); <span class="comment">//找到后继节点</span></span><br><span class="line">        <span class="type">int</span> tempData = q-&gt;data;</span><br><span class="line">        <span class="built_in">remove</span>(q-&gt;data);    <span class="comment">//删除后继节点</span></span><br><span class="line">        p-&gt;data = tempData; <span class="comment">//修改值为后继节点的值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> flag = p-&gt;data &gt; p-&gt;parent-&gt;data; <span class="comment">//是否为右子树，下面多次使用，特此做标记</span></span><br><span class="line">    <span class="comment">//如果是叶子节点，直接删除即可</span></span><br><span class="line">    <span class="keyword">if</span> (!p-&gt;lchild &amp;&amp; !p-&gt;rchild)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            p-&gt;parent-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p-&gt;parent-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">delete</span> p; <span class="comment">//释放内存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;lchild &amp;&amp; !p-&gt;rchild) <span class="comment">//如果只有左子树</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="comment">//父节点的右子树指向当前节点的左子树</span></span><br><span class="line">            p-&gt;parent-&gt;rchild = p-&gt;lchild;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//父节点的左子树指向当前节点的左子树</span></span><br><span class="line">            p-&gt;parent-&gt;lchild = p-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!p-&gt;lchild &amp;&amp; p-&gt;rchild) <span class="comment">//如果只有右子树</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="comment">//父节点的右子树指向当前节点的右子树</span></span><br><span class="line">            p-&gt;parent-&gt;rchild = p-&gt;rchild;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//父节点的左子树指向当前节点的右子树</span></span><br><span class="line">            p-&gt;parent-&gt;lchild = p-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//既有左子树又有右子树</span></span><br><span class="line">    &#123;</span><br><span class="line">        Node *q = <span class="built_in">sucessor</span>(p); <span class="comment">//找到后继节点</span></span><br><span class="line">        p-&gt;data = q-&gt;data;     <span class="comment">//修改值为后继节点的值</span></span><br><span class="line">        <span class="built_in">remove</span>(q-&gt;data);       <span class="comment">//删除后继节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node *<span class="title">BinarySearchTree::getNode</span><span class="params">(<span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//折半查找元素</span></span><br><span class="line">    Node *p = root;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p-&gt;data != data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data &lt; data)</span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node *<span class="title">BinarySearchTree::sucessor</span><span class="params">(Node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//找到中序遍历的后继节点</span></span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;rchild) <span class="comment">//有右子树，找到右子树中最小的</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;rchild;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;lchild)</span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//无右子树，找父节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;parent)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;parent)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;parent-&gt;data &lt;= p-&gt;data)</span><br><span class="line">                p = p-&gt;parent;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>二叉树</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的遍历（前序、中序、后序）*（递归、非递归）共6种</title>
    <link href="/2020/09/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%EF%BC%88%E5%89%8D%E5%BA%8F%E3%80%81%E4%B8%AD%E5%BA%8F%E3%80%81%E5%90%8E%E5%BA%8F%EF%BC%89%EF%BC%88%E9%80%92%E5%BD%92%E3%80%81%E9%9D%9E%E9%80%92/"/>
    <url>/2020/09/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%EF%BC%88%E5%89%8D%E5%BA%8F%E3%80%81%E4%B8%AD%E5%BA%8F%E3%80%81%E5%90%8E%E5%BA%8F%EF%BC%89%EF%BC%88%E9%80%92%E5%BD%92%E3%80%81%E9%9D%9E%E9%80%92/</url>
    
    <content type="html"><![CDATA[<h4 id="二叉树结构定义"><a href="#二叉树结构定义" class="headerlink" title="二叉树结构定义"></a>二叉树结构定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data=<span class="number">0</span>;</span><br><span class="line">    Node* parent=<span class="literal">NULL</span>;</span><br><span class="line">    Node* lchild=<span class="literal">NULL</span>;</span><br><span class="line">    Node* rchild=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        data=n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span></span><br><span class="line">&#123;</span><br><span class="line">    Node* root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="递归版"><a href="#递归版" class="headerlink" title="递归版"></a>递归版</h3><h4 id="中序遍历（左、根、右）"><a href="#中序遍历（左、根、右）" class="headerlink" title="中序遍历（左、根、右）"></a>中序遍历（左、根、右）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BinarySearchTree::inOrder</span><span class="params">(Node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;lchild)</span><br><span class="line">        <span class="built_in">inOrder</span>(p-&gt;lchild);</span><br><span class="line">    cout &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">setw</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;rchild)</span><br><span class="line">        <span class="built_in">inOrder</span>(p-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前序遍历（根、左、右）"><a href="#前序遍历（根、左、右）" class="headerlink" title="前序遍历（根、左、右）"></a>前序遍历（根、左、右）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BinarySearchTree::preOrder</span><span class="params">(Node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//前序遍历</span></span><br><span class="line">    cout &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">setw</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;lchild)</span><br><span class="line">        <span class="built_in">inOrder</span>(p-&gt;lchild);</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;rchild)</span><br><span class="line">        <span class="built_in">inOrder</span>(p-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历（左、右、根）"><a href="#后序遍历（左、右、根）" class="headerlink" title="后序遍历（左、右、根）"></a>后序遍历（左、右、根）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BinarySearchTree::postOrder</span><span class="params">(Node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="keyword">if</span> (p-&gt;lchild)</span><br><span class="line">        <span class="built_in">inOrder</span>(p-&gt;lchild);</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;rchild)</span><br><span class="line">        <span class="built_in">inOrder</span>(p-&gt;rchild);</span><br><span class="line">    cout &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">setw</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归版"><a href="#非递归版" class="headerlink" title="非递归版"></a>非递归版</h3><h4 id="中序遍历（左、根、右）-1"><a href="#中序遍历（左、根、右）-1" class="headerlink" title="中序遍历（左、根、右）"></a>中序遍历（左、根、右）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BinarySearchTree::nonRecursiveInOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*非递归中序遍历</span></span><br><span class="line"><span class="comment">    对每一个根节点：</span></span><br><span class="line"><span class="comment">    1.向左下方遍历，遍历节点入栈，找到它的左子树最下边</span></span><br><span class="line"><span class="comment">    2.弹出栈顶并打印</span></span><br><span class="line"><span class="comment">    3.其右子树为新的根节点</span></span><br><span class="line"><span class="comment">    重复上述步骤直到栈空</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Node *p = root;</span><br><span class="line">    stack&lt;Node *&gt; stk;</span><br><span class="line">    <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//遍历节点入栈</span></span><br><span class="line">        <span class="keyword">while</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            stk.<span class="built_in">push</span>(p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//弹出栈顶并打印</span></span><br><span class="line">        <span class="keyword">if</span> (!stk.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            p = stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">            cout &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">setw</span>(<span class="number">4</span>);</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">            <span class="comment">//进入右子树，开始新的一轮左子树遍历</span></span><br><span class="line">            <span class="comment">//若没有右子树，按循环条件，直接弹出下一个栈顶</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前序遍历（根、左、右）-1"><a href="#前序遍历（根、左、右）-1" class="headerlink" title="前序遍历（根、左、右）"></a>前序遍历（根、左、右）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BinarySearchTree::nonRecursivePreOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*非递归前序遍历</span></span><br><span class="line"><span class="comment">    对每一个根节点：</span></span><br><span class="line"><span class="comment">    1.打印值</span></span><br><span class="line"><span class="comment">    2.向左下方遍历，遍历节点入栈，找到它的左子树最下边</span></span><br><span class="line"><span class="comment">    3.弹出栈顶</span></span><br><span class="line"><span class="comment">    4.其右子树为新的根节点</span></span><br><span class="line"><span class="comment">    重复上述步骤直到栈空</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Node *p = root;</span><br><span class="line">    stack&lt;Node *&gt; stk;</span><br><span class="line">    <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//打印根节点的值，往左下遍历，遍历节点入栈</span></span><br><span class="line">        <span class="keyword">while</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">setw</span>(<span class="number">4</span>);</span><br><span class="line">            stk.<span class="built_in">push</span>(p);</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//弹出栈顶</span></span><br><span class="line">        <span class="keyword">if</span> (!stk.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            p = stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">            <span class="comment">//进入右子树，开始新的一轮左子树遍历</span></span><br><span class="line">            <span class="comment">//若没有右子树，按循环条件，直接弹出下一个栈顶</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历（左、右、根）-1"><a href="#后序遍历（左、右、根）-1" class="headerlink" title="后序遍历（左、右、根）"></a>后序遍历（左、右、根）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BinarySearchTree::nonRecursivePostOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*非递归后序遍历</span></span><br><span class="line"><span class="comment">    对每一个根节点：</span></span><br><span class="line"><span class="comment">    1.向左下方遍历，遍历节点入栈，找到它的左子树最下边</span></span><br><span class="line"><span class="comment">    2.如果无右子树或者右子树刚被访问，直接打印根节点</span></span><br><span class="line"><span class="comment">      否则根节点再次入栈，先处理右子树</span></span><br><span class="line"><span class="comment">    3.其右子树为新的根节点</span></span><br><span class="line"><span class="comment">    重复上述步骤直到栈空</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Node *p = root;</span><br><span class="line">    Node *last = <span class="literal">NULL</span>; <span class="comment">//标记上一个访问的节点</span></span><br><span class="line">    stack&lt;Node *&gt; stk;</span><br><span class="line">    <span class="comment">//往左下遍历，遍历节点入栈</span></span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        stk.<span class="built_in">push</span>(p);</span><br><span class="line">        p = p-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//弹出栈顶</span></span><br><span class="line">        p = stk.<span class="built_in">top</span>();</span><br><span class="line">        stk.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">//一个根节点被打印的条件：无右子树或者右子树刚被访问</span></span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;<span class="built_in">rchild</span>(last &amp;&amp; last-&gt;data == p-&gt;rchild-&gt;data))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">setw</span>(<span class="number">4</span>);</span><br><span class="line">            last = p; <span class="comment">//修改上一个访问的节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//进入该条件说明有右子树且尚未被访问</span></span><br><span class="line">            <span class="comment">//根节点再次入栈，先处理右子树</span></span><br><span class="line">            stk.<span class="built_in">push</span>(p);</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">            <span class="comment">//往左下遍历，遍历节点入栈</span></span><br><span class="line">            <span class="keyword">while</span> (p)</span><br><span class="line">            &#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(p);</span><br><span class="line">                p = p-&gt;lchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode C++断点调试配置</title>
    <link href="/2020/09/18/vscode-c%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/09/18/vscode-c%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>之前一直使用VS2019调试c++程序，但是平时写得比较多的单个cpp文件也需要建一个VS项目给人的感觉有些冗杂，接触了VSCode之后就被它的轻量和高扩展性吸引了，是时候把断点调试功能也配置好，尽量不用VS2019了。</p><p>在这之前需要安装好MinGW，配置好环境变量。</p><p>然后安装这个插件 CodeLLDB</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-10.png"></p><p>打开空文件夹，新建cpp文件，可以先设置好断点</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-13.png"></p><p>点击创建launch.json文件，选择C++（GDB&#x2F;LLDB）</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-14-1024x330.png"></p><p>选择配置 g++即可</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-15.png"></p><p>直接进入断点调试</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-16-1024x457.png"></p><p>在.vscode文件夹中自动生成了launch.json和task.json</p><p>launch.json：</p><p>1.建议把”externalConsole”:设置为true，这样控制台运行窗口就是独立的</p><p>2.”miDebuggerPath”需要根据MinGW的安装路径确定，不过我这里自动生成的就是正确的，可能是因为提前设置好了环境变量吧</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++.exe - 生成和调试活动文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:MinGWbingdb.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: g++.exe build active file&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>tasks.json:</p><p>同样的，唯一要修改的可能就是”command”部分的g++路径，与MinGW路径对应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: g++.exe build active file&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:MinGWbing++.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件安装配置</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归应用：汉诺塔、数制转换</title>
    <link href="/2020/09/18/%E9%80%92%E5%BD%92%E5%BA%94%E7%94%A8%EF%BC%9A%E6%B1%89%E8%AF%BA%E5%A1%94%E3%80%81%E6%95%B0%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <url>/2020/09/18/%E9%80%92%E5%BD%92%E5%BA%94%E7%94%A8%EF%BC%9A%E6%B1%89%E8%AF%BA%E5%A1%94%E3%80%81%E6%95%B0%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h4><p>如下图所示，从左到右有A、B、C三根柱子，其中A柱子上面有从小叠到大的n个圆盘，现要求将A柱子上的圆盘移到C柱子上去，期间只有一个原则：一次只能移到一个盘子且大盘子不能在小盘子上面，求移动的步骤和移动的次数</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvMTAyNjg2Ni8yMDE2MTAvMTAyNjg2Ni0yMDE2MTAxNjAyMjg1OTg4OS0yMDU1NDAyNjY0LmpwZw?x-oss-process=image/format,png"></p><p>n &#x3D;&#x3D; 1</p><p>      <strong>第1次  1号盘  A—-&gt;C</strong>       sum &#x3D; 1</p><p>n &#x3D;&#x3D; 2</p><p>       　　　　　　第1次  1号盘  A—-&gt;B</p><p>      　　　　　　 <strong>第2次  2号盘  A—-&gt;C</strong></p><p>       　　　　　　第3次  1号盘  B—-&gt;C        sum &#x3D; 3</p><p>n &#x3D;&#x3D; 3</p><p>　　　　　　　　第1次  1号盘  A—-&gt;C</p><p>　　　　　　　　第2次  2号盘  A—-&gt;B</p><p>　　　　　　　　第3次  1号盘  C—-&gt;B</p><p> <strong>第4次  3号盘  A—-&gt;C</strong></p><p>　　　　　　　　第5次  1号盘  B—-&gt;A</p><p>　　　　　　　　第6次  2号盘  B—-&gt;C</p><p>　　　　　　　　第7次  1号盘  A—-&gt;C        sum &#x3D; 7</p><p>到此可以发现需要移动的次数为2^n-1（n是圆盘个数）</p><p>还可以发现，如果我把n个盘子的问题记为X，n-1个盘子的问题记为Y，那么问题X可以视作两个问题Y再加上“移动一次最大的盘子”这一个步骤：</p><p>1.把上面n-1个盘子从A移动到B，（B和C完全等价，这一步可以视作是一个问题Y的解决过程）</p><p>2.把最大盘从A移动到C</p><p>3.把B上的n-1个盘子移动到C，同理这也是一个问题Y的解决过程</p><p>解释成代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> A, <span class="type">char</span> B, <span class="type">char</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">move</span>(A, C);<span class="comment">//可以写成打印函数便于查看过程</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">hanoi</span>(n - <span class="number">1</span>, A, C, B); <span class="comment">//将n-1个盘子由A经过C移动到B</span></span><br><span class="line">        <span class="built_in">move</span>(A, C);            <span class="comment">//执行最大盘子n移动</span></span><br><span class="line">        <span class="built_in">hanoi</span>(n - <span class="number">1</span>, B, A, C); <span class="comment">//剩下的n-1盘子，由B经过A移动到C</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上参考<a href="https://blog.csdn.net/qq_19446965/article/details/81591945">https://blog.csdn.net/qq_19446965&#x2F;article&#x2F;details&#x2F;81591945</a></p><h4 id="数制转换（十进制转任意进制）"><a href="#数制转换（十进制转任意进制）" class="headerlink" title="数制转换（十进制转任意进制）"></a>数制转换（十进制转任意进制）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">conversion</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//十进制数,目标进制</span></span><br><span class="line">string table = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line"><span class="function">string <span class="title">c</span><span class="params">(<span class="number">1</span>,table[m % n])</span></span>;<span class="comment">//构造函数，把table[m % n]赋给c</span></span><br><span class="line"><span class="keyword">if</span> (m / n == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> c + <span class="string">&quot;&quot;</span>;<span class="comment">//直接返回余数</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span>  <span class="built_in">conversion</span>(m / n, n) + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今天翻出了初学数据结构时写的非递归版本的<strong>任意进制的数制转换</strong>，还有字符栈的显示，感觉还可以，也贴在下面</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-9.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> size;     <span class="comment">//元素个数</span></span><br><span class="line">    <span class="type">int</span> capacity; <span class="comment">//容量</span></span><br><span class="line">    T *stk;      <span class="comment">//指向动态数组首地址</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">stack</span>();</span><br><span class="line">    ~<span class="built_in">stack</span>();</span><br><span class="line">    <span class="function">T <span class="title">Pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(T)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">Top</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">stack&lt;T&gt;::<span class="built_in">stack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    capacity = <span class="number">1</span>;</span><br><span class="line">    stk = <span class="keyword">new</span> T[capacity];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">stack&lt;T&gt;::~<span class="built_in">stack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] stk;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T stack&lt;T&gt;::<span class="built_in">Pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> stk[size];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> stack&lt;T&gt;::<span class="built_in">Push</span>(T i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == capacity)</span><br><span class="line">    &#123;</span><br><span class="line">        capacity *= <span class="number">2</span>;</span><br><span class="line">        <span class="type">char</span> *temp = <span class="keyword">new</span> T[capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp[i] = stk[i];</span><br><span class="line">        &#125;</span><br><span class="line">        T *p = stk;</span><br><span class="line">        stk = temp;</span><br><span class="line">        <span class="keyword">delete</span>[] p;</span><br><span class="line">    &#125;</span><br><span class="line">    stk[size++] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T stack&lt;T&gt;::<span class="built_in">Top</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> stk[size - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">bool</span> stack&lt;T&gt;::<span class="built_in">Empty</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">int</span> stack&lt;T&gt;::<span class="built_in">Size</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> stack&lt;T&gt;::<span class="built_in">Display</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">4</span>) &lt;&lt; stk[i];</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Converter</span><span class="params">(stack&lt;T&gt; &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">16</span>] = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> c1, c2; <span class="comment">//进制数</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;  <span class="comment">//对应的十进制数</span></span><br><span class="line">    string s1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入当前进制：\n(注意应当不大于16)\n&quot;</span>;</span><br><span class="line">    cin &gt;&gt; c1; <span class="comment">//当前进制</span></span><br><span class="line">    <span class="keyword">while</span> (cin.<span class="built_in">fail</span>() c1 &gt; <span class="number">16</span>c1 &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n输入不正确，请重新输入：\n&quot;</span>;</span><br><span class="line">        cin &gt;&gt; c1;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入&quot;</span> &lt;&lt; c1 &lt;&lt; <span class="string">&quot;进制的一个数\n&quot;</span>;</span><br><span class="line">    cin &gt;&gt; s1; <span class="comment">//当前数</span></span><br><span class="line">    <span class="keyword">while</span> (cin.<span class="built_in">fail</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n输入不正确，请重新输入：\n&quot;</span>;</span><br><span class="line">        cin &gt;&gt; s1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//首先转为10进制数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">int</span>(s<span class="number">1.l</span>ength() - <span class="number">1</span>); i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s1[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x += <span class="built_in">int</span>((s1[i] - <span class="string">&#x27;0&#x27;</span>)* <span class="built_in">pow</span>(c1, s<span class="number">1.l</span>ength() - i - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s1[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s1[i] &lt;= <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x += <span class="built_in">int</span>((s1[i] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>)* <span class="built_in">pow</span>(c1, s<span class="number">1.l</span>ength() - i - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将得到的十进制数转为目标进制</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入目标进制：\n&quot;</span>;</span><br><span class="line">    cin &gt;&gt; c2; <span class="comment">//目标进制</span></span><br><span class="line">    <span class="keyword">while</span> (cin.<span class="built_in">fail</span>() c1 &gt; <span class="number">16</span> c1 &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n输入不正确，请重新输入：\n&quot;</span>;</span><br><span class="line">        cin &gt;&gt; c2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        S.<span class="built_in">Push</span>(ch[x % c2]);</span><br><span class="line">        x /= c2;</span><br><span class="line">        S.<span class="built_in">Display</span>(); <span class="comment">//每压入一个元素就打印整个栈一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈中所有元素：\n&quot;</span>;</span><br><span class="line">    S.<span class="built_in">Display</span>();</span><br><span class="line">    cout &lt;&lt; c1 &lt;&lt; <span class="string">&quot;进制的&quot;</span> &lt;&lt; s1 &lt;&lt; <span class="string">&quot;转化为&quot;</span> &lt;&lt; c2 &lt;&lt; <span class="string">&quot;进制为：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!S.<span class="built_in">Empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; S.<span class="built_in">Top</span>();</span><br><span class="line">        S.<span class="built_in">Pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; S;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Converter</span>(S);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n\n是否继续测试？（0结束1继续）\n&quot;</span>;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span> (!n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>c++</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归的基本概念</title>
    <link href="/2020/09/18/%E9%80%92%E5%BD%92%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2020/09/18/%E9%80%92%E5%BD%92%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是递归？"><a href="#什么是递归？" class="headerlink" title="什么是递归？"></a>什么是递归？</h4><p>递归就是自己调用自己，引用一个经典故事理解：</p><p>从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？“从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？‘从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？……’”</p><p>故事调用故事本身，层次越来越深……</p><h4 id="使用递归的条件"><a href="#使用递归的条件" class="headerlink" title="使用递归的条件"></a>使用递归的条件</h4><p>1.问题本身可以分解为子问题，并且与原问题有相同的形式</p><p>2.递归必须要有边界条件，也就是递归出口</p><p>3.当边界条件（递归出口）不满足时，递归前进；当边界条件（递归出口）满足时，递归返回</p><h4 id="编写递归函数的技巧"><a href="#编写递归函数的技巧" class="headerlink" title="编写递归函数的技巧"></a>编写递归函数的技巧</h4><p>假设子问题已经解决！类似用数学归纳法解决数列问题时的a(n)与a(n+1)之间的关系，假设a(n)已知，计算a(n+1),然后追溯到a(0)已知，求a(1)……</p><p>例如：求n!</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">function</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="comment">//0!=1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">function</span>(n<span class="number">-1</span>)*n;<span class="comment">//n!=(n-1)!*n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下也就是分成两部分</p><p>1.假设子问题已经解决，写出当前问题与子问题的递归关系；</p><p>2.写出边界条件的处理步骤(如:解决到最小问题时，即无法再递进时直接给出结果）。</p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双向链表简单示例</title>
    <link href="/2020/09/18/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/"/>
    <url>/2020/09/18/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>双向链表与双向链表相比，每个元素都有两个指针分别指向前后两个元素，这意味着双向链表可以双向遍历。</p><p>简单例子如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    Node* prev;</span><br><span class="line">    Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span></span><br><span class="line">&#123;</span><br><span class="line">    Node* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initList</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        head = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insertNode</span><span class="params">(<span class="type">int</span> value, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">//第n个节点前插入,0,1,2..</span></span><br><span class="line">        Node* newnode = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        newnode-&gt;value = value;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)<span class="comment">//插入到最前面</span></span><br><span class="line">        &#123;</span><br><span class="line">            newnode-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">            newnode-&gt;next = head;</span><br><span class="line">            <span class="keyword">if</span>(head)</span><br><span class="line">                head-&gt;prev = newnode;</span><br><span class="line">            head = newnode;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        Node* p = head;</span><br><span class="line">        <span class="keyword">while</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span> (count == index)</span><br><span class="line">                &#123;</span><br><span class="line">                    newnode-&gt;next = p-&gt;next;</span><br><span class="line">                    p-&gt;next-&gt;prev = newnode;</span><br><span class="line">                    p-&gt;next = newnode;</span><br><span class="line">                    newnode-&gt;prev = p;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deleteNode</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">//删除下标为index的元素，0，1，2..</span></span><br><span class="line">        Node* p = head;</span><br><span class="line">        <span class="keyword">while</span> (index&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            index--;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;prev)</span><br><span class="line">            p-&gt;prev-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            head = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next)</span><br><span class="line">            p-&gt;next-&gt;prev = p-&gt;prev;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node* p = head;</span><br><span class="line">        <span class="keyword">while</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; p-&gt;value &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List* list = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">    list-&gt;<span class="built_in">initList</span>();</span><br><span class="line">    list-&gt;<span class="built_in">insertNode</span>(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">    list-&gt;<span class="built_in">insertNode</span>(<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    list-&gt;<span class="built_in">insertNode</span>(<span class="number">7</span>, <span class="number">0</span>);</span><br><span class="line">    list-&gt;<span class="built_in">insertNode</span>(<span class="number">9</span>, <span class="number">1</span>);</span><br><span class="line">    list-&gt;<span class="built_in">display</span>();</span><br><span class="line">    list-&gt;<span class="built_in">deleteNode</span>(<span class="number">2</span>);</span><br><span class="line">    list-&gt;<span class="built_in">display</span>();</span><br><span class="line">    list-&gt;<span class="built_in">deleteNode</span>(<span class="number">2</span>);</span><br><span class="line">    list-&gt;<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中缀表达式转后缀表达式</title>
    <link href="/2020/09/17/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/09/17/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>从左向右扫描中缀表达式;<br>访问到操作数,加人后缀表达式;<br>访问到左括号“(“,立即入栈;<br>访问到右括号“)”,栈中操作符依次出栈并加入后缀表达式,直到出现左括号“(”,“(”出栈;<br>访问到除括号之外的其他操作符,当其优先级比栈顶除“(”之外的操作符高时入栈,否则比当前操作符优先级高或者优先级相等的操作符依次出栈。</p><p>使用一种不需要括号的表达式的图形表示法,称为<strong>表达式树</strong>。树使用圆圈代表存储数据的节点,这些节点之间由称为边的线段连接。在一棵表达式树中,每个节点要么包含一个操作数,要么包含一个运算符。每个包含二元运算符的节点都连接到两个称为<strong>子女</strong>的节点,包含运算符的节点就称为这两个子女节点的<strong>双亲</strong>。左边的子女包含这个运算符的第一个操作数，它被画在它双亲的左下方;右边的子女包含这个运算符的第二个操作数,被画在它双亲的右下方。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-7-1024x406.png"></p><p>从这些例子可以看到中缀表达式是如何不使用括号而图形化表示的要得到和一棵表达式树相对应的后缀表达式,必须按照左-右-双亲节点的次序(后序)来遍历(也就是,走遍)这棵树。这意味着对于每一个节点,在可以“访问”它之前,必须首先访间它的左子女和右子女。对于中缀表达式a*b+c,这个遍历产生了如下图</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-8.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.画出表达式树</p><p>2.后序遍历</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈和队列</title>
    <link href="/2020/09/17/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <url>/2020/09/17/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="1-栈的简介"><a href="#1-栈的简介" class="headerlink" title="1. 栈的简介"></a>1. 栈的简介</h3><h4 id="1-1栈的特点"><a href="#1-1栈的特点" class="headerlink" title="1.1栈的特点"></a>1.1栈的特点</h4><p>栈(Stack)是一种线性存储结构，它具有如下特点：</p><ol><li>栈中的数据元素遵守”先进后出”(First In Last Out)的原则，简称FILO结构。</li><li>限定只能在栈顶进行插入和删除操作。</li></ol><h4 id="1-2栈的相关概念"><a href="#1-2栈的相关概念" class="headerlink" title="1.2栈的相关概念"></a>1.2栈的相关概念</h4><p>栈的相关概念：</p><ol><li>栈顶与栈底：允许元素插入与删除的一端称为栈顶，另一端称为栈底。</li><li>压栈：栈的插入操作，叫做进栈，也称压栈、入栈。</li><li>弹栈：栈的删除操作，也叫做出栈。</li></ol><p>例如我们有一个存储整型元素的栈，我们依次压栈：{1,2,3}<br><img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160130013806989-121668995.png"></p><p>在压栈的过程中，栈顶的位置一直在”向上“移动，而栈底是固定不变的。<br>如果我们要把栈中的元素弹出来：<br><img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160130013814661-295746330.png"></p><p>出栈的顺序为3、2、1 ，顺序与入栈时相反，这就是所谓的”先入后出“。<br>在弹栈的过程中，栈顶位置一直在”向下“移动，而栈底一直保持不变。</p><p>如果你玩过一种称为汉诺塔的益智玩具，你就会知道游戏中小圆盘的存取就是一种先进后出的顺序，一个圆柱就是一个栈：<br><img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160130013821489-1542512229.png"></p><h4 id="1-3-栈的操作"><a href="#1-3-栈的操作" class="headerlink" title="1.3 栈的操作"></a>1.3 栈的操作</h4><p>栈的常用操作为：</p><ol><li>弹栈，通常命名为pop</li><li>压栈，通常命名为push</li><li>求栈的大小</li><li>判断栈是否为空</li><li>获取栈顶元素的值</li></ol><h4 id="1-4-栈的存储结构"><a href="#1-4-栈的存储结构" class="headerlink" title="1.4 栈的存储结构"></a>1.4 栈的存储结构</h4><p>栈既然是一种线性结构，就能够以数组或链表（单向链表、双向链表或循环链表）作为底层数据结构。</p><h3 id="2-队列简介"><a href="#2-队列简介" class="headerlink" title="2. 队列简介"></a>2. 队列简介</h3><h4 id="2-1-队列的特点"><a href="#2-1-队列的特点" class="headerlink" title="2.1 队列的特点"></a>2.1 队列的特点</h4><p>队列（Queue）与栈一样，是一种线性存储结构，它具有如下特点：</p><ol><li>队列中的数据元素遵循“先进先出”（First In First Out）的原则，简称FIFO结构。</li><li>在队尾添加元素，在队头添加元素。</li></ol><h4 id="2-2-队列的相关概念"><a href="#2-2-队列的相关概念" class="headerlink" title="2.2 队列的相关概念"></a>2.2 队列的相关概念</h4><p>队列的相关概念：</p><ol><li>队头与队尾： 允许元素插入的一端称为队尾，允许元素删除的一端称为队头。</li><li>入队：队列的插入操作。</li><li>出队：队列的删除操作。</li></ol><p>例如我们有一个存储整型元素的队列，我们依次入队：{1，2，3}<br><img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160130151820974-712348880.png"></p><p>添加元素时，元素只能从队尾一端进入队列，也即是2只能跟在1后面，3只能跟在2后面。<br>如果队列中的元素要出队：<br><img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160130151830318-592472607.png"></p><p>元素只能从队首出队列，出队列的顺序为：1、2、3，与入队时的顺序一致，这就是所谓的“先进先出”。</p><h4 id="2-3-队列的操作"><a href="#2-3-队列的操作" class="headerlink" title="2.3 队列的操作"></a>2.3 队列的操作</h4><p>队列通常提供的操作：</p><ol><li>入队： 通常命名为push()</li><li>出队： 通常命名为pop()</li><li>求队列中元素个数</li><li>判断队列是否为空</li><li>获取队首元素</li></ol><h4 id="2-4-队列的存储结构"><a href="#2-4-队列的存储结构" class="headerlink" title="2.4 队列的存储结构"></a>2.4 队列的存储结构</h4><p>队列与栈一样是一种线性结构，因此以常见的线性表如数组、链表作为底层的数据结构。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完整功能单链表</title>
    <link href="/2020/09/17/%E5%AE%8C%E6%95%B4%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/09/17/%E5%AE%8C%E6%95%B4%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> Value;   <span class="comment">//当前节点储存的值</span></span><br><span class="line">    Node *pNext; <span class="comment">//下一节点位置</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node *pHead;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Push</span><span class="params">(<span class="type">int</span> InValue)</span></span>;                <span class="comment">//头插节点</span></span><br><span class="line">    <span class="built_in">LinkList</span>();                           <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">LinkList</span>(<span class="type">const</span> LinkList &amp;);           <span class="comment">//复制构造函数</span></span><br><span class="line">    LinkList <span class="keyword">operator</span>=(<span class="type">const</span> LinkList &amp;); <span class="comment">//赋值运算符重载</span></span><br><span class="line">    ~<span class="built_in">LinkList</span>();                          <span class="comment">//析构函数</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">()</span></span>;                       <span class="comment">//判空</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>;                       <span class="comment">//遍历打印</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Erase</span><span class="params">(<span class="type">int</span> DeValue)</span></span>;              <span class="comment">//删除</span></span><br><span class="line">    <span class="function">Node *<span class="title">Find</span><span class="params">(<span class="type">int</span> Value)</span>                 <span class="comment">//查找</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node *p = pHead;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;Value != Value &amp;&amp; p != <span class="literal">NULL</span>) <span class="comment">//</span></span><br><span class="line">        &#123;                                      <span class="comment">//当前节点数据不是要查找的数据并且不指向NULL</span></span><br><span class="line">            p = p-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!p)          <span class="comment">// p==NULL</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">//返回空指针</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsOrder</span><span class="params">()</span></span>; <span class="comment">//判断链表是否有序</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ReSort</span><span class="params">()</span></span>;  <span class="comment">//链表反序</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList::ReSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p1 = pHead, *p2 = pHead-&gt;pNext;</span><br><span class="line">    <span class="keyword">while</span> (p2 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Push</span>(p2-&gt;Value);</span><br><span class="line">        p1-&gt;pNext = p2-&gt;pNext;</span><br><span class="line">        Node *temp = p2;</span><br><span class="line">        p2 = p2-&gt;pNext;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LinkList::IsOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pHead) <span class="comment">//空链表直接返回false</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;***********空链表！\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node *p1 = pHead, *p2 = pHead-&gt;pNext;</span><br><span class="line">    <span class="keyword">if</span> (p1-&gt;Value &gt; p2-&gt;Value) <span class="comment">//前两个节点的数据大小关系</span></span><br><span class="line">    &#123;</span><br><span class="line">        p1 = p1-&gt;pNext;</span><br><span class="line">        p2 = p2-&gt;pNext;</span><br><span class="line">        <span class="keyword">while</span> (p2-&gt;pNext != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1-&gt;Value &lt; p2-&gt;Value) <span class="comment">//后面相邻两个节点数据的大小关系与头部两个节点不同</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;无序！\n&quot;</span>; <span class="comment">//判断为无序</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            p1 = p1-&gt;pNext;</span><br><span class="line">            p2 = p2-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;降序！\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p1 = p1-&gt;pNext;</span><br><span class="line">        p2 = p2-&gt;pNext;</span><br><span class="line">        <span class="keyword">while</span> (p2-&gt;pNext != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1-&gt;Value &gt; p2-&gt;Value)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;无序！\n&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p1 = p1-&gt;pNext;</span><br><span class="line">            p2 = p2-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;升序！\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList::Display</span><span class="params">()</span> <span class="comment">//遍历输出</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//从第一个节点依次遍历</span></span><br><span class="line">    Node *pPtr = pHead;</span><br><span class="line">    <span class="keyword">while</span> (pPtr != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">4</span>) &lt;&lt; pPtr-&gt;Value; <span class="comment">//输出节点数据</span></span><br><span class="line">        pPtr = pPtr-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">         &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList::Erase</span><span class="params">(<span class="type">int</span> DelValue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> Flag = <span class="number">0</span>;</span><br><span class="line">    Node *DelPos, *PrevPos = <span class="literal">NULL</span>;</span><br><span class="line">    DelPos = pHead;</span><br><span class="line">    <span class="keyword">while</span> (DelPos != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DelPos-&gt;Value == DelValue)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (PrevPos != <span class="literal">NULL</span>)</span><br><span class="line">                PrevPos-&gt;pNext = DelPos-&gt;pNext;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// PrevPos仍为NULL，表明删除的是第一个节点</span></span><br><span class="line">                pHead = pHead-&gt;pNext;</span><br><span class="line">            <span class="keyword">delete</span> DelPos;</span><br><span class="line">            Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PrevPos = DelPos;</span><br><span class="line">        DelPos = DelPos-&gt;pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!Flag)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;链表节点中不存在数据&quot;</span> &lt;&lt; DelValue &lt;&lt; <span class="string">&quot;!\n\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkList::<span class="built_in">LinkList</span>() <span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    pHead = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkList::<span class="built_in">LinkList</span>(<span class="type">const</span> LinkList &amp;a) <span class="comment">//复制构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a.pHead)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;***********空链表！\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pHead = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        pHead-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">        Node *p1 = pHead;</span><br><span class="line">        Node *p2 = a.pHead-&gt;pNext;</span><br><span class="line">        pHead-&gt;Value = a.pHead-&gt;Value; <span class="comment">//复制头节点数据</span></span><br><span class="line">        <span class="keyword">while</span> (p2)                     <span class="comment">//下一节点不为空</span></span><br><span class="line">        &#123;</span><br><span class="line">            p1-&gt;pNext = <span class="keyword">new</span> <span class="built_in">Node</span>(); <span class="comment">//开辟新空间</span></span><br><span class="line">            p1 = p1-&gt;pNext;</span><br><span class="line">            p1-&gt;Value = p2-&gt;Value; <span class="comment">//复制节点数据</span></span><br><span class="line">            p1-&gt;pNext = <span class="literal">NULL</span>;      <span class="comment">//默认下一节点为空</span></span><br><span class="line">            p2 = p2-&gt;pNext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">LinkList LinkList::<span class="keyword">operator</span>=(<span class="type">const</span> LinkList &amp;a) <span class="comment">//=号重载</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">LinkList::~<span class="built_in">LinkList</span>() <span class="comment">//析构函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (pHead != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Node *pTmp = pHead-&gt;pNext; <span class="comment">//记录当前节点的下一位置</span></span><br><span class="line">        <span class="keyword">delete</span> pHead;              <span class="comment">//删除当前节点</span></span><br><span class="line">        pHead = pTmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LinkList::IsEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pHead)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;***********空链表！\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;***********非空链表！\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LinkList::Push</span><span class="params">(<span class="type">int</span> InValue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *NewNode = <span class="keyword">new</span> Node;</span><br><span class="line">    NewNode-&gt;Value = InValue;</span><br><span class="line">    NewNode-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">    Node *pTmp = pHead;</span><br><span class="line">    pHead = NewNode;</span><br><span class="line">    pHead-&gt;pNext = pTmp; <span class="comment">//把新增的节点放到首位</span></span><br><span class="line">    <span class="keyword">return</span> InValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList link1;</span><br><span class="line">    link<span class="number">1.</span><span class="built_in">IsOrder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        link<span class="number">1.</span><span class="built_in">Push</span>(i * i);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;插入所有节点后:\n&quot;</span>;</span><br><span class="line">    link<span class="number">1.</span><span class="built_in">Display</span>();</span><br><span class="line">    link<span class="number">1.</span><span class="built_in">IsOrder</span>();</span><br><span class="line">    link<span class="number">1.</span><span class="built_in">ReSort</span>();</span><br><span class="line">    link<span class="number">1.</span><span class="built_in">Display</span>();</span><br><span class="line">    link<span class="number">1.</span><span class="built_in">IsOrder</span>();</span><br><span class="line">    link<span class="number">1.</span><span class="built_in">Push</span>(<span class="number">33</span>);</span><br><span class="line">    link<span class="number">1.</span><span class="built_in">Display</span>();</span><br><span class="line">    link<span class="number">1.</span><span class="built_in">IsOrder</span>();</span><br><span class="line">    link<span class="number">1.</span><span class="built_in">ReSort</span>();</span><br><span class="line">    link<span class="number">1.</span><span class="built_in">Display</span>();</span><br><span class="line">    <span class="comment">/*link1.Erase(1);</span></span><br><span class="line"><span class="comment">    link1.Erase(81);</span></span><br><span class="line"><span class="comment">    link1.Erase(25);</span></span><br><span class="line"><span class="comment">    link1.Erase(24);</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; &quot;删除部分节点后:\n&quot;;</span></span><br><span class="line"><span class="comment">    link1.Display();</span></span><br><span class="line"><span class="comment">    LinkList link2(link1);//复制构造</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; &quot;复制构造后的新链表:\n&quot;;</span></span><br><span class="line"><span class="comment">    link2.Display();</span></span><br><span class="line"><span class="comment">    LinkList link3 = link2;//赋值运算</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; &quot;赋值后的新链表:\n&quot;;</span></span><br><span class="line"><span class="comment">    link3.Display();</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; &quot;判空:\n&quot;;</span></span><br><span class="line"><span class="comment">    link3.IsEmpty();//判空</span></span><br><span class="line"><span class="comment">    LinkList link4;</span></span><br><span class="line"><span class="comment">    link4.IsEmpty();//判空</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; &quot;\n查找数据9所在节点：\n&quot;;</span></span><br><span class="line"><span class="comment">    Node* newnode = link3.Find(9);//查找</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; &quot;\n找到符合条件的节点内的数据：&quot;&lt;&lt;newnode-&gt;Value &lt;&lt; &#x27;\n&#x27;;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>链表</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++使用new和delete来创建和释放动态数组</title>
    <link href="/2020/09/17/c%E4%BD%BF%E7%94%A8new%E5%92%8Cdelete%E6%9D%A5%E5%88%9B%E5%BB%BA%E5%92%8C%E9%87%8A%E6%94%BE%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
    <url>/2020/09/17/c%E4%BD%BF%E7%94%A8new%E5%92%8Cdelete%E6%9D%A5%E5%88%9B%E5%BB%BA%E5%92%8C%E9%87%8A%E6%94%BE%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h4 id="一、创建并释放一维数组"><a href="#一、创建并释放一维数组" class="headerlink" title="一、创建并释放一维数组"></a>一、创建并释放一维数组</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="comment">//分配动态一维数组 </span></span><br><span class="line">    <span class="type">int</span> *arr=<span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cin&gt;&gt;arr[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">       cout&lt;&lt;arr[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="comment">//释放arr数组 </span></span><br><span class="line">    <span class="keyword">delete</span>[] arr;</span><br><span class="line">    <span class="comment">//注意：delete后面的[]不能少!!</span></span><br><span class="line">    <span class="comment">//若少了[],则只会释放第一个元素。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、创建并释放二维数组"><a href="#二、创建并释放二维数组" class="headerlink" title="二、创建并释放二维数组"></a>二、创建并释放二维数组</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> row,col;</span><br><span class="line">    cin&gt;&gt;row&gt;&gt;col;</span><br><span class="line">    <span class="comment">//为行指针分配空间 </span></span><br><span class="line">    <span class="type">int</span> **arr=<span class="keyword">new</span> <span class="type">int</span> *[row];  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">         arr[i]= <span class="keyword">new</span> <span class="type">int</span>[col];<span class="comment">//为每行分配空间（每行中有col个元素） </span></span><br><span class="line">    <span class="comment">//输入二维数组的数 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;col;j++) </span><br><span class="line">        cin&gt;&gt;arr[i][j];</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*******************&quot;</span>&lt;&lt;endl;</span><br><span class="line">     <span class="comment">//输出二维数组中的数  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;col;j++) </span><br><span class="line">          cout&lt;&lt;arr[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//释放二维数组（反过来） </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">        <span class="keyword">delete</span>[] arr[i]; </span><br><span class="line">    <span class="keyword">delete</span>[] arr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构的基本概念</title>
    <link href="/2020/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2020/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h4 id="1-逻辑结构"><a href="#1-逻辑结构" class="headerlink" title="1.逻辑结构"></a>1.逻辑结构</h4><p>逻辑结构分为四种类型：集合结构，线性结构，树形结构，图形结构。</p><h5 id="集合结构"><a href="#集合结构" class="headerlink" title="集合结构"></a>集合结构</h5><p>数据元素同属一个集合，单个数据元素之间没有任何关系。</p><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1634275952,4100464031&fm=26&gp=0.jpg"></p><h5 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h5><p>数据元素间是线性排列关系。一对一。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-5.png"></p><h5 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h5><p>树形结构中的数据元素所组成图形类似于树状图。一对多。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-3.png"></p><h5 id="图形结构"><a href="#图形结构" class="headerlink" title="图形结构"></a>图形结构</h5><p>数据元素之间是多对多的关系。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-4.png"></p><h4 id="2-物理结构（存储结构）"><a href="#2-物理结构（存储结构）" class="headerlink" title="2.物理结构（存储结构）"></a>2.物理结构（存储结构）</h4><p>物理结构又叫存储结构，分为四种种，顺序存储结构、链式存储结构、索引结构、散列结构。</p><h5 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h5><p>一段连续的内存空间。</p><p>优点：随机访问</p><p>缺点：插入删除效率低，大小固定</p><h5 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h5><p>不连续的内存空间</p><p>优点：大小动态扩展，插入删除效率高</p><p>缺点：不能随机访问</p><h5 id="索引存储结构"><a href="#索引存储结构" class="headerlink" title="索引存储结构"></a>索引存储结构</h5><p>为了方便查找，整体无序，但索引块之间有序，需要额外空间，存储索引表。</p><p>优点：对顺序查找的一种改进，查找效率高</p><p>缺点：需额外空间存储索引</p><h5 id="散列存储结构"><a href="#散列存储结构" class="headerlink" title="散列存储结构"></a><strong>散列存储结构</strong></h5><p>选取某个函数，数据元素根据函数计算存储位置可能存在多个数据元素存储在同一位置，引起地址冲突</p><p>优点：查找基于数据本身即可找到，查找效率高，存取效率高。</p><p>缺点：存取随机，不便于顺序查找。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法总结</title>
    <link href="/2020/08/20/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2020/08/20/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h3><ul><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(T arr[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)<span class="comment">//轮次</span></span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)<span class="comment">//每次需要整理的序列长度减一</span></span><br><span class="line">                        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">                                <span class="built_in">swap</span>(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h3><ul><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/selectionSort.gif"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selection_sort</span><span class="params">(vector&lt;T&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;<span class="comment">//轮次</span></span><br><span class="line">                <span class="type">int</span> min = i;<span class="comment">//记录最小的下标</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="built_in">size</span>(); j++)</span><br><span class="line">                        <span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line">                                min = j;<span class="comment">//有更小的就替换</span></span><br><span class="line">                std::<span class="built_in">swap</span>(arr[i], arr[min]);<span class="comment">//与待排第一个元素交换</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h3><ul><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="type">int</span> key=arr[i];</span><br><span class="line">                <span class="type">int</span> j=i<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>((j&gt;=<span class="number">0</span>) &amp;&amp; (key&lt;arr[j]))&#123;</span><br><span class="line">                        arr[j<span class="number">+1</span>]=arr[j];<span class="comment">//往右移位空出位子</span></span><br><span class="line">                        j--;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j<span class="number">+1</span>]=key;<span class="comment">//放入空位</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4.快速排序"></a>4.快速排序</h3><blockquote><p><em>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</em></p><p>《算法艺术与信息学竞赛》</p></blockquote><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/quickSort.gif"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Paritition1</span>(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> high) &#123;</span><br><span class="line">  <span class="type">int</span> pivot = A[low];</span><br><span class="line">  <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; A[high] &gt;= pivot) &#123;</span><br><span class="line">      --high;</span><br><span class="line">    &#125;</span><br><span class="line">    A[low] = A[high];</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; A[low] &lt;= pivot) &#123;</span><br><span class="line">      ++low;</span><br><span class="line">    &#125;</span><br><span class="line">    A[high] = A[low];</span><br><span class="line">  &#125;</span><br><span class="line">  A[low] = pivot;</span><br><span class="line">  <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> high)</span> <span class="comment">//快排母函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="type">int</span> pivot = <span class="built_in">Paritition1</span>(A, low, high);</span><br><span class="line">    <span class="built_in">QuickSort</span>(A, low, pivot - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">QuickSort</span>(A, pivot + <span class="number">1</span>, high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5.归并排序"></a>5.归并排序</h3><ul><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤 3 直到某一指针达到序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/mergeSort.gif"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">// 整數或浮點數皆可使用,若要使用物件(class)時必須設定&quot;小於&quot;(&lt;)的運算子功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(T arr[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    T *a = arr;</span><br><span class="line">    T *b = <span class="keyword">new</span> T[len];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> seg = <span class="number">1</span>; seg &lt; len; seg += seg) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> start = <span class="number">0</span>; start &lt; len; start += seg + seg) &#123;</span><br><span class="line">            <span class="type">int</span> low = start, mid = <span class="built_in">min</span>(start + seg, len), high = <span class="built_in">min</span>(start + seg + seg, len);</span><br><span class="line">            <span class="type">int</span> k = low;</span><br><span class="line">            <span class="type">int</span> start1 = low, end1 = mid;</span><br><span class="line">            <span class="type">int</span> start2 = mid, end2 = high;</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1)</span><br><span class="line">                b[k++] = a[start1++];</span><br><span class="line">            <span class="keyword">while</span> (start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start2++];</span><br><span class="line">        &#125;</span><br><span class="line">        T *temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a != arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        b = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6.堆排序"></a>6.堆排序</h3><ul><li>创建一个堆 H[0……n-1]；</li><li>把堆首（最大值）和堆尾互换；</li><li>把堆的尺寸缩小 1，并调用 下调算法，目的是把新的数组顶端数据调整到相应位置；</li><li>重复步骤 2，直到堆的尺寸为 1。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/heapSort.gif"></p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/Sorting_heapsort_anim.gif"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">max_heapify</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 建立父節點指標和子節點指標</span></span><br><span class="line">    <span class="type">int</span> dad = start;</span><br><span class="line">    <span class="type">int</span> son = dad * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (son &lt;= end) &#123; <span class="comment">// 若子節點指標在範圍內才做比較</span></span><br><span class="line">        <span class="keyword">if</span> (son + <span class="number">1</span> &lt;= end &amp;&amp; arr[son] &lt; arr[son + <span class="number">1</span>]) <span class="comment">// 先比較兩個子節點大小，選擇最大的</span></span><br><span class="line">            son++;</span><br><span class="line">        <span class="keyword">if</span> (arr[dad] &gt; arr[son]) <span class="comment">// 如果父節點大於子節點代表調整完畢，直接跳出函數</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 否則交換父子內容再繼續子節點和孫節點比較</span></span><br><span class="line">            <span class="built_in">swap</span>(arr[dad], arr[son]);</span><br><span class="line">            dad = son;</span><br><span class="line">            son = dad * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化，i從最後一個父節點開始調整</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">max_heapify</span>(arr, i, len - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 先將第一個元素和已经排好的元素前一位做交換，再從新調整(刚调整的元素之前的元素)，直到排序完畢</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[<span class="number">0</span>], arr[i]);</span><br><span class="line">        <span class="built_in">max_heapify</span>(arr, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123; <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span> &#125;;</span><br><span class="line">    <span class="type">int</span> len = (<span class="type">int</span>) <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(*arr);</span><br><span class="line">    <span class="built_in">heap_sort</span>(arr, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-基数排序"><a href="#7-基数排序" class="headerlink" title="7.基数排序"></a>7.基数排序</h3><p>基数排序(Radix Sort)是桶排序的扩展，它的基本思想是：将整数按位数切割成不同的数字，然后按每个位数分别比较。<br>具体做法是：将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p><p>通过基数排序对数组{53, 3, 542, 748, 14, 214, 154, 63, 616}，它的示意图如下：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-29.png"></p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/radixSort.gif"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxbit</span><span class="params">(<span class="type">int</span> data[], <span class="type">int</span> n)</span> <span class="comment">//辅助函数，求数据的最大位数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> maxData = data[<span class="number">0</span>];              <span class="comment">///&lt; 最大数</span></span><br><span class="line">    <span class="comment">/// 先求出最大数，再求其位数，这样有原先依次每个数判断其位数，稍微优化点。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxData &lt; data[i])</span><br><span class="line">            maxData = data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (maxData &gt;= p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//p *= 10; // Maybe overflow</span></span><br><span class="line">        maxData /= <span class="number">10</span>;</span><br><span class="line">        ++d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line"><span class="comment">/*    int d = 1; //保存最大的位数</span></span><br><span class="line"><span class="comment">    int p = 10;</span></span><br><span class="line"><span class="comment">    for(int i = 0; i &lt; n; ++i)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        while(data[i] &gt;= p)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            p *= 10;</span></span><br><span class="line"><span class="comment">            ++d;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return d;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">radixsort</span><span class="params">(<span class="type">int</span> data[], <span class="type">int</span> n)</span> <span class="comment">//基数排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">maxbit</span>(data, n);</span><br><span class="line">    <span class="type">int</span> *tmp = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="type">int</span> *count = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>]; <span class="comment">//计数器</span></span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    <span class="type">int</span> radix = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= d; i++) <span class="comment">//进行d次排序</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">            count[j] = <span class="number">0</span>; <span class="comment">//每次分配前清空计数器</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            k = (data[j] / radix) % <span class="number">10</span>; <span class="comment">//统计每个桶中的记录数</span></span><br><span class="line">            count[k]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">            count[j] = count[j - <span class="number">1</span>] + count[j]; <span class="comment">//将tmp中的位置依次分配给每个桶</span></span><br><span class="line">        <span class="keyword">for</span>(j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) <span class="comment">//将所有桶中记录依次收集到tmp中</span></span><br><span class="line">        &#123;</span><br><span class="line">            k = (data[j] / radix) % <span class="number">10</span>;</span><br><span class="line">            tmp[count[k] - <span class="number">1</span>] = data[j];</span><br><span class="line">            count[k]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++) <span class="comment">//将临时数组的内容复制到data中</span></span><br><span class="line">            data[j] = tmp[j];</span><br><span class="line">        radix = radix * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> []tmp;</span><br><span class="line">    <span class="keyword">delete</span> []count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/sort.png"></p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/0B319B38-B70E-4118-B897-74EFA7E368F9.png"></p><h3 id="关于时间复杂度"><a href="#关于时间复杂度" class="headerlink" title="关于时间复杂度"></a>关于时间复杂度</h3><p>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</p><p>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；</p><p>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序</p><p>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</p><p>关于稳定性</p><p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</p><p>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p><p>名词解释：</p><ul><li>n：数据规模</li><li>k：”桶”的个数</li><li>In-place：占用常数内存，不占用额外内存</li><li>Out-place：占用额外内存</li><li>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</li></ul>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈希（Hash）表（散列表）</title>
    <link href="/2020/08/20/%E5%93%88%E5%B8%8C%EF%BC%88hash%EF%BC%89%E8%A1%A8%EF%BC%88%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%89/"/>
    <url>/2020/08/20/%E5%93%88%E5%B8%8C%EF%BC%88hash%EF%BC%89%E8%A1%A8%EF%BC%88%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="哈希表定义"><a href="#哈希表定义" class="headerlink" title="哈希表定义"></a>哈希表定义</h3><p>哈希表是一种根据关键码去寻找值的数据映射结构，最经典的例子就是字典，如果我想要获取“<strong>按</strong>”字详细信息，我肯定会去根据拼音<strong>an</strong>去查找拼音索引，在索引列表中找到<strong>an</strong>，发现它的页码是4。这就是一个<strong>键值映射</strong>过程，通过<strong>关键字key</strong>查找对应的值的<strong>索引f(key)</strong>。其中，关键字就是“按”，f(key)就是<strong>哈希函数</strong>，f(“按”)&#x3D;4就是哈希值。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-24.png"></p><h3 id="哈希表冲突（散列冲突）"><a href="#哈希表冲突（散列冲突）" class="headerlink" title="哈希表冲突（散列冲突）"></a>哈希表冲突（散列冲突）</h3><p>但是问题又来了，我们要查的是“按”，而不是“安，但是他们的拼音都是一样的。也就是通过关键字按和关键字安可以映射到一样的字典页码4的位置，这就是哈希冲突（也叫哈希碰撞），在公式上表达就是key1≠key2，但f(key1)&#x3D;f(key2)。冲突会给查找带来麻烦，你想想，你本来查找的是“按”，但是却找到“安”字，你又得向后翻一两页，在计算机里面也是一样道理的。</p><p>　　但哈希冲突是无可避免的，为什么这么说呢，因为你如果要完全避开这种情况，你只能每个字典去新开一个页，然后每个字在索引里面都有对应的页码，这就可以避免冲突。但是会导致空间增大（每个字都有一页）。</p><p>　　既然无法避免，就只能尽量减少冲突带来的损失，而一个好的哈希函数需要有以下特点：</p><p>　　1.尽量使关键字对应的记录均匀分配在哈希表里面（比如说某厂商卖30栋房子，均匀划分ABC，3个区域，如果你划分A区域1个房子，B区域1个房子，C区域28个房子，有人来查找C区域的某个房子最坏的情况就是要找28次）。</p><p>　　2.关键字极小的变化可以引起哈希值极大的变化。</p><h4 id="常见的哈希函数"><a href="#常见的哈希函数" class="headerlink" title="常见的哈希函数"></a><strong>常见的哈希函数</strong></h4><ul><li>直接定制法：即取元素的某个线性函数为散列地址：Hash(key) &#x3D; A*key +B;例如：找出字符串中只出现一次的字符。时间复杂度为O(N),空间复杂度为：O(1);(就可以使用该方法，开辟一个256个元素的数组，进行统计每个元素出现的次数)优点：简单，均匀适合于查找比较小而且连续的情况。</li><li>除留取余法：（比较常用的方法）Hash(key) &#x3D; key % p;(p &lt;&#x3D; m &amp;&amp; p 质数)，m为散列表中允许的地址个数。</li><li>平方取中法：<br>对数据进行平方，然后取数据的中间3位为哈希地址。<br>适合于：不知道数据的分布情况，但是数字又不是很大的情况</li></ul><h3 id="冲突处理策略"><a href="#冲突处理策略" class="headerlink" title="冲突处理策略"></a>冲突处理策略</h3><h4 id="1-闭散列（放地址法）"><a href="#1-闭散列（放地址法）" class="headerlink" title="1.闭散列（放地址法）"></a>1.<strong>闭散列（放地址法）</strong></h4><p><strong>线性探测法</strong>查找下一个位置:<br>例如：关键码集合为：{37，25，14，36，49，57，11}，设表的长度为12，Hash(key) &#x3D; key%p(p &#x3D; 11);<br>Hash(37) &#x3D; 4;<br>Hash(25) &#x3D; 3;<br>Hash(14) &#x3D; 3;<br>Hash(36) &#x3D; 3;<br>Hash(49) &#x3D; 5;<br>Hash(57) &#x3D; 2;<br>Hash(11) &#x3D; 0;<br>很明显：这组数据的哈希地址有冲突。<br>在插入时，如果该位置已经有元素了，就从该位置起向后找，找到一个空闲的位置就进行插入。<br>如下图所示：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-25.png"></p><p><strong>二次探测</strong>法：<br>就是当有哈希冲突时，寻找下一个空闲位置时，首先在该位置处加1的平方，若加1的平方的位置处依然有元素，那就加2的平方，知道找到一个空闲的位置为止。</p><p>优点：简单 易懂<br><strong>缺点：一旦发生了哈希冲突，所有的冲突连接在一起，很容易产生数据”堆积”。即不同的数据占用可以利用的位置，就使得寻找其余数据的位置需要进行多次比较，就会导致查找的效率降低。</strong></p><h4 id="2-开散列（链地址法）"><a href="#2-开散列（链地址法）" class="headerlink" title="2.开散列（链地址法）"></a>2.<strong>开散列</strong>（链地址法）</h4><p>上面所说的开发定址法的原理是遇到冲突的时候查找顺着原来哈希地址查找下一个空闲地址然后插入，但是也有一个问题就是如果空间不足，那他无法处理冲突也无法插入数据，因此需要装填因子(插入数据&#x2F;空间)&lt;&#x3D;1。</p><p>　　那有没有一种方法可以解决这种问题呢？链地址法可以，先用哈希函数计算每个数据的散列地址，把具有相同地址的元素归于同一个集合之中，把该集合处理为一个链表，链表的头节点存储于哈希表之中。<br>例如：还是上面闭散列中的例子，当使用开散列的方法后，其每个元素的存储为下图所示：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-28.png"></p><p>可见，开散列法有效的解决了数据溢出，不过需要增设链接指针，增加了存储的开销。但是，总体而言，效率还是快的多。</p><h3 id="哈希表的性能"><a href="#哈希表的性能" class="headerlink" title="哈希表的性能"></a>哈希表的性能</h3><p>由于哈希表高效的特性，查找或者插入的情况在大多数情况下可以达到O(1)，时间主要花在计算hash上，当然也有最坏的情况就是hash值全都映射到同一个地址上，这样哈希表就会退化成链表，查找的时间复杂度变成O(n)，但是这种情况比较少，只要不要把hash计算的公式外漏出去并且有人故意攻击，一般也不会出现这种情况。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-27.png"></p><p>参考原文</p><p><a href="https://www.cnblogs.com/s-b-b/p/6208565.html">https://www.cnblogs.com/s-b-b/p/6208565.html</a></p><p><a href="https://blog.csdn.net/Yinghuhu333333/article/details/81364739">https://blog.csdn.net/Yinghuhu333333/article/details/81364739</a></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>哈希表</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间复杂度</title>
    <link href="/2020/08/20/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <url>/2020/08/20/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>我们往往把一个算法的复杂度分为<strong>时间复杂度</strong>和<strong>空间复杂度</strong>，时间复杂度对应算法执行所需要的时间，空间复杂度对应所需要的内存，相对来讲空间代价肯定是比时间代价更小，所以算法的时间复杂度成为评价算法优劣的最重要的指标之一。</p><p>引用百度百科的介绍：“一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)&#x2F;f (n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)&#x3D;O(f(n)),称O(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。”</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>如果输入规模为n，那么算法的时间基本上可以用一个关于n的函数f(n)表示，时间复杂度T(n)&#x3D;O(f(n)),f(n)仅保留最高次项，且舍去系数。</p><p>如算法执行所需时间f(n)&#x3D;6n^3+2n+3,T(n)&#x3D;O(f(n))&#x3D;O(n^3)</p><h4 id="例"><a href="#例" class="headerlink" title="例"></a>例</h4><h5 id="线性查找：f-n-n，T-n-O-f-n-O-n"><a href="#线性查找：f-n-n，T-n-O-f-n-O-n" class="headerlink" title="线性查找：f(n)&#x3D;n，T(n)&#x3D;O(f(n))&#x3D;O(n)"></a>线性查找：f(n)&#x3D;n，T(n)&#x3D;O(f(n))&#x3D;O(n)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">function</span><span class="params">(vector&lt;<span class="type">int</span>&gt; vec,<span class="type">int</span> tag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=vec.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vec[i]==tag)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="折半查找：f-n-log-2-n，T-n-O-f-n-O-logn"><a href="#折半查找：f-n-log-2-n，T-n-O-f-n-O-logn" class="headerlink" title="折半查找：f(n)&#x3D;log(2)n，T(n)&#x3D;O(f(n))&#x3D;O(logn)"></a>折半查找：f(n)&#x3D;log(2)n，T(n)&#x3D;O(f(n))&#x3D;O(logn)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">function</span><span class="params">(vector&lt;<span class="type">int</span>&gt; vec,<span class="type">int</span> tag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//vec是升序向量</span></span><br><span class="line">    <span class="type">int</span> first=<span class="number">0</span>,last=vec.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(first&lt;=last)</span><br><span class="line">    &#123;</span><br><span class="line">        index=(first+last)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(vec[index]&gt;tag)</span><br><span class="line">            last=index<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vec[index]&gt;tag)</span><br><span class="line">            first=index<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS控制文本框禁止输入特殊字符</title>
    <link href="/2020/08/12/js%E6%8E%A7%E5%88%B6%E6%96%87%E6%9C%AC%E6%A1%86%E7%A6%81%E6%AD%A2%E8%BE%93%E5%85%A5%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/"/>
    <url>/2020/08/12/js%E6%8E%A7%E5%88%B6%E6%96%87%E6%9C%AC%E6%A1%86%E7%A6%81%E6%AD%A2%E8%BE%93%E5%85%A5%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="JS-控制不能输入特殊字符"><a href="#JS-控制不能输入特殊字符" class="headerlink" title="JS 控制不能输入特殊字符"></a><strong>JS 控制不能输入特殊字符</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span><span class="attr">class</span>=<span class="string">&quot;domain&quot;</span><span class="attr">onkeyup</span>=<span class="string">&quot;this.value=this.value.replace(/[^u4e00-u9fa5w]/g,&#x27;&#x27;)&quot;</span>；</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">this.value</span>=<span class="string">this.value.replace(/[^u4e00-u9fa5w]/g,</span>&#x27;&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="JS-控制文本框只能输入数字"><a href="#JS-控制文本框只能输入数字" class="headerlink" title="JS 控制文本框只能输入数字"></a><strong>JS 控制文本框只能输入数字</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">&quot;value=value.replace(/[^0-9]/g,&#x27;&#x27;)&quot;</span> <span class="attr">onpaste</span>=<span class="string">&quot;value=value.replace(/[^0-9]/g,&#x27;&#x27;)&quot;</span> <span class="attr">oncontextmenu</span> = <span class="string">&quot;value=value.replace(/[^0-9]/g,&#x27;&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS-控制文本框只能输入数字、小数点"><a href="#JS-控制文本框只能输入数字、小数点" class="headerlink" title="JS 控制文本框只能输入数字、小数点"></a><strong>JS 控制文本框只能输入数字、小数点</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">&quot;value=value.replace(/[^\\0-9\\.]/g,&#x27;&#x27;)&quot;</span> <span class="attr">onpaste</span>=<span class="string">&quot;value=value.replace(/[^\\0-9\\.]/g,&#x27;&#x27;)&quot;</span> <span class="attr">oncontextmenu</span> = <span class="string">&quot;value=value.replace(/[^\\0-9\\.]/g,&#x27;&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS-控制文本框只能输入英文"><a href="#JS-控制文本框只能输入英文" class="headerlink" title="JS 控制文本框只能输入英文"></a><strong>JS 控制文本框只能输入英文</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z]/g,&#x27;&#x27;)&quot;</span> <span class="attr">onpaste</span>=<span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z]/g,&#x27;&#x27;)&quot;</span> <span class="attr">oncontextmenu</span> = <span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z]/g,&#x27;&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS-控制文本框只能输入英文、数字"><a href="#JS-控制文本框只能输入英文、数字" class="headerlink" title="JS 控制文本框只能输入英文、数字"></a><strong>JS 控制文本框只能输入英文、数字</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9]/g,&#x27;&#x27;)&quot;</span> <span class="attr">onpaste</span>=<span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9]/g,&#x27;&#x27;)&quot;</span> <span class="attr">oncontextmenu</span> = <span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9]/g,&#x27;&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS-控制文本框只能输入中文"><a href="#JS-控制文本框只能输入中文" class="headerlink" title="JS 控制文本框只能输入中文"></a><strong>JS 控制文本框只能输入中文</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">&quot;value=value.replace(/[^\\u4E00-\\u9FA5]/g,&#x27;&#x27;)&quot;</span> <span class="attr">onpaste</span>=<span class="string">&quot;value=value.replace(/[^\\u4E00-\\u9FA5]/g,&#x27;&#x27;)&quot;</span> <span class="attr">oncontextmenu</span> = <span class="string">&quot;value=value.replace(/[^\\u4E00-\\u9FA5]/g,&#x27;&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS-控制文本框只能输入中文、英文、数字"><a href="#JS-控制文本框只能输入中文、英文、数字" class="headerlink" title="JS 控制文本框只能输入中文、英文、数字"></a><strong>JS 控制文本框只能输入中文、英文、数字</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9\\u4E00-\\u9FA5]/g,&#x27;&#x27;)&quot;</span> <span class="attr">onpaste</span>=<span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9\\u4E00-\\u9FA5]/g,&#x27;&#x27;)&quot;</span> <span class="attr">oncontextmenu</span> = <span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9\\u4E00-\\u9FA5]/g,&#x27;&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS-控制文本框只能输入中文、英文、数字、空格"><a href="#JS-控制文本框只能输入中文、英文、数字、空格" class="headerlink" title="JS 控制文本框只能输入中文、英文、数字、空格"></a><strong>JS 控制文本框只能输入中文、英文、数字、空格</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9\\u4E00-\\u9FA5\\ ]/g,&#x27;&#x27;)&quot;</span> <span class="attr">onpaste</span>=<span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9\\u4E00-\\u9FA5\\ ]/g,&#x27;&#x27;)&quot;</span> <span class="attr">oncontextmenu</span> = <span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9\\u4E00-\\u9FA5\\ ]/g,&#x27;&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS-控制文本框只能输入中文、英文、数字、小数点"><a href="#JS-控制文本框只能输入中文、英文、数字、小数点" class="headerlink" title="JS 控制文本框只能输入中文、英文、数字、小数点"></a><strong>JS 控制文本框只能输入中文、英文、数字、小数点</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9\\u4E00-\\u9FA5\\.]/g,&#x27;&#x27;)&quot;</span> <span class="attr">onpaste</span>=<span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9\\u4E00-\\u9FA5\\.]/g,&#x27;&#x27;)&quot;</span> <span class="attr">oncontextmenu</span> = <span class="string">&quot;value=value.replace(/[^\\a-\\z\\A-\\Z0-9\\u4E00-\\u9FA5\\.]/g,&#x27;&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.jb51.net/article/110620.htm">https://www.jb51.net/article/110620.htm</a></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS动态添加div</title>
    <link href="/2020/08/12/js%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0div/"/>
    <url>/2020/08/12/js%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0div/</url>
    
    <content type="html"><![CDATA[<p>本文实例讲述了jQuery中prepend()方法。</p><p>此方法可向所有匹配元素的内部的前面追加HTML内容。</p><h4 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明:"></a><strong>特别说明:</strong></h4><p>此方法是追加内容，也就是原来的内容还在。<br>HTML内容就是内容中可以包含HTML标签，并且能够被浏览器渲染。<br>文本内容是先将内容中的html预定义字符转换成html字符实体，这样html标签就不会被渲染。</p><h4 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构:"></a><strong>语法结构:</strong></h4><p>代码如下:$(selector).prepend(content)</p><h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码:"></a><strong>实例代码:</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot; utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">prepend</span>(<span class="string">&quot;&lt;b&gt;新增内容&lt;/b&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">submit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;#divid&quot;</span>).<span class="title function_">prepend</span>(<span class="string">&#x27;&lt;div&gt;按钮添加的新内容&lt;/div&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;divid&#x27;</span>&gt;</span>原来内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;submit()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/08/image.png"></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx+PHP配置</title>
    <link href="/2020/08/11/nginxphp%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/08/11/nginxphp%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="在nginx-conf中添加一个server"><a href="#在nginx-conf中添加一个server" class="headerlink" title="在nginx.conf中添加一个server"></a>在nginx.conf中添加一个server</h4><pre><code>server &#123;    listen 999;    server_name blog.xinhaojin.top;    location ~\\.php?.*$ &#123;        root /www/wwwroot/blog.xinhaojin.top;#php文件目录        fastcgi_pass unix:/tmp/php-cgi-70.sock;#.sock的形式        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;        include fastcgi_params;    &#125;&#125;</code></pre><h4 id="需要注意的是php-fpm-conf与nginx-conf的监听方式是否相同"><a href="#需要注意的是php-fpm-conf与nginx-conf的监听方式是否相同" class="headerlink" title="需要注意的是php-fpm.conf与nginx.conf的监听方式是否相同"></a>需要注意的是php-fpm.conf与nginx.conf的监听方式是否相同</h4><p>方式1，统一成ip+port的形式:</p><pre><code>php-fpm.conf:listen = 127.0.0.1:9000nginx.conf:fastcgi_pass 127.0.0.1:9000;</code></pre><p>方式2，统一成.sock的形式:</p><pre><code>php-fpm.conf:listen = /tmp/php-fpm.socknginx.conf:fastcgi_pass unix:/tmp/php-fpm.sock;</code></pre><p>然后<a href="http://xx.xx.xx.xx/test.php%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C%E4%BA%86">http://xx.xx.xx.xx/test.php就可以正常运行了</a></p><h4 id="Done"><a href="#Done" class="headerlink" title="Done."></a>Done.</h4>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 下源码安装 Node.js</title>
    <link href="/2020/07/05/centos-%E4%B8%8B%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85-node-js/"/>
    <url>/2020/07/05/centos-%E4%B8%8B%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85-node-js/</url>
    
    <content type="html"><![CDATA[<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><pre><code>curl --silent --location https://rpm.nodesource.com/setup_10.x  sudo bashcurl --silent --location https://rpm.nodesource.com/setup_10.x  sudo bash</code></pre><h2 id="Installing-the-NodeSource-Node-js-10-x-repo…"><a href="#Installing-the-NodeSource-Node-js-10-x-repo…" class="headerlink" title="Installing the NodeSource Node.js 10.x repo…"></a>Installing the NodeSource Node.js 10.x repo…</h2><h2 id="Inspecting-system…"><a href="#Inspecting-system…" class="headerlink" title="Inspecting system…"></a>Inspecting system…</h2><ul><li>rpm -q –whatprovides redhat-release  rpm -q –whatprovides centos-release  rpm -q –whatprovides cloudlinux-release  rpm -q –whatprovides sl-release</li><li>uname -m</li></ul><h2 id="Confirming-“el6-x86-64”-is-supported…"><a href="#Confirming-“el6-x86-64”-is-supported…" class="headerlink" title="Confirming “el6-x86_64” is supported…"></a>Confirming “el6-x86_64” is supported…</h2><ul><li>curl -sLf -o &#x2F;dev&#x2F;null ‘<a href="https://rpm.nodesource.com/pub_10.x/el/6/x86_64/nodesource-release-el6-1.noarch.rpm">https://rpm.nodesource.com/pub_10.x/el/6/x86_64/nodesource-release-el6-1.noarch.rpm</a>‘</li></ul><h2 id="Downloading-release-setup-RPM…"><a href="#Downloading-release-setup-RPM…" class="headerlink" title="Downloading release setup RPM…"></a>Downloading release setup RPM…</h2><ul><li>mktemp</li><li>curl -sL -o ‘&#x2F;tmp&#x2F;tmp.aoQY5ifb9m’ ‘<a href="https://rpm.nodesource.com/pub_10.x/el/6/x86_64/nodesource-release-el6-1.noarch.rpm">https://rpm.nodesource.com/pub_10.x/el/6/x86_64/nodesource-release-el6-1.noarch.rpm</a>‘</li></ul><h2 id="Installing-release-setup-RPM…"><a href="#Installing-release-setup-RPM…" class="headerlink" title="Installing release setup RPM…"></a>Installing release setup RPM…</h2><ul><li>rpm -i –nosignature –force ‘&#x2F;tmp&#x2F;tmp.aoQY5ifb9m’</li></ul><h2 id="Cleaning-up…"><a href="#Cleaning-up…" class="headerlink" title="Cleaning up…"></a>Cleaning up…</h2><ul><li>rm -f ‘&#x2F;tmp&#x2F;tmp.aoQY5ifb9m’</li></ul><h2 id="Checking-for-existing-installations…"><a href="#Checking-for-existing-installations…" class="headerlink" title="Checking for existing installations…"></a>Checking for existing installations…</h2><ul><li>rpm -qa ‘nodenpm’  grep -v nodesource</li></ul><h2 id="Run-sudo-yum-install-y-nodejs-to-install-Node-js-10-x-and-npm"><a href="#Run-sudo-yum-install-y-nodejs-to-install-Node-js-10-x-and-npm" class="headerlink" title="Run `sudo yum install -y nodejs` to install Node.js 10.x and npm."></a>Run `sudo yum install -y nodejs` to install Node.js 10.x and npm.</h2><h2 id="You-may-also-need-development-tools-to-build-native-addons"><a href="#You-may-also-need-development-tools-to-build-native-addons" class="headerlink" title="You may also need development tools to build native addons:"></a>You may also need development tools to build native addons:</h2><pre><code>sudo yum install gcc-c++ make</code></pre><h2 id="To-install-the-Yarn-package-manager-run"><a href="#To-install-the-Yarn-package-manager-run" class="headerlink" title="To install the Yarn package manager, run:"></a>To install the Yarn package manager, run:</h2><pre><code>curl -sL https://dl.yarnpkg.com/rpm/yarn.repo  sudo tee /etc/yum.repos.d/yarn.repo sudo yum install yarn</code></pre><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><pre><code>sudo yum -y install nodejsnode -v查看版本</code></pre><p>如果以上步骤不能安装，执行以下命令后再执行第二步：</p><pre><code>sudo yum clean all</code></pre><p>如果存在多个 nodesoucre，执行以下命令删除，然后重新执行第一第二步：</p><pre><code>sudo rm -fv /etc/yum.repos.d/nodesource*</code></pre>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux设置ROOT用户以及允许第三方SSH登录</title>
    <link href="/2020/07/03/centos-debian%E8%AE%BE%E7%BD%AEroot%E7%94%A8%E6%88%B7%E4%BB%A5%E5%8F%8A%E5%85%81%E8%AE%B8%E7%AC%AC%E4%B8%89%E6%96%B9ssh%E7%99%BB%E5%BD%95/"/>
    <url>/2020/07/03/centos-debian%E8%AE%BE%E7%BD%AEroot%E7%94%A8%E6%88%B7%E4%BB%A5%E5%8F%8A%E5%85%81%E8%AE%B8%E7%AC%AC%E4%B8%89%E6%96%B9ssh%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h4 id="切换到root帐号"><a href="#切换到root帐号" class="headerlink" title="切换到root帐号"></a>切换到root帐号</h4><pre><code>sudo -i</code></pre><h4 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h4><pre><code>passwd</code></pre><p>然后会要求输入新密码，然后再重复一次密码，输入密码的时候不会显示出来，所以直接输入密码，然后回车，再然后重复输入密码回车</p><h4 id="开启SSH权限"><a href="#开启SSH权限" class="headerlink" title="开启SSH权限"></a>开启SSH权限</h4><pre><code>vim /etc/ssh/sshd_config #打开 ssh 配置文件PermitRootLogin yes #默认为no，需要开启root用户访问改为yesPasswordAuthentication yes    #默认为no，改为yes开启密码登陆</code></pre><h4 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h4><pre><code>reboot</code></pre>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS下Nginx静态资源代理配置</title>
    <link href="/2020/07/01/centos%E4%B8%8Bngnix%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/07/01/centos%E4%B8%8Bngnix%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>打开nginx.conf,我的路径是&#x2F;www&#x2F;server&#x2F;nginx&#x2F;conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">user root#第一行用户这里改成root</span><br><span class="line">......</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 888;#监听端口，可修改，记得放行</span><br><span class="line">        server_name localhost;#主机IP</span><br><span class="line">        .......</span><br><span class="line">        #有以下两行的话注释掉，取消身份验证</span><br><span class="line">        #auth_basic &quot;Authorization&quot;;</span><br><span class="line">        #auth_basic_user_file /www/server/pass/phpmyadmin.pass;</span><br><span class="line">        #添加一个location</span><br><span class="line">        location /upload/</span><br><span class="line">        &#123;</span><br><span class="line">            root /ftp;#路径映射</span><br><span class="line">            autoindex on;//开启目录自动索引</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上配置之后重启Ngnix服务，<a href="http://ip:888/upload/test.txt%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%88%B0/ftp/upload/test.txt">http://IP:888/upload/test.txt就可以访问到/ftp/upload/test.txt</a></p><p>Done.</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度网盘倍速播放</title>
    <link href="/2020/06/25/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%80%8D%E9%80%9F%E6%92%AD%E6%94%BE/"/>
    <url>/2020/06/25/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%80%8D%E9%80%9F%E6%92%AD%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<p>最近在百度网盘看一些网课，有时候会嫌老师讲得太慢，如果能1.5倍速播放就好了，但是百度网盘开倍速要会员，仅仅为了这个功能开会员也是duck不必。分享一招！</p><p>在电脑浏览器里打开百度网盘播放视频，在视频播放界面进入“开发者调试模式”，谷歌、Edge浏览器直接按F12，其余浏览器我没试过，不确定是否能用。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-1.png"></p><p>选择控制台（console），点击下方空白区域，输入</p><p>videojs.getPlayers(“viedo”).html5player.tech_.setPlaybackRate(1.5)</p><p>回车执行，然后就可以关闭了。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/09/image-2.png"></p><p>这里的1.5是指1.5倍速，你可以修改为自己想要的倍速，可灵活使用，这个操作只对当前播放的视频有效，关闭网页或播放下个视频不再起作用，想要改回正常速度可以重新执行一次代码，把数值改为1.0，或者直接关闭视频重新打开。另外，这串代码并不用每次手动复制粘贴输入，有过一次输入之后，下次再到这个输入代码的步骤，直接按方向上键即可自动填充。</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>倍速播放</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7下安装Python3.7、</title>
    <link href="/2020/06/11/centos7%E4%B8%8B%E5%AE%89%E8%A3%85python3-7/"/>
    <url>/2020/06/11/centos7%E4%B8%8B%E5%AE%89%E8%A3%85python3-7/</url>
    
    <content type="html"><![CDATA[<p>CentOS7默认已经安装了Python2.7，现安装3.7和它并存</p><h4 id="一、安装依赖"><a href="#一、安装依赖" class="headerlink" title="一、安装依赖"></a>一、安装依赖</h4><pre><code>yum -y groupinstall &quot;Development tools&quot;</code></pre><p>若出现以下错误：No packages in any requested group available to install or update</p><p>解决方法：</p><pre><code>cd /etc/yum.repos.dsudo wget http://public-yum.oracle.com/public-yum-el5.repocd /etc/pki/rpm-gpg/sudo wget https://public-yum.oracle.com/RPM-GPG-KEY-oracle-el5</code></pre><p>然后重试即可</p><pre><code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-develyum install -y libffi-devel zlib1g-devyum install zlib* -y</code></pre><h4 id="二、下载解压"><a href="#二、下载解压" class="headerlink" title="二、下载解压"></a>二、下载解压</h4><pre><code>cd /tmpwget wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tar.xztar -xvJf Python-3.7.2.tar.xz</code></pre><h4 id="三、创建编译安装目录"><a href="#三、创建编译安装目录" class="headerlink" title="三、创建编译安装目录"></a>三、创建编译安装目录</h4><pre><code>mkdir /usr/local/python3</code></pre><h4 id="四、安装"><a href="#四、安装" class="headerlink" title="四、安装"></a>四、安装</h4><pre><code>cd Python-3.7.2./configure --prefix=/usr/local/python3 --enable-optimizations --with-sslmake &amp;&amp; make install</code></pre><h4 id="五、建立软链接"><a href="#五、建立软链接" class="headerlink" title="五、建立软链接"></a>五、建立软链接</h4><pre><code>ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</code></pre><h4 id="六、验证"><a href="#六、验证" class="headerlink" title="六、验证"></a>六、验证</h4><pre><code>python3 -Vpip3 -V</code></pre><h4 id="Done"><a href="#Done" class="headerlink" title="Done."></a>Done.</h4>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android日期选择器DatePicker</title>
    <link href="/2020/06/01/android%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8datepicker/"/>
    <url>/2020/06/01/android%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8datepicker/</url>
    
    <content type="html"><![CDATA[<p>感觉这个窗口形式的日期选择器很实用，特此记录</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/06/image-5.png"></p><pre><code>public void dateSelect()    &#123;        //Calendar cal=Calendar.getInstance();        //获取年月日时分秒信息        //int year = cal.get(Calendar.YEAR);        //int month = cal.get(Calendar.MONTH)+1;//注意点 ，要加一        //int day = cal.get(Calendar.DAY_OF_MONTH);        //int hour = cal.get(Calendar.HOUR_OF_DAY);        //int minute = cal.get(Calendar.MINUTE);        Toast.makeText(register.this, &quot;可在顶部选择年份哦~&quot;, Toast.LENGTH_SHORT).show();        new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() &#123;            @Override            public void onDateSet(DatePicker view, int year, int month, int day) &#123;                //setTitle(&quot;当前时间：&quot;+year+&quot;年-&quot;+month+&quot;月-&quot;+day+&quot;日 &quot;);                //这里是点击确定后选择的日期            &#125;        &#125;, year, month, day).show(); //后三个参数用于日期初始化，即默认选择的日期    &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>安卓</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android9.0以上请求HTTP的方法</title>
    <link href="/2020/06/01/android9-0%E4%BB%A5%E4%B8%8A%E8%AF%B7%E6%B1%82http%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2020/06/01/android9-0%E4%BB%A5%E4%B8%8A%E8%AF%B7%E6%B1%82http%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在电脑模拟器上跑得好好的APP，用手机真机调试时，发现在发出HTTP请求时出现闪退，突然想起之前移动应用开发的老师讲过高版本SDK可能请求方式不一样，版本问题…OMG，才想起来我练手时都是在安卓4.4开发，现在要适配到安卓9，10…</p><p>OK，凡事不要慌，开始面向搜索引擎编程。</p></blockquote><p>先放一张版本图</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/06/image-1.png"></p><p>在Android9.0以上的设备上，如果应用使用的是非加密的明文流量的HTTP网络请求，则会导致该应用无法进行网络请求，HTTPS则不会受影响，如果应用嵌套了webview，webview也只能使用HTTPS请求。</p><p>但是，我们可以通过APP配置来解除限制</p><p>在Manifest下的application标签下，与activity并列，加入：</p><p>&lt;**uses-library android:name&#x3D;”org.apache.http.legacy” android:required&#x3D;”false”** &#x2F;&gt;</p><p>在Manifest下的application标签内，加入：</p><p><strong>android</strong><strong>:usesCleartextTraffic&#x3D;****”true”</strong></p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/06/image-3.png"></p><p>到此，HTTP网络问题应该已经解决。</p><p>另外，我在调试时还发现有一个日历窗口弹不出，会直接finish整个activity，在Android4.4版本也没有问题，原因好像是：android 9.0上使用前台服务，需要添加权限</p><p>在Manifest里面加上这权限</p><uses-permission android:name="android.permission.FOREGROUND_SERVICE" /><p>然后就解决啦</p>]]></content>
    
    
    <categories>
      
      <category>安卓</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LR(0)文法：构造DFA、分析表，句子推导</title>
    <link href="/2020/05/19/lr0%E6%96%87%E6%B3%95%EF%BC%9A%E6%9E%84%E9%80%A0dfa%E3%80%81%E5%88%86%E6%9E%90%E8%A1%A8%EF%BC%8C%E5%8F%A5%E5%AD%90%E6%8E%A8%E5%AF%BC/"/>
    <url>/2020/05/19/lr0%E6%96%87%E6%B3%95%EF%BC%9A%E6%9E%84%E9%80%A0dfa%E3%80%81%E5%88%86%E6%9E%90%E8%A1%A8%EF%BC%8C%E5%8F%A5%E5%AD%90%E6%8E%A8%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="LR分析法介绍"><a href="#LR分析法介绍" class="headerlink" title="LR分析法介绍"></a>LR分析法介绍</h3><p>预测分析算法LR(k):</p><ul><li>L: 从左到右扫描；</li><li>R:最右推导的逆过程；</li><li>(k): 向前看k个token。</li></ul><p>LR分析法的优点：</p><ul><li>LR分析器能识别所有可用上下文无关文法描述的程序设计语言的结构；</li><li>LR分析法是已知的最一般的无回溯移进一归约分析法,而且可以和其他移进归约分析法，而且可以和其他移进规约分析法一样有效地实现；</li><li>LR分析法分析的文法类包含预测分析法所能分析的文法类；</li><li>在自左向右扫描输入时,LR分析器能及时察觉语法错误。</li></ul><p>LR分析法的缺点：</p><p>对典型的程序设计语言文法，手工构造LR分析器的工作量太大。</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>输入多条产生式，构造出DFA、LR(0)分析表；</p><p>在上面的基础上输入一个句子，判别是否符合LR(0)文法。</p><h3 id="主要算法设计"><a href="#主要算法设计" class="headerlink" title="主要算法设计"></a>主要算法设计</h3><p>3.1构造DFA(确定有限自动机)</p><p>两个个参数：当前状态节点current_state,节点编号num</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/05/image.png"></p><p>图3-1</p><p>采用深度优先的递归遍历：遍历当前状态节点的产生式，如果某一条能产生一个新的状态，则新建一个状态节点，然后添加一条指向新状态的连接，数据结构如图3-2；</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/05/image-1.png"></p><p>图3-2</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/05/image-2.png"></p><p>图3-3</p><p>例如：当前状态是2；状态2遍历到第一条产生式时应生成新的状态节点3（这里的编号和算法实际生成的编号顺序不同），此时暂停外层的遍历，应该进行第二层遍历，从这条产生式的后一条开始遍历，查看是否有可以归并到新建节点里的产生式，在这个例子中，只需查看E-&gt;E.+T中“.”之后的符号是不是“$”；</p><p>第二层遍历到最后一条产生式时，应计算新状态的闭包，这个例子在状态5体现：完成对状态2的遍历后，状态5只有第一条E-&gt;E+.T，此时计算它的闭包，从初始状态中查找，添加对应的产生式进来；</p><p>新建一个状态完成后，把新状态放入状态节点向量中（便于查找），节点编号自+1，然后对新状态节点执行该算法。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/05/image-3.png"></p><p>图3-4</p><p>3.2构造LR(0)分析表</p><p>DFA构造完成后，其实像如下形式的分析表也已经构造完成（与教材上的不同），Goto表实际上就是各个状态之间的联系，DFA中已经记录，Action表只需查看某个状态的特点即可归纳:是句柄就Reduce，是句柄且以结束符$结尾就是Accept，其余都是Shift。</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/05/image-4.png"></p><p>图3-5</p><p>3.3判断句子是否符合LR(0)文法</p><p>首先还是把句子转为token流存储在一个向量中，然后反向存储到一个栈中，标记为未处理字符栈，另有一个已处理字符栈，如图3-6所示：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/05/image-5.png"></p><p>图3-6</p><p>初始状态要做的是：把状态1压入状态栈，然后重复做如下操作：</p><p>取状态栈栈顶S和未处理字符栈栈顶a,</p><ul><li>如果是Shift:<ul><li>新状态压入状态栈；</li><li>已处理字符栈压入未处理字符栈栈顶元素；</li><li>未处理字符栈弹出栈顶元素；</li></ul></li><li>如果是Reduce A-&gt;w(w中含有n个token)：<ul><li>状态栈弹出栈顶元素，重复n次；</li><li>已处理字符栈弹出栈顶元素，重复n次；</li><li>把A压入未处理字符栈；</li></ul></li><li>如果是Accept：<ul><li>跳出循环，程序结束。</li></ul></li></ul><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>以下用两个例子来验证结果的正确性：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/05/image-6.png"></p><p>图4-1 例题1</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/05/image-7.png"></p><p>图4-2 例题1</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/05/1.png"></p><p>图4-3 例题1</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/05/image-9.png"></p><p>图4-4 例题2</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/05/2.png"></p><p>图4-5 例题2</p><p>测试结果均正确无误，说明算法及程序基本正确。</p><h3 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h3><p>单单构造DFA就遇到了很多问题，比如计算闭包的问题，建立所有状态联系的问题，经过不断地调试修改才得以解决。后来构造分析表，发现教材上的分析表和课上讲的分析表样式不同，算法和也不能直接套用，只能靠自己摸索总结，经过很多次纸上推导，终于总结出了正确的算法。</p><p>程序的优点：</p><ul><li>支持字符串形式的token，支持产生式用“”连接，扩展性强；</li><li>可能程序效率不高，但数据结构相对较合理，易查易用易懂；</li><li>DFA、分析表、句子推导过程输出格式简洁美观；</li><li>多个样例测试均没有发现问题，程序可靠性强。</li></ul><h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// LR(0)table.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable : 4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable : 26495)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable : 6001)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable : 6031)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ca</span></span><br><span class="line">&#123; <span class="comment">//产生式</span></span><br><span class="line">    string str;</span><br><span class="line">    vector&lt;string&gt; vec;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cs</span></span><br><span class="line">&#123; <span class="comment">//情况--新状态</span></span><br><span class="line">    string condition;</span><br><span class="line">    <span class="type">int</span> state_number;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">state_node</span></span><br><span class="line">&#123; <span class="comment">//状态节点</span></span><br><span class="line">    <span class="type">int</span> state_number = <span class="number">0</span>;</span><br><span class="line">    vector&lt;ca&gt; ca;</span><br><span class="line">    vector&lt;cs&gt; cs;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LR_0</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;ca&gt; CA;                      <span class="comment">//产生式condition_action</span></span><br><span class="line">    vector&lt;string&gt; T;                   <span class="comment">//终结符</span></span><br><span class="line">    vector&lt;string&gt; N;                   <span class="comment">//非终结符</span></span><br><span class="line">    vector&lt;state_node*&gt; state_table; <span class="comment">//所有状态节点</span></span><br><span class="line">    state_node*first;                 <span class="comment">//初始状态指针</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; Goto;</span><br><span class="line">    vector&lt;string&gt; Action;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>;                                          <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_state_table</span><span class="params">()</span></span>;                         <span class="comment">//输出DFA</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cal_closure</span><span class="params">(state_node* node)</span></span>;                <span class="comment">//计算闭包</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">state_exist</span><span class="params">(ca* ca)</span></span>;                            <span class="comment">//判断状态是否已存在</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">create_automaton</span><span class="params">(state_node* node, <span class="type">int</span> &amp;num)</span></span>; <span class="comment">//构造自动机</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_parse_table</span><span class="params">()</span></span>;                         <span class="comment">//输出分析表</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(string str)</span></span>;                               <span class="comment">//判别句子是否符合LR0文法</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">string <span class="title">pointNext</span><span class="params">(ca ca)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//返回.后的token</span></span><br><span class="line">    <span class="type">int</span> len = ca.vec.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ca.vec[i] == <span class="string">&quot;.&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> (i &lt; len - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> ca.vec[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ca*<span class="title">copyca</span><span class="params">(ca item)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//复制产生式</span></span><br><span class="line">    ca*newca = <span class="keyword">new</span> <span class="built_in">ca</span>();</span><br><span class="line">    newca-&gt;index = <span class="number">0</span>;</span><br><span class="line">    newca-&gt;str = item.str; <span class="comment">//复制</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">int</span>(item.vec.<span class="built_in">size</span>()); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        newca-&gt;vec.<span class="built_in">push_back</span>(item.vec[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newca;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LR_0::cal_closure</span><span class="params">(state_node*node)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//计算DFA每个节点的闭包</span></span><br><span class="line">    <span class="type">int</span> m = first-&gt;ca.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span>*arr = <span class="keyword">new</span> <span class="type">int</span>[m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        arr[i] = <span class="number">0</span>; <span class="comment">//初始化</span></span><br><span class="line">    <span class="type">int</span> s = node-&gt;ca.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> k = s;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = node-&gt;ca.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string temp = <span class="built_in">pointNext</span>(node-&gt;ca[i]);</span><br><span class="line">            <span class="type">int</span> vsize = node-&gt;ca[i].vec.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;ca[i].vec[vsize - <span class="number">1</span>] == <span class="string">&quot;$&quot;</span>)</span><br><span class="line">            &#123; <span class="comment">// eg:A-&gt;B.C$  C开头的产生式也要加入</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;ca[i].vec[vsize - <span class="number">3</span>] == <span class="string">&quot;.&quot;</span>)</span><br><span class="line">                    temp = node-&gt;ca[i].vec[vsize - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (first-&gt;ca[j].str == temp &amp;&amp; arr[j] == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        node-&gt;ca.<span class="built_in">push_back</span>(* <span class="built_in">copyca</span>(first-&gt;ca[j]));</span><br><span class="line">                        arr[j] = <span class="number">1</span>;</span><br><span class="line">                        k += <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (k &gt; s); <span class="comment">//不再增加时，闭包计算完成</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPoint</span><span class="params">(ca &amp;v, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//给产生式加点</span></span><br><span class="line">    v.vec.<span class="built_in">insert</span>(v.vec.<span class="built_in">begin</span>() + x, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shiftPoint</span><span class="params">(ca &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//产生式移点</span></span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">int</span>(v.vec.<span class="built_in">size</span>()); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v.vec[i] == <span class="string">&quot;.&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v.vec.<span class="built_in">erase</span>(v.vec.<span class="built_in">begin</span>() + temp);</span><br><span class="line">    v.vec.<span class="built_in">insert</span>(v.vec.<span class="built_in">begin</span>() + temp + <span class="number">1</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LR_0::state_exist</span><span class="params">(ca*ca)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//判断状态是否已经存在</span></span><br><span class="line">    <span class="type">int</span> len = state_table.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (state_table[i] -&gt; ca[<span class="number">0</span>].str == ca-&gt;str)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (state_table[i] -&gt; ca[<span class="number">0</span>].vec.<span class="built_in">size</span>() == ca-&gt;vec.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">int</span>(state_table[i] -&gt; ca[<span class="number">0</span>].vec.<span class="built_in">size</span>()); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (state_table[i] -&gt; ca[<span class="number">0</span>].vec[j] == ca-&gt;vec[j])</span><br><span class="line">                        k++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="built_in">int</span>(ca-&gt;vec.<span class="built_in">size</span>()))</span><br><span class="line">                    <span class="keyword">return</span> i; <span class="comment">//已经存在的话返回下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//不存在则返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LR_0::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//初始化</span></span><br><span class="line">    string str;</span><br><span class="line">    vector&lt;string&gt; v;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入若干条形如‘ STMT -&gt; if EXPR then STMT  EXPR ’的产生式：\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(每个token之间用空格分隔，输入0结束)\n&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">getline</span>(cin, str); <span class="comment">//获取一行标准输入，即字符流形式的产生式</span></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">int</span> l = str.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; index;</span><br><span class="line">        <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//以下将每一行化成若干个最短产生式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;&gt;&#x27;</span> &amp;&amp; i &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[i - <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                    begin = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;&#x27;)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                index.push_back(i);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        string prefix = str.substr(0, begin + 1);</span></span><br><span class="line"><span class="string">        int len = int(index.size());</span></span><br><span class="line"><span class="string">        if (len == 0)</span></span><br><span class="line"><span class="string">            v.push_back(str);</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            for (int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                if (i == 0)</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    v.push_back(str.substr(0, index[0]));</span></span><br><span class="line"><span class="string">                    end = index[0];</span></span><br><span class="line"><span class="string">                    continue;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                begin = index[i - 1];</span></span><br><span class="line"><span class="string">                end = index[i];</span></span><br><span class="line"><span class="string">                v.push_back(prefix + str.substr(begin + 1, end - begin - 1));</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            v.push_back(prefix + str.substr(end + 1, l - end));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125; //以上将每一行化成若干个最短产生式，放到向量V中</span></span><br><span class="line"><span class="string">    //以下给token归类，分为终结符和非终结符</span></span><br><span class="line"><span class="string">    vector&lt;string&gt; left, right;</span></span><br><span class="line"><span class="string">    int len = int(v.size());</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        istringstream temp(v[i]);</span></span><br><span class="line"><span class="string">        string out;</span></span><br><span class="line"><span class="string">        int cal = 0;</span></span><br><span class="line"><span class="string">        ca new_item;</span></span><br><span class="line"><span class="string">        while (temp &gt;&gt; out)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            if (cal == 0)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                left.push_back(out);</span></span><br><span class="line"><span class="string">                new_item.str = out;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            else if (cal == 1)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                cal++;</span></span><br><span class="line"><span class="string">                continue;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                right.push_back(out);</span></span><br><span class="line"><span class="string">                new_item.vec.push_back(out);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            cal++;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        CA.push_back(new_item);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    int len1 = int(left.size());</span></span><br><span class="line"><span class="string">    int len2 = int(right.size());</span></span><br><span class="line"><span class="string">    vector&lt;string&gt;::iterator it;</span></span><br><span class="line"><span class="string">    for (int k = 0; k &lt; len1; k++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        it = find(N.begin(), N.end(), left[k]);</span></span><br><span class="line"><span class="string">        if (it == N.end()) //不存在</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            N.push_back(left[k]); //产生式左边的一定是非终结符</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; len2; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        bool flag = true; //默认是终结符</span></span><br><span class="line"><span class="string">        for (int j = 0; j &lt; len1; j++)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            if (right[i] == left[j]) //产生式左边出现过</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                flag = false; //是非终结符</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if (flag)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            it = find(T.begin(), T.end(), right[i]);</span></span><br><span class="line"><span class="string">            if (it == T.end()) //不存在</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                T.push_back(right[i]);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            it = find(N.begin(), N.end(), right[i]);</span></span><br><span class="line"><span class="string">            if (it == N.end()) //不存在</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                N.push_back(right[i]);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    int num = 1;</span></span><br><span class="line"><span class="string">    state_node*first_node = new state_node();</span></span><br><span class="line"><span class="string">    //先构造初始状态</span></span><br><span class="line"><span class="string">    first_node-&gt;state_number = num++;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; int(CA.size()); i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        ca*p = copyca(CA[i]);</span></span><br><span class="line"><span class="string">        setPoint(* p, 0);</span></span><br><span class="line"><span class="string">        first_node-&gt;ca.push_back(* p);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    first = first_node;</span></span><br><span class="line"><span class="string">    //初始状态构造完成</span></span><br><span class="line"><span class="string">    state_table.push_back(first);</span></span><br><span class="line"><span class="string">    // S.push(first);</span></span><br><span class="line"><span class="string">    create_automaton(first, num);</span></span><br><span class="line"><span class="string">    //递归构造自动机</span></span><br><span class="line"><span class="string">    return;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">void LR_0::create_automaton(state_node *current_state, int &amp;num)</span></span><br><span class="line"><span class="string">&#123; //构造自动机</span></span><br><span class="line"><span class="string">    if (int(current_state-&gt;ca.size()) == 1)</span></span><br><span class="line"><span class="string">    &#123; //归约的情况</span></span><br><span class="line"><span class="string">        int d = int(current_state-&gt;ca[0].vec.size());</span></span><br><span class="line"><span class="string">        if (current_state-&gt;ca[0].vec[d - 1] == &quot;.&quot;)</span></span><br><span class="line"><span class="string">            return;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    vector&lt;string&gt; str;</span></span><br><span class="line"><span class="string">    vector&lt;int*&gt; index;</span></span><br><span class="line"><span class="string">    int x = 0;</span></span><br><span class="line"><span class="string">    int s = int(current_state-&gt;ca.size());</span></span><br><span class="line"><span class="string">    int len = 0;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; s; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        bool flag = true;   //是不是新的状态</span></span><br><span class="line"><span class="string">        bool flag2 = false; //需不需要跳出循环</span></span><br><span class="line"><span class="string">        string temp = pointNext(current_state-&gt;ca[i]);</span></span><br><span class="line"><span class="string">        if (temp == &quot;&quot;)</span></span><br><span class="line"><span class="string">            return;</span></span><br><span class="line"><span class="string">        if (i &gt; 0)</span></span><br><span class="line"><span class="string">            len = int(str.size());</span></span><br><span class="line"><span class="string">        for (int j = 0; j &lt; len; j++)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            if (str[j] == temp)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                flag = false;</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if (flag)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            str.push_back(temp);</span></span><br><span class="line"><span class="string">            state_node*newstate = new state_node();</span></span><br><span class="line"><span class="string">            newstate-&gt;state_number = num++;</span></span><br><span class="line"><span class="string">            cs *newcs = new cs();</span></span><br><span class="line"><span class="string">            newcs-&gt;condition = temp;</span></span><br><span class="line"><span class="string">            newcs-&gt;state_number = num - 1;</span></span><br><span class="line"><span class="string">            for (int k = i; k &lt; s; k++)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                if (pointNext(current_state-&gt;ca[k]) == temp)</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    ca*p = copyca(current_state-&gt;ca[k]);</span></span><br><span class="line"><span class="string">                    int ss = p-&gt;vec.size();</span></span><br><span class="line"><span class="string">                    shiftPoint(* p);</span></span><br><span class="line"><span class="string">                    int res = state_exist(p);</span></span><br><span class="line"><span class="string">                    if (res != -1)</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        num--;</span></span><br><span class="line"><span class="string">                        newcs-&gt;state_number = state_table[res] -&gt; state_number;</span></span><br><span class="line"><span class="string">                        current_state-&gt;cs.push_back(* newcs);</span></span><br><span class="line"><span class="string">                        flag2 = true;</span></span><br><span class="line"><span class="string">                        break;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                    newstate-&gt;ca.push_back(* p);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                if (k == s - 1)</span></span><br><span class="line"><span class="string">                &#123; //最后一条完成后，计算闭包</span></span><br><span class="line"><span class="string">                    cal_closure(newstate);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            if (flag2) //需要跳出循环</span></span><br><span class="line"><span class="string">                continue;</span></span><br><span class="line"><span class="string">            current_state-&gt;cs.push_back(* newcs);</span></span><br><span class="line"><span class="string">            state_table.push_back(newstate);</span></span><br><span class="line"><span class="string">            create_automaton(newstate, num); //递归</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">void LR_0::display_parse_table()</span></span><br><span class="line"><span class="string">&#123; //输出分析表</span></span><br><span class="line"><span class="string">    int len = state_table.size();</span></span><br><span class="line"><span class="string">    int s = T.size() + N.size();</span></span><br><span class="line"><span class="string">    string*str = new string[s];</span></span><br><span class="line"><span class="string">    int k = 0;</span></span><br><span class="line"><span class="string">    vector&lt;int&gt; line(s, 0);</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        Goto.push_back(line);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; int(T.size()); i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        str[k++] = T[i];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; int(N.size()); i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        str[k++] = N[i];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if (state_table[i] -&gt; cs.empty())</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            bool flag = false;</span></span><br><span class="line"><span class="string">            string temp = &quot;Reduce &quot; + state_table[i] -&gt; ca[0].str + &quot;-&gt;&quot;;</span></span><br><span class="line"><span class="string">            int l = state_table[i] -&gt; ca[0].vec.size();</span></span><br><span class="line"><span class="string">            for (int k = 0; k &lt; l; k++)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                temp = temp.append(state_table[i] -&gt; ca[0].vec[k]);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            if (state_table[i] -&gt; ca[0].vec[l - 1] == &quot;.&quot; &amp;&amp; state_table[i] -&gt; ca[0].vec[l - 2] == &quot;$&quot;)</span></span><br><span class="line"><span class="string">                Action.push_back(&quot;Accept&quot;);</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                Action.push_back(temp);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            Action.push_back(&quot;Shift&quot;);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        for (int j = 0; j &lt; int(state_table[i] -&gt; cs.size()); j++)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            string temp = state_table[i] -&gt; cs[j].condition;</span></span><br><span class="line"><span class="string">            for (int k = 0; k &lt; s; k++)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                if (temp == str[k])</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    Goto[state_table[i] -&gt; state_number - 1][k] = state_table[i] -&gt; cs[j].state_number;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    string temp(90, &#x27;</span>-<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">    cout &lt;&lt; setw(8) &lt;&lt; &quot;State&quot;</span></span><br><span class="line"><span class="string">         &lt;&lt; &quot;&quot;;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; s; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; setw(8) &lt;&lt; str[i];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    cout &lt;&lt; setw(16) &lt;&lt; &quot;Action&quot;;</span></span><br><span class="line"><span class="string">    cout &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="string">    cout &lt;&lt; temp &lt;&lt; endl;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; setw(8) &lt;&lt; i + 1 &lt;&lt; &quot;&quot;;</span></span><br><span class="line"><span class="string">        for (int j = 0; j &lt; s; j++)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            if (Goto[i][j] != 0)</span></span><br><span class="line"><span class="string">                cout &lt;&lt; setw(8) &lt;&lt; Goto[i][j];</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                cout &lt;&lt; setw(8) &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; setw(16) &lt;&lt; Action[i];</span></span><br><span class="line"><span class="string">        cout &lt;&lt; &#x27;</span>\n<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; temp;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">void LR_0::display_state_table()</span></span><br><span class="line"><span class="string">&#123; //输出DFA</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; int(state_table.size()); i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; &quot;State&quot; &lt;&lt; state_table[i] -&gt; state_number &lt;&lt; &quot;:&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="string">        for (int j = 0; j &lt; int(state_table[i] -&gt; ca.size()); j++)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            cout &lt;&lt; setw(20) &lt;&lt; state_table[i] -&gt; ca[j].str &lt;&lt; &quot;-&gt;&quot;;</span></span><br><span class="line"><span class="string">            for (int k = 0; k &lt; int(state_table[i] -&gt; ca[j].vec.size()); k++)</span></span><br><span class="line"><span class="string">                cout &lt;&lt; state_table[i] -&gt; ca[j].vec[k];</span></span><br><span class="line"><span class="string">            cout &lt;&lt; endl;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    cout &lt;&lt; &quot;Relation:\n&quot;;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; int(state_table.size()); i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        for (int j = 0; j &lt; int(state_table[i] -&gt; cs.size()); j++)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            cout &lt;&lt; setw(20) &lt;&lt; state_table[i] -&gt; state_number &lt;&lt; &quot;-&gt; &quot;;</span></span><br><span class="line"><span class="string">            cout &lt;&lt; state_table[i] -&gt; cs[j].condition &lt;&lt; &quot; -&gt;&quot; &lt;&lt; state_table[i] -&gt; cs[j].state_number;</span></span><br><span class="line"><span class="string">            cout &lt;&lt; endl;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    cout &lt;&lt; endl;</span></span><br><span class="line"><span class="string">    return;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">bool LR_0::judge(string w)</span></span><br><span class="line"><span class="string">&#123; //判断句子是否符合文法</span></span><br><span class="line"><span class="string">    bool flag = false;</span></span><br><span class="line"><span class="string">    // getline(cin, str);//读取一行命令参数</span></span><br><span class="line"><span class="string">    vector&lt;string&gt; it;</span></span><br><span class="line"><span class="string">    istringstream temp(w);</span></span><br><span class="line"><span class="string">    string out;</span></span><br><span class="line"><span class="string">    while (temp &gt;&gt; out)</span></span><br><span class="line"><span class="string">        it.push_back(out);</span></span><br><span class="line"><span class="string">    //以上，转为token流</span></span><br><span class="line"><span class="string">    stack&lt;string&gt; buffer;</span></span><br><span class="line"><span class="string">    for (int i = int(it.size()) - 1; i &gt;= 0; i--)</span></span><br><span class="line"><span class="string">        buffer.push(it[i]);</span></span><br><span class="line"><span class="string">    //待处理字符存在一个栈中</span></span><br><span class="line"><span class="string">    stack&lt;state_node*&gt; state;</span></span><br><span class="line"><span class="string">    state.push(first);</span></span><br><span class="line"><span class="string">    stack&lt;string&gt; str;</span></span><br><span class="line"><span class="string">    string*arr = new string[int(T.size() + N.size())];</span></span><br><span class="line"><span class="string">    int j = 0;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; int(T.size()); i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        arr[j++] = T[i];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; int(N.size()); i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        arr[j++] = N[i];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    int a = 0;</span></span><br><span class="line"><span class="string">    cout &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="string">    string tstr(90, &#x27;</span>-<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">    cout &lt;&lt; setw(20) &lt;&lt; &quot;State_stack&quot; &lt;&lt; setw(20) &lt;&lt; &quot;Processed&quot; &lt;&lt; setw(30) &lt;&lt; &quot;Unprocessed&quot; &lt;&lt; setw(20) &lt;&lt; &quot;Action_required&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="string">    cout &lt;&lt; tstr &lt;&lt; endl;</span></span><br><span class="line"><span class="string">    while (1)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        string outputstr1 = &quot;&quot;;</span></span><br><span class="line"><span class="string">        stack&lt;state_node*&gt; temp_state_stack;</span></span><br><span class="line"><span class="string">        while (!state.empty())</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            temp_state_stack.push(state.top());</span></span><br><span class="line"><span class="string">            state.pop();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        while (!temp_state_stack.empty())</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            state.push(temp_state_stack.top());</span></span><br><span class="line"><span class="string">            outputstr1.append(to_string(temp_state_stack.top()-&gt;state_number) + &quot; &quot;);</span></span><br><span class="line"><span class="string">            temp_state_stack.pop();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; setw(20) &lt;&lt; outputstr1;</span></span><br><span class="line"><span class="string">        string outputstr2 = &quot;&quot;;</span></span><br><span class="line"><span class="string">        stack&lt;string&gt; temp_string_stack;</span></span><br><span class="line"><span class="string">        while (!str.empty())</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            temp_string_stack.push(str.top());</span></span><br><span class="line"><span class="string">            str.pop();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        while (!temp_string_stack.empty())</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            str.push(temp_string_stack.top());</span></span><br><span class="line"><span class="string">            outputstr2.append(temp_string_stack.top() + &quot; &quot;);</span></span><br><span class="line"><span class="string">            temp_string_stack.pop();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; setw(20) &lt;&lt; outputstr2;</span></span><br><span class="line"><span class="string">        string outputstr3 = &quot;&quot;;</span></span><br><span class="line"><span class="string">        while (!buffer.empty())</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            temp_string_stack.push(buffer.top());</span></span><br><span class="line"><span class="string">            outputstr3.append(buffer.top() + &quot; &quot;);</span></span><br><span class="line"><span class="string">            buffer.pop();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        while (!temp_string_stack.empty())</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            buffer.push(temp_string_stack.top());</span></span><br><span class="line"><span class="string">            temp_string_stack.pop();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; setw(30) &lt;&lt; outputstr3;</span></span><br><span class="line"><span class="string">        if (buffer.empty()) //输入串已到末尾</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            flag = true;</span></span><br><span class="line"><span class="string">            cout &lt;&lt; setw(20) &lt;&lt; &quot;Accept!\n&quot;;</span></span><br><span class="line"><span class="string">            break;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        string action = &quot;&quot;;</span></span><br><span class="line"><span class="string">        int s = state.top()-&gt;state_number - 1;</span></span><br><span class="line"><span class="string">        for (int i = 0; i &lt; int(T.size() + N.size()); i++)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            if (buffer.top() == arr[i]) //待输入的字符栈顶元素</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                a = i; //获取在表格中的列号</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        // s:行号 a:列号</span></span><br><span class="line"><span class="string">        if (Goto[s][a] != 0) // shift</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            for (int i = 0; i &lt; int(state_table.size()); i++)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                if (state_table[i] -&gt; state_number == Goto[s][a])</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    state.push(state_table[i]);</span></span><br><span class="line"><span class="string">                    break;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            str.push(buffer.top());</span></span><br><span class="line"><span class="string">            buffer.pop();</span></span><br><span class="line"><span class="string">            action = &quot;Shift,go to&quot; + to_string(Goto[s][a]);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            if (Action[s][0] == &#x27;</span>R<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                int index = 0;</span></span><br><span class="line"><span class="string">                for (int i = 0; i &lt; int(state_table.size()); i++)</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    if (state_table[i] -&gt; state_number == s + 1)</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        index = i; //找到行号</span></span><br><span class="line"><span class="string">                        break;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                int vsize = state_table[index] -&gt; ca[0].vec.size() - 1;</span></span><br><span class="line"><span class="string">                while (vsize--)</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    state.pop();</span></span><br><span class="line"><span class="string">                    str.pop();</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                buffer.push(state_table[index] -&gt; ca[0].str);</span></span><br><span class="line"><span class="string">                int q = Action[s].length();</span></span><br><span class="line"><span class="string">                action = Action[s].substr(0, q - 1);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                action = Action[s];</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        //输出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        cout &lt;&lt; setw(20) &lt;&lt; action &lt;&lt; endl;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; tstr &lt;&lt; endl;</span></span><br><span class="line"><span class="string">        if (flag)</span></span><br><span class="line"><span class="string">            return flag;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return flag;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">int main()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    // freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="string">    LR_0 tag;</span></span><br><span class="line"><span class="string">    tag.init();</span></span><br><span class="line"><span class="string">    tag.display_state_table();</span></span><br><span class="line"><span class="string">    tag.display_parse_table();</span></span><br><span class="line"><span class="string">    // tag.judge(&quot;int +  ( int + int ) $&quot;);</span></span><br><span class="line"><span class="string">    cout &lt;&lt; &quot;请输入句子，每个token间用空格分隔，以$结尾:\n&quot;;</span></span><br><span class="line"><span class="string">    string str;</span></span><br><span class="line"><span class="string">    getline(cin, str);</span></span><br><span class="line"><span class="string">    tag.judge(str);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SLIC超像素视频转换</title>
    <link href="/2020/04/30/%E8%B6%85%E5%83%8F%E7%B4%A0%E8%A7%86%E9%A2%91%E8%BD%AC%E6%8D%A2/"/>
    <url>/2020/04/30/%E8%B6%85%E5%83%8F%E7%B4%A0%E8%A7%86%E9%A2%91%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1     问题描述"></a>1     问题描述</h2><p>超像素视频生成小软件:完成一段小程序，读入一段原始视频，要求调用SLIC算法生成超像素视频。该软件要求有友好的用户界面，有功能按钮及视频显示等细节，要求能在界面上设置SLIC的输入参数。</p><h2 id="2-超像素介绍"><a href="#2-超像素介绍" class="headerlink" title="2    超像素介绍"></a>2    超像素介绍</h2><h3 id="2-1概念"><a href="#2-1概念" class="headerlink" title="2.1概念"></a>2.1概念</h3><p>超像素概念是2003年Xiaofeng Ren提出和发展起来的图像分割技术，它是指具有相似纹理、颜色、亮度等特征的相邻像素构成的有一定视觉意义的不规则像素块。它利用像素之间特征的相似性将像素分组,用少量的超像素代替大量的像素来表达图片特征,很大程度上降低了图像后处理的复杂度，所以通常作为分割<a href="https://edu.csdn.net/course/detail/25300">算法</a>的预处理步骤。该技术已经被广泛的应用到图像分割、姿势估计、目标跟踪、目标识别等多个<a href="https://edu.csdn.net/course/detail/10552">计算机视觉</a>任务等。</p><h3 id="2-2特点"><a href="#2-2特点" class="headerlink" title="2.2特点"></a>2.2特点</h3><ul><li>计算效率比较高</li></ul><p>虽然计算实际的超像素组可能很昂贵，但它允许我们将图像本身的复杂性从几十万像素降低到几百像素。这些超级像素中的每一个都将包含某种感知的、理想的语义值。</p><ul><li>含有更多的感知信息</li></ul><p>单个的像素网格其实并没有太大的感知意义，而超像素组中的像素具有共性，例如相似的颜色或纹理分布。下图展示了这种情况，单单将图中箭头所指的图像像素网格进行放大后并不能得到什么感知信息。</p><ul><li>过度分割可以减少像素损失</li></ul><p>大多数的超像素算法都会使图像失真。这意味着图像中的大部分重要边界都被找到了；但是它的代价是生成许多无关紧要的边界。虽然这听起来像是使用超级像素的问题，但实际上它会带来优点，这种过度扩张的最终结果是-从像素网格到超级像素映射的像素损失非常小。</p><h2 id="3-SLIC算法介绍"><a href="#3-SLIC算法介绍" class="headerlink" title="3     SLIC算法介绍"></a>3     SLIC算法介绍</h2><h3 id="3-1算法原理"><a href="#3-1算法原理" class="headerlink" title="3.1算法原理"></a>3.1算法原理</h3><p>简单线性迭代聚类SILC（simple linear iterative clustering）是一种图像分割算法。默认情况下，该算法的唯一参数是k，约等于超像素尺寸的期望数量。对于CIELAB彩色空间的图像，在相隔S像素上采样得到初始聚类中心。为了产生大致相同尺寸的超像素，格点的距离是S&#x3D;N&#x2F;k−−−−√S&#x3D;N&#x2F;k。中心需要被移到3x3领域内的最低梯度处，这样做是为了避免超像素中心在边缘和噪声点上。</p><p>　　接下来为每一个像素ii设置最近的聚类中心，该聚类中心的搜索区域要覆盖该像素的位置。这是本算法加速的关键，因为通过限制搜索区域的大小减小了距离计算的数量，并且相对于传统的k-means聚类算法有显著的速度优势，因为后者的每个像素都必须和所有的聚类中心进行比较。一个超像素的预期空间范围是约为SxS的区域，这里对于相似像素的搜索是在超像素中心的2Sx2S区域完成。</p><p>　　一旦每个像素被关联到最近的聚类中心后，就通过求聚类中心所有像素的均值来执行聚类中心的更新。使用L2L2范数计算前一个聚类中心和当前聚类中心的残差。assignment和update步骤被重复迭代直到误差收敛，但是我们发现对于大多数图像10次迭代就够了。</p><h3 id="3-2算法步骤"><a href="#3-2算法步骤" class="headerlink" title="3.2算法步骤"></a>3.2算法步骤</h3><ul><li>步骤1-初始化种子点（聚类中心）按照设定的超像素组个数，在图像内均匀的分配一些种子点。假设图片总共有含有N 个像素点，预分割为 K 个相同尺寸的超像素，那么每个超像素的大小为N&#x2F; K ，则相邻种子点的距离或者步长近似可以表示为S&#x3D;sqrt(N&#x2F;K)。</li><li>步骤2-在种子点的n*n邻域内重新选择种子点（一般取n&#x3D;3）。首先计算该邻域内所有像素点的梯度值；然后将种子点移到该邻域内梯度最小的地方。这样做的目的是为了避免种子点落在梯度较大的轮廓边界上，以免影响后续聚类效果。</li><li>步骤3-在每个种子点周围的邻域内为每个像素点分配类标签（即属于哪个聚类中心）。和标准的k-means在整张图中搜索不同，SLIC的搜索范围限制为2S_2S，可以加速算法收敛，具体的区别如下图所示。需要注意的是，期望的超像素尺寸为S_S，但是搜索的范围是2S*2S。</li></ul><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/kmean.png"></p><p>图3-1 标准K-means和SLIC搜索范围区别</p><ul><li>步骤4-距离度量。具体包括颜色和空间距离。对于每个搜索到的像素点，分别计算它到该种子点之间的距离。具体的距离公式如下所示：</li></ul><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/juli.png"></p><p>图3-2 距离公式</p><h3 id="3-3算法调用"><a href="#3-3算法调用" class="headerlink" title="3.3算法调用"></a>3.3算法调用</h3><p>slic(image,<br>n_segments&#x3D;100,<br>compactness&#x3D;10,<br>max_iter&#x3D;10,<br>sigma&#x3D;0,<br>spacing&#x3D;None,<br>multichannel&#x3D;True,<br>convert2lab&#x3D;None,<br>enforce_connectivity&#x3D;True,<br>min_size_factor&#x3D;0.5,<br>max_size_factor&#x3D;3,<br>slic_zero&#x3D;False)</p><p>image 2D, 3D or 4D 数组</p><p>n_segments超像素近似个数</p><p>max_iter最大k均值迭代次数</p><p>sigma高斯平滑核宽</p><p>本实验中支持调整的参数有两个：n_segments, sigma</p><h2 id="4-程序说明"><a href="#4-程序说明" class="headerlink" title="4     程序说明"></a>4     程序说明</h2><h3 id="4-1主程序流程图"><a href="#4-1主程序流程图" class="headerlink" title="4.1主程序流程图"></a>4.1主程序流程图</h3><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200430194359.png"></p><p>图4-1 主程序流程图(不含UI界面事件)</p><h3 id="4-2主要函数说明"><a href="#4-2主要函数说明" class="headerlink" title="4.2主要函数说明"></a>4.2主要函数说明</h3><p>表4-1 主要函数说明</p><table><thead><tr><th>函数名</th><th>功能</th><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>Read_video(path,file_name)</td><td>把视频转化为很多图片，并且提取音频文件</td><td>视频路径、文件名</td><td>帧率、尺寸</td></tr><tr><td>Super_pixel(path,numSegments,numSigma,outputDir,outputFilename)</td><td>把单张图片转为超像素图像</td><td>图片路径、超像素个数、平滑度、输出路径、输出文件名</td><td>无</td></tr><tr><td>Picture_conversion(inputDir,outputDir,numSegments,numSigma)</td><td>调用Super_pixel批量把图片转化成超像素图像</td><td>源目录、输出目录、超像素个数、平滑度</td><td>无</td></tr><tr><td>Create_video(videoDir,fps,height,width)</td><td>把批量的超像素图像合成为视频并进行压缩，加入音频</td><td>视频路径、帧率、尺寸</td><td>无</td></tr></tbody></table><h2 id="5-功能测试"><a href="#5-功能测试" class="headerlink" title="5     功能测试"></a>5     功能测试</h2><p>图形界面有3个可修改的参数和4个按钮，如图5-1</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/5-1-1024x781.png"></p><p>图5-1 原视频</p><p>点击开始转换按钮，经过一段漫长的等待时间，显示转换成功</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/5-2-1024x724.png"></p><p>图5-2 转换成功</p><p>注意到第二个播放按钮变为可用，点击播放转换后的视频</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/5-3-1024x781.png"></p><p>图5-3 播放转换后的视频</p><p>不同参数情况下的转换结果：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/5-4-592x1024.jpg"></p><p>图5-4 n_segments&#x3D;100,sigma&#x3D;0</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/5-5-592x1024.jpg"></p><p>图5-5 n_segments&#x3D;100,sigma&#x3D;5</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/5-6-592x1024.jpg"></p><p>图5-6 n_segments&#x3D;100,sigma&#x3D;10</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/5-7-1-592x1024.jpg"></p><p>图5-7 n_segments&#x3D;500,sigma&#x3D;5</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/5-8-592x1024.jpg"></p><p>图5-4 n_segments&#x3D;1000,sigma&#x3D;5</p><h2 id="6-实验总结"><a href="#6-实验总结" class="headerlink" title="6     实验总结"></a>6     实验总结</h2><p>本次实验有一定的挑战性，一方面是还没用PyQt5写过界面，另一方面，平时做的都是单张图像处理，还没做过视频处理，有些不知所措。查阅资料后发现没有能够直接对视频对象进行转换的，所以就确定了基本思路：把每一帧图像单独拆分出来进行超像素转换，再组合成新的视频，然后把原视频的音频信息再加入到新视频中。碰到的难点主要在单张图像的超像素转换和存储、视频的压缩以及在图形化界面中的视频播放。经过一番折腾也算是基本完成了任务需求，也积累了不少相关的开发经验，受益良多，很有意义。</p><h2 id="7-源码"><a href="#7-源码" class="headerlink" title="7     源码"></a>7     源码</h2><h3 id="test-ui"><a href="#test-ui" class="headerlink" title="test.ui"></a>test.ui</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ui</span> <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">class</span>&gt;</span>SuperpixelVideo<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QMainWindow&quot;</span> <span class="attr">name</span>=<span class="string">&quot;SuperpixelVideo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">y</span>&gt;</span>0<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">width</span>&gt;</span>1120<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">height</span>&gt;</span>817<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>9<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;windowTitle&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">string</span>&gt;</span>MainWindow<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;centralwidget&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QLabel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;n_segments&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>80<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>40<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>151<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>51<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minimumSize&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>16<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>16<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>16<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">weight</span>&gt;</span>75<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bold</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bold</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">underline</span>&gt;</span>false<span class="tag">&lt;/<span class="name">underline</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>超像素个数<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;textFormat&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">enum</span>&gt;</span>Qt::AutoText<span class="tag">&lt;/<span class="name">enum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QLabel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sigma&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>140<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>90<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>81<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>16<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">weight</span>&gt;</span>75<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bold</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bold</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">underline</span>&gt;</span>false<span class="tag">&lt;/<span class="name">underline</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>平滑度<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QPushButton&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cofirmButton&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>830<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>30<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>221<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>91<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;palette&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">palette</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">active</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">colorrole</span> <span class="attr">role</span>=<span class="string">&quot;Button&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">brush</span> <span class="attr">brushstyle</span>=<span class="string">&quot;SolidPattern&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">color</span> <span class="attr">alpha</span>=<span class="string">&quot;255&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">red</span>&gt;</span>85<span class="tag">&lt;/<span class="name">red</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">green</span>&gt;</span>170<span class="tag">&lt;/<span class="name">green</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">blue</span>&gt;</span>255<span class="tag">&lt;/<span class="name">blue</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">brush</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">colorrole</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">inactive</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">colorrole</span> <span class="attr">role</span>=<span class="string">&quot;Button&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">brush</span> <span class="attr">brushstyle</span>=<span class="string">&quot;SolidPattern&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">color</span> <span class="attr">alpha</span>=<span class="string">&quot;255&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">red</span>&gt;</span>85<span class="tag">&lt;/<span class="name">red</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">green</span>&gt;</span>170<span class="tag">&lt;/<span class="name">green</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">blue</span>&gt;</span>255<span class="tag">&lt;/<span class="name">blue</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">brush</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">colorrole</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">inactive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">disabled</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">colorrole</span> <span class="attr">role</span>=<span class="string">&quot;Button&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">brush</span> <span class="attr">brushstyle</span>=<span class="string">&quot;SolidPattern&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">color</span> <span class="attr">alpha</span>=<span class="string">&quot;255&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">red</span>&gt;</span>85<span class="tag">&lt;/<span class="name">red</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">green</span>&gt;</span>170<span class="tag">&lt;/<span class="name">green</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">blue</span>&gt;</span>255<span class="tag">&lt;/<span class="name">blue</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">brush</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">colorrole</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">disabled</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">palette</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>28<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">weight</span>&gt;</span>75<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">italic</span>&gt;</span>false<span class="tag">&lt;/<span class="name">italic</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bold</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bold</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strikeout</span>&gt;</span>false<span class="tag">&lt;/<span class="name">strikeout</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>开始转换<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QLabel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;videoPath&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>110<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>0<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>121<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>51<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>16<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">weight</span>&gt;</span>75<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bold</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bold</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">underline</span>&gt;</span>false<span class="tag">&lt;/<span class="name">underline</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>视频路径<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QLineEdit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lineEdit01&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>240<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>10<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>351<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>14<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QLineEdit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lineEdit02&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>240<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>50<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>81<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>14<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QLineEdit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lineEdit03&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>240<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>90<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>81<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>31<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>14<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QPushButton&quot;</span> <span class="attr">name</span>=<span class="string">&quot;button1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>220<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>710<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>111<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>51<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>16<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">weight</span>&gt;</span>75<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bold</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bold</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;verticalLayoutWidget&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>20<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>130<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>511<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>561<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> <span class="attr">name</span>=<span class="string">&quot;videoplayer1&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QWidget&quot;</span> <span class="attr">name</span>=<span class="string">&quot;verticalLayoutWidget_2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>580<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>130<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>521<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>561<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;QVBoxLayout&quot;</span> <span class="attr">name</span>=<span class="string">&quot;videoplayer2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QPushButton&quot;</span> <span class="attr">name</span>=<span class="string">&quot;button2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enabled&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bool</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>780<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>710<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>111<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>51<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>16<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">weight</span>&gt;</span>75<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bold</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bold</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QLabel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>620<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>60<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>211<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>41<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;palette&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">palette</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">active</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">colorrole</span> <span class="attr">role</span>=<span class="string">&quot;WindowText&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">brush</span> <span class="attr">brushstyle</span>=<span class="string">&quot;SolidPattern&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">color</span> <span class="attr">alpha</span>=<span class="string">&quot;255&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">red</span>&gt;</span>255<span class="tag">&lt;/<span class="name">red</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">green</span>&gt;</span>0<span class="tag">&lt;/<span class="name">green</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">blue</span>&gt;</span>0<span class="tag">&lt;/<span class="name">blue</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">brush</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">colorrole</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">inactive</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">colorrole</span> <span class="attr">role</span>=<span class="string">&quot;WindowText&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">brush</span> <span class="attr">brushstyle</span>=<span class="string">&quot;SolidPattern&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">color</span> <span class="attr">alpha</span>=<span class="string">&quot;255&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">red</span>&gt;</span>255<span class="tag">&lt;/<span class="name">red</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">green</span>&gt;</span>0<span class="tag">&lt;/<span class="name">green</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">blue</span>&gt;</span>0<span class="tag">&lt;/<span class="name">blue</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">brush</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">colorrole</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">inactive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">disabled</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">colorrole</span> <span class="attr">role</span>=<span class="string">&quot;WindowText&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">brush</span> <span class="attr">brushstyle</span>=<span class="string">&quot;SolidPattern&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">color</span> <span class="attr">alpha</span>=<span class="string">&quot;255&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">red</span>&gt;</span>120<span class="tag">&lt;/<span class="name">red</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">green</span>&gt;</span>120<span class="tag">&lt;/<span class="name">green</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">blue</span>&gt;</span>120<span class="tag">&lt;/<span class="name">blue</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">brush</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">colorrole</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">disabled</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">palette</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>16<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">weight</span>&gt;</span>75<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bold</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bold</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;layoutDirection&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">enum</span>&gt;</span>Qt::LeftToRight<span class="tag">&lt;/<span class="name">enum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QLabel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;label_2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>340<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>100<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>72<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>15<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>0为不平滑<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QLabel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;label_3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>340<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>60<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>72<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>15<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>近似<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QLabel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;label_4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>610<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>20<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>91<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>16<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>单左斜杠&#x27;/&#x27;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QPushButton&quot;</span> <span class="attr">name</span>=<span class="string">&quot;button3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">x</span>&gt;</span>500<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">y</span>&gt;</span>710<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">width</span>&gt;</span>111<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">height</span>&gt;</span>51<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">font</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pointsize</span>&gt;</span>16<span class="tag">&lt;/<span class="name">pointsize</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">weight</span>&gt;</span>75<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bold</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bold</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QMenuBar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;menubar&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;geometry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">y</span>&gt;</span>0<span class="tag">&lt;/<span class="name">y</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>1120<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>26<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">&quot;QStatusBar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;statusbar&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resources</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">connections</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ui</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Ui-test-py"><a href="#Ui-test-py" class="headerlink" title="Ui_test.py"></a>Ui_test.py</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;e:testtest.ui&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.13.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_SuperpixelVideo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, SuperpixelVideo</span>):</span><br><span class="line">        SuperpixelVideo.setObjectName(<span class="string">&quot;SuperpixelVideo&quot;</span>)</span><br><span class="line">        SuperpixelVideo.resize(<span class="number">1120</span>, <span class="number">817</span>)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">9</span>)</span><br><span class="line">        SuperpixelVideo.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.centralwidget = QtWidgets.QWidget(SuperpixelVideo)</span><br><span class="line">        <span class="variable language_">self</span>.centralwidget.setObjectName(<span class="string">&quot;centralwidget&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.n_segments = QtWidgets.QLabel(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.n_segments.setGeometry(QtCore.QRect(<span class="number">80</span>, <span class="number">40</span>, <span class="number">151</span>, <span class="number">51</span>))</span><br><span class="line">        <span class="variable language_">self</span>.n_segments.setMinimumSize(QtCore.QSize(<span class="number">16</span>, <span class="number">16</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">16</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        font.setUnderline(<span class="literal">False</span>)</span><br><span class="line">        font.setWeight(<span class="number">75</span>)</span><br><span class="line">        <span class="variable language_">self</span>.n_segments.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.n_segments.setTextFormat(QtCore.Qt.AutoText)</span><br><span class="line">        <span class="variable language_">self</span>.n_segments.setObjectName(<span class="string">&quot;n_segments&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sigma = QtWidgets.QLabel(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.sigma.setGeometry(QtCore.QRect(<span class="number">140</span>, <span class="number">90</span>, <span class="number">81</span>, <span class="number">31</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">16</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        font.setUnderline(<span class="literal">False</span>)</span><br><span class="line">        font.setWeight(<span class="number">75</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sigma.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.sigma.setObjectName(<span class="string">&quot;sigma&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cofirmButton = QtWidgets.QPushButton(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.cofirmButton.setGeometry(QtCore.QRect(<span class="number">830</span>, <span class="number">30</span>, <span class="number">221</span>, <span class="number">91</span>))</span><br><span class="line">        palette = QtGui.QPalette()</span><br><span class="line">        brush = QtGui.QBrush(QtGui.QColor(<span class="number">85</span>, <span class="number">170</span>, <span class="number">255</span>))</span><br><span class="line">        brush.setStyle(QtCore.Qt.SolidPattern)</span><br><span class="line">        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)</span><br><span class="line">        brush = QtGui.QBrush(QtGui.QColor(<span class="number">85</span>, <span class="number">170</span>, <span class="number">255</span>))</span><br><span class="line">        brush.setStyle(QtCore.Qt.SolidPattern)</span><br><span class="line">        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)</span><br><span class="line">        brush = QtGui.QBrush(QtGui.QColor(<span class="number">85</span>, <span class="number">170</span>, <span class="number">255</span>))</span><br><span class="line">        brush.setStyle(QtCore.Qt.SolidPattern)</span><br><span class="line">        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)</span><br><span class="line">        <span class="variable language_">self</span>.cofirmButton.setPalette(palette)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">28</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        font.setItalic(<span class="literal">False</span>)</span><br><span class="line">        font.setWeight(<span class="number">75</span>)</span><br><span class="line">        font.setStrikeOut(<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cofirmButton.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.cofirmButton.setObjectName(<span class="string">&quot;cofirmButton&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.videoPath = QtWidgets.QLabel(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.videoPath.setGeometry(QtCore.QRect(<span class="number">110</span>, <span class="number">0</span>, <span class="number">121</span>, <span class="number">51</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">16</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        font.setUnderline(<span class="literal">False</span>)</span><br><span class="line">        font.setWeight(<span class="number">75</span>)</span><br><span class="line">        <span class="variable language_">self</span>.videoPath.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.videoPath.setObjectName(<span class="string">&quot;videoPath&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit01 = QtWidgets.QLineEdit(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit01.setGeometry(QtCore.QRect(<span class="number">240</span>, <span class="number">10</span>, <span class="number">351</span>, <span class="number">31</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">14</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit01.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit01.setObjectName(<span class="string">&quot;lineEdit01&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit02 = QtWidgets.QLineEdit(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit02.setGeometry(QtCore.QRect(<span class="number">240</span>, <span class="number">50</span>, <span class="number">81</span>, <span class="number">31</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">14</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit02.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit02.setObjectName(<span class="string">&quot;lineEdit02&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit03 = QtWidgets.QLineEdit(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit03.setGeometry(QtCore.QRect(<span class="number">240</span>, <span class="number">90</span>, <span class="number">81</span>, <span class="number">31</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">14</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit03.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit03.setObjectName(<span class="string">&quot;lineEdit03&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button1 = QtWidgets.QPushButton(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.button1.setGeometry(QtCore.QRect(<span class="number">220</span>, <span class="number">710</span>, <span class="number">111</span>, <span class="number">51</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">16</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        font.setWeight(<span class="number">75</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button1.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.button1.setObjectName(<span class="string">&quot;button1&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayoutWidget = QtWidgets.QWidget(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayoutWidget.setGeometry(QtCore.QRect(<span class="number">20</span>, <span class="number">130</span>, <span class="number">511</span>, <span class="number">561</span>))</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayoutWidget.setObjectName(<span class="string">&quot;verticalLayoutWidget&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.videoplayer1 = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>.verticalLayoutWidget)</span><br><span class="line">        <span class="variable language_">self</span>.videoplayer1.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.videoplayer1.setObjectName(<span class="string">&quot;videoplayer1&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayoutWidget_2 = QtWidgets.QWidget(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayoutWidget_2.setGeometry(QtCore.QRect(<span class="number">580</span>, <span class="number">130</span>, <span class="number">521</span>, <span class="number">561</span>))</span><br><span class="line">        <span class="variable language_">self</span>.verticalLayoutWidget_2.setObjectName(<span class="string">&quot;verticalLayoutWidget_2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.videoplayer2 = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>.verticalLayoutWidget_2)</span><br><span class="line">        <span class="variable language_">self</span>.videoplayer2.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.videoplayer2.setObjectName(<span class="string">&quot;videoplayer2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button2 = QtWidgets.QPushButton(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.button2.setEnabled(<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button2.setGeometry(QtCore.QRect(<span class="number">780</span>, <span class="number">710</span>, <span class="number">111</span>, <span class="number">51</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">16</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        font.setWeight(<span class="number">75</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button2.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.button2.setObjectName(<span class="string">&quot;button2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label = QtWidgets.QLabel(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.label.setGeometry(QtCore.QRect(<span class="number">620</span>, <span class="number">60</span>, <span class="number">211</span>, <span class="number">41</span>))</span><br><span class="line">        palette = QtGui.QPalette()</span><br><span class="line">        brush = QtGui.QBrush(QtGui.QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        brush.setStyle(QtCore.Qt.SolidPattern)</span><br><span class="line">        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)</span><br><span class="line">        brush = QtGui.QBrush(QtGui.QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        brush.setStyle(QtCore.Qt.SolidPattern)</span><br><span class="line">        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)</span><br><span class="line">        brush = QtGui.QBrush(QtGui.QColor(<span class="number">120</span>, <span class="number">120</span>, <span class="number">120</span>))</span><br><span class="line">        brush.setStyle(QtCore.Qt.SolidPattern)</span><br><span class="line">        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)</span><br><span class="line">        <span class="variable language_">self</span>.label.setPalette(palette)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">16</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        font.setWeight(<span class="number">75</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.label.setLayoutDirection(QtCore.Qt.LeftToRight)</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setObjectName(<span class="string">&quot;label&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_2 = QtWidgets.QLabel(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setGeometry(QtCore.QRect(<span class="number">340</span>, <span class="number">100</span>, <span class="number">72</span>, <span class="number">15</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setObjectName(<span class="string">&quot;label_2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_3 = QtWidgets.QLabel(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.label_3.setGeometry(QtCore.QRect(<span class="number">340</span>, <span class="number">60</span>, <span class="number">72</span>, <span class="number">15</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label_3.setObjectName(<span class="string">&quot;label_3&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label_4 = QtWidgets.QLabel(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.label_4.setGeometry(QtCore.QRect(<span class="number">610</span>, <span class="number">20</span>, <span class="number">91</span>, <span class="number">16</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label_4.setObjectName(<span class="string">&quot;label_4&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button3 = QtWidgets.QPushButton(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.button3.setGeometry(QtCore.QRect(<span class="number">500</span>, <span class="number">710</span>, <span class="number">111</span>, <span class="number">51</span>))</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">16</span>)</span><br><span class="line">        font.setBold(<span class="literal">True</span>)</span><br><span class="line">        font.setWeight(<span class="number">75</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button3.setFont(font)</span><br><span class="line">        <span class="variable language_">self</span>.button3.setObjectName(<span class="string">&quot;button3&quot;</span>)</span><br><span class="line">        SuperpixelVideo.setCentralWidget(<span class="variable language_">self</span>.centralwidget)</span><br><span class="line">        <span class="variable language_">self</span>.menubar = QtWidgets.QMenuBar(SuperpixelVideo)</span><br><span class="line">        <span class="variable language_">self</span>.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1120</span>, <span class="number">26</span>))</span><br><span class="line">        <span class="variable language_">self</span>.menubar.setObjectName(<span class="string">&quot;menubar&quot;</span>)</span><br><span class="line">        SuperpixelVideo.setMenuBar(<span class="variable language_">self</span>.menubar)</span><br><span class="line">        <span class="variable language_">self</span>.statusbar = QtWidgets.QStatusBar(SuperpixelVideo)</span><br><span class="line">        <span class="variable language_">self</span>.statusbar.setObjectName(<span class="string">&quot;statusbar&quot;</span>)</span><br><span class="line">        SuperpixelVideo.setStatusBar(<span class="variable language_">self</span>.statusbar)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.retranslateUi(SuperpixelVideo)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(SuperpixelVideo)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self, SuperpixelVideo</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        SuperpixelVideo.setWindowTitle(_translate(<span class="string">&quot;SuperpixelVideo&quot;</span>, <span class="string">&quot;MainWindow&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.n_segments.setText(_translate(<span class="string">&quot;SuperpixelVideo&quot;</span>, <span class="string">&quot;超像素个数&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.sigma.setText(_translate(<span class="string">&quot;SuperpixelVideo&quot;</span>, <span class="string">&quot;平滑度&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.cofirmButton.setText(_translate(<span class="string">&quot;SuperpixelVideo&quot;</span>, <span class="string">&quot;开始转换&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.videoPath.setText(_translate(<span class="string">&quot;SuperpixelVideo&quot;</span>, <span class="string">&quot;视频路径&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.button1.setText(_translate(<span class="string">&quot;SuperpixelVideo&quot;</span>, <span class="string">&quot;播放&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.button2.setText(_translate(<span class="string">&quot;SuperpixelVideo&quot;</span>, <span class="string">&quot;播放&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label_2.setText(_translate(<span class="string">&quot;SuperpixelVideo&quot;</span>, <span class="string">&quot;0为不平滑&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label_3.setText(_translate(<span class="string">&quot;SuperpixelVideo&quot;</span>, <span class="string">&quot;近似&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.label_4.setText(_translate(<span class="string">&quot;SuperpixelVideo&quot;</span>, <span class="string">&quot;单左斜杠&#x27;/&#x27;&quot;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.button3.setText(_translate(<span class="string">&quot;SuperpixelVideo&quot;</span>, <span class="string">&quot;停止&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> call</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> ffmpy3 <span class="keyword">import</span> FFmpeg</span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtMultimedia <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtMultimediaWidgets <span class="keyword">import</span> QVideoWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> skimage.segmentation <span class="keyword">import</span> mark_boundaries, slic</span><br><span class="line"><span class="keyword">from</span> skimage.util <span class="keyword">import</span> img_as_float</span><br><span class="line"><span class="keyword">from</span> Ui_test <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Read_video</span>(<span class="params">path,file_name</span>):</span><br><span class="line">    video_path = path+file_name</span><br><span class="line">    sourceFileName=file_name</span><br><span class="line">    times=<span class="number">0</span></span><br><span class="line">    <span class="comment">#提取视频的频率，每1帧提取一个</span></span><br><span class="line">    frameFrequency=<span class="number">1</span></span><br><span class="line">    outPutDirName=path+<span class="string">&quot;input_pictures/&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(outPutDirName):</span><br><span class="line">        <span class="comment">#如果文件目录不存在则创建目录</span></span><br><span class="line">        os.makedirs(outPutDirName) </span><br><span class="line">    video = cv2.VideoCapture(video_path)</span><br><span class="line">    video_temp = VideoFileClip(video_path)</span><br><span class="line">    audio=video_temp.audio</span><br><span class="line">    audio.write_audiofile(path+<span class="string">&#x27;audio.mp3&#x27;</span>)</span><br><span class="line">    fps = video.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        times+=<span class="number">1</span></span><br><span class="line">        res, image = video.read()</span><br><span class="line">        <span class="keyword">if</span> times==<span class="number">1</span>:</span><br><span class="line">            size=image.shape</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> times%frameFrequency==<span class="number">0</span>:</span><br><span class="line">            cv2.imwrite(outPutDirName + <span class="built_in">str</span>(times)+<span class="string">&#x27;.jpg&#x27;</span>, image)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reading &quot;</span>+outPutDirName + <span class="built_in">str</span>(times)+<span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">    video.release()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(fps),size[<span class="number">0</span>],size[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Super_pixel</span>(<span class="params">path,numSegments,numSigma,outputDir,outputFilename</span>):</span><br><span class="line">        image = img_as_float(io.imread(path))</span><br><span class="line">        b,g,r = cv2.split(image)</span><br><span class="line">        image = cv2.merge([r,g,b])</span><br><span class="line">        segments = slic(image, n_segments = numSegments, sigma = numSigma)</span><br><span class="line">        image_out=mark_boundaries(image, segments)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(outputDir):</span><br><span class="line">            <span class="comment">#如果文件目录不存在则创建目录</span></span><br><span class="line">            os.makedirs(outputDir) </span><br><span class="line">        cv2.imwrite(outputDir+outputFilename, image_out*<span class="number">255</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;writing &quot;</span>+outputDir+outputFilename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Picture_conversion</span>(<span class="params">inputDir,outputDir,numSegments,numSigma</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(inputDir):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            imgPath=root+<span class="string">&#x27;/&#x27;</span>+file</span><br><span class="line">            Super_pixel(imgPath,numSegments,numSigma,outputDir,file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Create_video</span>(<span class="params">videoDir,fps,height,width</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;waiting...&quot;</span>)</span><br><span class="line">    path=videoDir+<span class="string">&quot;output_pictures/&quot;</span></span><br><span class="line">    filelist = os.listdir(path)</span><br><span class="line">    size = (width,height)</span><br><span class="line">    os.chdir(videoDir) <span class="comment">#跳转到目标目录</span></span><br><span class="line">    <span class="comment">#生成avi视频</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;video.avi&#x27;</span>):</span><br><span class="line">        os.remove(<span class="string">&#x27;video.avi&#x27;</span>)</span><br><span class="line">    video = cv2.VideoWriter(<span class="string">&quot;video.avi&quot;</span>, cv2.VideoWriter_fourcc(<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), fps, size)</span><br><span class="line">    num=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> filelist:<span class="comment">#统计有多少帧</span></span><br><span class="line">        <span class="keyword">if</span> item.endswith(<span class="string">&#x27;.jpg&#x27;</span>): </span><br><span class="line">            num+=<span class="number">1</span></span><br><span class="line">    window.ui.label.setText(<span class="string">&quot;生成超像素视频...&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        frame = cv2.imread(path+<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line">        video.write(frame)<span class="comment">#添加到视频中</span></span><br><span class="line">    video.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    inputVideo = videoDir+<span class="string">&#x27;video&#x27;</span></span><br><span class="line">    window.ui.label.setText(<span class="string">&quot;压缩视频...&quot;</span>)</span><br><span class="line">    command = <span class="string">&quot;ffmpeg -i %s.avi %s.mp4&quot;</span> % (inputVideo, inputVideo)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;video.mp4&#x27;</span>):</span><br><span class="line">        os.remove(<span class="string">&#x27;video.mp4&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;output.mp4&#x27;</span>):</span><br><span class="line">        os.remove(<span class="string">&#x27;output.mp4&#x27;</span>)</span><br><span class="line">    call(command.split())</span><br><span class="line">    window.ui.label.setText(<span class="string">&quot;加入音频...&quot;</span>)</span><br><span class="line">    subprocess.call(<span class="string">&#x27;ffmpeg -i video.mp4 -i audio.mp3  -strict -2 -f mp4 output.mp4&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;video.avi&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;audio.mp3&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;video.mp4&quot;</span>)</span><br><span class="line">    window.ui.label.setText(<span class="string">&quot;转换成功!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">confirm</span>():</span><br><span class="line">    window.ui.button2.setEnabled(<span class="literal">False</span>)</span><br><span class="line">    videoPath=window.ui.lineEdit01.text()</span><br><span class="line">    <span class="keyword">if</span> videoPath==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        videoPath=<span class="string">&#x27;E:/test/input.mp4&#x27;</span></span><br><span class="line">    index=videoPath.rfind(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    videoDir=videoPath[:index+<span class="number">1</span>]</span><br><span class="line">    videoName=videoPath[index+<span class="number">1</span>:]</span><br><span class="line">    strSegments=window.ui.lineEdit02.text()</span><br><span class="line">    <span class="keyword">if</span> strSegments==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        strSegments=<span class="string">&#x27;100&#x27;</span></span><br><span class="line">    numSegments=<span class="built_in">int</span>(strSegments)</span><br><span class="line">    strSigma=window.ui.lineEdit03.text()</span><br><span class="line">    <span class="keyword">if</span> strSigma==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        strSigma=<span class="string">&#x27;5&#x27;</span></span><br><span class="line">    numSigma=<span class="built_in">int</span>(strSigma)</span><br><span class="line">    inputDir=videoDir+<span class="string">&quot;input_pictures/&quot;</span></span><br><span class="line">    outputDir=videoDir+<span class="string">&quot;output_pictures/&quot;</span></span><br><span class="line">    window.ui.label.setText(<span class="string">&quot;读取视频...&quot;</span>)</span><br><span class="line">    window.ui.button1.setEnabled(<span class="literal">False</span>)</span><br><span class="line">    otherInfo=Read_video(videoDir,videoName)</span><br><span class="line">    window.ui.button1.setEnabled(<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#otherInfo=(25, 1246, 720)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fps,height,width=&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(otherInfo)</span><br><span class="line">    fps=otherInfo[<span class="number">0</span>]</span><br><span class="line">    height=otherInfo[<span class="number">1</span>]</span><br><span class="line">    width=otherInfo[<span class="number">2</span>]</span><br><span class="line">    window.ui.label.setText(<span class="string">&quot;转换成超像素...&quot;</span>)</span><br><span class="line">    <span class="comment">#Picture_conversion(inputDir,outputDir,numSegments,numSigma)</span></span><br><span class="line">    Create_video(videoDir,fps,height,width)</span><br><span class="line">    window.ui.button2.setEnabled(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QMainWindow, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.ui = Ui_SuperpixelVideo()</span><br><span class="line">        <span class="variable language_">self</span>.ui.setupUi(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play1</span>():</span><br><span class="line">    path=window.ui.lineEdit01.text()</span><br><span class="line">    <span class="keyword">if</span> path==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        path=<span class="string">&#x27;E:/test/input.mp4&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    window.ui.videoplayer1.addWidget(videoWidget)</span><br><span class="line">    player.setMedia(QMediaContent(QUrl.fromLocalFile(path)))</span><br><span class="line">    player.play()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play2</span>():</span><br><span class="line">    path=window.ui.lineEdit01.text()</span><br><span class="line">    index=path.rfind(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    videoDir=path[:index+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(videoDir+<span class="string">&#x27;output.mp4&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    window.ui.videoplayer2.addWidget(videoWidget)</span><br><span class="line">    player.setMedia(QMediaContent(QUrl.fromLocalFile(videoDir+<span class="string">&quot;output.mp4&quot;</span>)))</span><br><span class="line">    player.play()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stop</span>():</span><br><span class="line">    player.stop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = mainWindow()</span><br><span class="line">    window.show()</span><br><span class="line">  </span><br><span class="line">    player = QMediaPlayer()</span><br><span class="line">    player.setVolume(<span class="number">100</span>)</span><br><span class="line">    playlist = QMediaPlaylist()</span><br><span class="line">    playlist.setPlaybackMode(QMediaPlaylist.CurrentItemOnce)<span class="comment">#只播放一次</span></span><br><span class="line">    player.setPlaylist(playlist)</span><br><span class="line">    videoWidget = QVideoWidget()</span><br><span class="line">    palette = QPalette()</span><br><span class="line">    palette.setBrush(QPalette.Background, Qt.black)</span><br><span class="line">    player.setVideoOutput(videoWidget)</span><br><span class="line">    videoWidget.show()</span><br><span class="line">    window.ui.videoplayer1.addWidget(videoWidget)</span><br><span class="line"></span><br><span class="line">    window.ui.lineEdit01.setText(<span class="string">&quot;E:/test/input.mp4&quot;</span>)</span><br><span class="line">    window.ui.lineEdit02.setText(<span class="string">&quot;100&quot;</span>)</span><br><span class="line">    window.ui.lineEdit03.setText(<span class="string">&quot;5&quot;</span>)</span><br><span class="line"></span><br><span class="line">    window.ui.button1.setEnabled(<span class="literal">True</span>)</span><br><span class="line">    window.ui.button2.setEnabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    window.ui.button1.clicked.connect(<span class="keyword">lambda</span>:play1())</span><br><span class="line">    window.ui.button2.clicked.connect(<span class="keyword">lambda</span>:play2())</span><br><span class="line">    window.ui.button3.clicked.connect(<span class="keyword">lambda</span>:stop())</span><br><span class="line">    window.ui.cofirmButton.clicked.connect(<span class="keyword">lambda</span>:confirm())</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>超像素</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode+PyQt5+QtDesigner 环境搭建</title>
    <link href="/2020/04/30/vscodepyqt5qtdesigner-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/04/30/vscodepyqt5qtdesigner-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="一、安装PyQt5和PyQt5-tools"><a href="#一、安装PyQt5和PyQt5-tools" class="headerlink" title="一、安装PyQt5和PyQt5-tools"></a>一、安装PyQt5和PyQt5-tools</h2><pre><code>pip3 install -i https://mirrors.aliyun.com/pypi/simple/ PyQt5pip3 install -i https://mirrors.aliyun.com/pypi/simple/ PyQt5-tools</code></pre><h2 id="二、找到QtDesigner-安装路径"><a href="#二、找到QtDesigner-安装路径" class="headerlink" title="二、找到QtDesigner 安装路径"></a>二、找到QtDesigner 安装路径</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/image.png"></p><p>按黄色警告提示的路径中查找designer.exe生成桌面快捷方式，方便日后制作.ui文件。</p><h2 id="三、打开designer-exe，绘制UI界面"><a href="#三、打开designer-exe，绘制UI界面" class="headerlink" title="三、打开designer.exe，绘制UI界面"></a>三、打开designer.exe，绘制UI界面</h2><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/22-1024x781.png"></p><p>绘制完后保存到你准备制作该项目的文件夹中，比如：welcome.ui。</p><h2 id="四、用VSCode转化-ui文件为-py文件"><a href="#四、用VSCode转化-ui文件为-py文件" class="headerlink" title="四、用VSCode转化.ui文件为.py文件"></a>四、用VSCode转化.ui文件为.py文件</h2><p>首先要为vscode安装扩展</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/kuozhan.png"></p><p>修改PYQT Intergration的扩展设置，添加Qtdesigner路径</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/image-1.png"></p><p>右键UI文件可以直接选择编辑、编译、预览</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/image-2.png"></p><h2 id="Done"><a href="#Done" class="headerlink" title="Done."></a>Done.</h2>]]></content>
    
    
    <categories>
      
      <category>软件安装配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>软件安装配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LL(1)文法：计算First集、Follow集以及预测分析表</title>
    <link href="/2020/04/22/ll1%E6%96%87%E6%B3%95%EF%BC%9A%E8%AE%A1%E7%AE%97first%E9%9B%86%E3%80%81follow%E9%9B%86%E4%BB%A5%E5%8F%8A%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90%E8%A1%A8/"/>
    <url>/2020/04/22/ll1%E6%96%87%E6%B3%95%EF%BC%9A%E8%AE%A1%E7%AE%97first%E9%9B%86%E3%80%81follow%E9%9B%86%E4%BB%A5%E5%8F%8A%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>预测分析算法LL(1):</p><ul><li>L: Left-to-right scan of the tokens从左到右扫描</li><li>L: Leftmost derivation最左推导</li><li>(1): One token of lookahead只向前看一个token</li></ul><p>输入若干个字符流形式的产生式，计算非终结符的First集和Follow集，并构造预测分析表。</p><h4 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h4><p>2.1注意点</p><ul><li>输入为字符流，应首先转为token流；</li><li>输入产生式可能很长，用‘’连接，最好全部转为最短形式，去掉‘’；</li><li>产生式、终结符、非终结符、First集、Follow集等应当用合适的数据结构存储，一次计算便写入，便于查找和调用；</li><li>First集和Follow集计算应采用递归算法。</li></ul><p>2.2用到的算法</p><p>      2.2.1First集</p><ul><li>如果 X 是终结符号，那么FIRST(X)&#x3D;{X}</li><li>如果 X 是非终结符号，且 X -&gt; Y1Y2Y3…Yk 是产生式</li><li>如果a在FIRST(Yi)中，且 ε 在FIRST(Y1)，FIRST(Y2)，…，FIRST(Yi-1)中，那么a也在FIRST(X)中；</li><li>如果ε 在FIRST(Y1)，FIRST(Y2)，…，FIRST(Yk)中，那么ε在FIRST(X)中；</li><li>如果X是非终结符号，且有X-&gt;ε，那么ε在FIRST(X)中。</li></ul><p>       2.2.2Follow集</p><ul><li>将右端结束标记 $ 放到 Follow (S) 中 ；</li><li>按照下面两个规则不断迭代，知道所有的Follow集合都不再增长为止 ；</li><li>如果存在产生式A -&gt; αBβ ，那么 FIRST(β)中所有非ε的符号都在Follow (B)中；</li><li>如果存在产生式A -&gt; αB，或者A -&gt; αBβ 且FIRST(β)包含ε，那么Follow (A)中的所有符号都加入到Follow (B)中。</li></ul><p>              2.2.3预测分析表</p><ul><li>对于每个产生式A-&gt;α：</li><li>对于First(α)中每个终结符α，将A-&gt;α加入到Table[A，a]中；</li><li>如果ε在First(α)中，那么对于Follow(A)中的每个终结符b，将A-&gt;α加入到Table[A，b]中；如果ε在First(α)中，且$在Follow(A)中，也将A-&gt;α加入到Table[A，$]中。</li></ul><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>为了方便验证结果的正确性，测试时采用了4组课件中提到的例题，结果对比如下：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/3.1-1024x614.png"></p><p>图3-1例题1</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/3.2-1024x739.png"></p><p>图3-2例题1</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/3.3.png"></p><p>图3-3例题2</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/3.4-1024x853.png"></p><p>图3-4例题2</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/3.5-1024x668.png"></p><p>图3-5例题3</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/3.6-1024x853.png"></p><p>图3-6例题3</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/3.7-1024x709.png"></p><p>图3-7例题4</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/3.8-1024x263.png"></p><p>图3-8例题4</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/04/3.9-1024x925.png"></p><p>图3-9例题4</p><p>经过多次调试修改，4个例题测试结果都已经正确，应当足以说明程序的可靠性。</p><h4 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LL(1)Parse_Tables.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">item</span></span><br><span class="line">&#123; <span class="comment">//辅助数据类型</span></span><br><span class="line">    string str;</span><br><span class="line">    vector&lt;string&gt; vec;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LL_1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;item&gt; CA;                              <span class="comment">//产生式condition_action</span></span><br><span class="line">    vector&lt;string&gt; T;                             <span class="comment">//终结符</span></span><br><span class="line">    vector&lt;string&gt; N;                             <span class="comment">//非终结符</span></span><br><span class="line">    vector&lt;item&gt; FIRST_SET;                       <span class="comment">//非终结符FIRST(A)=&#123;tA-&gt;*tv&#125;</span></span><br><span class="line">    vector&lt;item&gt; FOLLOW_SET;                      <span class="comment">//哪些终结符会跟在非终结符后面FOLLOW(A)=&#123;tB-&gt;*wAtv&#125;</span></span><br><span class="line">    <span class="type">int</span> PARSE_TABLE[<span class="number">100</span>][<span class="number">100</span>];                    <span class="comment">//分析表</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>;                                  <span class="comment">//输入及初始化</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_state</span><span class="params">()</span></span>;                         <span class="comment">//输出初始化后的状态</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_first</span><span class="params">()</span></span>;                         <span class="comment">//输出first集</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_follow</span><span class="params">()</span></span>;                        <span class="comment">//输出follow集</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display_table</span><span class="params">()</span></span>;                         <span class="comment">//输出LL_1分析表</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isTerminal</span><span class="params">(string str)</span></span>;                  <span class="comment">//判断是否为终结符</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containEpsilon</span><span class="params">(string str)</span></span>;              <span class="comment">//判断first集是否包含epsilon</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find_index</span><span class="params">(string str)</span></span>;                   <span class="comment">//获取某个符号在终结符向量或非终结符向量中的下标</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find_first</span><span class="params">(string str, item &amp;new_item)</span></span>;  <span class="comment">// first集</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find_follow</span><span class="params">(string str, item &amp;new_item)</span></span>; <span class="comment">// follow集</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">create_parse_table</span><span class="params">(<span class="type">int</span> i)</span></span>;               <span class="comment">//构造预测分析表</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LL_1::display_state</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//输出等价产生式、归纳出终结符和非终结符</span></span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">int</span>(CA.<span class="built_in">size</span>());</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">int</span>(T.<span class="built_in">size</span>());</span><br><span class="line">    <span class="type">int</span> len3 = <span class="built_in">int</span>(N.<span class="built_in">size</span>());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n等价产生式：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;. &quot;</span> &lt;&lt; CA[i].str &lt;&lt; <span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">int</span>(CA[i].vec.<span class="built_in">size</span>()); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; CA[i].vec[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n终结符：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; T[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; len2 - <span class="number">1</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; ,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n非终结符：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len3; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; N[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; len3 - <span class="number">1</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; ,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LL_1::display_first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//输出first集</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">int</span>(FIRST_SET.<span class="built_in">size</span>());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n非终结符的FIRST集:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">int</span>(FIRST_SET[i].vec.<span class="built_in">size</span>());</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;FIRST(&quot;</span> &lt;&lt; FIRST_SET[i].str &lt;&lt; <span class="string">&quot;)=&#123; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; FIRST_SET[i].vec[j];</span><br><span class="line">            <span class="keyword">if</span> (j &lt; k - <span class="number">1</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &#125;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LL_1::display_follow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//输出follow集</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">int</span>(FOLLOW_SET.<span class="built_in">size</span>());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n非终结符的FOLLOW集:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">int</span>(FOLLOW_SET[i].vec.<span class="built_in">size</span>());</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;FOLLOW(&quot;</span> &lt;&lt; FOLLOW_SET[i].str &lt;&lt; <span class="string">&quot;)=&#123; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; FOLLOW_SET[i].vec[j];</span><br><span class="line">            <span class="keyword">if</span> (j &lt; k - <span class="number">1</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &#125;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LL_1::display_table</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//输出分析表</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\nLL(1)分析表：\n&quot;</span>;</span><br><span class="line">    <span class="type">int</span> len_T = <span class="built_in">int</span>(T.<span class="built_in">size</span>());</span><br><span class="line">    <span class="type">int</span> len_N = <span class="built_in">int</span>(N.<span class="built_in">size</span>());</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len_T; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; T[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len_N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; N[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len_T; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (PARSE_TABLE[i][j] == <span class="number">0</span>)</span><br><span class="line">                cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; <span class="string">&quot;x&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">8</span>) &lt;&lt; PARSE_TABLE[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LL_1::create_parse_table</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//构造分析表</span></span><br><span class="line">    <span class="type">int</span> len_T = <span class="built_in">int</span>(T.<span class="built_in">size</span>());</span><br><span class="line">    <span class="type">int</span> len_N = <span class="built_in">int</span>(N.<span class="built_in">size</span>());</span><br><span class="line">    <span class="type">int</span> len_CA = <span class="built_in">int</span>(CA.<span class="built_in">size</span>());</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, content = <span class="number">0</span>; <span class="comment">// table的第x行，第y列,填入第content条产生式</span></span><br><span class="line">    content = i + <span class="number">1</span>;               <span class="comment">//从1开始</span></span><br><span class="line">    x = <span class="built_in">find_index</span>(CA[i].str);</span><br><span class="line">    string temp = CA[i].vec[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isTerminal</span>(temp))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="string">&quot;epsilon&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y = <span class="built_in">find_index</span>(temp);</span><br><span class="line">            <span class="keyword">if</span> (PARSE_TABLE[x][y] == content)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//同一内容写第二次，进入了递归死循环，直接跳出</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                PARSE_TABLE[x][y] = content;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123; <span class="comment">//是空产生式</span></span><br><span class="line">            vector&lt;string&gt; &amp;vec = FOLLOW_SET[x].vec;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">int</span>(vec.<span class="built_in">size</span>()); j++)</span><br><span class="line">            &#123; <span class="comment">//遍历Follow集</span></span><br><span class="line">                y = <span class="built_in">find_index</span>(vec[j]);</span><br><span class="line">                <span class="keyword">if</span> (PARSE_TABLE[x][y] == content)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//同一内容写第二次，进入了递归死循环，直接跳出</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    PARSE_TABLE[x][y] = content;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123; <span class="comment">//非终结符</span></span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">int</span>(CA[i].vec.<span class="built_in">size</span>());</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt;string&gt; &amp;vec = FIRST_SET[<span class="built_in">find_index</span>(temp)].vec;</span><br><span class="line">            <span class="type">int</span> s = <span class="built_in">int</span>(vec.<span class="built_in">size</span>());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; s; j++)</span><br><span class="line">            &#123; <span class="comment">//遍历First集</span></span><br><span class="line">                <span class="keyword">if</span> (vec[j] == <span class="string">&quot;epsilon&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                y = <span class="built_in">find_index</span>(vec[j]);</span><br><span class="line">                <span class="keyword">if</span> (PARSE_TABLE[x][y] == content)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//同一内容写第二次，进入了递归死循环，直接跳出</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    PARSE_TABLE[x][y] = content;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p &lt; len &amp;&amp; flag)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = CA[i].vec[p];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">isTerminal</span>(temp))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len_CA; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (CA[j].str == temp)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">create_parse_table</span>(j); <span class="comment">//函数进入递归</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    y = <span class="built_in">find_index</span>(temp);</span><br><span class="line">                    <span class="keyword">if</span> (PARSE_TABLE[x][y] == content)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//同一内容写第二次，进入了递归死循环，直接跳出</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        PARSE_TABLE[x][y] = content;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p == len &amp;&amp; flag)</span><br><span class="line">            &#123; <span class="comment">//产生式右边所有都是非终结符，且都能推出epsilon</span></span><br><span class="line">                vector&lt;string&gt; &amp;vec_temp = FOLLOW_SET[x].vec;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">int</span>(vec_temp.<span class="built_in">size</span>()); j++)</span><br><span class="line">                &#123; <span class="comment">//遍历Follow集</span></span><br><span class="line">                    y = <span class="built_in">find_index</span>(vec_temp[j]);</span><br><span class="line">                    <span class="keyword">if</span> (PARSE_TABLE[x][y] == content)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//同一内容写第二次，进入了递归死循环，直接跳出</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        PARSE_TABLE[x][y] = content;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LL_1::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    vector&lt;string&gt; v;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入若干条形如‘ STMT -&gt; if EXPR then STMT  EXPR ’的产生式：\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(每个token之间用空格分隔，输入0结束)\n&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">getline</span>(cin, str); <span class="comment">//获取一行标准输入，即字符流形式的产生式</span></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">int</span> l = str.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; index;</span><br><span class="line">        <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//以下将每一行化成若干个最短产生式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;&gt;&#x27;</span> &amp;&amp; i &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[i - <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                    begin = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;&#x27;)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                index.push_back(i);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        string prefix = str.substr(0, begin + 1);</span></span><br><span class="line"><span class="string">        int len = int(index.size());</span></span><br><span class="line"><span class="string">        if (len == 0)</span></span><br><span class="line"><span class="string">            v.push_back(str);</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            for (int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                if (i == 0)</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    v.push_back(str.substr(0, index[0]));</span></span><br><span class="line"><span class="string">                    end = index[0];</span></span><br><span class="line"><span class="string">                    continue;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                begin = index[i - 1];</span></span><br><span class="line"><span class="string">                end = index[i];</span></span><br><span class="line"><span class="string">                v.push_back(prefix + str.substr(begin + 1, end - begin - 1));</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            v.push_back(prefix + str.substr(end + 1, l - end));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125; //以上将每一行化成若干个最短产生式，放到向量V中</span></span><br><span class="line"><span class="string">    //以下给token归类，分为终结符和非终结符</span></span><br><span class="line"><span class="string">    vector&lt;string&gt; left, right;</span></span><br><span class="line"><span class="string">    int len = int(v.size());</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        istringstream temp(v[i]);</span></span><br><span class="line"><span class="string">        string out;</span></span><br><span class="line"><span class="string">        int cal = 0;</span></span><br><span class="line"><span class="string">        item new_item;</span></span><br><span class="line"><span class="string">        while (temp &gt;&gt; out)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            if (cal == 0)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                left.push_back(out);</span></span><br><span class="line"><span class="string">                new_item.str = out;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            else if (cal == 1)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                cal++;</span></span><br><span class="line"><span class="string">                continue;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                right.push_back(out);</span></span><br><span class="line"><span class="string">                new_item.vec.push_back(out);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            cal++;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        CA.push_back(new_item);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    int len1 = int(left.size());</span></span><br><span class="line"><span class="string">    int len2 = int(right.size());</span></span><br><span class="line"><span class="string">    vector&lt;string&gt;::iterator it;</span></span><br><span class="line"><span class="string">    for (int k = 0; k &lt; len1; k++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        it = find(N.begin(), N.end(), left[k]);</span></span><br><span class="line"><span class="string">        if (it == N.end()) //不存在</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            N.push_back(left[k]); //产生式左边的一定是非终结符</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; len2; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        bool flag = true; //默认是终结符</span></span><br><span class="line"><span class="string">        for (int j = 0; j &lt; len1; j++)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            if (right[i] == left[j]) //产生式左边出现过</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                flag = false; //是非终结符</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if (flag)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            it = find(T.begin(), T.end(), right[i]);</span></span><br><span class="line"><span class="string">            if (it == T.end()) //不存在</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                T.push_back(right[i]);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            it = find(N.begin(), N.end(), right[i]);</span></span><br><span class="line"><span class="string">            if (it == N.end()) //不存在</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                N.push_back(right[i]);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    T.push_back(&quot;$&quot;);</span></span><br><span class="line"><span class="string">    for (int iter = 0; iter &lt; int(T.size()); iter++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if (T[iter] == &quot;epsilon&quot;)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            T.erase(T.begin() + iter);</span></span><br><span class="line"><span class="string">            break;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">bool LL_1::isTerminal(string str)</span></span><br><span class="line"><span class="string">&#123; //判断某个token是否为终结符</span></span><br><span class="line"><span class="string">    if (str == &quot;epsilon&quot;)</span></span><br><span class="line"><span class="string">        return true;</span></span><br><span class="line"><span class="string">    vector&lt;string&gt;::iterator it;</span></span><br><span class="line"><span class="string">    it = find(T.begin(), T.end(), str);</span></span><br><span class="line"><span class="string">    if (it == T.end()) //不存在</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        return false;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return true;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">bool LL_1::containEpsilon(string str)</span></span><br><span class="line"><span class="string">&#123; //判断某个非终结符的first集中是否包含epsilon</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; int(CA.size()); i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if (CA[i].str == str)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            string temp = CA[i].vec[0];</span></span><br><span class="line"><span class="string">            if (!isTerminal(temp))</span></span><br><span class="line"><span class="string">                containEpsilon(temp);</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                if (temp == &quot;epsilon&quot;)</span></span><br><span class="line"><span class="string">                    return true;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return false;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">int LL_1::find_index(string str)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    int len_N = int(N.size());</span></span><br><span class="line"><span class="string">    int len_T = int(T.size());</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; len_N; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if (N[i] == str)</span></span><br><span class="line"><span class="string">            return i;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; len_T; i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if (T[i] == str)</span></span><br><span class="line"><span class="string">            return i;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return -1;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">bool LL_1::find_first(string str, item &amp;new_item)</span></span><br><span class="line"><span class="string">&#123; //计算某个非终结符的first集</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; int(CA.size()); i++)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        if (CA[i].str == str)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            string temp = CA[i].vec[0];</span></span><br><span class="line"><span class="string">            if (!isTerminal(temp))</span></span><br><span class="line"><span class="string">            &#123; //非终结符</span></span><br><span class="line"><span class="string">                find_first(temp, new_item);</span></span><br><span class="line"><span class="string">                if (containEpsilon(temp))</span></span><br><span class="line"><span class="string">                &#123; //能产生epsilon</span></span><br><span class="line"><span class="string">                    int p = 1;</span></span><br><span class="line"><span class="string">                    int s = int(CA[i].vec.size());</span></span><br><span class="line"><span class="string">                    while (s &gt; p)</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        if (!isTerminal(CA[i].vec[p]))</span></span><br><span class="line"><span class="string">                        &#123;</span></span><br><span class="line"><span class="string">                            if (containEpsilon(CA[i].vec[p]))</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                find_first(CA[i].vec[p], new_item);</span></span><br><span class="line"><span class="string">                                for (int iter = 0; iter &lt; int(new_item.vec.size()); iter++)</span></span><br><span class="line"><span class="string">                                &#123;</span></span><br><span class="line"><span class="string">                                    if (new_item.vec[iter] == &quot;epsilon&quot;)</span></span><br><span class="line"><span class="string">                                    &#123;</span></span><br><span class="line"><span class="string">                                        new_item.vec.erase(new_item.vec.begin() + iter);</span></span><br><span class="line"><span class="string">                                        break;</span></span><br><span class="line"><span class="string">                                    &#125;</span></span><br><span class="line"><span class="string">                                &#125;</span></span><br><span class="line"><span class="string">                                p++;</span></span><br><span class="line"><span class="string">                            &#125;</span></span><br><span class="line"><span class="string">                            else</span></span><br><span class="line"><span class="string">                                break;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                        else</span></span><br><span class="line"><span class="string">                        &#123;</span></span><br><span class="line"><span class="string">                            new_item.vec.push_back(CA[i].vec[p]);</span></span><br><span class="line"><span class="string">                            break;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                    if (p == s - 1)</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        vector&lt;string&gt;::iterator it;</span></span><br><span class="line"><span class="string">                        for (int k = 0; k &lt; s; k++)</span></span><br><span class="line"><span class="string">                        &#123;</span></span><br><span class="line"><span class="string">                            it = find(N.begin(), N.end(), &quot;epsilon&quot;);</span></span><br><span class="line"><span class="string">                            if (it == N.end()) //不存在</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                N.push_back(&quot;epsilon&quot;);</span></span><br><span class="line"><span class="string">                            &#125;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">            &#123; //是终结符，直接加入，去重</span></span><br><span class="line"><span class="string">                vector&lt;string&gt;::iterator it;</span></span><br><span class="line"><span class="string">                it = find(new_item.vec.begin(), new_item.vec.end(), temp);</span></span><br><span class="line"><span class="string">                if (it == new_item.vec.end()) //不存在</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    new_item.vec.push_back(temp);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return true;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">bool LL_1::find_follow(string str, item &amp;new_item)</span></span><br><span class="line"><span class="string">&#123; //计算某个非终结符的follow集</span></span><br><span class="line"><span class="string">    if (str == CA[0].str)</span></span><br><span class="line"><span class="string">    &#123; //是第一个产生式的左边符号，加入结束符$</span></span><br><span class="line"><span class="string">        vector&lt;string&gt;::iterator it;</span></span><br><span class="line"><span class="string">        it = find(new_item.vec.begin(), new_item.vec.end(), &quot;$&quot;);</span></span><br><span class="line"><span class="string">        if (it == new_item.vec.end()) //不存在</span></span><br><span class="line"><span class="string">        &#123;                             //开始符号FOLLOW集中加入结束符$</span></span><br><span class="line"><span class="string">            new_item.vec.push_back(&quot;$&quot;);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; int(CA.size()); i++)</span></span><br><span class="line"><span class="string">    &#123; //遍历所有产生式，在其右边找目标非终结符</span></span><br><span class="line"><span class="string">        int s = int(CA[i].vec.size());</span></span><br><span class="line"><span class="string">        for (int j = 0; j &lt; s; j++)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            if (CA[i].vec[j] == str)</span></span><br><span class="line"><span class="string">            &#123;                  //找到</span></span><br><span class="line"><span class="string">                if (j + 1 &lt; s) // B-&gt;wAt</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    if (!isTerminal(CA[i].vec[j + 1])) //下一个是非终结符</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        if (containEpsilon(CA[i].vec[j + 1]))   // first集包含epsilon//B-&gt;wA</span></span><br><span class="line"><span class="string">                            find_follow(CA[i].str, new_item);   // follow(A)=follow(B)+follow(A)</span></span><br><span class="line"><span class="string">                        find_first(CA[i].vec[j + 1], new_item); // follow(A)=first(A)-epsilon</span></span><br><span class="line"><span class="string">                        for (int iter = 0; iter &lt; int(new_item.vec.size()); iter++)</span></span><br><span class="line"><span class="string">                        &#123;</span></span><br><span class="line"><span class="string">                            if (new_item.vec[iter] == &quot;epsilon&quot;)</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                new_item.vec.erase(new_item.vec.begin() + iter);</span></span><br><span class="line"><span class="string">                                break;</span></span><br><span class="line"><span class="string">                            &#125;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                    else</span></span><br><span class="line"><span class="string">                    &#123; //下一个是终结符,直接加入，去重</span></span><br><span class="line"><span class="string">                        vector&lt;string&gt;::iterator it;</span></span><br><span class="line"><span class="string">                        it = find(new_item.vec.begin(), new_item.vec.end(), CA[i].vec[j + 1]);</span></span><br><span class="line"><span class="string">                        if (it == new_item.vec.end()) //不存在</span></span><br><span class="line"><span class="string">                        &#123;</span></span><br><span class="line"><span class="string">                            new_item.vec.push_back(CA[i].vec[j + 1]);</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                else                               // B-&gt;wA</span></span><br><span class="line"><span class="string">                &#123;                                  // follow(A)=follow(B)+follow(A)</span></span><br><span class="line"><span class="string">                    if (CA[i].str != CA[i].vec[j]) //防止A-&gt;wA形式死循环</span></span><br><span class="line"><span class="string">                        find_follow(CA[i].str, new_item);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return true;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">int main()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    LL_1 tag;</span></span><br><span class="line"><span class="string">    tag.init();</span></span><br><span class="line"><span class="string">    tag.display_state();</span></span><br><span class="line"><span class="string">    int len = int(tag.N.size());</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="string">    &#123; //遍历非终结符，逐个计算其first集</span></span><br><span class="line"><span class="string">        item new_item;</span></span><br><span class="line"><span class="string">        item &amp;new_ = new_item;</span></span><br><span class="line"><span class="string">        new_item.str = tag.N[i];</span></span><br><span class="line"><span class="string">        tag.find_first(tag.N[i], new_); // FIRST</span></span><br><span class="line"><span class="string">        tag.FIRST_SET.push_back(new_);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    tag.display_first();</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; len; i++)</span></span><br><span class="line"><span class="string">    &#123; //遍历非终结符，逐个计算其follow集</span></span><br><span class="line"><span class="string">        item new_item;</span></span><br><span class="line"><span class="string">        item &amp;new_ = new_item;</span></span><br><span class="line"><span class="string">        new_item.str = tag.N[i];</span></span><br><span class="line"><span class="string">        tag.find_follow(tag.N[i], new_); // FOLLOW</span></span><br><span class="line"><span class="string">        tag.FOLLOW_SET.push_back(new_);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    tag.display_follow();</span></span><br><span class="line"><span class="string">    for (int i = 0; i &lt; int(tag.CA.size()); i++)</span></span><br><span class="line"><span class="string">        tag.create_parse_table(i); //按产生式填写table</span></span><br><span class="line"><span class="string">    tag.display_table();</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h4><p>本次实验相比较于之前的实验难度较大，用到的算法较多，情况判别也有些复杂，其中有3处要使用递归思想计算（First集和Follow集，以非终结符为单位进行计算；Parse_table，以最短产生式为单位进行计算），否则比较难处理。实验耗时较长，但好在完成度比较高，也达到了预期效果，能够实现对几若干条字符流形式的产生式进行自动分析计算：转为token流、列出等价最短产生式、自动归类终结符和非终结符、列出每个非终结符的First集和Follow集、列出准确的预测分析表，且有令人舒适的输出格式。不足之处：多次递归使用了较大的堆栈空间、预测分析表用了100*100的静态表存储…总的来讲本次实验让我对LL(1)算法有了深刻理解，帮助很大。</p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Stdio换源（阿里云镜像源）</title>
    <link href="/2020/04/14/android%E6%8D%A2%E6%BA%90/"/>
    <url>/2020/04/14/android%E6%8D%A2%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<p>最近在学安卓开发，好不容易兴致上来要开始写了，结果项目build一直转圈…真是搞得兴致全无。</p><p>说白了就是下载依赖资源包巨慢，经常连接超时。我寻思着我也没被墙啊，真是不太明白…</p><p>好在万能的阿里云有镜像源，可配置阿里云镜像，加速下载。</p><p>特此记录。</p><p>配置方法：</p><p>1. 对特定项目生效，在项目中的build.gradle修改内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/google&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/gradle-plugin&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.4.1&#x27;</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2. 对所有项目生效,在用户&#x2F;.gradle&#x2F;下创建init.gradle文件，内容如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="type">def</span> <span class="variable">ALIYUN_REPOSITORY_URL</span> <span class="operator">=</span> <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27;</span></span><br><span class="line">        <span class="type">def</span> <span class="variable">ALIYUN_JCENTER_URL</span> <span class="operator">=</span> <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span></span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            <span class="keyword">if</span>(repo <span class="keyword">instanceof</span> MavenArtifactRepository)&#123;</span><br><span class="line">                <span class="type">def</span> <span class="variable">url</span> <span class="operator">=</span> repo.url.toString()</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://repo1.maven.org/maven2&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://jcenter.bintray.com/&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">                url ALIYUN_REPOSITORY_URL</span><br><span class="line">            url ALIYUN_JCENTER_URL</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Done.</p>]]></content>
    
    
    <categories>
      
      <category>安卓</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7.4+DockerCE+酷q=QQ机器人</title>
    <link href="/2020/04/03/centos7-4dockerce%E9%85%B7qqq%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <url>/2020/04/03/centos7-4dockerce%E9%85%B7qqq%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<h4 id="一、安装及运行docker"><a href="#一、安装及运行docker" class="headerlink" title="一、安装及运行docker"></a>一、安装及运行docker</h4><pre><code>sudo yum install docker#安装sudo systemctl start docker#运行</code></pre><h4 id="二、下载酷Q镜像，后台运行容器"><a href="#二、下载酷Q镜像，后台运行容器" class="headerlink" title="二、下载酷Q镜像，后台运行容器"></a>二、下载酷Q镜像，后台运行容器</h4><pre><code>sudo docker pull coolq/wine-coolq#镜像文件较大，大约2GBsudo docker images#查看酷Q镜像详情</code></pre><h4 id="三、创建一个用于存放coolq数据的目录，用于持久化存放coolq（酷Q应用）的数据"><a href="#三、创建一个用于存放coolq数据的目录，用于持久化存放coolq（酷Q应用）的数据" class="headerlink" title="三、创建一个用于存放coolq数据的目录，用于持久化存放coolq（酷Q应用）的数据"></a>三、创建一个用于存放coolq数据的目录，用于持久化存放coolq（酷Q应用）的数据</h4><pre><code>sudo mkdir /coolq-data#创建目录</code></pre><p>#当然可以自定义任意目录，但要记住，因为之后的酷q应用文件.cpk都是要上传到此目录下的app文件夹下的</p><h4 id="四、后台运行酷Q容器"><a href="#四、后台运行酷Q容器" class="headerlink" title="四、后台运行酷Q容器"></a>四、后台运行酷Q容器</h4><pre><code>sudo docker run --name=coolq -d -p 8080:9000 -v /coolq-data:/home/user/coolq -e VNC_PASSWD=12345678 -e COOLQ_ACCOUNT=2333456789 coolq/wine-coolq</code></pre><p>#其中部分参数根据自己的需求替换：</p><p>#远程监听端口</p><p>8080(9000映射成8080)</p><p>#数据存放位置</p><p>&#x2F;coolq-data（&#x2F;home&#x2F;user&#x2F;coolq 映射到&#x2F;coolq-data）</p><p>#远程访问密码</p><p>12345678</p><p>#机器人QQ 帐号</p><p>2333456789</p><p>#远程监听的端口，也就是自定义的web端口需要在服务器防火墙和云安全组都放行，例如阿里云服务器，我需要在宝塔面板和阿里云控</p><p>制台都放行8080端口</p><p>#-d 指的是后台运行容器</p><p>#-v后面接的就是将服务器的自己定义的coolq数据目录映射到容器内的&#x2F;home&#x2F;user&#x2F;coolq目录</p><p>#-e是设置容器的系统环境</p><p>#因为之后要通过vnc连接，所以要指定VNC_PASSWD</p><p>#酷Q要登录的qq小号(充当机器人)也可以通过-e COOLQ_ACCOUNT 去指定</p><h4 id="五、登录vnc进行酷Q操作"><a href="#五、登录vnc进行酷Q操作" class="headerlink" title="五、登录vnc进行酷Q操作"></a>五、登录vnc进行酷Q操作</h4><p>#在浏览器中访问 http:&#x2F;&#x2F;你的服务器IP:你定义的web端口,即可看到noVNC远程登录页面</p><p>#点击Connect进行连接，在弹出的密码框中输入密码,可以看到酷QAir 的登录界面</p><p>#输入QQ密码登录</p><p>#在登录后，右键点击悬浮窗 -&gt; 你的 QQ 昵称 -&gt; 勾选[开机启动]和[快速登录]即可保证酷Q能自动登录</p><h4 id="六、设置docker服务器开机自启动"><a href="#六、设置docker服务器开机自启动" class="headerlink" title="六、设置docker服务器开机自启动"></a>六、设置docker服务器开机自启动</h4><pre><code>systemctl is-enabled docker.service #检查服务是否开机启动systemctl enable docker.service#将服务配置成开机启动systemctl start docker.service#启动服务systemctl disable docker.service#禁止开机启动systemctl stop docker.service#停止systemctl restart docker.service#重启</code></pre><h4 id="七、设置docker容器开机自启动"><a href="#七、设置docker容器开机自启动" class="headerlink" title="七、设置docker容器开机自启动"></a>七、设置docker容器开机自启动</h4><pre><code>docker update --restart=always xxx#xxx为容器name，在这里是coolq</code></pre><h4 id="八、结语"><a href="#八、结语" class="headerlink" title="八、结语"></a>八、结语</h4><p>酷q官方推荐是Ubuntu16.04兼容性好一些，我的CentOS7.4目前测试的酷q应用还是可以用的</p><p>远程SSH连接服务器推荐使用FinalShell,海外服务器有内置加速，字符显示也没有乱码，还可以直接本地拖拽上传文件</p><p>复制以上命令时注意‘-’可能会有变化，出现问题时优先考虑重新手打</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pascal无符号数识别</title>
    <link href="/2020/03/29/pascal%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B0%E8%AF%86%E5%88%AB/"/>
    <url>/2020/03/29/pascal%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B0%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p><strong>Pascal无符号数识别-C++实现</strong></p><ol><li><p>问题描述</p><p>设计识别Pascal的无符号数的算法。对于每一个输入，给出一个true or false的判定。</p></li><li><p>算法设计</p><p>由正规式推出自动机，如图2.1和图2.2：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/03/032920_1246_Pascal1.png"></p><p>图2.1 无符号数识别-正规式</p></li></ol><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/03/032920_1246_Pascal2.png"></p><p>图2.2 无符号数识别-自动机</p><p>该算法严格依据自动机进行条件跳转，并实时更新记录当前状态，然后根据最后所在状态判别是否是无符号数：如果最后状态是如图状态19，那么返回false，否则符合Pascal无符号数的正规式，返回true。</p><ol><li>源代码</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// pascal_unsigned_number_judge.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> state = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (state == <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">13</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">19</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">13</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">14</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">19</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">15</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">19</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">15</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">19</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">18</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;+&#x27;</span> str[i] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">17</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">19</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">17</span>)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">18</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">19</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">18</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                state = <span class="number">19</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (state == <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    string str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin \&gt;&gt; str)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; (<span class="built_in">judge</span>(str) ? <span class="string">&quot;TRUE&quot;</span> : <span class="string">&quot;FALSE&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>测试结果</li></ol><p>测试结果如图4.1所示：</p><p><img src="https://xinhaojin.github.io/imgs-host/past/2020/03/032920_1246_Pascal3.png"></p><p>图4.1 测试结果</p><p>从测试结果来看，该算法可以有效识别无符号数，尚未发现错误。</p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
